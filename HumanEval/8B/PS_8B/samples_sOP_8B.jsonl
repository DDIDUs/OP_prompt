{"task_id": "HumanEval/0", "completion": "function has_close_elements(numbers: list[float], threshold: float): boolean\n    sort numbers in ascending order\n    for i from 1 to length of numbers - 1 do\n        if abs(numbers[i] - numbers[i-1]) < threshold then\n            return true\n    return false\n"}
{"task_id": "HumanEval/0", "completion": "\ninput numbers: a list of floats, input threshold: a float\noutput: a boolean indicating whether there are two numbers in the list closer than the threshold\n\nset min_diff to infinity\nfor each number1 in numbers:\n    for each number2 in numbers:\n        if number1 != number2:\n            diff = abs(number1 - number2)\n            if diff < min_diff and diff < threshold:\n                min_diff = diff\nif min_diff < threshold:\n    return true\nelse:\n    return false\n"}
{"task_id": "HumanEval/0", "completion": "\nProcedure has_close_elements(numbers: list<float>, threshold: float)\n    sorted_numbers = sort(numbers)\n\n    for i from 1 to length(sorted_numbers) - 1 do\n        if abs(sorted_numbers[i] - sorted_numbers[i-1]) < threshold then\n            return true\n        end if\n    end for\n    return false\n"}
{"task_id": "HumanEval/0", "completion": "\nalgorithm closeElements\n    input: numbers (list of float), threshold (float)\n    output: boolean\n\n    sort numbers in ascending order\n\n    foreach num in numbers\n        if i > 0 and abs(num - numbers[i-1]) < threshold\n            return true\n        if i < length(numbers) - 1 and abs(num - numbers[i+1]) < threshold\n            return true\n\n    return false\n"}
{"task_id": "HumanEval/0", "completion": "\nALGORITHM:\n  DECLARE a flag variable isClose set to FALSE\n  DECLARE i as an integer set to 0\n  DECLARE j as an integer set to 1\n  WHILE i is less than length of numbers\n    WHILE j is less than length of numbers\n      IF absolute value of (numbers[i] - numbers[j]) is less than threshold\n        SET isClose to TRUE\n      INCREMENT j by 1\n    END WHILE\n    INCREMENT i by 1\n  END WHILE\n  RETURN isClose\n"}
{"task_id": "HumanEval/0", "completion": "procedure has_close_elements(numbers: List<float>, threshold: float): boolean\n    for each number1 in numbers:\n        for each number2 in numbers:\n            if number1 is not equal to number2 and \n               abs(number1 - number2) < threshold:\n                return true\n    return false\n"}
{"task_id": "HumanEval/0", "completion": "\nfunction has_close_elements(numbers, threshold):\n    sorted_numbers = sort(numbers)\n    for i from 1 to length(sorted_numbers) - 1:\n        if abs(sorted_numbers[i] - sorted_numbers[i-1]) <= threshold:\n            return true\n    return false\n"}
{"task_id": "HumanEval/0", "completion": "\n# Create an empty list to store the indices of numbers with close elements\nclose_indices = []\n\n# Iterate through the list of numbers\nfor i in range(len(numbers)):\n    # Check if this number is not the last one\n    if i < len(numbers) - 1:\n        # Calculate the distance between the current number and the next one\n        distance = abs(numbers[i] - numbers[i + 1])\n        # Check if the distance is less than the threshold\n        if distance < threshold:\n            # If it is, add the indices of these two numbers to the list\n            close_indices.append(i)\n            close_indices.append(i + 1)\n\n# Check if there are at least two numbers with close elements\nif len(close_indices) > 1:\n    # If there are, return True\n    return True\nelse:\n    # If not, return False\n    return False\n"}
{"task_id": "HumanEval/0", "completion": "algorithm has_close_elements(numbers: list of float, threshold: float):\n    sort numbers in ascending order\n    for i from 1 to length of numbers - 1 do\n        if abs(numbers[i] - numbers[i-1]) < threshold then\n            return true\n    return false\n"}
{"task_id": "HumanEval/0", "completion": "algorithm has_close_elements(numbers, threshold):\n    result = false\n    sort numbers in ascending order\n    for i from 1 to length of numbers - 1 do\n        if abs(numbers[i] - numbers[i - 1]) < threshold then\n            result = true\n            break\n    return resul"}
{"task_id": "HumanEval/1", "completion": "\nfunction separate_paren_groups(paren_string: str):\n    result = []\n    current_group = \"\"\n    stack = []\n\n    for char in paren_string:\n        if char == \" \":\n            continue\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    result.append(current_group)\n                    current_group = \"\"\n            else:\n                return []  # invalid parentheses\n        else:\n            raise ValueError(\"Invalid character\")\n\n    if stack:\n        return []  # unbalanced parentheses\n\n    return result\n"}
{"task_id": "HumanEval/1", "completion": "\nfunction separate_paren_groups(paren_string)\n    stack = []\n    result = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if len(stack) > 0:\n                stack.pop()\n                current_group += char\n                if len(stack) == 0:\n                    result.append(current_group)\n                    current_group = \"\"\n            else:\n                return []  # invalid input\n        else:\n            continue\n\n    if len(stack) > 0:\n        return []  # invalid input\n\n    return result\n"}
{"task_id": "HumanEval/1", "completion": "function separate_paren_groups(paren_string):\n    stack = []\n    groups = []\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if len(stack) == 0:\n                groups.append(current_group)\n                current_group = ''\n    return groups\n"}
{"task_id": "HumanEval/1", "completion": "function separate_paren_groups(paren_string: string)\n    stack = new stack\n    groups = new list\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \" \":\n            continue\n        elif char == \"(\":\n            stack.push(char)\n            current_group += char\n        elif char == \")\":\n            if stack.isEmpty():\n                groups.add(current_group + char)\n                current_group = \"\"\n            else:\n                stack.pop()\n                current_group += char\n\n    return groups\n"}
{"task_id": "HumanEval/1", "completion": "function separate_paren_groups(paren_string: str)\n    stack = new empty stack\n    result = new empty list\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.push(char)\n            current_group += char\n        elif char == \")\":\n            if stack.is_empty():\n                result.append(current_group + char)\n                current_group = \"\"\n            else:\n                stack.pop()\n                current_group += char\n    \n    return result\n"}
{"task_id": "HumanEval/1", "completion": "\nfunction separate_paren_groups(paren_string):\n    result = []\n    group = \"\"\n    balance = 0\n    for char in paren_string:\n        if char == \"(\": \n            balance += 1\n            group += char\n        elif char == \")\":\n            balance -= 1\n            group += char\n            if balance == 0:\n                result.append(group)\n                group = \"\"\n        if balance < 0:\n            return []\n    if balance > 0:\n        return []\n    return result\n"}
{"task_id": "HumanEval/1", "completion": "function separate_paren_groups(paren_string):\n    stack = []\n    groups = []\n    temp_group = \"\"\n\n    for char in paren_string:\n        if char == \" \":\n            continue\n        if char == \"(\":\n            stack.append(char)\n            temp_group += char\n        elif char == \")\":\n            if len(stack) > 0:\n                stack.pop()\n                temp_group += char\n                if len(stack) == 0:\n                    groups.append(temp_group)\n                    temp_group = \"\"\n            else:\n                temp_group = \"\"\n        else:\n            print(\"Invalid input\")\n\n    return group"}
{"task_id": "HumanEval/1", "completion": "function separate_paren_groups(paren_string: str): List[str>\n    stack = new stack\n    groups = new list\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \" \" then continue\n        if char == \"(\" then\n            stack.push(char)\n            current_group += char\n        elif char == \")\" then\n            if stack.is_empty() then\n                groups.append(current_group)\n                current_group = \"\"\n            else\n                stack.pop()\n                current_group += char\n        else\n            error \"Invalid character in input\"\n\n    if stack.is_not_empty() then\n        error \"Unbalanced parentheses in input\"\n\n    return group"}
{"task_id": "HumanEval/1", "completion": "function separate_paren_groups(paren_string: str):\n    stack = []\n    result = []\n    temp = \"\"\n    \n    for char in paren_string:\n        if char == \" \":\n            continue\n        if char == \"(\":\n            stack.append(char)\n            temp += char\n        elif char == \")\":\n            stack.pop()\n            temp += char\n            if len(stack) == 0:\n                result.append(temp)\n                temp = \"\"\n\n    return result\n"}
{"task_id": "HumanEval/1", "completion": "function separate_paren_groups(paren_string: str):\n    result = []\n    current_group = ''\n    count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            if count == 0:\n                current_group = '(' + current_group\n            count += 1\n        elif char == ')':\n            if count > 0:\n                count -= 1\n                if count == 0:\n                    result.append(current_group + ')')\n                    current_group = ''\n            else:\n                current_group += char\n        else:\n            continue\n    \n    return resul"}
{"task_id": "HumanEval/2", "completion": "function truncate_number(number: float):\n    integer_part = floor(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/2", "completion": ""}
{"task_id": "HumanEval/2", "completion": "\nfunction truncate_number(number: float):\n    integer_part = floor(number)\n    return number - integer_part\n"}
{"task_id": "HumanEval/2", "completion": ""}
{"task_id": "HumanEval/2", "completion": "function truncate_number(number)\n    integer_part = floor(number)\n    return number - integer_part\n"}
{"task_id": "HumanEval/2", "completion": "function truncate_number(number: float):\n    integer_part = floor(number)\n    return number - integer_part\n"}
{"task_id": "HumanEval/2", "completion": "\nfunction truncate_number(number: float):\n    whole_number_part = floor(number)\n    return number - whole_number_part\n"}
{"task_id": "HumanEval/2", "completion": "\nfunction truncate_number(number: float):\n    integer_part = floor(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/2", "completion": "\ninput number\ninteger_part = floor(number)\ndecimal_part = number - integer_part\noutput decimal_part\n"}
{"task_id": "HumanEval/2", "completion": "function truncate_number(number: float):\n    integer_part = floor(number)\n    return number - integer_par"}
{"task_id": "HumanEval/3", "completion": "\n initialize balance = 0\n for operation in operations:\n   balance = balance + operation\n   if balance < 0:\n     return True\n return False\n"}
{"task_id": "HumanEval/3", "completion": "\nalgorithm below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance = balance + operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/3", "completion": "\nfunction below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/3", "completion": "\ninitialize balance = 0\nfor operation in operations:\n    balance = balance + operation\n    if balance < 0:\n        return True\nreturn False\n"}
{"task_id": "HumanEval/3", "completion": "Initialize balance = 0\nFor each operation in operations:\n    If operation is positive:\n        Add operation to balance\n    Else:\n        Subtract operation from balance\n    If balance is less than 0:\n        Return True\nReturn False\n"}
{"task_id": "HumanEval/3", "completion": "\nvariables balance := 0;\nfor each operation in operations do\n    balance := balance + operation;\n    if balance < 0 then\n        return true;\nreturn false;\n"}
{"task_id": "HumanEval/3", "completion": "\ninitialize balance = 0\nfor each operation in operations:\n    balance = balance + operation\n    if balance < 0:\n        return True\nreturn False\n"}
{"task_id": "HumanEval/3", "completion": "\nalgorithm below_zero(operations):\n    balance := 0\n    for operation in operations do\n        balance := balance + operation\n        if balance < 0 then\n            return True\n    return False\n"}
{"task_id": "HumanEval/3", "completion": "initialize balance = 0\nfor each operation in operations:\n    update balance = balance + operation\n    if balance < 0:\n        return True\nreturn Fals"}
{"task_id": "HumanEval/3", "completion": "algorithm below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance = balance + operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\nfunction mean_absolute_deviation(numbers: List[float]):\n    // Calculate the mean of the input numbers\n    mean = sum(numbers) / size(numbers)\n    \n    // Initialize the sum of absolute deviations to zero\n    sum_deviation = 0\n    \n    // Iterate through the input numbers\n    for each number in numbers:\n        // Calculate the absolute deviation from the mean\n        deviation = abs(number - mean)\n        // Add the deviation to the sum\n        sum_deviation = sum_deviation + deviation\n    \n    // Calculate the mean absolute deviation\n    mad = sum_deviation / size(numbers)\n    \n    return ma"}
{"task_id": "HumanEval/4", "completion": "DATA mean, sum_of_deviations, count, number\nINPUT numbers\nmean = 0.0\nsum_of_deviations = 0.0\ncount = 0\nFOR each number IN numbers\n    count = count + 1\n    deviation = ABS(number - (mean / count))\n    sum_of_deviations = sum_of_deviations + deviation\nmean = sum_of_deviations / count\nOUTPUT mean\n"}
{"task_id": "HumanEval/4", "completion": "data = input numbers\nmean = sum(data) / length(data)\nMAD = 0\nfor each number in data:\n    deviation = abs(number - mean)\n    MAD = MAD + deviation\nMAD = MAD / length(data)\n"}
{"task_id": "HumanEval/4", "completion": "function mean_absolute_deviation(numbers: list<float>)\n    calculate the mean of the input numbers\n    mean = sum(numbers) / length(numbers)\n\n    calculate the absolute deviations from the mean\n    deviations = [abs(num - mean) for num in numbers]\n\n    calculate the mean of the absolute deviations\n    mad = sum(deviations) / length(deviations)\n\n    return mad\n"}
{"task_id": "HumanEval/4", "completion": "function mean_absolute_deviation(numbers: list[float]):\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / length(numbers)\n    \n    # Initialize sum of absolute deviations to zero\n    sum_abs_dev = 0\n    \n    # Iterate over the input numbers\n    for num in numbers:\n        # Calculate the absolute deviation from the mean\n        abs_dev = |num - mean|\n        # Add the absolute deviation to the sum\n        sum_abs_dev = sum_abs_dev + abs_dev\n    \n    # Calculate the mean absolute deviation\n    mad = sum_abs_dev / length(numbers)\n    \n    return mad\n"}
{"task_id": "HumanEval/4", "completion": "\ndata_mean = 0\nfor num in numbers:\n    data_mean += num\ndata_mean /= len(numbers)\n\nresult = 0\nfor num in numbers:\n    result += abs(num - data_mean)\nresult /= len(numbers)\n\nreturn result\n"}
{"task_id": "HumanEval/4", "completion": "\nfunction mean_absolute_deviation(numbers: list of float)\n    calculate mean = sum of numbers / number of numbers\n    calculate sum of absolute differences = sum of |x - mean| for each x in numbers\n    calculate mean absolute deviation = sum of absolute differences / number of numbers\n    return mean absolute deviation\n"}
{"task_id": "HumanEval/4", "completion": "\nCREATE FUNCTION mean_absolute_deviation(num_list)\n    DECLARE mean AS FLOAT\n    DECLARE sum_deviation AS FLOAT\n    DECLARE deviation AS FLOAT\n    DECLARE i AS INTEGER\n    SET mean = (SUM(num_list) / SIZE(num_list))\n    FOR i = 1 TO SIZE(num_list)\n        deviation = ABS(num_list[i] - mean)\n        sum_deviation = sum_deviation + deviation\n    END FOR\n    RETURN sum_deviation / SIZE(num_list)\n"}
{"task_id": "HumanEval/4", "completion": "\nfunction mean_absolute_deviation(numbers: list of float)\n    sum_of_deviations = 0\n    mean = sum(numbers) / size of numbers\n    for each number in numbers\n        deviation = abs(number - mean)\n        sum_of_deviations = sum_of_deviations + deviation\n    mad = sum_of_deviations / size of numbers\n    return mad\n"}
{"task_id": "HumanEval/4", "completion": ""}
{"task_id": "HumanEval/5", "completion": "\nfunction intersperse(numbers: list<int>, delimiter: int): list<int>\n    result: list<int> = []\n    index: int = 0\n    \n    while index < len(numbers):\n        if index > 0:\n            result.append(delimiter)\n        result.append(numbers[index])\n        index = index + 1\n    \n    return result\n"}
{"task_id": "HumanEval/5", "completion": ""}
{"task_id": "HumanEval/5", "completion": "\nprocedure intersperse(numbers: List[int], delimeter: int)\n    result = []\n    i = 0\n    while i < length(numbers)\n        if i > 0\n            append(result, delimeter)\n        append(result, numbers[i])\n        i = i + 1\n    return result\n"}
{"task_id": "HumanEval/5", "completion": "function intersperse(numbers: list<int>, delimiter: int): list<int>\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimiter)\n        result.append(numbers[i])\n    return result\n"}
{"task_id": "HumanEval/5", "completion": "function intersperse(numbers, delimeter):\n    result = []\n    for i from 0 to length(numbers) - 1:\n        result.append(numbers[i])\n        if i < length(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/5", "completion": "\nfunction intersperse(numbers, delimeter):\n    result = []\n    for i in range(0, len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return resul"}
{"task_id": "HumanEval/5", "completion": ""}
{"task_id": "HumanEval/5", "completion": "function intersperse(numbers : list<int>, delimeter : int) do\n    result = []\n    if length(numbers) == 0 then\n        return result\n    else\n        result.append(numbers[0])\n        for i from 1 to length(numbers) - 1 do\n            result.append(delimeter)\n            result.append(numbers[i])\n        return result\n"}
{"task_id": "HumanEval/5", "completion": "function intersperse(numbers: list, delimiter: int)\n    result := []\n    for i from 0 to length of numbers - 1\n        result.append(numbers[i])\n        if i is not length of numbers - 1\n            result.append(delimiter)\n    return resul"}
{"task_id": "HumanEval/5", "completion": "function intersperse(numbers, delimeter):\n    result = []\n    for i in range(0, len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\nfunction parse_nested_parens(paren_string: str):\n    result = []\n    stack = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif char == ')':\n            stack.pop()\n            current_depth -= 1\n            if not stack and current_depth > max_depth:\n                max_depth = current_depth\n\n    return [max_depth]\n\nfor group in paren_string.split():\n    result.append(parse_nested_parens(group))\n\nreturn result\n"}
{"task_id": "HumanEval/6", "completion": "\nfunction parse_nested_parens(paren_string : str)\n    stack = new empty stack\n    max_level = 0\n    result = new list\n    for each char in paren_string:\n        if char == '(':\n            stack.push(1)\n            if stack.size > max_level:\n                max_level = stack.size\n        elif char == ')':\n            stack.pop()\n        append max_level to result\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "data Stack\ncreate empty stack S\n\nfunction parse_nested_parens(s)\n    result = []\n    level = 0\n    for c in s\n        if c == '('\n            push S, level\n            level = level + 1\n        elif c == ')'\n            level = pop S\n        else\n            result.append level\n            level = 0\n    return resul"}
{"task_id": "HumanEval/6", "completion": "\nfunction parse_nested_parens(paren_string: str): List[int]\n    stack = new stack\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.push('(')\n            if stack.size() > max_depth:\n                max_depth = stack.size()\n        elif char == ')':\n            stack.pop()\n    for group in paren_string.split():\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth - depth)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\nstack = new stack\nresult = new list\n\nfor each character c in paren_string:\n    if c is '(':\n        stack.push('(')\n    elif c is ')':\n        if stack.isEmpty():\n            raise \"Unmatched closing parenthesis\"\n        stack.pop()\n    else:\n        if stack.isEmpty():\n            result.append(0)\n        else:\n            result.append(stack.size())\nwhen stack is not empty:\n    raise \"Unmatched opening parenthesis\"\n\nreturn result\n"}
{"task_id": "HumanEval/6", "completion": "function parse_nested_parens(paren_string: str): List[int]\n    stack = []\n    max_depth = 0\n    result = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(1)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n        else:\n            result.append(max_depth)\n            max_depth = 0\n    return resul"}
{"task_id": "HumanEval/6", "completion": "\nfunction parse_nested_parens(paren_string):\n    stack = []\n    max_levels = []\n    levels = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            levels += 1\n        elif char == ')':\n            stack.pop()\n            levels -= 1\n        if levels > len(max_levels):\n            max_levels = [levels]\n        elif levels > 0 and levels < len(max_levels):\n            max_levels.append(levels)\n    return max_level"}
{"task_id": "HumanEval/6", "completion": "\nfunction parse_nested_parens(paren_string : string) -> list:\n    stack = []\n    results = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            stack.pop()\n            current_depth -= 1\n        \n    return [max_depth for _ in range(len(paren_string.split()))"}
{"task_id": "HumanEval/6", "completion": "function parse_nested_parens(paren_string):\n    result = []\n    stack = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string.split():\n        for p in char:\n            if p == '(':\n                stack.append(p)\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif p == ')':\n                stack.pop()\n                current_depth -= 1\n        \n        result.append(max_depth)\n        max_depth = 0\n        current_depth = 0\n    \n    return result\n"}
{"task_id": "HumanEval/6", "completion": "stack = []\nresult = []\nfor char in paren_string.split():\n    if char == '(':\n        stack.append('(')\n    elif char == ')':\n        stack.append(')')\n        while stack[-2] == '(':\n            stack.pop()\n        stack.pop()\n    else:\n        result.append(len(stack))\nstack.clear()\nreturn resul"}
{"task_id": "HumanEval/7", "completion": "\nALGORITHM filter_by_substring(strings, substring)\n\n    DECLARE result as a list\n    FOR each string in strings\n        IF substring is a substring of string\n            ADD string to result\n    RETURN resul"}
{"task_id": "HumanEval/7", "completion": "\nfunction filter_by_substring(strings : list<string>, substring : string) : list<string>\n  result = new list<string>\n  for each string in strings\n    if string contains substring\n      add string to result\n  return result\n"}
{"task_id": "HumanEval/7", "completion": ""}
{"task_id": "HumanEval/7", "completion": "\nfunction filter_by_substring(strings, substring)\n    result := []\n    for each string in strings\n        if substring is found within string\n            add string to result\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\nfunction filter_by_substring(strings, substring)\n    result = []\n    for string in strings:\n        if substring is in string then\n            result.append(string)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": ""}
{"task_id": "HumanEval/7", "completion": "\nALGORITHM:\n  INPUT: \n    strings: a list of strings\n    substring: a string\n  OUTPUT: \n    filtered_list: a list of strings from 'strings' that contain 'substring'\n  \n  FILTERED_LIST = []\n  FOR EACH string IN strings\n    IF string CONTAINS substring\n      ADD string TO FILTERED_LIST\n  RETURN FILTERED_LIS"}
{"task_id": "HumanEval/7", "completion": "\n"}
{"task_id": "HumanEval/7", "completion": "function filter_by_substring(strings, substring):\n    result = []\n    for each string in strings:\n        if substring is contained in string:\n            append string to result\n    return resul"}
{"task_id": "HumanEval/7", "completion": "\nfunction filter_by_substring(strings: List[str], substring: str): List[str]\n    result := []\n    for string in strings:\n        if substring is a substring of string:\n            append string to result\n    return result\n"}
{"task_id": "HumanEval/8", "completion": "\nALGORITHM sum_product\n\nDATA\n    numbers: LIST OF INTEGER\n    sum: INTEGER\n    product: INTEGER\n\nINITIALIZE\n    sum = 0\n    product = 1\n\nFOR each number IN numbers\n    sum = sum + number\n    product = product * number\n\nRETURN (sum, product)\n"}
{"task_id": "HumanEval/8", "completion": "\nfunction sum_product(numbers: list of integer)\n    if length of numbers is 0 then\n        return (0, 1)\n    else\n        sum := 0\n        product := 1\n        for each number in numbers do\n            sum := sum + number\n            product := product * number\n        return (sum, product"}
{"task_id": "HumanEval/8", "completion": "\nprocedure sum_product(numbers: list of int)\n    if size of numbers is 0 then\n        return (0, 1)\n    else\n        sum := 0\n        product := 1\n        for each number in numbers do\n            sum := sum + number\n            product := product * number\n        return (sum, product"}
{"task_id": "HumanEval/8", "completion": "\nfunction sum_product(numbers : list of int) : tuple of int\n    initialize sum as 0\n    initialize product as 1\n    for each number in numbers\n        sum = sum + number\n        product = product * number\n    return (sum, product)\n"}
{"task_id": "HumanEval/8", "completion": "function sum_product(numbers: List[int]): Tuple[int, int]\n    if length of numbers is 0\n        return (0, 1)\n    else\n        sum := 0\n        product := 1\n        for each number in numbers\n            sum := sum + number\n            product := product * number\n        return (sum, product"}
{"task_id": "HumanEval/8", "completion": "\nalgorithm sum_product is\n    input: numbers: list of integers\n    output: tuple of two integers, sum and product\n\n    if size of numbers is 0 then\n        return (0, 1)\n\n    sum := 0\n    product := 1\n\n    for each number in numbers do\n        sum := sum + number\n        product := product * number\n\n    return (sum, product"}
{"task_id": "HumanEval/8", "completion": "\nfunction sum_product(numbers: list of integer) return tuple of integer\n    if is empty(numbers):\n        return (0, 1)\n    else:\n        sum_var = 0\n        product_var = 1\n        for each number in numbers:\n            sum_var = sum_var + number\n            product_var = product_var * number\n        return (sum_var, product_var)\n"}
{"task_id": "HumanEval/8", "completion": "function sum_product(numbers: list<int>) -> tuple<int, int>:\n    sum_total = 0\n    product_total = 1\n    \n    for num in numbers:\n        sum_total += num\n        product_total *= num\n        \n    return (sum_total, product_total"}
{"task_id": "HumanEval/8", "completion": "\nfunction sum_product(numbers):\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum = sum + num\n        product = product * num\n    if len(numbers) == 0:\n        sum = 0\n        product = 1\n    return (sum, product)\n"}
{"task_id": "HumanEval/8", "completion": "function sum_product(numbers: list of int): tuple of int\n    if length of numbers is 0:\n        return (0, 1)\n    else:\n        sum := 0\n        product := 1\n        for each num in numbers:\n            sum := sum + num\n            product := product * num\n        return (sum, product"}
{"task_id": "HumanEval/9", "completion": "function rolling_max(numbers)\n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result\n"}
{"task_id": "HumanEval/9", "completion": "\nCREATE an empty LIST max_rolling\n\nINITIALIZE variable current_max to be the FIRST ELEMENT of input LIST numbers\n\nITERATE over each ELEMENT in input LIST numbers:\n    IF the CURRENT ELEMENT is GREATER THAN current_max THEN\n        ASSIGN the CURRENT ELEMENT to current_max\n    END IF\n    APPEND current_max to the end of max_rolling\n\nRETURN the max_rolling LIST\n"}
{"task_id": "HumanEval/9", "completion": "ALGORITHM:\n    SET result to a new empty list\n    SET max to the first element of numbers\n    FOR each number in numbers:\n        IF the current number is greater than max:\n            SET max to the current number\n        APPEND max to result\n    RETURN resul"}
{"task_id": "HumanEval/9", "completion": "DATA maxsofar : integer\nDATA result : list of integers\n\nmaxsofar = numbers[0]\nresult = [maxsofar]\n\nFOR each number in numbers (excluding the last one)\n    IF number > maxsofar\n        maxsofar = number\n    result.append(maxsofar)\n\nRETURN resul"}
{"task_id": "HumanEval/9", "completion": "\nfunction rolling_max(numbers):\n    result = []\n    max_so_far = float('-inf')\n    \n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    \n    return resul"}
{"task_id": "HumanEval/9", "completion": "\nALGORITHM:\n    result = []\n    max_so_far = numbers[0]\n    result.append(max_so_far)\n    for each number in numbers from 1 to length of numbers:\n        if the current number is greater than max_so_far:\n            max_so_far = the current number\n        result.append(max_so_far)\n    return result\n"}
{"task_id": "HumanEval/9", "completion": "\ndata = input_array\nresult = [data[0]]\nfor i in range(1, len(data)):\n    if data[i] > result[-1]:\n        result.append(data[i])\n    else:\n        result.append(result[-1])\nreturn result\n"}
{"task_id": "HumanEval/9", "completion": "DATA max_so_far := []\nDATA current_max := numbers[0]\nFOR each number IN numbers DO\n    IF number > current_max THEN\n        current_max := number\n        APPEND current_max TO max_so_far\n    ELSE\n        APPEND current_max TO max_so_far\n    END IF\nEND FOR\nOUTPUT max_so_far\n"}
{"task_id": "HumanEval/9", "completion": "\n"}
{"task_id": "HumanEval/9", "completion": "\nfunction rolling_max(numbers)\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    \n    for i from 1 to length of numbers\n        if numbers[i] > max_so_far\n            max_so_far = numbers[i]\n        end if\n        result.append(max_so_far)\n    end for\n    \n    return result\n"}
{"task_id": "HumanEval/10", "completion": "ALGORITHM make_palindrome\n    INPUT: string s\n    OUTPUT: shortest palindrome starting with s\n\n    IF s is empty\n        RETURN s\n\n    i = 0\n    j = length(s) - 1\n    WHILE i <= j\n        IF s[i] != s[j]\n            BREAK\n        i = i + 1\n        j = j - 1\n    k = i\n    t = s[k..j]\n    IF is_palindrome(t)\n        RETURN s + complement(s[0..k-1])\n    ELSE\n        RETURN s + complement(t) + t\n"}
{"task_id": "HumanEval/10", "completion": "\nALGORITHM make_palindrome(string)\n\n    SET prefix = \"\"\n    SET postfix = string\n    WHILE postfix is not a palindrome\n        PREPEND the last character of postfix to prefix\n        REMOVE the last character of postfix\n    END WHILE\n    RETURN prefix + \" \"+postfix\nEND ALGORITHM\n"}
{"task_id": "HumanEval/10", "completion": "\nprocedure make_palindrome(string: str):\n    if string.length() <= 1:\n        return string\n    \n    for i from 0 to string.length():\n        suffix = string.substring(i, string.length())\n        if is_palindrome(suffix):\n            return string + string.substring(0, i)[::-1]\n    \n    return \"\"\n"}
{"task_id": "HumanEval/10", "completion": ""}
{"task_id": "HumanEval/10", "completion": ""}
{"task_id": "HumanEval/10", "completion": "\nfunction make_palindrome(s):\n    n = length(s)\n    i = 0\n    while i < n and s[i] == s[n-1-i]:\n        i = i + 1\n    palindrome_suffix = s[0:i]\n    if i == n:\n        return s\n    prefix = reverse(s[0:n-i])\n    return palindrome_suffix + prefix\n"}
{"task_id": "HumanEval/10", "completion": ""}
{"task_id": "HumanEval/10", "completion": "\nfunction make_palindrome(s)\n    longest_prefix_index = 0\n    for i from length(s) - 1 down to 0\n        if s[0 .. i] is a palindrome\n            longest_prefix_index = i\n            break\n    longest_prefix = s[0 .. longest_prefix_index]\n    reverse_s = reverse(s[longest_prefix_index + 1 .. length(s)])\n    return longest_prefix + reverse_s\n"}
{"task_id": "HumanEval/10", "completion": "\nALGORITHM FOR make_palindrome(string):\n    SET palindrome_suffix = \"\"\n    SET prefix = string\n    WHILE prefix != \"\" AND NOT is_palindrome(prefix):\n        SET prefix = prefix[:-1]\n    palindrome_suffix = string[len(prefix):]\n    IF palindrome_suffix != \"\":\n        SET palindrome_suffix = reverse(palindrome_suffix)\n    RETURN string + palindrome_suffix\n"}
{"task_id": "HumanEval/10", "completion": "\nfunction make_palindrome(s):\n    s_len = length of s\n    for i from s_len down to 0:\n        if s is a palindrome:\n            return s + reverse(s[0..i])\n        else:\n            s = s[0..i] + reverse(s[0..i])\n    return s + reverse(s)\n"}
{"task_id": "HumanEval/11", "completion": "\nFUNCTION string_xor(a: str, b: str)\n    result = EMPTY STRING\n    FOR i FROM 0 TO LENGTH OF a - 1\n        IF the ith character of a is '1' AND the ith character of b is '0'\n            APPEND '1' to the end of result\n        ELSE IF the ith character of a is '0' AND the ith character of b is '1'\n            APPEND '1' to the end of result\n        ELSE\n            APPEND '0' to the end of result\n    RETURN result\n"}
{"task_id": "HumanEval/11", "completion": "\nfunction string_xor(a: str, b: str)\n    result := \"\"\n    for each character c in a\n        if c is '1' then\n            if the corresponding character in b is '1' then\n                append '0' to result\n            else\n                append '1' to result\n        else\n            if the corresponding character in b is '1' then\n                append '1' to result\n            else\n                append '0' to result\n    return resul"}
{"task_id": "HumanEval/11", "completion": "\ninput_str1 = a\ninput_str2 = b\nresult = \"\"\nfor i in range(len(input_str1)):\n    if input_str1[i] == '0' and input_str2[i] == '0':\n        result += '0'\n    elif input_str1[i] == '1' and input_str2[i] == '1':\n        result += '0'\n    else:\n        result += '1'\nreturn result\n"}
{"task_id": "HumanEval/11", "completion": "\nfunction string_xor(a: string, b: string): string\n    result := \"\"\n    for i from 0 to length(a) - 1\n        if a[i] == \"1\" and b[i] == \"1\"\n            append \"0\" to result\n        else if a[i] == \"0\" and b[i] == \"0\"\n            append \"0\" to result\n        else\n            append \"1\" to result\n    return result\n"}
{"task_id": "HumanEval/11", "completion": "\nfunction string_xor(a: str, b: str)\n    result = \"\"\n    i = 0\n    while i < len(a) and i < len(b):\n        if a[i] == '1' xor b[i] == '1':\n            result = result + '0'\n        else:\n            result = result + '1'\n        i = i + 1\n    if i < len(a):\n        result = result + a[i:]\n    if i < len(b):\n        result = result + b[i:]\n    return result\n"}
{"task_id": "HumanEval/11", "completion": "\nfunction string_xor(a: string, b: string): string\n    result = \"\"\n    i = 0\n    while i < length of a:\n        if character at index i in a is 1 and character at index i in b is 0 then\n            append \"1\" to result\n        else if character at index i in a is 0 and character at index i in b is 1 then\n            append \"1\" to result\n        else\n            append \"0\" to result\n        increment i\n    return result\n"}
{"task_id": "HumanEval/11", "completion": "\nfunction string_xor(a: string, b: string)\n    result := \"\"\n    length := length of a\n    for i from 1 to length\n        if character at position i in a is 1 and character at position i in b is 0 then\n            result := result + \"1\"\n        elif character at position i in a is 0 and character at position i in b is 1 then\n            result := result + \"1\"\n        else\n            result := result + \"0\"\n    return result\n"}
{"task_id": "HumanEval/11", "completion": "\nfunction string_xor(a: str, b: str)\n    result := \"\"\n    for i from 0 to length(a) - 1 do\n        if character a[i] == '1' and character b[i] == '0' then\n            append '1' to result\n        else if character a[i] == '0' and character b[i] == '1' then\n            append '1' to result\n        else\n            append '0' to result\n    return resul"}
{"task_id": "HumanEval/11", "completion": "FUNCTION string_xor(a: str, b: str)\n    RESULT = \"\"\n    FOR i FROM 0 TO LENGTH(a) - 1\n        IF CHARACTER(a, i) = '1' AND CHARACTER(b, i) = '1' THEN\n            APPEND '0' TO RESULT\n        ELSE IF CHARACTER(a, i) = '0' AND CHARACTER(b, i) = '0' THEN\n            APPEND '0' TO RESULT\n        ELSE\n            APPEND '1' TO RESULT\n        END IF\n    END FOR\n    RETURN RESUL"}
{"task_id": "HumanEval/11", "completion": "function string_xor(a: str, b: str)\n    result := \"\"\n    length := length(a)\n    for i from 0 to length-1\n        if (a[i] == '1' and b[i] == '0') or (a[i] == '0' and b[i] == '1')\n            append '1' to result\n        else\n            append '0' to result\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\nMAX_LENGTH = 0\nLONGEST_STRING = None\n\nfor s in strings:\n    if len(s) > MAX_LENGTH:\n        MAX_LENGTH = len(s)\n        LONGEST_STRING = s\n\nif LONGEST_STRING is None:\n    return None\nelse:\n    return LONGEST_STRING\n"}
{"task_id": "HumanEval/12", "completion": ""}
{"task_id": "HumanEval/12", "completion": ""}
{"task_id": "HumanEval/12", "completion": "\nFUNCTION longest(strings: List[str]): Optional[str]\n  IF strings IS EMPTY THEN\n    RETURN NONE\n  END IF\n  max_len = 0\n  max_str = \"\"\n  FOR each str IN strings:\n    IF length(str) > max_len THEN\n      max_len = length(str)\n      max_str = str\n    END IF\n  END FOR\n  RETURN max_str\nEND FUNCTIO"}
{"task_id": "HumanEval/12", "completion": ""}
{"task_id": "HumanEval/12", "completion": ""}
{"task_id": "HumanEval/12", "completion": "\nALGORITHM:\n    \n    if strings is empty then\n        return null\n    \n    max_length = 0\n    result = null\n    \n    for each string s in strings do\n        if length(s) > max_length then\n            max_length = length(s)\n            result = s\n            \n    return result\n"}
{"task_id": "HumanEval/12", "completion": ""}
{"task_id": "HumanEval/12", "completion": ""}
{"task_id": "HumanEval/12", "completion": "if is_empty(strings) then\n    return None\nelse\n    max_length = 0\n    result = None\n    for each string in strings do\n        if length of string > max_length then\n            max_length = length of string\n            result = string\n        elif length of string == max_length then\n            result = first string encountered with this length\n    return result\n"}
{"task_id": "HumanEval/13", "completion": "function greatest_common_divisor(a: int, b: int)\n    if b == 0 then\n        return a\n    else\n        return greatest_common_divisor(b, a mod b)\n"}
{"task_id": "HumanEval/13", "completion": "algorithm gcd(a, b)\n    if b = 0 then\n        return a\n    else\n        return gcd(b, a mod b)\n"}
{"task_id": "HumanEval/13", "completion": "\nALGORITHM GREATEST_COMMON_DIVISOR\n   INPUT: a, b: positive integers\n   OUTPUT: gcd: the greatest common divisor of a and b\n\n   IF a = 0 THEN\n      RETURN b\n   ELSE\n      RETURN GREATEST_COMMON_DIVISOR(b MOD a, a)\n\n   END IF\n"}
{"task_id": "HumanEval/13", "completion": "\nfunction greatest_common_divisor(a: int, b: int)\n    if b = 0 then\n        return a\n    else\n        return greatest_common_divisor(b, a mod b)\n    end if\nend function\n"}
{"task_id": "HumanEval/13", "completion": "algorithm gcd(a, b):\n    if b = 0 then\n        return a\n    else\n        return gcd(b, a mod b)\n"}
{"task_id": "HumanEval/13", "completion": "function greatest_common_divisor(a: int, b: int)\n    if b == 0 then\n        return a\n    else\n        return greatest_common_divisor(b, a mod b)\n"}
{"task_id": "HumanEval/13", "completion": "\nalgorithm gcd(a, b)\n    if b = 0 then\n        return a\n    else\n        return gcd(b, a mod b)\n"}
{"task_id": "HumanEval/13", "completion": "\nfunction GCD(a, b)\n    if b = 0 then\n        return a\n    else\n        return GCD(b, a mod b)\n"}
{"task_id": "HumanEval/13", "completion": "\nALGORITHM greatest_common_divisor(a: int, b: int)\n   if b = 0 then\n      return a\n   else\n      return greatest_common_divisor(b, a mod b)\n"}
{"task_id": "HumanEval/13", "completion": "ALGORITHM GREATEST_COMMON_DIVISOR\n    INPUT: two integers a, b\n    OUTPUT: the greatest common divisor of a and b\n\n    WHILE b \u2260 0\n        REMAINDER = a MOD b\n        a = b\n        b = REMAINDER\n    RETURN a\n"}
{"task_id": "HumanEval/14", "completion": "\nfunction all_prefixes(input_string)\n    output_list = []\n    prefix_length = 0\n    \n    while prefix_length <= length of input_string\n        prefix = substring of input_string from 1 to prefix_length\n        output_list.append(prefix)\n        increment prefix_length by 1\n    return output_lis"}
{"task_id": "HumanEval/14", "completion": "function all_prefixes(s)\n    result = []\n    for i from 0 to length(s) - 1\n        prefix = substring(s, 0, i + 1)\n        result.append(prefix)\n    return resul"}
{"task_id": "HumanEval/14", "completion": "function all_prefixes(s):\n    prefixes = []\n    for i from 0 to length(s)\n        prefix = s.substring(0, i + 1)\n        prefixes.append(prefix)\n    return prefixe"}
{"task_id": "HumanEval/14", "completion": ""}
{"task_id": "HumanEval/14", "completion": "\nfunction all_prefixes(s: string):\n    result = []\n    len_s = length of s\n    for i from 0 to len_s:\n        prefix = substring of s from 0 to i\n        result append prefix\n    return result\n"}
{"task_id": "HumanEval/14", "completion": "\nfunction all_prefixes(input_string: string)\n  result = new list\n  for i from 0 to length of input_string - 1\n    prefix = substring of input_string from 0 to i\n    add prefix to result\n  return result\n"}
{"task_id": "HumanEval/14", "completion": "\nfunction all_prefixes(input_string):\n    result = []\n    for i from 1 to length of input_string:\n        prefix = substring(input_string, 1, i)\n        result.append(prefix)\n    return result\n"}
{"task_id": "HumanEval/14", "completion": "\nfunction all_prefixes(string):\n    result = []\n    prefix = \"\"\n    for i from 1 to length of string:\n        prefix = substring of string from 1 to i\n        result.append(prefix)\n    return result\n"}
{"task_id": "HumanEval/14", "completion": "\nfunction all_prefixes(s: string)\n  result = []\n  for i from 0 to length(s)\n    prefix = substring(s, 0, i + 1)\n    result.append(prefix)\n  return result\n"}
{"task_id": "HumanEval/14", "completion": "\nfunction all_prefixes(s : string) is\n    result = []\n    length = 1\n    while length <= s.length do\n        prefix = s.substring(0, length)\n        result.append(prefix)\n        length = length + 1\n    end while\n    return result\nend functio"}
{"task_id": "HumanEval/15", "completion": "\nfunction string_sequence(n: int):\n    result = \"\"\n    for i from 0 to n:\n        result = result + str(i) + \" \"\n    return result[0..-1]  # remove trailing space\n"}
{"task_id": "HumanEval/15", "completion": "\nALGORITHM:\n  DECLARE result as empty string\n  FOR i FROM 0 TO n\n    result = result + i + \" \"\n  RETURN result\n"}
{"task_id": "HumanEval/15", "completion": ""}
{"task_id": "HumanEval/15", "completion": "function string_sequence(n: int)\n    result = \"\"\n    for i from 0 to n\n        result = result + str(i) + \" \"\n    return result\n"}
{"task_id": "HumanEval/15", "completion": "\nfunction string_sequence(n: int)\n    result = \"\"\n    for i from 0 to n\n        result = result + str(i) + \" \"\n    return result\n"}
{"task_id": "HumanEval/15", "completion": "function string_sequence(n: int)\n    result = \"\"\n    i = 0\n    while i <= n\n        result = result + str(i) + \" \"\n        i = i + 1\n    return result\n"}
{"task_id": "HumanEval/15", "completion": "\nfunction string_sequence(n: int)\n    result := \"\"\n    for i from 0 to n\n        result := result + str(i) + \" \"\n    return result[:-1"}
{"task_id": "HumanEval/15", "completion": "\nfunction string_sequence(n: int)\n    result = \"\"\n    i = 0\n    while i <= n\n        result = result + str(i) + \" \"\n        i = i + 1\n    return result\n"}
{"task_id": "HumanEval/15", "completion": "\nfunction string_sequence(n: int):\n    result = \"\"\n    i = 0\n    while i <= n:\n        result = result + str(i) + \" \"\n        i = i + 1\n    return result\n"}
{"task_id": "HumanEval/15", "completion": "function string_sequence(n: int): string\n  result := \"\"\n  for i from 0 to n\n    result += str(i) + \" \"\n  return result[0..-1]\n"}
{"task_id": "HumanEval/16", "completion": "\nfunction count_distinct_characters(input_string):\n    # Convert input string to lowercase\n    input_string = convert_to_lowercase(input_string)\n    # Create a set from the characters in the string\n    char_set = create_set_from_string(input_string)\n    # Return the size of the set (which represents the number of unique characters)\n    return size_of(char_set)\n\nfunction convert_to_lowercase(input_string):\n    output_string = \"\"\n    for each character in input_string:\n        output_string = output_string + lowercase_version_of(character)\n    return output_string\n\nfunction lowercase_version_of(character):\n    if character is uppercase then return lowercase equivalent of character else return character\n\nfunction create_set_from_string(input_string):\n    output_set = empty set\n    for each character in input_string:\n        add character to output_set\n    return output_set\n\nfunction size_of(set):\n    count = 0\n    for each element in set:\n        increment count by 1\n    return count\n"}
{"task_id": "HumanEval/16", "completion": "\nfunction count_distinct_characters(s)\n    distinct_chars = {}\n    for each char in s:\n        char = char.lower()\n        if char not in distinct_chars:\n            distinct_chars[char] = True\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/16", "completion": "\nfunction count_distinct_characters(str)\n    hash_set = {}\n    for each character in str\n        if character is not in hash_set\n            add character to hash_set\n    return size of hash_set\n"}
{"task_id": "HumanEval/16", "completion": ""}
{"task_id": "HumanEval/16", "completion": "\nfunction count_distinct_characters(input_string):\n    distinct_chars = set()\n    for char in input_string.lower():\n        if char.isalnum():\n            distinct_chars.add(char)\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/16", "completion": ""}
{"task_id": "HumanEval/16", "completion": "\nfunction count_distinct_characters(input_string)\n    distinct_count = 0\n    seen_chars = {}\n\n    for char in input_string:\n        char = char.lower()\n        if char not in seen_chars:\n            distinct_count += 1\n            seen_chars[char] = True\n\n    return distinct_count\n"}
{"task_id": "HumanEval/16", "completion": "function count_distinct_characters(s)\n    create an empty set distinct_chars\n    convert s to lower case\n    for each character c in s\n        add c to distinct_chars\n    return size of distinct_chars\n"}
{"task_id": "HumanEval/16", "completion": "\nfunction count_distinct_characters(input_string)\n    result = 0\n    seen_chars = {}\n    \n    for char in input_string:\n        char = char.lower()  # convert to lowercase for case insensitivity\n        if char not in seen_chars:\n            seen_chars[char] = True\n            result += 1\n    \n    return result\n"}
{"task_id": "HumanEval/16", "completion": "\nFUNCTION count_distinct_characters(input_string)\n    DISTINCT_CHARS = {}\n    FOR char IN input_string\n        char = lowercase(char)\n        IF char IN DISTINCT_CHARS THEN\n            CONTINUE\n        ELSE\n            ADD char TO DISTINCT_CHARS\n    RETURN THE NUMBER OF ITEMS IN DISTINCT_CHARS\n"}
{"task_id": "HumanEval/17", "completion": "function parse_music(music_string):\n    music_list = []\n    note_dict = {'o': 4, 'o|': 2, '|': 1}\n    current_beat = 0\n    current_note = ''\n    \n    for char in music_string:\n        if char in note_dict:\n            if current_note:\n                music_list.append(note_dict[current_note])\n                current_note = ''\n            current_note += char\n            \n    music_list.append(note_dict[current_note])\n    \n    return music_lis"}
{"task_id": "HumanEval/17", "completion": "\nfunction parseMusic(musicString: string):\n    result = []\n    i = 0\n    while i < length of musicString:\n        if musicString[i] == 'o':\n            result.append(4)\n            i = i + 1\n        elif musicString[i:i+2] == 'o|':\n            result.append(2)\n            i = i + 2\n        elif musicString[i:i+2] == '.|':\n            result.append(1)\n            i = i + 2\n        else:\n            print(\"Invalid input\")\n            return None\n    return result\n"}
{"task_id": "HumanEval/17", "completion": "\nfunction parse_music(music_string: str): List[int]\n    result := []\n    current_note := 0\n    note_values := {'o': 4, 'o|': 2, '.|': 1}\n\n    for char in music_string:\n        if char == 'o':\n            current_note += note_values['o']\n        elif char == 'o|':\n            current_note += note_values['o|']\n        elif char == '.|':\n            current_note += note_values['.|']\n\n        result.append(current_note)\n        current_note = 0\n\n    return result\n"}
{"task_id": "HumanEval/17", "completion": "\nfunction parse_music(music_string: str) -> List[int]:\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            result.append(4)\n            i += 1\n        elif music_string[i:i+2] == 'o|':\n            result.append(2)\n            i += 2\n        elif music_string[i:i+2] == '.|':\n            result.append(1)\n            i += 2\n        else:\n            print(\"Invalid input: \" + music_string[i])\n            return []\n    return result\n"}
{"task_id": "HumanEval/17", "completion": "\nprocedure parse_music(music_string: str)\n    result_list = []\n    current_note = ''\n    current_beats = 0\n\n    for char in music_string\n        if char == 'o'\n            current_note = 'o'\n            current_beats = 4\n        elif char == '|'\n            if current_note == 'o'\n                current_beats /= 2\n            else\n                current_note = ''\n        elif char == '.'\n            current_beats = 1\n            current_note = ''\n        else\n            result_list.append(current_beats)\n            current_beats = 0\n    result_list.append(current_beats)\n    return result_list\n"}
{"task_id": "HumanEval/17", "completion": "\nfunction parse_music(music_string):\n    result = []\n    current_note = ''\n    while music_string is not empty:\n        if music_string starts with 'o':\n            current_note = 'o'\n            music_string = music_string[1:]\n        elif music_string starts with 'o|':\n            current_note = 'o|'\n            music_string = music_string[2:]\n        elif music_string starts with '.|':\n            current_note = '.|'\n            music_string = music_string[2:]\n        else:\n            result.append(get_beats(current_note))\n            current_note = ''\n    result.append(get_beats(current_note))\n    return result\n\nfunction get_beats(note):\n    if note == 'o':\n        return 4\n    elif note == 'o|':\n        return 2\n    elif note == '.|':\n        return "}
{"task_id": "HumanEval/17", "completion": "function parse_music(music_string: string):\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            result.append(4)\n            i = i + 1\n        elif music_string[i:i+2] == 'o|':\n            result.append(2)\n            i = i + 2\n        elif music_string[i:i+2] == '.|':\n            result.append(1)\n            i = i + 2\n        else:\n            raise ValueError(\"Invalid character in music string\")\n    return resul"}
{"task_id": "HumanEval/17", "completion": "function parseMusic(musicString):\n    result = []\n    i = 0\n    while i < len(musicString):\n        if musicString[i] == 'o':\n            result.append(4)\n            i += 1\n        elif musicString[i:i+2] == 'o|':\n            result.append(2)\n            i += 2\n        elif musicString[i:i+2] == '.|':\n            result.append(1)\n            i += 2\n        else:\n            raise ValueError(\"Invalid music note\")\n    return resul"}
{"task_id": "HumanEval/17", "completion": "\nprocedure parse_music(music_string: str)\n    result = []\n    current_note_duration = 0\n    current_note_type = ''\n    \n    for char in music_string:\n        if char == 'o':\n            current_note_duration = 4\n            current_note_type = 'whole'\n        elif char == 'o|':\n            current_note_duration = 2\n            current_note_type = 'half'\n        elif char == '.':\n            current_note_duration = 1\n            current_note_type = 'quarter'\n        \n        if current_note_type != '':\n            result.append(current_note_duration)\n            current_note_type = ''\n    \n    return result\n"}
{"task_id": "HumanEval/17", "completion": "\nfunction parse_music(music_string)\n    result = []\n    current_beat = 0\n    for character in music_string:\n        if character == 'o':\n            current_beat += 4\n        elif character == 'o|':\n            current_beat += 2\n        elif character == '.|':\n            current_beat += 1\n        else:\n            raise ValueError(\"Invalid character in music string\")\n        result.append(current_beat)\n    return resul"}
{"task_id": "HumanEval/18", "completion": "\nfunction how_many_times(string: str, substring: str)\n    count := 0\n    i := 0\n    while i <= length(string) - length(substring)\n        if string.substring(i, i + length(substring)) = substring\n            count := count + 1\n            i := i + 1\n        else\n            i := i + 1\n    return count\n"}
{"task_id": "HumanEval/18", "completion": "\nfunction how_many_times(string, substring):\n    count = 0\n    start = 0\n    while start < length of string:\n        start = position of substring in string starting at index start\n        if start is not -1:\n            count = count + 1\n            start = start + length of substring\n        else:\n            return count\n    return count\n"}
{"task_id": "HumanEval/18", "completion": "function how_many_times(string: str, substring: str)\n    count := 0\n    i := 0\n    while i <= length of string\n        if substring is equal to substring of string from i to i + length of substring\n            count := count + 1\n            i := i + 1\n        else\n            i := i + 1\n    return count\n"}
{"task_id": "HumanEval/18", "completion": "\nfunction how_many_times(string: str, substring: str)\n    count := 0\n    position := 0\n    while position <= length(string)\n        if string.substring(position, position + length(substring)) = substring\n            count := count + 1\n            position := position + 1\n        else\n            position := position + 1\n    return count\n"}
{"task_id": "HumanEval/18", "completion": "function how_many_times(string: str, substring: str)\n    count := 0\n    i := 0\n    while i <= length(string) - length(substring)\n        if substring equals substring from i to i + length(substring) - 1 in string\n            count := count + 1\n            i := i + 1\n        else\n            i := i + 1\n    return count\n"}
{"task_id": "HumanEval/18", "completion": "\nalgorithm how_many_times(string: string, substring: string)\n   count := 0\n   pos := 0\n   while pos <= length of string\n       if first character of string starting at position pos is equal to first character of substring\n           match := true\n           i := 1\n           while i <= length of substring and match is true\n               if i-th character of string starting at position pos is not equal to i-th character of substring\n                   match := false\n               i := i + 1\n           if match\n               count := count + 1\n               pos := pos + length of substring\n           else\n               pos := pos + 1\n   return count\nend algorith"}
{"task_id": "HumanEval/18", "completion": "\nfunction how_many_times(string, substring):\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index + len(substring)] == substring:\n            count = count + 1\n            index = index + 1\n        else:\n            index = index + 1\n    return count\n"}
{"task_id": "HumanEval/18", "completion": "function how_many_times(string: str, substring: str)\n    count := 0\n    i := 0\n    while i <= length(string)\n        if substring is substring of string from i to i + length(substring) then\n            count := count + 1\n            i := i + 1\n        else\n            i := i + 1\n        end if\n    end while\n    return count\n"}
{"task_id": "HumanEval/18", "completion": "\nfunction how_many_times(string: string, substring: string)\n    count := 0\n    i := 0\n    while i <= length(string) - length(substring)\n        if string.substring(i, i + length(substring)) = substring\n            count := count + 1\n            i := i + 1\n        else\n            i := i + 1\n    return count\n"}
{"task_id": "HumanEval/18", "completion": "\nfunction how_many_times(string : str, substring : str)\n    count := 0\n    i := 0\n    while i < length of string\n        if substring is equal to the substring of string from i to i plus the length of substring\n            count := count + 1\n            i := i + 1\n        else\n            i := i + 1\n    loop\n    return count\nend function\n"}
{"task_id": "HumanEval/19", "completion": "# function to map each word to its corresponding integer value\nfunction map_word_to_int(word: string): integer\n    if word == 'zero':\n        return 0\n    elif word == 'one':\n        return 1\n    elif word == 'two':\n        return 2\n    elif word == 'three':\n        return 3\n    elif word == 'four':\n        return 4\n    elif word == 'five':\n        return 5\n    elif word == 'six':\n        return 6\n    elif word == 'seven':\n        return 7\n    elif word == 'eight':\n        return 8\n    elif word == 'nine':\n        return 9\n\n# split input string into words\nnumbers := split(input_string, ' ')\n\n# convert each word to its integer value and store in a list\nintegers := []\nfor word in numbers:\n    integers.append(map_word_to_int(word))\n\n# sort the list of integers\nsort(integers)\n\n# convert each integer back to its word representation and join them\nsorted_words := []\nfor integer in integers:\n    sorted_words.append(get_word_from_integer(integer))\n\nreturn join(sorted_words, ' ')\n"}
{"task_id": "HumanEval/19", "completion": "\nfunction sort_numbers(input_string: str): str\n    split_input = input_string.split(' ')\n    sorted_numbers = []\n    for word in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']:\n        if word in split_input:\n            sorted_numbers.append(word)\n    sorted_numbers.sort()\n    return ' '.join(sorted_numbers)\n"}
{"task_id": "HumanEval/19", "completion": "function sort_numbers(input_string: string)\n    split_input = input_string.split(' ')\n    dictionary = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    sorted_numbers = sorted(split_input, key=lambda x: dictionary[x])\n    return ' '.join(sorted_numbers)\n"}
{"task_id": "HumanEval/19", "completion": "\nALGORITHM\nsort_numbers(numbers):\n    split the input string into a list of words\n    create an empty dictionary to store the numbers with their corresponding values\n    iterate over each word in the list\n        if the word is not in the dictionary, add it to the dictionary with its value as the current index + 1\n        otherwise, increment the value of the word in the dictionary by 1\n    sort the dictionary by values\n    join the sorted dictionary keys with spaces to form the output string\n    return the output strin"}
{"task_id": "HumanEval/19", "completion": "\ninput_string = numbers.split(\" \")\nsorted_list = []\nfor word in input_string:\n    if word == \"zero\":\n        sorted_list.append(\"0\")\n    elif word == \"one\":\n        sorted_list.append(\"1\")\n    elif word == \"two\":\n        sorted_list.append(\"2\")\n    elif word == \"three\":\n        sorted_list.append(\"3\")\n    elif word == \"four\":\n        sorted_list.append(\"4\")\n    elif word == \"five\":\n        sorted_list.append(\"5\")\n    elif word == \"six\":\n        sorted_list.append(\"6\")\n    elif word == \"seven\":\n        sorted_list.append(\"7\")\n    elif word == \"eight\":\n        sorted_list.append(\"8\")\n    elif word == \"nine\":\n        sorted_list.append(\"9\")\nsorted_list.sort()\nsorted_string = \" \".join(sorted_list)\nreturn sorted_string\n"}
{"task_id": "HumanEval/19", "completion": "\nfunction sort_numbers(input_string: string):\n    input_list = []\n    for word in input_string.split(\" \"):\n        if word in [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]:\n            input_list.append((word, int(word.replace(\"zero\", \"0\").replace(\"one\", \"1\").replace(\"two\", \"2\").replace(\"three\", \"3\").replace(\"four\", \"4\").replace(\"five\", \"5\").replace(\"six\", \"6\").replace(\"seven\", \"7\").replace(\"eight\", \"8\").replace(\"nine\", \"9\"))))\n    return \" \".join([word for word, num in sorted(input_list, key=lambda x: x[1])])\n"}
{"task_id": "HumanEval/19", "completion": "input_string = input()\nnumbers_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\nnumbers_list = input_string.split()\nsorted_numbers = sorted([numbers_dict[num] for num in numbers_list])\nresult = ' '.join([key for key, value in sorted(zip(numbers_dict.keys(), sorted_numbers))])\n\nreturn resul"}
{"task_id": "HumanEval/19", "completion": "\ninput_string = numbers\nsplit_string = input_string.split()\nsorted_list = []\nfor word in split_string:\n    if word == 'zero':\n        sorted_list.append(0)\n    elif word == 'one':\n        sorted_list.append(1)\n    elif word == 'two':\n        sorted_list.append(2)\n    elif word == 'three':\n        sorted_list.append(3)\n    elif word == 'four':\n        sorted_list.append(4)\n    elif word == 'five':\n        sorted_list.append(5)\n    elif word == 'six':\n        sorted_list.append(6)\n    elif word == 'seven':\n        sorted_list.append(7)\n    elif word == 'eight':\n        sorted_list.append(8)\n    else:\n        sorted_list.append(9)\nsorted_string = ' '.join(str(x) for x in sorted(sorted_list))\nreturn sorted_string\n"}
{"task_id": "HumanEval/19", "completion": ""}
{"task_id": "HumanEval/19", "completion": "input_str = numbers.split()\nsorted_str = []\nfor num in input_str:\n    if num == 'zero':\n        sorted_str.append(num)\n    elif num == 'one':\n        sorted_str.insert(0, num)\n    elif num == 'two':\n        if len(sorted_str) == 0 or sorted_str[0] == 'zero':\n            sorted_str.insert(0, num)\n        else:\n            sorted_str.append(num)\n    elif num == 'three':\n        if len(sorted_str) == 0 or sorted_str[0] == 'zero' or sorted_str[0] == 'one':\n            sorted_str.insert(0, num)\n        else:\n            sorted_str.append(num)\n    elif num == 'four':\n        if len(sorted_str) == 0 or sorted_str[0] == 'zero' or sorted_str[0] == 'one' or sorted_str[0] == 'two':\n            sorted_str.insert(0, num)\n        else:\n            sorted_str.append(num)\n    elif num == 'five':\n        if len(sorted_str) == 0 or sorted_str[0] == 'zero' or sorted_str[0] == 'one' or sorted_str[0] == 'two' or sorted_str[0] == 'three':\n            sorted_str.insert(0, num)\n        else:\n            sorted_str.append(num)\n    elif num == 'six':\n        if len(sorted_str) == 0 or sorted_str[0] == 'zero' or sorted_str[0] == 'one' or sorted_str[0] == 'two' or sorted_str[0] == 'three' or sorted_str[0] == 'four':\n            sorted_str.insert(0, num)\n        else:\n            sorted_str.append(num)\n    elif num == 'seven':\n        if len(sorted_str) == 0 or sorted_str[0] == 'zero' or sorted_str[0] == 'one' or sorted_str[0] == 'two' or sorted_str[0] == 'three' or sorted_str[0] == 'four' or sorted_str[0] == 'five':\n            sorted_str.insert(0, num)\n        else:\n            sorted_str.append(num)\n    elif num == 'eight':\n        if len(sorted_str) == 0 or sorted_str[0] == 'zero' or sorted_str[0] == 'one' or sorted_str[0] == 'two' or sorted_str[0] == 'three' or sorted_str[0] == 'four' or sorted_str[0] == 'five' or sorted_str[0] == 'six':\n            sorted_str.insert(0, num)\n        else:\n            sorted_str.append(num)\n    elif num == 'nine':\n        if len(sorted_str) == 0 or sorted_str[0] == 'zero' or sorted_str[0] == 'one' or sorted_str[0] == 'two' or sorted_str[0] == 'three' or sorted_str[0] == 'four' or sorted_str[0] == 'five' or sorted_str[0] == 'six' or sorted_str[0] == 'seven':\n            sorted_str.insert(0, num)\n        else:\n            sorted_str.append(num)\nreturn ' '.join(sorted_str"}
{"task_id": "HumanEval/20", "completion": ""}
{"task_id": "HumanEval/20", "completion": ""}
{"task_id": "HumanEval/20", "completion": "\nINPUT:\n  numbers: A list of distinct floating point numbers with at least two elements\n\nOUTPUT:\n  A tuple containing two numbers from the input list that are closest to each other\n\nPROCEDURE:\n  SORT numbers in ascending order\n  SET result = (numbers[1], numbers[2])\n  FOR i FROM 2 TO length(numbers)-1\n    IF ABS(numbers[i] - numbers[i-1]) < ABS(result[1] - result[0])\n      result = (numbers[i-1], numbers[i])\n  RETURN result\n"}
{"task_id": "HumanEval/20", "completion": ""}
{"task_id": "HumanEval/20", "completion": ""}
{"task_id": "HumanEval/20", "completion": "FUNCTION find_closest_elements(numbers)\n    smallest_diff = \u221e\n    closest_pair = None\n\n    FOR i FROM 1 TO LENGTH(numbers) - 1\n        FOR j FROM i + 1 TO LENGTH(numbers)\n            diff = ABS(numbers[i] - numbers[j])\n            IF diff < smallest_diff THEN\n                smallest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n            END IF\n        END FOR\n    END FOR\n\n    RETURN closest_pair\n"}
{"task_id": "HumanEval/20", "completion": "\nfunction find_closest_elements(numbers):\n    min_diff = float('inf')\n    closest_pair = ()\n    sort_numbers = sorted(numbers)\n    for i in range(len(sort_numbers)-1):\n        diff = sort_numbers[i+1] - sort_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sort_numbers[i], sort_numbers[i+1])\n    return closest_pair\n"}
{"task_id": "HumanEval/20", "completion": "\nFunction find_closest_elements(numbers: List[float]): Tuple[float, float]\n    sort numbers in ascending order\n    closest_diff = infinity\n    closest_pair = []\n    \n    for i from 1 to length(numbers) - 1\n        diff = numbers[i] - numbers[i - 1]\n        \n        if diff < closest_diff\n            closest_diff = diff\n            closest_pair = [numbers[i - 1], numbers[i]]\n            \n    return closest_pair\n"}
{"task_id": "HumanEval/20", "completion": "LIST = numbers\nMIN_DELTA = float('inf')\nCLOSEST_PAIR = (-float('inf'), -float('inf'))\nfor i in range(len(LIST)):\n    for j in range(i+1, len(LIST)):\n        DELTA = abs(LIST[i] - LIST[j])\n        if DELTA < MIN_DELTA:\n            MIN_DELTA = DELTA\n            CLOSEST_PAIR = (min(LIST[i], LIST[j]), max(LIST[i], LIST[j]))\nreturn CLOSEST_PAI"}
{"task_id": "HumanEval/20", "completion": "function find_closest_elements(numbers):\n    min_diff = infinity\n    closest_pair = ()\n    \n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        \n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\nfunction rescale_to_unit(numbers)\n    sort numbers in ascending order\n    min_value = first element of sorted numbers\n    max_value = last element of sorted numbers\n    \n    new_list = []\n    for each number in numbers\n        rescaled_number = (number - min_value) / (max_value - min_value)\n        append rescaled_number to new_list\n    \n    return new_list\n"}
{"task_id": "HumanEval/21", "completion": "\nMIN = min(numbers)\nRANGE = max(numbers) - MIN\nfor i from 0 to len(numbers)-1:\n    numbers[i] = (numbers[i] - MIN) / RANGE\nreturn numbers\n"}
{"task_id": "HumanEval/21", "completion": "\nfunction rescale_to_unit(numbers)\n    min_val = minimum of numbers\n    max_val = maximum of numbers\n    result = new list\n    \n    for each num in numbers\n        scaled_num = (num - min_val) / (max_val - min_val)\n        append scaled_num to result\n    \n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\nFUNCTION rescale_to_unit(numbers)\n    min_num = MIN(numbers)\n    max_num = MAX(numbers)\n    result = []\n    FOR each num IN numbers\n        rescaled_num = (num - min_num) / (max_num - min_num)\n        result.append(rescaled_num)\n    RETURN result\n"}
{"task_id": "HumanEval/21", "completion": "\nfunction rescale_to_unit(numbers: List[float]): List[float]\n    min_num = minimum value in numbers\n    max_num = maximum value in numbers\n    \n    for each num in numbers:\n        scaled_num = (num - min_num) / (max_num - min_num)\n        result.append(scaled_num)\n    \n    return result\n"}
{"task_id": "HumanEval/21", "completion": "function rescale_to_unit(numbers : list of float) is\n    min_num = minimum number in numbers\n    max_num = maximum number in numbers\n    result = empty list\n    \n    for each num in numbers do\n        rescaled_num = (num - min_num) / (max_num - min_num)\n        append rescaled_num to result\n        \n    return resul"}
{"task_id": "HumanEval/21", "completion": "function rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers"}
{"task_id": "HumanEval/21", "completion": "\nmin_num = min(numbers)\nmax_num = max(numbers)\n\nfor i in range(len(numbers)):\n    numbers[i] = (numbers[i] - min_num) / (max_num - min_num)\n"}
{"task_id": "HumanEval/21", "completion": ""}
{"task_id": "HumanEval/21", "completion": "function rescale_to_unit(numbers: list of float): list of float\n    min_value = minimum value in numbers\n    max_value = maximum value in numbers\n    result = new list of length equal to length of input list\n    for each number in numbers:\n        result[index of current number] = (current number - min_value) / (max_value - min_value)\n    return result\n"}
{"task_id": "HumanEval/22", "completion": ""}
{"task_id": "HumanEval/22", "completion": "function filter_integers(input_list)\n    output_list = []\n    for each_value in input_list:\n        if isinstance(each_value, int):\n            output_list.append(each_value)\n    return output_list\n"}
{"task_id": "HumanEval/22", "completion": "\nfunction filter_integers(values)\n    result := []\n    for each value in values\n        if type(value) is int then\n            add value to result\n    return result\n"}
{"task_id": "HumanEval/22", "completion": "\nprocedure filter_integers(values: list of any)\n    result = new empty list\n    for each value in values\n        if type(value) is integer then\n            add value to result\n    return result\n"}
{"task_id": "HumanEval/22", "completion": ""}
{"task_id": "HumanEval/22", "completion": "function filter_integers(values : list)\n    result = []\n    for each value in values\n        if type(value) is int\n            result.append(value)\n    return resul"}
{"task_id": "HumanEval/22", "completion": "\nfunction filter_integers(values)\n    result = []\n    for value in values\n        if type(value) is int\n            result.append(value)\n    return result\n"}
{"task_id": "HumanEval/22", "completion": ""}
{"task_id": "HumanEval/22", "completion": "\nfunction filter_integers(values)\n    result = []\n    for each value in values\n        if isinstance(value, int)\n            result.append(value)\n    return result\n"}
{"task_id": "HumanEval/22", "completion": "\nresult = []\nfor value in values:\n    if isinstance(value, int):\n        result.append(value)\nreturn result\n"}
{"task_id": "HumanEval/23", "completion": "\nfunction strlen(string : str)\n   return len(string)\n"}
{"task_id": "HumanEval/23", "completion": "\nfunction strlen(input_string: str)\n  result = 0\n  for each character in input_string\n    result = result + 1\n  return result\n"}
{"task_id": "HumanEval/23", "completion": ""}
{"task_id": "HumanEval/23", "completion": ""}
{"task_id": "HumanEval/23", "completion": "function strlen(string: str)\n    result = 0\n    while string is not empty\n        result = result + 1\n        string = string without first character\n    return result\n"}
{"task_id": "HumanEval/23", "completion": "\nfunction strlen(string : str) :\n    result = 0\n    for each character in string do\n        result = result + 1\n    return resul"}
{"task_id": "HumanEval/23", "completion": "\nfunction strlen(string: str)\n    length = 0\n    while string is not empty\n        length = length + 1\n        string = substring(1, length of string)\n    return length\n"}
{"task_id": "HumanEval/23", "completion": ""}
{"task_id": "HumanEval/23", "completion": ""}
{"task_id": "HumanEval/23", "completion": "\nfunction strlen(string)\n    if string is empty then\n        return 0\n    else\n        return length of string\n    end if\n"}
{"task_id": "HumanEval/24", "completion": "\nfunction largest_divisor(n: int)\n    i = 1\n    largest_div = 1\n    while i < n\n        if n % i = 0 then\n            largest_div = i\n        end if\n        i = i + 1\n    end while\n    return largest_div\n"}
{"task_id": "HumanEval/24", "completion": "\nfunction largest_divisor(n)\n    i = n - 1\n    while i > 0\n        if n mod i is 0\n            return i\n        i = i - 1\n    return 1\n"}
{"task_id": "HumanEval/24", "completion": "\nfunction largest_divisor(n: int)\n    i = 1\n    while i <= (n/2)\n        if n mod i is 0 then\n            return i\n        else\n            i = i + 1\n    end while\n    return 1\nend function\n"}
{"task_id": "HumanEval/24", "completion": "Function largest_divisor(n: int)\n   i = 1\n   while i < n\n      if n mod i == 0\n         max_divisor = i\n      i = i + 1\n   Return max_divisor\n"}
{"task_id": "HumanEval/24", "completion": "\nfunction largest_divisor(n: int)\n    i = n - 1\n    while i > 0 do\n        if n mod i = 0 then\n            return i\n        i = i - 1\n    end while\n    return 1\nend function\n"}
{"task_id": "HumanEval/24", "completion": "function largest_divisor(n: int)\n    i = n - 1\n    while i > 0 do\n        if n % i == 0 then\n            return i\n        end\n        i = i - 1\n    end\n    return 1\n"}
{"task_id": "HumanEval/24", "completion": "\nfunction largest_divisor(n: int): int\n    let max_divisor = 1\n    for i from n downto 2\n        if n mod i is 0\n            max_divisor = i\n    return max_divisor\n"}
{"task_id": "HumanEval/24", "completion": "\nfunction largest_divisor(n: int)\n    i = 1\n    largest_div = 0\n    while i < n\n        if n mod i is 0\n            largest_div = i\n        i = i + 1\n    return largest_div\n"}
{"task_id": "HumanEval/24", "completion": "function largest_divisor(n: int)\n    result = 0\n    for i from n-1 down to 1\n        if n mod i is 0 then\n            result = i\n        end if\n    end for\n    return result\n"}
{"task_id": "HumanEval/24", "completion": "function largest_divisor(n: int): int\n    i = 1\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 1\n"}
{"task_id": "HumanEval/25", "completion": "function factorize(n)\n    result = []\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            count = 0\n            while n % i == 0\n                n /= i\n                count += 1\n            result.append(i)\n            for j in range(count - 1)\n                result.append(i)\n        i += 1\n    if n > 1\n        result.append(n)\n    return result\n"}
{"task_id": "HumanEval/25", "completion": "function factorize(n: int)\n    result := []\n    i := 2\n    while i * i <= n\n        if n mod i = 0\n            count := 0\n            while n mod i = 0\n                count := count + 1\n                n := n / i\n            append i^count to result\n        i := i + 1\n    if n > 1\n        append n to result\n    return result\n"}
{"task_id": "HumanEval/25", "completion": "\nprocedure factorize(n: int)\n    result = empty list\n    i = 2\n    while i * i <= n\n        if n mod i == 0 then\n            count = 1\n            while n mod i == 0\n                n = n div i\n                count = count + 1\n            result.append(i)\n            result.repeat(count-1)\n        i = i + 1\n    if n > 1 then\n        result.append(n)\n    return result\n"}
{"task_id": "HumanEval/25", "completion": "ALGORITHM\nFACTORIZATION\nInput: n\nOutput: list of prime factors\n\nInitialization:\n    factor_list = []\n    i = 2\n    while i <= sqrt(n):\n        if n % i == 0:\n            count = 0\n            while n % i == 0:\n                n = n / i\n                count = count + 1\n            factor_list.append(i)\n            if count > 1:\n                factor_list.append(count)\n        i = i + 1\n    if n > 1:\n        factor_list.append(n)\n    return factor_list\n"}
{"task_id": "HumanEval/25", "completion": "\nfunction factorize(n: int):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors.append(i ** count)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/25", "completion": "function factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count = 0\n            while n % i == 0:\n                count += 1\n                n //= i\n            factors.append(i ** count)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/25", "completion": "\nfunction factorize(n):\n    result = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            result.append(i)\n    if n > 1:\n        result.append(n)\n    return result\n"}
{"task_id": "HumanEval/25", "completion": "\nprocedure factorize(n):\n    result = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0 then\n            count = 0\n            while n % i == 0:\n                n = n / i\n                count = count + 1\n            result.append(i)\n            for j in range(count - 1):\n                result.append(i)\n        i = i + 1\n    if n > 1 then\n        result.append(n)\n    return result\n"}
{"task_id": "HumanEval/25", "completion": "function factorize(n):\n    i = 2\n    factors = []\n    while i <= sqrt(n):\n        if n % i == 0:\n            count = 0\n            while n % i == 0:\n                count = count + 1\n                n = n / i\n            append(i, factors, count)\n        i = i + 1\n    if n > 1:\n        append(n, factors)\n    return factors\n\nfunction append(val, arr, count):\n    for _ in range(count):\n        arr.append(val)\n"}
{"task_id": "HumanEval/25", "completion": "function factorize(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i = i + 1\n        else:\n            n = n // i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\nfunction remove_duplicates(numbers)\n    set unique_numbers = {}\n    result = []\n    for each num in numbers\n        if num not in unique_numbers\n            unique_numbers[num] = true\n            append num to result\n    return result\n"}
{"task_id": "HumanEval/26", "completion": "\nfunction remove_duplicates(numbers: list<int>):\n    seen = {}\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            seen[num] = True\n            result.append(num)\n    \n    return result\n"}
{"task_id": "HumanEval/26", "completion": "function remove_duplicates(numbers):\n    seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = True\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/26", "completion": ""}
{"task_id": "HumanEval/26", "completion": "\nfunction remove_duplicates(numbers)\n    result = []\n    seen = {}\n    for each number in numbers\n        if number not in seen\n            add number to result\n            mark number as seen\n    return result\n"}
{"task_id": "HumanEval/26", "completion": "\nCREATE EMPTY LIST result\nITERATE OVER input_list:\n    IF element IS NOT IN result:\n        ADD element TO result\nRETURN resul"}
{"task_id": "HumanEval/26", "completion": "\n# Create an empty list to store unique numbers\nunique_numbers = []\n\n# Initialize a dictionary to keep track of seen numbers\nseen = {}\n\n# Iterate through the input list\nfor num in numbers:\n    # If the number is not in the 'seen' dictionary\n    if num not in seen:\n        # Add the number to the 'unique_numbers' list\n        unique_numbers.append(num)\n        # Mark the number as seen\n        seen[num] = True\n\nreturn unique_numbers\n"}
{"task_id": "HumanEval/26", "completion": "function remove_duplicates(numbers: list of integer)\n    result := an empty list\n    seen := an empty set\n\n    for each number in numbers\n        if number is not in seen\n            add number to seen\n            add number to result\n\n    return result\n"}
{"task_id": "HumanEval/26", "completion": ""}
{"task_id": "HumanEval/26", "completion": "\nDATA:\n    numbers = input list of integers\n    seen = empty set\n    result = empty list\n\nWHILE numbers is not empty\n    num = remove first element from numbers\n    IF num is not in seen\n        ADD num to seen and result\n    END IF\nEND WHILE\n\nRETURN result\n"}
{"task_id": "HumanEval/27", "completion": "\nfunction flip_case(string):\n    result = \"\"\n    for char in string:\n        if char is lowercase:\n            result += character.upper()\n        else:\n            result += character.lower()\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\nfunction flip_case(string)\n    result = \"\"\n    for each character in string\n        if character is lowercase then\n            result = result + character.toUpperCase()\n        else\n            result = result + character.toLowerCase()\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "function flip_case(string: str) -> str\n    result = \"\"\n    for each character in string:\n        if character is lowercase then\n            result = result + uppercase(character)\n        else\n            result = result + lowercase(character)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\nfunction flip_case(string)\n    result = \"\"\n    for each character in string\n        if character is lowercase\n            result = result + uppercase(character)\n        else\n            result = result + lowercase(character)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "function flip_case(string)\n    result = \"\"\n    for each char in string\n        if char is lowercase then\n            result = result + uppercase(char)\n        else\n            result = result + lowercase(char)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": ""}
{"task_id": "HumanEval/27", "completion": "function flip_case(string):\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return resul"}
{"task_id": "HumanEval/27", "completion": "\nFUNCTION flip_case(string)\n   result = EMPTY STRING\n   FOR EACH char IN string\n      IF char is lowercase THEN\n         result = result + UPPERCASE char\n      ELSE\n         result = result + LOWERCASE char\n   END FOR\n   RETURN result\nEND FUNCTIO"}
{"task_id": "HumanEval/27", "completion": "\nfunction flip_case(string: str)\n    result = \"\"\n    for each character in string\n        if character is lowercase then\n            result += uppercase(character)\n        else\n            result += lowercase(character)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\nfunction flip_case(str)\n    result = \"\"\n    for each char in str\n        if char is lowercase\n            result += uppercase(char)\n        else if char is uppercase\n            result += lowercase(char)\n        else\n            result += char\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "\nprocedure concatenate(strings: List[str]): str\n    result = \"\"\n    for each s in strings\n        result = result + s\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "\nfunction concatenate(strings: List[str]): str\n    result := \"\"\n    for each string in strings\n        result := result + string\n    return result\n"}
{"task_id": "HumanEval/28", "completion": ""}
{"task_id": "HumanEval/28", "completion": "FUNCTION concatenate(strings : LIST OF STRINGS)\n    result = \"\"\n    FOR each string IN strings\n        result = result + string\n    RETURN result\n"}
{"task_id": "HumanEval/28", "completion": "\nfunction concatenate(strings: List[str])\n    result = \"\"\n    for each string in strings\n        result = result + string\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "\ndefine function concatenate(inputList)\n   result = \"\"\n   foreach string in inputList\n      result = result + string\n   return result\n"}
{"task_id": "HumanEval/28", "completion": "\nfunction concatenate(strings)\n    result = \"\"\n    for each string in strings\n        result = result + string\n    return result\n"}
{"task_id": "HumanEval/28", "completion": "\nFUNCTION concatenate(strings: LIST OF STRINGS)\n  result := EMPTY STRING\n  FOR each string IN strings\n    result := result + string\n  END FOR\n  RETURN result\nEND FUNCTIO"}
{"task_id": "HumanEval/28", "completion": ""}
{"task_id": "HumanEval/28", "completion": "\nfunction concatenate(strings: list of string) return string\n    result := \"\"\n    for each string in strings\n        result := result + string\n    return result\n"}
{"task_id": "HumanEval/29", "completion": "\nfunction filter_by_prefix(strings : List<string), prefix : string)\n    result = []\n    for each string in strings:\n        if string starts with prefix\n            add string to result\n    return result\n"}
{"task_id": "HumanEval/29", "completion": ""}
{"task_id": "HumanEval/29", "completion": "function filter_by_prefix(strings: list of string, prefix: string): list of string\n    result = new list\n    for each string in strings:\n        if string starts with prefix:\n            add string to result\n    return result\n"}
{"task_id": "HumanEval/29", "completion": "algorithm filter_by_prefix(inputList, prefix)\n   outputList = []\n   for each string in inputList\n      if string starts with prefix\n         add string to outputList\n   return outputList\n"}
{"task_id": "HumanEval/29", "completion": "\ninput_list = strings\noutput_list = []\nfor string in input_list:\n    if string.startswith(prefix):\n        output_list.append(string)\nreturn output_list\n"}
{"task_id": "HumanEval/29", "completion": "ALGORITHM filter_by_prefix\n  INPUT: strings - a list of strings, prefix - a string\n  OUTPUT: a list of strings that start with the given prefix\n\n  result = new list\n\n  FOR each string in strings\n    IF string starts with prefix\n      ADD string to result\n\n  RETURN resul"}
{"task_id": "HumanEval/29", "completion": ""}
{"task_id": "HumanEval/29", "completion": "\nfunction filter_by_prefix(strings: list of string, prefix: string)\n    result: list of string = []\n    for each string in strings:\n        if string starts with prefix:\n            add string to result\n    return result\n"}
{"task_id": "HumanEval/29", "completion": "\nfunction filter_by_prefix(strings, prefix)\n  result = []\n  for each string in strings\n    if string starts with prefix then\n      add string to result\n  return resul"}
{"task_id": "HumanEval/29", "completion": "function filter_by_prefix(strings: list of string, prefix: string): list of string\n  result := empty list\n  for each string s in strings:\n    if the length of s is greater than or equal to the length of prefix and the first characters of s equal the prefix then\n      add s to result\n  return result\n"}
{"task_id": "HumanEval/30", "completion": ""}
{"task_id": "HumanEval/30", "completion": "\nfunction get_positive(lst)\n    result = []\n    for each item in lst:\n        if item > 0 then\n            add item to result\n    return result\n"}
{"task_id": "HumanEval/30", "completion": "\nDEFINITION\n    get_positive(LIST)\n        DECLARE result LIST\n        FOR each ELEMENT IN LIST\n            IF ELEMENT > 0\n                ADD ELEMENT TO result\n        RETURN result\n"}
{"task_id": "HumanEval/30", "completion": "\nfunction get_positive(l: list)\n    result = []\n    for each element in l:\n        if element > 0 then\n            result.append(element)\n        end if\n    return result\n"}
{"task_id": "HumanEval/30", "completion": "\nfunction get_positive(l: list)\n    result = []\n    for each element in l:\n        if element > 0 then\n            append element to result\n    return result\n"}
{"task_id": "HumanEval/30", "completion": "FUNCTION get_positive(input_list)\n    result = []\n    FOR each element IN input_list\n        IF element > 0\n            ADD element TO result\n    RETURN result\n"}
{"task_id": "HumanEval/30", "completion": "function get_positive(l : list)\n    result := []\n    for each num in l do\n        if num > 0 then\n            append num to result\n    return resul"}
{"task_id": "HumanEval/30", "completion": "\nALGORITHM:\n    INPUT: l (list of integers)\n    OUTPUT: list of positive integers\n\n    POSITIVE_NUMBERS = []\n    FOR each element e in l:\n        IF e > 0 THEN\n            ADD e to POSITIVE_NUMBERS\n    RETURN POSITIVE_NUMBERS\n"}
{"task_id": "HumanEval/30", "completion": ""}
{"task_id": "HumanEval/30", "completion": ""}
{"task_id": "HumanEval/31", "completion": "\nfunction is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    else:\n        for i from 2 to sqrt(n):\n            if n mod i = 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/31", "completion": "FUNCTION is_prime(n)\n    IF n <= 1 THEN\n        RETURN FALSE\n    ELSE\n        FOR i FROM 2 TO sqrt(n) DO\n            IF n MOD i = 0 THEN\n                RETURN FALSE\n            END IF\n        END FOR\n        RETURN TRUE\n    END IF\n"}
{"task_id": "HumanEval/31", "completion": "`is_prime(n) = \n  if n <= 1 then return false\n  for i from 2 to sqrt(n) do\n    if n mod i equals 0 then return false\n  return true"}
{"task_id": "HumanEval/31", "completion": "algorithm is_prime(n):\n    if n <= 1:\n        return false\n    else:\n        p = 2\n        while p * p <= n:\n            if n mod p == 0:\n                return false\n            p = p + 1\n        return true\n"}
{"task_id": "HumanEval/31", "completion": "function is_prime(n):\n    if n <= 1:\n        return false\n    elif n == 2 or n == 3:\n        return true\n    else:\n        for i from 2 to sqrt(n):\n            if n mod i is 0:\n                return false\n        return true\n"}
{"task_id": "HumanEval/31", "completion": "ALGORITHM is_prime(n):\n    IF n <= 1 THEN\n        RETURN FALSE\n    END IF\n    p = 2\n    WHILE p * p <= n DO\n        IF n MOD p = 0 THEN\n            RETURN FALSE\n        END IF\n        p = p + 1\n    END WHILE\n    RETURN TRUE\n"}
{"task_id": "HumanEval/31", "completion": "\nfunction is_prime(n)\n    if n <= 1 then\n        return false\n    else\n        for i = 2 to sqrt(n) do\n            if n mod i = 0 then\n                return false\n            end if\n        end for\n        return true\n    end if\nend function\n"}
{"task_id": "HumanEval/31", "completion": "\nfunction is_prime(n):\n    if n <= 1:\n        return False\n    else:\n        for i from 2 to sqrt(n):\n            if n mod i = 0:\n                return False\n        return True\n"}
{"task_id": "HumanEval/31", "completion": "function is_prime(n)\n    if n <= 1 then\n        return false\n    else if n <= 3 then\n        return true\n    else if n mod 2 = 0 or n mod 3 = 0 then\n        return false\n    else\n        i = 5\n        while i * i <= n do\n            if n mod i = 0 or n mod (i + 2) = 0 then\n                return false\n            i = i + 6\n        return true\n"}
{"task_id": "HumanEval/31", "completion": "function is_prime(n)\n    if n <= 1 then\n        return false\n    else\n        for i from 2 to sqrt(n) do\n            if n mod i = 0 then\n                return false\n            end if\n        end for\n        return true\n    end if\n"}
{"task_id": "HumanEval/32", "completion": "\nfunction find_zero(xs: list):\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have an even number of coefficients\")\n\n    def f(x):\n        return poly(xs, x)\n\n    x0 = 0\n    while True:\n        y0 = f(x0)\n        y1 = f(x0 - 0.1)\n        if abs(y0) < 0.00001:\n            return x0\n        elif y0 * y1 > 0:\n            x0 -= 0.05\n        else:\n            x0 += 0.05\n"}
{"task_id": "HumanEval/32", "completion": "\nfunction find_zero(xs: list)\n    if len(xs) % 2 == 1:\n        error \"xs must have an even number of coefficients\"\n    max_coeff_index = argmax(xs)\n    x0 = -xs[max_coeff_index] / (xs[max_coeff_index-1] * 2)\n    return round(x0, 2)\n"}
{"task_id": "HumanEval/32", "completion": "\nfunction find_zero(xs):\n    n = length(xs)\n    assert n % 2 == 0\n    a0 = xs[0]\n    an = xs[n // 2]\n    x0 = -an / a0\n    return x0\n"}
{"task_id": "HumanEval/32", "completion": "\nfunction find_zero(xs)\n    n = length(xs)\n    # Only consider polynomials with even number of coefficients\n    if n % 2 == 1\n        return None\n    c = xs[0]\n    for i from 1 to n/2\n        c = c * (-1) * (i) / (c + 1)\n    return -c\n"}
{"task_id": "HumanEval/32", "completion": "\nfunction find_zero(xs)\n    n = length(xs)\n    a = 0.0\n    b = 1.0\n    e = 0.00001\n    while True:\n        p = poly(xs, a)\n        if abs(p) < e:\n            return round(a, 2)\n        q = poly(xs, a + e)\n        if p * q < 0:\n            b = a\n        else:\n            a = a + e\n    end while\nend function\n"}
{"task_id": "HumanEval/32", "completion": ""}
{"task_id": "HumanEval/32", "completion": "\nfunction find_zero(xs: list):\n    n = len(xs)\n    x = -xs[1]/xs[0]\n    if n > 2:\n        x_old = x\n        for _ in range(n - 2):\n            x_new = x\n            y = poly(xs, x)\n            dy_dx = poly([i*x for i in xs], x)\n            x = x_new - y / dy_dx\n            if abs(x - x_old) < 1e-6:\n                break\n        return round(x, 2)\n    else:\n        return round(x, 2)\n"}
{"task_id": "HumanEval/32", "completion": ""}
{"task_id": "HumanEval/32", "completion": "\nfunction find_zero(xs):\n    if len(xs) % 2 == 1:\n        error \"xs must have even number of coefficients\"\n    if abs(xs[0]) > abs(xs[-1]):\n        error \"largest non-zero coefficient should be last one\"\n    x = 1.0\n    while True:\n        p = poly(xs, x)\n        if abs(p) < 0.000001:  # precision\n            return x\n        elif p > 0:\n            x -= 0.00001\n        else:\n            x += 0.00001\n"}
{"task_id": "HumanEval/32", "completion": "\nfunction find_zero(xs: list):\n    n = len(xs) // 2\n    while True:\n        x = -xs[0] / xs[n]\n        y = poly(xs, x)\n        if abs(y) < 1e-9:\n            return x\n        else:\n            for i from 0 to n-1:\n                temp = xs[i]\n                xs[i] = ys[i]\n                ys[i] = temp\n            n = n - 1\n"}
{"task_id": "HumanEval/33", "completion": "\nfunction sort_third(l: list):\n    result = []\n    for i from 0 to length(l) - 1:\n        if i mod 3 == 0:\n            result.append(sorted([x for x in l if i mod 3 == 0]))\n        else:\n            result.append(l[i])\n    return result\n"}
{"task_id": "HumanEval/33", "completion": "\nfunction sort_third(l)\n    l'\n    for i = 0 to length(l) - 1\n        if i mod 3 = 0\n            sublist = new list\n            for j = 0 to i - 1\n                if j mod 3 = 0\n                    add l[j] to sublist\n            add sort(sublist) to l'\n        else\n            add l[i] to l'\n    return l'\n"}
{"task_id": "HumanEval/33", "completion": "\nfunction sort_third(l):\n    result = []\n    for i from 0 to length(l) - 1:\n        if i mod 3 = 0:\n            result.append(sorted([x for x in l if i mod 3 = 0]))\n        else:\n            result.append(l[i])\n    return resul"}
{"task_id": "HumanEval/33", "completion": "\nfunction sort_third(l)\n    l' = []\n    for i = 0 to length(l) - 1\n        if i mod 3 == 0 then\n            l' = concatenate(l', sort(sublist(l, i, i+1)))\n        else\n            l' = concatenate(l', [l[i]])\n    return l'\n"}
{"task_id": "HumanEval/33", "completion": "function sort_third(l)\n    l' = new list\n    for i from 0 to length of l - 1:\n        if i is divisible by 3 then\n            l'[i] = sort(l' with indices that are divisible by 3)[i mod 3]\n        else\n            l'[i] = l[i]\n    return l'\n"}
{"task_id": "HumanEval/33", "completion": "function sort_third(l)\n    l_prime = []\n    for i from 0 to length(l) - 1\n        if i mod 3 == 0\n            temp = l[i]\n            j = i + 1\n            while j < length(l) and l[j] < temp\n                j = j + 1\n            l_prime = concatenate(l_prime, l[0:i])\n            l_prime = concatenate(l_prime, l[i:j])\n            l_prime = concatenate(l_prime, l[j:length(l)])\n            break\n        else\n            l_prime = concatenate(l_prime, [l[i]])\n    return l_prime\n"}
{"task_id": "HumanEval/33", "completion": "function sort_third(l: list)\n    result := []\n    i := 0\n    while i < length of l\n        if i mod 3 = 0\n            temp := []\n            for j from 0 to length of l\n                if j mod 3 = 0\n                    temp.append(l[j])\n            temp.sort()\n            append temp[0] to result\n        else\n            append l[i] to result\n        increment i\n    return resul"}
{"task_id": "HumanEval/33", "completion": "procedure sort_third(l: list)\n    result = []\n    i = 0\n    while i < length(l)\n        if i mod 3 = 0 then\n            temp = []\n            for j from 0 to length(l) - 1\n                if j mod 3 = 0 then\n                    temp.append(l[j])\n            result.append(sorted(temp))\n        else\n            result.append(l[i])\n        i = i + 1\n    return result\n"}
{"task_id": "HumanEval/33", "completion": "function sort_third(l):\n    l' = []\n    for i = 0 to length(l) - 1 do\n        if i modulo 3 = 0 then\n            append sorted([l[i]]) to l'\n        else\n            append l[i] to l'\n    return l'\n"}
{"task_id": "HumanEval/33", "completion": "\nfunction sort_third(l):\n    l' = []\n    i = 0\n    while i < length(l):\n        if i mod 3 = 0 then\n            temp = []\n            for j from 0 to i step 3:\n                append l[j] to temp\n            sort(temp)\n            for k from 0 to length(temp):\n                append temp[k] to l'\n            i = i + 3\n        else\n            append l[i] to l'\n            i = i + 1\n    return l'\n"}
{"task_id": "HumanEval/34", "completion": "\nfunction unique(l: list)\n    sort l in ascending order\n    result := {}\n    for each element e in l\n        if e not in result then\n            add e to result\n    return result\nend function\n"}
{"task_id": "HumanEval/34", "completion": "\nfunction unique(lst) is\n    result = new list\n    for each element in lst:\n        if element not in result:\n            append element to result\n    sort result\n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\nfunction unique(l)\n    set result = {}\n    for each item in l\n        if item not in result\n            append item to result\n    return sort(result)\nend function\n"}
{"task_id": "HumanEval/34", "completion": "\nfunction unique(l)\n    sort l in ascending order\n    result = []\n    for each element e in l\n        if e not in result\n            add e to result\n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\nALGORITHM:\n    SET result = {}\n    FOR each element e IN input_list:\n        IF e IS NOT IN result:\n            ADD e TO result\n    SORT result\n    RETURN result\n"}
{"task_id": "HumanEval/34", "completion": "PROCEDURE unique(LIST)\n    SET result = []\n    FOR each element IN LIST\n        IF element NOT IN result THEN\n            APPEND element TO result\n        END IF\n    END FOR\n    SORT result IN ASCENDING ORDER\n    RETURN result\n"}
{"task_id": "HumanEval/34", "completion": "\nfunction unique(L):\n    S = []\n    for e in L:\n        if e not in S:\n            S.append(e)\n    return sorted(S"}
{"task_id": "HumanEval/34", "completion": "\nprocedure unique(l)\n    let s be an empty set\n    for each element e in l\n        if e is not in s then\n            add e to s\n    return sorted(s"}
{"task_id": "HumanEval/34", "completion": "\nfunction unique(input_list)\n    create an empty set named \"unique_set\"\n    for each element in input_list\n        add element to \"unique_set\"\n    create an empty list named \"result_list\"\n    for each element in \"unique_set\"\n        append element to \"result_list\"\n    sort \"result_list\" in ascending order\n    return \"result_list"}
{"task_id": "HumanEval/34", "completion": "\nALGORITHM:\ninput: l (list)\noutput: unique sorted list\n\nsort(l) // sort the list\nuniqueList = []\nfor each element e in l:\n    if e not in uniqueList:\n        append e to uniqueList\nreturn uniqueList\n"}
{"task_id": "HumanEval/35", "completion": "\nproc max_element(l: list)\n    max_val = l[0]\n    for each e in l:\n        if e > max_val then\n            max_val = e\n    return max_val\n"}
{"task_id": "HumanEval/35", "completion": ""}
{"task_id": "HumanEval/35", "completion": "\nMAX = -Infinity\nFOR each item IN l:\n  IF item > MAX THEN\n    MAX = item\nEND FOR\nRETURN MAX\n"}
{"task_id": "HumanEval/35", "completion": "function max_element(l)\n    max = l[0]\n    for i = 1 to length of l\n        if l[i] > max then\n            max = l[i]\n    return ma"}
{"task_id": "HumanEval/35", "completion": "MAX = -inf\nFOR each item in list:\n    IF item > MAX:\n        MAX = item\nRETURN MAX\n"}
{"task_id": "HumanEval/35", "completion": "FUNCTION max_element(list l)\n    SET max_to_return = l[0]\n    FOR each element e IN l\n        IF e > max_to_return THEN\n            max_to_return = e\n        END IF\n    END FOR\n    RETURN max_to_return\n"}
{"task_id": "HumanEval/35", "completion": ""}
{"task_id": "HumanEval/35", "completion": "\nALGORITHM max_element(l)\n   SET max = l[0]\n   FOR i = 1 TO length(l) - 1\n      IF l[i] > max THEN\n         max = l[i]\n      END IF\n   END FOR\n   RETURN max\n"}
{"task_id": "HumanEval/35", "completion": "MAX = l[0]\nFOR each e IN l:\n    IF e > MAX THEN\n        MAX = e\n    END IF\nEND FOR\nRETURN MAX\n"}
{"task_id": "HumanEval/35", "completion": "procedure max_element(l)\n    if empty(l) then\n        return \"Empty List\"\n    else\n        max = l[0]\n        for each element e in l do\n            if e > max then\n                max = e\n        return max\n"}
{"task_id": "HumanEval/36", "completion": "\nfunction fizz_buzz(n: int):\n    count = 0\n    for i from 1 to n-1:\n        if (i mod 11 == 0) or (i mod 13 == 0):\n            while i > 0:\n                if i mod 10 == 7:\n                    count += 1\n                i = floor(i/10)\n    return count\n"}
{"task_id": "HumanEval/36", "completion": "function fizz_buzz(n: int)\n    count := 0\n    for i from 1 to n-1\n        if i mod 11 = 0 or i mod 13 = 0 then\n            string_i := convert i to string\n            if index(string_i, '7') > -1 then\n                count := count + 1\n        end if\n    end for\n    return count\n"}
{"task_id": "HumanEval/36", "completion": "\nfunction fizz_buzz(n: int)\n    count = 0\n    for i from 1 to n-1\n        if i mod 11 = 0 or i mod 13 = 0\n            str_i = convert i to string\n            if \"7\" is in str_i\n                count = count + 1\n    return count\n"}
{"task_id": "HumanEval/36", "completion": "\nfunction FizzBuzz(n: int)\n    count := 0\n    i := 11\n    while i < n\n        if i mod 11 == 0 or i mod 13 == 0\n            while i > 0\n                if i mod 10 == 7\n                    count := count + 1\n                i := i div 10\n            end while\n        i := i + 1\n    end while\n    return count\nend function\n"}
{"task_id": "HumanEval/36", "completion": "\nDEF fizz_buzz(n:\n    count = 0\n    FOR i FROM 1 TO n - 1:\n        IF (i MOD 11 = 0) OR (i MOD 13 = 0):\n            WHILE (i > 0):\n                IF (i MOD 10 = 7):\n                    count = count + 1\n                i = FLOOR(i / 10)\n    RETURN count\n"}
{"task_id": "HumanEval/36", "completion": "\nfunction fizz_buzz(n: int):\n    count := 0\n    i := 11\n    while i < n:\n        if i mod 11 = 0 or i mod 13 = 0:\n            while i >= 10:\n                if str(i) contains \"7\":\n                    count := count + 1\n                i := i / 10\n        i := i + 1\n    return count\n"}
{"task_id": "HumanEval/36", "completion": "\nfunction fizz_buzz(n: int)\n  count := 0\n  for i from 1 to n-1\n    if i mod 11 = 0 or i mod 13 = 0 then\n      str_i := convert i to string\n      for each character c in str_i\n        if c = '7' then\n          increment count\n    return count\n"}
{"task_id": "HumanEval/36", "completion": "\nfunction fizz_buzz(n: int)\n    count := 0\n    for i from 11 to n-1 with step 11 or 13\n        while i > 0\n            if last_digit_of(i) is 7 then\n                increment count\n            end if\n            decrement i by 1\n        end while\n    end for\n    return count\nend function\n"}
{"task_id": "HumanEval/36", "completion": "function fizz_buzz(n: int)\n    count = 0\n    for i from 1 to n - 1\n        if i mod 11 = 0 or i mod 13 = 0\n            str_i = convert i to string\n            if '7' is in str_i\n                increment count\n        end if\n    end for\n    return count\n"}
{"task_id": "HumanEval/36", "completion": "\nfunction fizz_buzz(n: int)\n    count := 0\n    for i from 1 to n-1\n        if (i mod 11 = 0) or (i mod 13 = 0)\n            while floor(log10(i)) >= 0\n                if rightmost_digit(i) = 7\n                    count++\n                i /= 10\n            end while\n        end if\n    end for\n    return count\nend functio"}
{"task_id": "HumanEval/37", "completion": "\nfunction sort_even(l):\n    even = []\n    odd = []\n    for i from 0 to length of l - 1:\n        if i mod 2 == 0 then\n            even.append(l[i])\n        else\n            odd.append(l[i])\n    even.sort()\n    result = []\n    for i from 0 to length of l - 1:\n        if i mod 2 == 0 then\n            result.append(even[0])\n            even = even[1:]\n        else\n            result.append(odd.pop(0))\n    return result\n"}
{"task_id": "HumanEval/37", "completion": "\nfunction sort_even(l : list)\n    l' = []\n    i = 0\n    while i < len(l)\n        if i % 2 == 0\n            l'.append(sorted([l[j] for j in range(i, len(l), 2)]))\n        else\n            l'.append(l[i])\n        i = i + 1\n    return l'\n"}
{"task_id": "HumanEval/37", "completion": "\nfunction sort_even(l : list)\n    new_list = []\n    for i from 0 to length(l) - 1\n        if i mod 2 == 0 then\n            new_list.append(sorted([x for x in l if i mod 2 == 0])[i / 2])\n        else\n            new_list.append(l[i])\n    return new_list\n"}
{"task_id": "HumanEval/37", "completion": "\nfunction sort_even(l):\n    l' = []\n    for i from 0 to length of l - 1 do\n        if i mod 2 == 0 then\n            insert sort(get elements at even indices of l) into l'\n        else\n            insert element at i into l'\n    return l'\n"}
{"task_id": "HumanEval/37", "completion": "function sort_even(l: list):\n    n = length of l\n    new_list = create a new list of size n\n    for i from 0 to n-1:\n        if i is even:\n            push the ith element of sorted elements of l (from index 0 to n-1) onto new_list\n        else:\n            push the ith element of l onto new_list\n    return new_list\n"}
{"task_id": "HumanEval/37", "completion": "\nALGORITHM:\n    INPUT: list l\n    OUTPUT: list l'\n\n    SET l' = []\n    FOR i FROM 0 TO LENGTH(l) BY 2\n        APPEND l[i] TO l'\n    SORT l'[1..LENGTH(l)-1]\n    FOR i FROM 1 TO LENGTH(l)-1 BY 2\n        SET l'[i] = l'[1..i-1][0]\n        REMOVE FIRST ELEMENT FROM l'[1..i-1]\n    RETURN l"}
{"task_id": "HumanEval/37", "completion": "\nfunction sort_even(l: list)\n    result = []\n    for i from 0 to length(l) - 1\n        if i is odd then\n            result.append(l[i])\n        else\n            temp = sorted([x for x in l[::2]])\n            result.append(temp[0])\n            temp.pop(0)\n            j = 0\n            for k from 0 to length(l) - 1\n                if k is even then\n                    l[k] = temp[j]\n                    j = j + 1\n"}
{"task_id": "HumanEval/37", "completion": "\nfunction sort_even(l):\n    // Create a new list l'\n    l' = []\n\n    // Iterate over each element i in l\n    for i from 0 to length(l) - 1:\n        if i is even:\n            // Append the ith element of l to l', but sorted\n            append sort(l[i]) to l'\n        else:\n            // Append the ith element of l to l' as is\n            append l[i] to l'\n\n    return l'\n"}
{"task_id": "HumanEval/37", "completion": "\nfunction sort_even(l):\n    sorted_l = []\n    for i from 0 to length(l)-1:\n        if i mod 2 == 0:\n            sorted_l.append(sorted([x for x in l if i mod 2 == 0]))\n        else:\n            sorted_l.append(l[i])\n    return sorted_l\n"}
{"task_id": "HumanEval/37", "completion": "function sort_even(l: list)\n    result = []\n    for i from 0 to length of l - 1 do\n        if i mod 2 == 0 then\n            insert sorted([x for x in l if i mod 2 == 0]) at index i in result\n        else\n            insert element at index i from l at index i in result\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    decoded_string = \"\"\n    while s:\n        group = s[:3]\n        s = s[3:]\n        if len(group) == 3:\n            decoded_string += group[2] + group[0] + group[1]\n        else:\n            decoded_string += group\n    return decoded_string\n"}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length at most 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # cycle elements in each group. Unless group has only one element.\n    groups = [(''.join([groups[i-1][i%3]] if i > 0 else groups[i]) for i in range(len(groups)))]\n    return ''.join(groups)\n"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Initialize result string\n    result = \"\"\n    \n    # split string into groups of 3. If less than 3, append an empty string\n    groups = [s[i:i+3] if i+3 <= len(s) else s[i:] for i in range(0, len(s), 3)]\n    groups += [''] if len(s) % 3 != 0 else []\n    \n    # decode each group. First element goes at the end\n    result = ''.join(group[1:] + group[0] for group in groups)\n    \n    return resul"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    result = \"\"\n    temp = \"\"\n    for char in s:\n        temp += char\n        if len(temp) == 3:\n            result += temp[1] + temp[2] + temp[0]\n            temp = \"\"\n    if temp:\n        result += temp\n    return result\n"}
{"task_id": "HumanEval/38", "completion": ""}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group\n    groups = [''.join(group[2] + group[1] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # join groups together into one string\n    groups = list(s)\n    decoded = \"\"\n    for i in range(0, len(groups), 3):\n        # if group has exactly 3 elements, cycle them\n        if i + 3 <= len(groups):\n            decoded += groups[i + 2] + groups[i + 1] + groups[i]\n        # if group has less than 3 elements, leave it as is\n        else:\n            decoded += groups[i:]\n    return decoded\n"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    # reverse cyclic elements in each group\n    groups = [group[2] + group[1] + group[0] for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # initialize empty list to store decoded groups\n    decoded_groups = []\n    # iterate over groups of 3 characters in the string\n    for i in range(0, len(s), 3):\n        # get the current group\n        group = s[i:i+3]\n        # if group has less than 3 characters, add the first character of previous group to it\n        if len(group) < 3:\n            if not decoded_groups:\n                raise ValueError(\"Invalid encoded string\")\n            group = group + decoded_groups[-1][0]\n        # reverse and add to decoded groups\n        decoded_groups.append(group[::-1])\n    # join all decoded groups into a single string\n    return \"\".join(decoded_groups)\n"}
{"task_id": "HumanEval/38", "completion": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string into groups of 3\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    \n    # Reverse each group, unless group has only one element\n    groups = [group[::-1] if len(group) > 1 else group for group in groups]\n    \n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "ALGORITHM:\n    FUNCTION prime_fib(n: int)\n        DECLARE i: int, j: int, fib: int, count: int\n        SET i = 0, j = 1, fib = 1, count = 1\n        WHILE count < n\n            IF is_prime(fib) THEN\n                RETURN fib\n            END IF\n            SET i = i + 1, j = j + 1, fib = i + j\n            SET count = count + 1\n        END WHILE\n    END FUNCTION\n\n    FUNCTION is_prime(x: int)\n        DECLARE p: int\n        IF x <= 1 THEN\n            RETURN FALSE\n        END IF\n        FOR p FROM 2 TO SQRT(x)\n            IF x MOD p == 0 THEN\n                RETURN FALSE\n            END IF\n        NEXT p\n        RETURN TRUE\n    END FUNCTION\n"}
{"task_id": "HumanEval/39", "completion": "\nfunction prime_fib(n: int):\n    a, b = 0, 1\n    prime_count = 0\n    while prime_count < n:\n        if is_prime(b):\n            a, b = b, a + b\n            prime_count += 1\n        else:\n            b = a + b\n    return b\n\nfunction is_prime(num: int):\n    if num < 2:\n        return False\n    for i from 2 to sqrt(num):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/39", "completion": "\nfunction prime_fib(n: int)\n    set i to 0\n    set fib_sequence to [0, 1]\n    while length of fib_sequence < n\n        set next_fib to fib_sequence[i] + fib_sequence[i+1]\n        if is_prime(next_fib)\n            append next_fib to fib_sequence\n        increment i by 1\n    return fib_sequence[n-1]\n\nfunction is_prime(num: int)\n    if num < 2 then return false\n    for i from 2 to sqrt(num)\n        if mod(num, i) equals 0 then return false\n    return true\n"}
{"task_id": "HumanEval/39", "completion": "\nfunction prime_fib(n: int):\n    fib_sequence = [0, 1]\n    i = 2\n    \n    while length(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i])\n        i = i + 1\n    \n    for num in fib_sequence:\n        for j in range(2, int(num ** 0.5) + 1):\n            if num % j == 0:\n                break\n        else:\n            if num != 1:\n                return num\n\n    return None\n"}
{"task_id": "HumanEval/39", "completion": "function prime_fib(n: int):\n    i = 1\n    fib = 0\n    while true:\n        fib = fib + i\n        i = i + 1\n        if is_prime(fib) then\n            if n == 1 then\n                return 2\n            else\n                n = n - 1\n        end if\n        if n == 0 then\n            return fib\n        end if\n    end while\nend function\n\nfunction is_prime(m: int):\n    if m <= 1 then\n        return false\n    for i from 2 to sqrt(m):\n        if m mod i == 0 then\n            return false\n        end if\n    end for\n    return true\n"}
{"task_id": "HumanEval/39", "completion": "\nfunction prime_fib(n: int):\n    a = 0\n    b = 1\n    count = 1\n    while true:\n        if b > n:\n            return a\n        if is_prime(b) then\n            if count == n then\n                return b\n            count += 1\n        a, b = b, a + b\n\nfunction is_prime(num: int):\n    if num <= 1 then\n        return false\n    for i from 2 to sqrt(num) inclusive do\n        if num mod i equals 0 then\n            return false\n    return true\n"}
{"task_id": "HumanEval/39", "completion": "\nfunction prime_fib(n: int)\n    a, b = 0, 1\n    count = 1\n    while True:\n        if is_prime(b):\n            if count == n:\n                return b\n            count += 1\n        a, b = b, a + b\n\nfunction is_prime(num: int)\n    if num <= 1:\n        return False\n    for i from 2 to sqrt(num):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/39", "completion": "\nfunction prime_fib(n: int):\n    a = 0\n    b = 1\n    count = 1\n\n    while true:\n        if is_prime(a):\n            if count == n:\n                return a\n            count += 1\n        a, b = b, a + b\n\nfunction is_prime(num: int):\n    if num < 2:\n        return false\n    for i from 2 to sqrt(num) by 1:\n        if num % i == 0:\n            return false\n    return true\n"}
{"task_id": "HumanEval/39", "completion": "\nfunction prime_fib(n: int):\n    let a, b = 2, 3\n    let count = 0\n    while true:\n        if is_prime(b):\n            if count == n - 1:\n                return b\n            count += 1\n        a, b = b, a + b\n"}
{"task_id": "HumanEval/39", "completion": "\nfunction prime_fib(n: int)\n    i = 0\n    a = 0\n    b = 1\n    count = 0\n\n    while True:\n        i = i + 1\n        c = a + b\n        if is_prime(c):\n            count = count + 1\n            if count == n:\n                return c\n        a = b\n        b = c\n\nfunction is_prime(x: int)\n    if x < 2 then\n        return false\n    for i from 2 to sqrt(x):\n        if x mod i == 0:\n            return false\n    return true\n"}
{"task_id": "HumanEval/40", "completion": "procedure triples_sum_to_zero(l: list)\n    sort l in ascending order\n    for each element a in l\n        for each element b in l starting from a + 1\n            for each element c in l starting from b + 1\n                if a + b + c equals 0\n                    return True\n    return Fals"}
{"task_id": "HumanEval/40", "completion": "ALGORITHM\nInput: l (list of integers)\n\nInitialize two pointers, i and j, at the start of the list.\nSort the list in ascending order.\n\nFOR i FROM 0 TO length of l - 2:\n    j := i + 1\n    k := length of l - 1\n\n    WHILE j < k:\n        total := l[i] + l[j] + l[k]\n        IF total == 0:\n            RETURN True\n        ELSE IF total < 0:\n            j := j + 1\n        ELSE:\n            k := k - 1\n\nRETURN Fals"}
{"task_id": "HumanEval/40", "completion": "\nPROCEDURE triples_sum_to_zero(l: list)\n    DECLARE sorted_l: list = SORT(l)\n    DECLARE i, j, k: integer\n    DECLARE found: boolean = FALSE\n\n    FOR i FROM 0 TO length(sorted_l) - 2\n        j := i + 1\n        FOR k FROM j TO length(sorted_l) - 1\n            IF (sorted_l[i] + sorted_l[j] + sorted_l[k]) = 0 THEN\n                found := TRUE\n                EXIT\n            ELSE IF sorted_l[i] + sorted_l[j] > 0 THEN\n                BREAK\n            END IF\n        END FOR\n    END FOR\n\n    RETURN found\n"}
{"task_id": "HumanEval/40", "completion": "\nPROCEDURE triples_sum_to_zero(l: list)\n    SET count := 0\n    FOR i := 0 TO length(l) - 2\n        FOR j := i + 1 TO length(l) - 1\n            FOR k := j + 1 TO length(l)\n                IF l[i] + l[j] + l[k] = 0 THEN\n                    SET count := count + 1\n                END IF\n            END FOR\n        END FOR\n    END FOR\n    IF count > 0 THEN\n        RETURN TRUE\n    ELSE\n        RETURN FALSE\n    END IF\nEND PROCEDURE\n"}
{"task_id": "HumanEval/40", "completion": "\nfunction triples_sum_to_zero(l: list)\n    sort l in non-decreasing order\n    for i from 0 to len(l) - 2\n        left := i + 1\n        right := len(l) - 1\n        while left < right\n            total := l[i] + l[left] + l[right]\n            if total == 0\n                return True\n            elif total < 0\n                left := left + 1\n            else\n                right := right - 1\n    return False\n"}
{"task_id": "HumanEval/40", "completion": "procedure triples_sum_to_zero(input_list)\n    sort input_list in ascending order\n    for each i from 0 to length(input_list) - 2 do\n        left = i + 1\n        right = length(input_list) - 1\n        while left < right do\n            total = input_list[i] + input_list[left] + input_list[right]\n            if total == 0 then\n                return True\n            else if total < 0 then\n                left = left + 1\n            else\n                right = right - 1\n        end while\n    end for\n    return False\n"}
{"task_id": "HumanEval/40", "completion": "Procedure triples_sum_to_zero(list):\n    sort list in ascending order\n    for i from 1 to length(list) - 2:\n        left := i + 1\n        right := length(list)\n        while left < right:\n            current_sum := list[i] + list[left] + list[right]\n            if current_sum == 0:\n                return True\n            else if current_sum < 0:\n                left := left + 1\n            else:\n                right := right - 1\n    return False\n"}
{"task_id": "HumanEval/40", "completion": ""}
{"task_id": "HumanEval/40", "completion": "\nfunction triples_sum_to_zero(l)\n    sort l\n    for i from 0 to length(l) - 2\n        for j from i + 1 to length(l) - 1\n            target = -(l[i] + l[j])\n            if find(target, l, j + 1) != -1\n                return true\n    return false\n\nfunction find(target, l, start)\n    for i from start to length(l) - 1\n        if l[i] == target\n            return i\n    return -1\n"}
{"task_id": "HumanEval/40", "completion": "\nFunction triples_sum_to_zero(list l)\n    sort list l\n    for i from 1 to length(l) - 2\n        for j from i + 1 to length(l) - 1\n            for k from j + 1 to length(l)\n                if (l[i] + l[j] + l[k]) == 0 then\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\nfunction car_race_collision(n: int):\n    collisions = 0\n    for i in range(1, n):\n        if i % 2 == 1:\n            collisions += n - i\n    return collisions\n"}
{"task_id": "HumanEval/41", "completion": "\nfunction car_race_collision(n : int)\n    let total_collisions = 0\n    let left_to_right_cars = list of n unique integers (representing car positions)\n    let right_to_left_cars = list of n unique integers (representing car positions)\n    \n    sort left_to_right_cars in ascending order\n    sort right_to_left_cars in descending order\n    \n    for i from 1 to n\n        if left_to_right_cars[i] <= right_to_left_cars[i]\n            increment total_collisions by 1\n        else\n            break\n        \n    return total_collisions\nend\n"}
{"task_id": "HumanEval/41", "completion": "\nfunction car_race_collision(n: int)\n    let collision_count := 0\n\n    let left_cars := array[1..n] of integer // track the left-moving cars' positions\n    let right_cars := array[1..n] of integer // track the right-moving cars' positions\n\n    for i from 1 to n do\n        left_cars[i] := i * 2 // initialize the left-moving cars' positions\n        right_cars[n-i+1] := (n-i+1) * 2 // initialize the right-moving cars' positions\n\n    while true do\n        let new_left_cars := array[1..n] of integer\n        let new_right_cars := array[1..n] of integer\n\n        for i from 1 to n do\n            new_left_cars[i] := left_cars[i] + 2 // update the left-moving cars' positions\n            new_right_cars[n-i+1] := right_cars[n-i+1] - 2 // update the right-moving cars' positions\n\n            if new_left_cars[i] < new_right_cars[n-i+1] then // check for collisions\n                collision_count := collision_count + 1 // increment the collision count\n            else if new_left_cars[i] >= new_right_cars[n-i+1] then\n                break // stop the loop if there are no more potential collisions\n\n        left_cars := new_left_cars // update the left-moving cars' positions\n        right_cars := new_right_cars // update the right-moving cars' positions\n\n    return collision_count\nend function\n"}
{"task_id": "HumanEval/41", "completion": ""}
{"task_id": "HumanEval/41", "completion": "\nfunction car_race_collision(n: int):\n    let collision_count = 0\n    let left_cars = []\n    let right_cars = []\n\n    for i from 1 to n:\n        left_cars.append(i)\n        right_cars.append(n + i)\n\n    while length(left_cars) > 0 and length(right_cars) > 0:\n        let left_car = head(left_cars)\n        let right_car = head(right_cars)\n\n        if left_car <= right_car:\n            left_cars.pop(0)\n            right_cars.pop(0)\n        else:\n            left_cars.pop(0)\n            collision_count += 1\n\n    return collision_count\n"}
{"task_id": "HumanEval/41", "completion": "\nfunction car_race_collision(n: int):\n    collisions = 0\n    left_to_right = []\n    right_to_left = []\n\n    for i in range(n):\n        left_to_right.append(i)\n        right_to_left.append(n - i - 1)\n\n    left_to_right.sort()\n    right_to_left.sort(reverse=True)\n\n    i = 0\n    j = 0\n    while i < n:\n        if left_to_right[i] <= right_to_left[j]:\n            i += 1\n            j -= 1\n            collisions += 1\n        elif left_to_right[i] > right_to_left[j]:\n            i += 1\n        else:\n            j -= 1\n\n    return collisions\n"}
{"task_id": "HumanEval/41", "completion": "\nprocedure car_race_collision(n: int)\n    let collision_count = 0\n    let left_cars = [0..n-1]\n    let right_cars = [2*n-1..n-1 downto 0]\n    sort(left_cars, right_cars by distance)\n    for i from 0 to n-1 do\n        while left_cars[i] >= right_cars[n-1-i] do\n            increment collision_count\n            decrement right_cars[n-1-i]\n        end while\n    end for\n    return collision_count\nend procedure\n"}
{"task_id": "HumanEval/41", "completion": "\nfunction car_race_collision(n: int):\n    collision_count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if (i + j) % 2 == 1:\n                collision_count = collision_count + 1\n    return collision_count\n"}
{"task_id": "HumanEval/41", "completion": "\nfunction car_race_collision(n: int)\n    let total_collisions = 0\n\n    for i from 1 to n\n        let left_car_distance = i * 1\n        let right_car_distance = (n - i + 1) * 1\n\n        if left_car_distance + 1 <= right_car_distance\n            increment total_collisions by 1\n        end if\n\n    return total_collisions\nend function\n"}
{"task_id": "HumanEval/41", "completion": "function car_race_collision(n: int):\n    total_collisions = 0\n    collisions = 0\n    car_positions_lr = list(range(n))\n    car_positions_rl = list(range(n-1, -1, -1))\n\n    while len(car_positions_lr) > 0 and len(car_positions_rl) > 0:\n        car_positions_lr.sort()\n        car_positions_rl.sort(reverse=True)\n\n        collision_index = 0\n        while collision_index < len(car_positions_lr) and collision_index < len(car_positions_rl):\n            if car_positions_lr[collision_index] <= car_positions_rl[collision_index]:\n                total_collisions += 1\n                car_positions_lr.pop(collision_index)\n                car_positions_rl.pop(collision_index)\n            else:\n                collision_index += 1\n\n    return total_collisions\n"}
{"task_id": "HumanEval/42", "completion": "PROCEDURE incr_list(l: list)\n    FOR each element IN l\n        element = element + 1\n    RETURN l\n"}
{"task_id": "HumanEval/42", "completion": "function incr_list(inputList)\n    for each element in inputList\n        element = element + 1\n    return inputList\n"}
{"task_id": "HumanEval/42", "completion": "\ndefine procedure incrementList(inputList)\n    foreach element in inputList\n        outputList = add(element, 1) to outputList\n    return outputList\n"}
{"task_id": "HumanEval/42", "completion": ""}
{"task_id": "HumanEval/42", "completion": "function incr_list(l)\n    for each element e in l\n        e = e + 1\n    return l\n"}
{"task_id": "HumanEval/42", "completion": "PROCEDURE incr_list(l: list)\n    FOR i = 0 TO LENGTH(l) - 1\n        l[i] = l[i] + 1\n    END FOR\n    RETURN l\n"}
{"task_id": "HumanEval/42", "completion": "function incr_list(input_list):\n    result = []\n    for each element in input_list:\n        result.append(element + 1)\n    return result\n"}
{"task_id": "HumanEval/42", "completion": "\nPROCEDURE incr_list(LIST)\n    FOR EACH ELEMENT IN LIST DO\n        ELEMENT = ELEMENT + 1\n    RETURN LIST\nEND PROCEDURE\n"}
{"task_id": "HumanEval/42", "completion": "\nfunction incr_list(inputList):\n    result = []\n    for num in inputList:\n        result.append(num + 1)\n    return result\n"}
{"task_id": "HumanEval/42", "completion": "\ndefine function incr_list(l)\n    result = new empty list\n    for each element e in l\n        append e + 1 to result\n    return result\n"}
{"task_id": "HumanEval/43", "completion": "algorithm pairs_sum_to_zero(input_list)\n    sort input_list in ascending order\n    for i from 0 to length(input_list) - 1\n        for j from i + 1 to length(input_list)\n            if input_list[i] + input_list[j] == 0\n                return true\n    return false\n"}
{"task_id": "HumanEval/43", "completion": "function pairs_sum_to_zero(l):\n    set = {}\n    for i in range(len(l)):\n        if l[i] in set:\n            return True\n        else:\n            set[-l[i]] = i\n    return Fals"}
{"task_id": "HumanEval/43", "completion": "ALGORITHM: pairs_sum_to_zero\n    INPUT: list l\n    OUTPUT: boolean\n\n    SET seen = {}\n    FOR each number num IN l:\n        IF -num IS IN seen:\n            RETURN TRUE\n        ELSE:\n            seen[num] = TRUE\n    RETURN FALSE\n"}
{"task_id": "HumanEval/43", "completion": "\nfunction pairs_sum_to_zero(l)\n    sort l\n    for i from 0 to length(l)-1\n        for j from i+1 to length(l)-1\n            if l[i] + l[j] == 0\n                return True\n    return False\n"}
{"task_id": "HumanEval/43", "completion": "\nALGORITHM: \n    INPUT: l (list of integers)\n    OUTPUT: boolean\n\n    sort l in ascending order\n    FOR each pair of adjacent elements in l\n        IF the sum of the pair is zero\n            RETURN True\n    END FOR\n    RETURN False\n"}
{"task_id": "HumanEval/43", "completion": "ALGORITHM:\ninput: l (a list of integers)\ninitialize: seen = {}\nfor each element e in l:\n    complement = -e\n    if complement in seen:\n        return True\n    else:\n        seen[e] = True\nreturn Fals"}
{"task_id": "HumanEval/43", "completion": "\nALGORITHM:\nLET input_list BE THE GIVEN LIST OF INTEGERS\nSORT input_list IN ASCENDING ORDER\nFOR each element i IN input_list\n    FOR each element j IN input_list starting from i + 1\n        IF i + j EQUALS 0 THEN\n            RETURN TRUE\n    END IF\nEND FOR\nRETURN FALS"}
{"task_id": "HumanEval/43", "completion": "ALGORITHM:\n    INPUT: A list of integers l\n    OUTPUT: A boolean value indicating whether there are two distinct elements in the list that sum to zero\n\n    SET: seen = an empty set\n    FOR each element e in l:\n        IF -e is in seen:\n            RETURN TRUE\n        ELSE:\n            ADD e to seen\n    RETURN FALS"}
{"task_id": "HumanEval/43", "completion": "DATA list: INPUT\n    FOR each element i in list DO\n        FOR each element j in list DO\n            IF i + j = 0 THEN\n                RETURN True\n        END\n    END\n    RETURN False\n"}
{"task_id": "HumanEval/43", "completion": ""}
{"task_id": "HumanEval/44", "completion": "function change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        result = \"\"\n        while x > 0:\n            remainder = x % base\n            x = floor(x / base)\n            if remainder >= 10:\n                result = chr(ord('a') + remainder - 10) + result\n            else:\n                result = str(remainder) + result\n        return result\n"}
{"task_id": "HumanEval/44", "completion": "\nfunction change_base(x: int, base: int):\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        x, remainder = divmod(x, base)\n        digits.append(str(remainder))\n    return \"\".join(reversed(digits)"}
{"task_id": "HumanEval/44", "completion": "\nfunction change_base(x: int, base: int)\n    if x < base:\n        return str(x)\n    else:\n        remainder = x % base\n        quotient = x // base\n        digits = change_base(quotient, base)\n        if remainder >= 10:\n            remainder = chr(55 + remainder)\n        return str(remainder) + digits\n"}
{"task_id": "HumanEval/44", "completion": "\nALGORITHM:\ndefine function change_base(x: int, base: int)\n    if base <= 1 then\n        error \"base must be greater than 1\"\n    end if\n    if x < base then\n        return convert_int_to_base(x, base)\n    else\n        return change_base(x // base, base) + str(x % base)\n    end if\nend function\n\nfunction convert_int_to_base(x: int, base: int)\n    if x = 0 then\n        return '0'\n    else\n        return convert_int_to_base(x // base, base) + str(x % base)\n    end if\nend functio"}
{"task_id": "HumanEval/44", "completion": "\nALGORITHM change_base(x: int, base: int)\n    VARIABLES\n        remainder := 0\n        result := \"\"\n    WHILE x > 0\n        remainder := x MOD base\n        IF remainder > 9\n            result := 'A' + (remainder - 10) AS CHARACTER\n        ELSE\n            result := STR(remainder) + result\n        x := FLOOR(x / base)\n    RETURN result\n"}
{"task_id": "HumanEval/44", "completion": "\nprocedure change_base(x: int, base: int)\n    if base < 2 or base > 9 then\n        error \"base must be between 2 and 9\"\n    end if\n\n    result = \"\"\n\n    while x > 0 do\n        remainder = x mod base\n        if remainder >= 10 then\n            result = chr(55 + remainder) + result\n        else\n            result = str(remainder) + result\n        end if\n        x = x div base\n    end while\n\n    return result\n"}
{"task_id": "HumanEval/44", "completion": "\nfunction change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        digit = x % base\n        if digit < 10:\n            result = str(digit) + result\n        else:\n            result = chr(ord('A') + digit - 10) + result\n        x = floor(x / base)\n    return result\n"}
{"task_id": "HumanEval/44", "completion": "\nFUNCTION change_base(x: integer, base: integer)\n    IF base <= 1 OR base >= 10 THEN\n        RETURN \"Invalid base\"\n    END IF\n\n    result := \"\"\n    remainder := x MOD base\n    WHILE remainder > 0 DO\n        digit := remainder MOD 10\n        result := INT_TO_STRING(digit) + result\n        remainder := FLOOR(remainder / 10)\n    END WHILE\n    RETURN result\nEND FUNCTION\n"}
{"task_id": "HumanEval/44", "completion": "ALGORITHM:\n    function change_base(x: int, base: int)\n        if x < base\n            return convert_to_digits(x, base)\n        else\n            return change_base(x // base, base) + convert_to_digits(x % base, base)\n\n    function convert_to_digits(n: int, base: int)\n        if n < base\n            return str(n)\n        else\n            return convert_to_digits(n // base, base) + str(n % base)\n\n    x = argument 1\n    base = argument 2\n    result = change_base(x, base)\n    print(result)\n"}
{"task_id": "HumanEval/44", "completion": "function change_base(x: int, base: int)\n    if x = 0 then\n        return \"0\"\n    else\n        digits = []\n        while x > 0 do\n            digit = x mod base\n            if digit >= 10 then\n                digit = chr(48 + digit)\n            else\n                digit = str(digit)\n            end if\n            prepend digit to digits\n            x = x div base\n        end while\n        reverse digits\n        return concatenate(\"0\" if len(digits) = 1 else \"\", digits)\nend function\n"}
{"task_id": "HumanEval/45", "completion": "\nfunction triangle_area(a, h)\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/45", "completion": "\nfunction triangle_area(a, h)\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/45", "completion": "\nfunction triangle_area(a, h)\n    return (a * h) / "}
{"task_id": "HumanEval/45", "completion": "\nfunction triangle_area(a, h)\n    area = (1/2) * a * h\n    return area\n"}
{"task_id": "HumanEval/45", "completion": "\nfunction triangle_area(a, h)\n  return (a * h) / 2\nend functio"}
{"task_id": "HumanEval/45", "completion": "\nfunction triangle_area(a, h)\n    area = (a * h) / 2\n    return area\n"}
{"task_id": "HumanEval/45", "completion": "function triangle_area(a, h)\n    calculate area = (1/2) * a * h\n    return area\n"}
{"task_id": "HumanEval/45", "completion": "function triangle_area(a, h)\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/45", "completion": "\nfunction triangle_area(a, h)\n    return (1/2) * a * h\n"}
{"task_id": "HumanEval/45", "completion": "\nfunction triangle_area(a, h)\n    return (a * h) / 2\n"}
{"task_id": "HumanEval/46", "completion": "function fib4(n: int)\n    if n <= 1 then\n        return 0\n    elif n == 2 then\n        return 2\n    else\n        a, b, c, d := 0, 0, 2, 0\n        for i from 3 to n\n            temp := a + b + c + d\n            a, b, c, d := d, c, b, temp\n        end for\n        return d\n"}
{"task_id": "HumanEval/46", "completion": "\nfunction fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            d, a, b, c = b+c+a, d, a, b\n        return d\n"}
{"task_id": "HumanEval/46", "completion": "\nfunction fib4(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib4_values = [0, 0, 2]\n        for i in range(3, n):\n            next_fib4 = fib4_values[i-1] + fib4_values[i-2] + fib4_values[i-3] + fib4_values[i-4]\n            fib4_values.append(next_fib4)\n        return fib4_values[n-1"}
{"task_id": "HumanEval/46", "completion": "\nfunction fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_values = [0, 0, 2, 0]\n        for i from 4 to n:\n            next_value = fib4_values[i-1] + fib4_values[i-2] + fib4_values[i-3] + fib4_values[i-4]\n            fib4_values.append(next_value)\n        return fib4_values[n-1]\n"}
{"task_id": "HumanEval/46", "completion": "function fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_values = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib4_values[i % 4] = fib4_values[(i-1) % 4] + fib4_values[(i-2) % 4] + fib4_values[(i-3) % 4] + fib4_values[(i-4) % 4]\n        return fib4_values[n % 4]\n"}
{"task_id": "HumanEval/46", "completion": "\nfunction fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, b+c\n        return d\n"}
{"task_id": "HumanEval/46", "completion": "function fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_values = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            next_value = fib4_values[i - 1] + fib4_values[i - 2] + fib4_values[i - 3] + fib4_values[i - 4]\n            fib4_values.append(next_value)\n        return fib4_values[n"}
{"task_id": "HumanEval/46", "completion": "\nfunction fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib4_values = [0, 0, 2, 0]\n        for i from 4 to n:\n            next_value = fib4_values[i-1] + fib4_values[i-2] + fib4_values[i-3] + fib4_values[i-4]\n            fib4_values.append(next_value)\n        return fib4_values[n-1]\n"}
{"task_id": "HumanEval/46", "completion": "function fib4(n: int)\n    if n <= 1 then\n        return 0\n    elif n == 2 then\n        return 2\n    else\n        int[] memo = new int[5]\n        memo[1] = 0; memo[2] = 2; memo[3] = 0; memo[4] = 0\n        for i from 5 to n\n            memo[i] = memo[i-1] + memo[i-2] + memo[i-3] + memo[i-4]\n        return memo[n]\n"}
{"task_id": "HumanEval/46", "completion": "\nfunction fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        memo = [0, 0, 2, 0]\n        for i from 4 to n:\n            memo[i % 4] = memo[(i - 1) % 4] + memo[(i - 2) % 4] + memo[(i - 3) % 4] + memo[(i - 4) % 4]\n        return memo[n % 4]\n"}
{"task_id": "HumanEval/47", "completion": "\nalgorithm Median\n  input: list l\n  if length of l is 0 then\n    return \"Error: empty list\"\n  else\n    sort l in ascending order\n    if length of l is odd then\n      return middle element of l\n    else\n      return average of two middle elements of l\n"}
{"task_id": "HumanEval/47", "completion": "if len(l) % 2 == 0:\n    sorted_l = sorted(l)\n    mid1 = int(len(sorted_l) / 2) - 1\n    mid2 = int(len(sorted_l) / 2)\n    return (sorted_l[mid1] + sorted_l[mid2]) / 2\nelse:\n    sorted_l = sorted(l)\n    return sorted_l[int(len(sorted_l) / 2)]\n"}
{"task_id": "HumanEval/47", "completion": "\nfunction Median(l):\n    sort l from smallest to largest\n    if length of l is odd:\n        return the middle element\n    else:\n        return the average of the two middle elements\n"}
{"task_id": "HumanEval/47", "completion": "\nALGORITHM: \nSORT(l) // sort the list in non-decreasing order\nIF LENGTH(l) IS ODD THEN\n    RETURN l[LENGTH(l)/2]\nELSE\n    i = LENGTH(l)/2 - 0.5\n    RETURN (l[i] + l[i+1]) / 2.0\n"}
{"task_id": "HumanEval/47", "completion": ""}
{"task_id": "HumanEval/47", "completion": "\nALGORITHM:\n    IF length of list is even:\n        sort list\n        median = average of two middle numbers\n    ELSE\n        sort list\n        median = middle number\n    END IF\nEND ALGORITHM\n"}
{"task_id": "HumanEval/47", "completion": ""}
{"task_id": "HumanEval/47", "completion": "if len(l) % 2 == 0:\n  sorted_list = sorted(l)\n  mid1 = len(sorted_list) // 2\n  mid2 = mid1 - 1\n  return (sorted_list[mid1] + sorted_list[mid2]) / 2\nelse:\n  sorted_list = sorted(l)\n  return sorted_list[len(l) // 2]\n"}
{"task_id": "HumanEval/47", "completion": ""}
{"task_id": "HumanEval/47", "completion": "\nalgorithm Median:\n    input: list L\n    if length(L) = 0 then\n        return \"list is empty\"\n    sort L\n    n = length(L)\n    if n is even then\n        mid1 = L[n/2]\n        mid2 = L[(n/2) + 1]\n        return (mid1 + mid2)/2\n    else\n        return L[n/2]\n"}
{"task_id": "HumanEval/48", "completion": "function is_palindrome(text: string)\n    start = 1\n    end = length(text)\n    while start <= end\n        if text[start - 1] != text[end - 1]\n            return false\n        start = start + 1\n        end = end - 1\n    return true\n"}
{"task_id": "HumanEval/48", "completion": "procedure is_palindrome(text)\n    start = 0\n    end_index = length(text) - 1\n    while start < end_index\n        if text[start] \u2260 text[end_index]\n            return false\n        start = start + 1\n        end_index = end_index - 1\n    return true\n"}
{"task_id": "HumanEval/48", "completion": "algorithm isPalindrome(text)\n    input: text, a string\n    output: boolean, whether the text is a palindrome or not\n\n    // create an empty variable to store the reversed text\n    reversedText = \"\"\n\n    // iterate through each character in the text from start to end\n    for i from 0 to length of text - 1\n        // append the character at index i to the end of reversedText\n        reversedText = reversedText + text[i]\n\n    // compare the original text with the reversed text\n    if text == reversedText\n        return true\n    else\n        return false\n"}
{"task_id": "HumanEval/48", "completion": "\nfunction is_palindrome(text: string)\n    input: text: a string\n    output: boolean\n\n    start_index = 0\n    end_index = length(text) - 1\n\n    while start_index <= end_index\n        if character(text, start_index) != character(text, end_index)\n            return false\n        start_index = start_index + 1\n        end_index = end_index - 1\n\n    return true\n"}
{"task_id": "HumanEval/48", "completion": "\nFUNCTION is_palindrome(text: string)\n    IF text IS EMPTY THEN\n        RETURN TRUE\n    END IF\n\n    left = 0\n    right = TEXT LENGTH - 1\n\n    WHILE left < right\n        IF CHARACTER AT INDEX left IN text IS NOT EQUAL TO CHARACTER AT INDEX right IN text THEN\n            RETURN FALSE\n        END IF\n        left = left + 1\n        right = right - 1\n\n    END WHILE\n    RETURN TRUE\nEND FUNCTIO"}
{"task_id": "HumanEval/48", "completion": "\nalgorithm is_palindrome(text: str)\n    input text: a string\n    is_palindrome = true\n\n    // convert the string to lowercase and remove non-alphanumeric characters\n    cleaned_text = \"\"\n    for each char c in text\n        if c is alphanumeric then\n            cleaned_text += c\n\n    // compare the cleaned text with its reverse\n    reversed_text = \"\"\n    for each char c in cleaned_text\n        reversed_text = c + reversed_text\n\n    if cleaned_text == reversed_text then\n        is_palindrome = true\n    else\n        is_palindrome = false\n\n    return is_palindrom"}
{"task_id": "HumanEval/48", "completion": "\nfunction is_palindrome(text: string)\n    if length of text is 0 then\n        return true\n    else\n        if first character of text is equal to last character of text then\n            substring of text from second character to second last character is palindrome\n        else\n            return false\n        end if\n    end if\nend function\n"}
{"task_id": "HumanEval/48", "completion": ""}
{"task_id": "HumanEval/48", "completion": "\nALGORITHM:\n    input: text - a string\n    if text is empty then\n        return TRUE\n    left_index = 0\n    right_index = length of text - 1\n    while left_index <= right_index do\n        if character at index left_index is not equal to character at index right_index then\n            return FALSE\n        increment left_index by 1\n        decrement right_index by 1\n    return TRUE\n"}
{"task_id": "HumanEval/48", "completion": "PROCEDURE is_palindrome(text: str)\n    SET start = 0\n    SET end = LENGTH(text) - 1\n    WHILE start < end\n        IF text[start] != text[end]\n            RETURN FALSE\n        END IF\n        INCREMENT start\n        DECREMENT end\n    END WHILE\n    RETURN TRUE\nEND PROCEDURE\n"}
{"task_id": "HumanEval/49", "completion": "function modp(n, p)\n    if n == 0:\n        return 1\n    result = 1\n    while n > 0\n        if n mod 2 is 1\n            result = (result * (p mod (p-1))) mod p\n        n = n / 2\n        p = (p * (p mod (p-1))) mod p\n    return result\n"}
{"task_id": "HumanEval/49", "completion": "\nfunction modp(n: int, p: int)\n    if n is 0 then\n        return 1\n    else\n        result = 1\n        while n > 0 do\n            if n is odd then\n                result = result * 2 mod p\n            n = n / 2\n        end while\n        return result\n    end if\n"}
{"task_id": "HumanEval/49", "completion": "\nfunction modp(n : int, p : int) \n  result = 1\n  temp = n\n  while temp > 0 do\n    if temp mod 2 is 1 then\n      result = (result * p) mod p\n    temp = temp / 2\n  return result\n"}
{"task_id": "HumanEval/49", "completion": "\nfunction modp(n: int, p: int) \n    if n is 0 then\n        return 1\n    else\n        temp := 1\n        for i from 1 to n do\n            temp := (temp * p) mod p\n        return temp\n    end if\n"}
{"task_id": "HumanEval/49", "completion": "\nfunction modp(n: int, p: int)\n  result = 1\n  while n > 0 do\n    if n mod 2 is 1 then\n      result = (result * n) mod p\n    n = n div 2\n  return result\n"}
{"task_id": "HumanEval/49", "completion": "function modp(n: int, p: int)\n    if n = 0 then\n        return 1\n    else\n        result = 1\n        for i = 1 to n do\n            result = (result * p) mod p\n        return result\n"}
{"task_id": "HumanEval/49", "completion": ""}
{"task_id": "HumanEval/49", "completion": "function modp(n: integer, p: integer)\n    if n = 0 then\n        return 1\n    else\n        result = 1\n        for i from 1 to n do\n            result = (result * p) mod p\n        end for\n        return result\n    end if\n"}
{"task_id": "HumanEval/49", "completion": "function modp(n, p)\n    if n is 0 then\n        return 1\n    else\n        temp <- n mod p\n        if temp is 0 then\n            return modp(n // p, p)\n        else\n            return temp\n"}
{"task_id": "HumanEval/49", "completion": "function modp(n: int, p: int):\n    if n == 0:\n        return 1\n    elif n < 0:\n        if p == 2:\n            return modp(-n, p)\n        else:\n            return pow(-1, n % p, p) * modp(-n // p, p) % p\n    else:\n        if p == 2:\n            return n % 2\n        else:\n            return (modp(n // 2, p) * modp(n // 2, p)) % p\n"}
{"task_id": "HumanEval/50", "completion": "\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/50", "completion": "\nfunction decode_shift(s: str):\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/50", "completion": "\nfunction decode_shift(s: string)\n    result = \"\"\n    for each char in s\n        code = ord(char) - 5 mod 26 + ord(\"a\")\n        if code < ord(\"a\")\n            code += 26\n        result = result + chr(code)\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/50", "completion": "\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/50", "completion": "\nfunction decode_shift(s: str):\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/50", "completion": "\nfunction decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\nFUNCTION remove_vowels(text)\n    result = \"\"\n    FOR each char IN text\n        IF char IS NOT 'a' AND char IS NOT 'e' AND char IS NOT 'i' AND char IS NOT 'o' AND char IS NOT 'u' AND char IS NOT 'A' AND char IS NOT 'E' AND char IS NOT 'I' AND char IS NOT 'O' AND char IS NOT 'U'\n            THEN\n                result = result + char\n        END IF\n    END FOR\n    RETURN result\nEND FUNCTIO"}
{"task_id": "HumanEval/51", "completion": "\nfunction remove_vowels(text)\n    result = \"\"\n    for each char in text\n        if char is not 'a' and char is not 'e' and char is not 'i' and char is not 'o' and char is not 'u' and char is not 'A' and char is not 'E' and char is not 'I' and char is not 'O' and char is not 'U'\n            result = result + char\n    return result\n"}
{"task_id": "HumanEval/51", "completion": "function remove_vowels(text)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for each char in text\n        if char not in vowels\n            result = result + char\n    return result\n"}
{"task_id": "HumanEval/51", "completion": "function remove_vowels(text)\n    vowel_set = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    result = \"\"\n    for char in text:\n        if char not in vowel_set:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/51", "completion": "\nfunction remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for char in text:\n        if char not in vowels and not char.isalpha() then\n            result += char\n        else if not char.isalpha() then\n            result += char\n    return result\n"}
{"task_id": "HumanEval/51", "completion": "\nfunction remove_vowels(text)\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/51", "completion": "\nPROBLEM: \nremove_vowels is a function that takes string and returns string without vowels.\nALGORITHM:\n- Initialize an empty string, result.\n- Iterate over each character in the input string.\n- IF the character is not a vowel, append it to the result string.\n- RETURN the result string.\n\nCODE:\n"}
{"task_id": "HumanEval/51", "completion": "function remove_vowels(text)\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text\n        if char not in vowels\n            result = result + char\n    return resul"}
{"task_id": "HumanEval/51", "completion": "function remove_vowels(text)\n    vowels <- {'a', 'e', 'i', 'o', 'u'}\n    result <- ''\n    for each char in text\n        if char not in vowels then\n            result <- result + char\n    return resul"}
{"task_id": "HumanEval/51", "completion": "\nPROCEDURE remove_vowels(text)\n    vowels <- { 'a', 'e', 'i', 'o', 'u' }\n    result <- \"\"\n    \n    FOR each character in text\n        IF character IS NOT IN vowels\n            result <- result + character\n    END FOR\n    \n    RETURN result\nEND PROCEDURE\n"}
{"task_id": "HumanEval/52", "completion": ""}
{"task_id": "HumanEval/52", "completion": "\nfunction below_threshold(l, t):\n  for each element e in l:\n    if e >= t:\n      return false\n  return true\n"}
{"task_id": "HumanEval/52", "completion": "\nALGORITHM below_threshold\n   INPUT: list l, int t\n   OUTPUT: boolean\n\n   FOR each element e IN l\n      IF e >= t\n         RETURN FALSE\n   END IF\n   RETURN TRU"}
{"task_id": "HumanEval/52", "completion": ""}
{"task_id": "HumanEval/52", "completion": ""}
{"task_id": "HumanEval/52", "completion": "\nfunction below_threshold(l, t):\n    result = True\n    for num in l:\n        if num >= t:\n            result = False\n            break\n    return resul"}
{"task_id": "HumanEval/52", "completion": "\nfunction below_threshold(l, t)\n  for each element e in l\n    if e >= t\n      return false\n  return true\n"}
{"task_id": "HumanEval/52", "completion": "function below_threshold(l, t)\n    for each element in l:\n        if element >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/52", "completion": "\nALGORITHM:\n  input: list l, integer t\n  result = TRUE\n  FOR each element e IN l\n    IF e >= t\n      result = FALSE\n  END FOR\n  RETURN result\n"}
{"task_id": "HumanEval/52", "completion": "\nALGORITHM\n  DECLARE a boolean variable 'result' AS FALSE\n  DECLARE a variable 'i' AS 0\n  LOOP THROUGH list 'l' from index 'i' to length of 'l' - 1\n    IF element at index 'i' in 'l' IS greater than or equal to 't'\n      SET 'result' TO FALSE\n      BREAK\n    END IF\n    INCREMENT 'i' BY 1\n  END LOOP\n  RETURN 'result"}
{"task_id": "HumanEval/53", "completion": "\nALGORITHM:\nDATA TYPE x, y: INTEGER\nFUNCTION add(x, y): INTEGER\nBEGIN\n    result = x + y\n    RETURN result\nEND\n"}
{"task_id": "HumanEval/53", "completion": ""}
{"task_id": "HumanEval/53", "completion": "\nALGORITHM:\n"}
{"task_id": "HumanEval/53", "completion": "\nALGORITHM:\nDATA TYPE x, y: INTEGER\nFUNCTION add(x, y): INTEGER\nBEGIN\n    SUM = 0\n    SUM = x + y\n    RETURN SUM\nEND FUNCTIO"}
{"task_id": "HumanEval/53", "completion": "PROCEDURE add(x: int, y: int)\n    IF x IS INTEGER AND y IS INTEGER THEN\n        RETURN x + y\n    ELSE\n        ERROR \"Inputs must be integers\"\n    END IF\n"}
{"task_id": "HumanEval/53", "completion": "DEFINITION add(x: int, y: int)\n    result <- x + y\n    RETURN resul"}
{"task_id": "HumanEval/53", "completion": "\nprocedure add(x: int, y: int)\n    result = 0\n    result = result + x\n    result = result + y\n    return result\n"}
{"task_id": "HumanEval/53", "completion": "\nALGORITHM add(x: int, y: int)\n    INPUT: Two integers x and y\n    OUTPUT: The sum of x and y\n\n    SET sum = 0\n    ADD x to sum\n    ADD y to sum\n    RETURN sum\n"}
{"task_id": "HumanEval/53", "completion": ""}
{"task_id": "HumanEval/53", "completion": "ALGORITHM: ADDITION OF TWO NUMBERS\nDECLARE function add(x: int, y: int)\n    DECLARE result: int\n    SET result = x + y\n    RETURN result\n"}
{"task_id": "HumanEval/54", "completion": "\nfunction same_chars(s0 : str, s1 : str) \n    sort(s0)\n    sort(s1)\n    return s0 == s1\n"}
{"task_id": "HumanEval/54", "completion": "function same_chars(s0: str, s1: str)\n    sorted_s0 = sort(s0)\n    sorted_s1 = sort(s1)\n    return sorted_s0 == sorted_s1\n"}
{"task_id": "HumanEval/54", "completion": "\nFunction same_chars(s0: string, s1: string)\n    Create a dictionary to store the count of each character in s0\n    Create an empty dictionary to store the count of each character in s1\n    For each character in s0:\n        Increment the count of that character in the dictionary by 1\n    For each character in s1:\n        Increment the count of that character in the dictionary by 1\n    If the two dictionaries are equal, return True\n    Otherwise, return False\nEnd Functio"}
{"task_id": "HumanEval/54", "completion": "function same_chars(s0: str, s1: str):\n    # convert both strings to lower case for case-insensitive comparison\n    s0 = s0.lower()\n    s1 = s1.lower()\n    \n    # sort the characters in both strings\n    s0_sorted = sorted(s0)\n    s1_sorted = sorted(s1)\n    \n    # compare the sorted strings\n    return s0_sorted == s1_sorte"}
{"task_id": "HumanEval/54", "completion": "\nfunction same_chars(s0: str, s1: str):\n    sorted_s0 = sort(s0)\n    sorted_s1 = sort(s1)\n    return sorted_s0 == sorted_s1\n"}
{"task_id": "HumanEval/54", "completion": "function same_chars(s0: string, s1: string)\n    // Convert both strings to lower case\n    s0 = to_lower(s0)\n    s1 = to_lower(s1)\n\n    // Remove duplicates from each string\n    s0 = remove_duplicates(s0)\n    s1 = remove_duplicates(s1)\n\n    // Sort both strings\n    s0 = sort(s0)\n    s1 = sort(s1)\n\n    // Check if both strings are equal\n    if s0 == s1 then\n        return true\n    else\n        return false\n    end if\nend function\n"}
{"task_id": "HumanEval/54", "completion": "ALGORITHM same_chars(s0, s1)\n    SET s0_count = MAP()  // Create an empty map to store character counts for s0\n    SET s1_count = MAP()  // Create an empty map to store character counts for s1\n\n    FOR EACH char IN s0 DO\n        IF s0_count HAS char THEN\n            s0_count[char] = s0_count[char] + 1\n        ELSE\n            s0_count[char] = 1\n    END FOR\n\n    FOR EACH char IN s1 DO\n        IF s1_count HAS char THEN\n            s1_count[char] = s1_count[char] + 1\n        ELSE\n            s1_count[char] = 1\n        END IF\n    END FOR\n\n    FOR EACH key IN s0_count DO\n        IF s0_count[key] != s1_count[key] THEN\n            RETURN FALSE\n        END IF\n    END FOR\n\n    RETURN TRUE\n"}
{"task_id": "HumanEval/54", "completion": "\nfunction same_chars(s0, s1)\n    if length(s0) != length(s1)\n        return False\n    count = {}\n    for each c in s0\n        if c in count\n            count[c] += 1\n        else\n            count[c] = 1\n    for each c in s1\n        if c in count\n            count[c] -= 1\n        else\n            return False\n    for each key in count\n        if count[key] > 0\n            return False\n    return True\n"}
{"task_id": "HumanEval/54", "completion": "\nALGORITHM:\n    FUNCTION same_chars(s0, s1)\n        SORT s0 IN ASCENDING ORDER\n        SORT s1 IN ASCENDING ORDER\n        IF s0 IS EQUAL TO s1\n            RETURN TRUE\n        ELSE\n            RETURN FALSE\n    END FUNCTION\n"}
{"task_id": "HumanEval/54", "completion": "\nfunction same_chars(s0: str, s1: str)\n    set s0_count = {}\n    set s1_count = {}\n\n    foreach c in s0\n        if s0_count.contains(c)\n            s0_count[c] += 1\n        else\n            s0_count[c] = 1\n\n    foreach c in s1\n        if s1_count.contains(c)\n            s1_count[c] += 1\n        else\n            s1_count[c] = 1\n\n    for each key in s0_count\n        if not s1_count.contains(key) or s0_count[key] != s1_count[key]\n            return false\n\n    return true\n"}
{"task_id": "HumanEval/55", "completion": "function fib(n: int)\n  if n <= 1 then\n    return n\n  else\n    a, b = 1, 1\n    for i from 2 to n\n      temp = a\n      a = b\n      b = temp + b\n    return a\n"}
{"task_id": "HumanEval/55", "completion": "\nfunction fib(n: int)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/55", "completion": ""}
{"task_id": "HumanEval/55", "completion": "\nfunction fib(n: int)\n    if n <= 1 then\n        return 1\n    else\n        a, b = 1, 1\n        for i from 2 to n\n            t = a + b\n            a = b\n            b = t\n        return b\n"}
{"task_id": "HumanEval/55", "completion": "function fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/55", "completion": "\nfunction fib(n: int)\n    if n <= 1 then\n        return n\n    else\n        a, b = 0, 1\n        for i from 2 to n\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/55", "completion": "function fib(n: int)\n    if n <= 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for i from 2 to n:\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/55", "completion": ""}
{"task_id": "HumanEval/55", "completion": "\nALGORITHM FIBONACCI\n    INPUT: n, an integer\n    OUTPUT: The nth Fibonacci number\n\n    IF n <= 1 THEN\n        RETURN n\n    ELSE\n        a := 0\n        b := 1\n        FOR i := 2 TO n DO\n            temp := a + b\n            a := b\n            b := temp\n        END FOR\n        RETURN b\n    END IF\n"}
{"task_id": "HumanEval/55", "completion": "\nfunction fib(n: int)\n    if n <= 1 then\n        return n\n    else\n        a, b = 1, 1\n        for i from 2 to n do\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\nFUNCTION correct_bracketing(brackets)\n    stack = empty stack\n    FOR each character c in brackets\n        IF c is <\n            PUSH c onto stack\n        ELSE IF c is >\n            IF stack is empty\n                RETURN False\n            ELSE\n                POP from stack\n    RETURN stack is empt"}
{"task_id": "HumanEval/56", "completion": "\nfunction correct_bracketing(brackets: str):\n    stack = new stack()\n    for each char in brackets:\n        if char == \"<\":\n            stack.push(\"<\")\n        elif char == \">\":\n            if stack.isEmpty() or stack.pop() != \"<\":\n                return False\n    return stack.isEmpty()\n"}
{"task_id": "HumanEval/56", "completion": "function correct_bracketing(brackets):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == "}
{"task_id": "HumanEval/56", "completion": "\nfunction correct_bracketing(brackets: str)\n    stack = new stack\n    for each character in brackets\n        if character is <\n            push < onto stack\n        else if character is >\n            if stack is empty or top of stack is not <\n                return false\n            else\n                pop < from stack\n    return stack is empty\n"}
{"task_id": "HumanEval/56", "completion": "\nfunction correct_bracketing(brackets: str)\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if stack.isEmpty():\n                return False\n            stack.pop()\n    return stack.isEmpty("}
{"task_id": "HumanEval/56", "completion": "\nfunction correct_bracketing(brackets: str)\n    stack = new stack()\n    for each char in brackets:\n        if char == '<':\n            stack.push(char)\n        elif char == '>':\n            if stack.isEmpty():\n                return False\n            stack.pop()\n    return stack.isEmpty()\n"}
{"task_id": "HumanEval/56", "completion": "\ninput = brackets\nstack = []\nfor char in input:\n    if char == '<':\n        stack.append(char)\n    elif char == '>':\n        if len(stack) == 0:\n            return False\n        stack.pop()\nif len(stack) > 0:\n    return False\nreturn Tru"}
{"task_id": "HumanEval/56", "completion": "input = brackets\nstack = []\nfor char in input:\n    if char == '<':\n        stack.append(char)\n    elif char == '>':\n        if len(stack) == 0:\n            return False\n        else:\n            stack.pop()\nif len(stack) != 0:\n    return False\nreturn True\n"}
{"task_id": "HumanEval/56", "completion": "function correct_bracketing(brackets: string)\n    stack = new Stack()\n    for each char in brackets\n        if char is '<'\n            stack.push('<')\n        elif char is '>'\n            if stack.isEmpty() or stack.pop() != '<'\n                return False\n    return stack.isEmpty()\n"}
{"task_id": "HumanEval/56", "completion": "algorithm\n    input: brackets, a string of \"<\" and \">\"\n    initialize: count = 0\n    for each character c in brackets:\n        if c is \"<\":\n            count = count + 1\n        elif c is \">\":\n            if count <= 0:\n                return false\n            count = count - 1\n    return count == 0\n"}
{"task_id": "HumanEval/57", "completion": "\nPROCEDURE monotonic(l: list)\n    IF length(l) < 2 THEN\n        RETURN TRUE\n    END IF\n    i := 1\n    WHILE i < length(l) DO\n        IF l[i] <= l[i-1] THEN\n            IF i = 1 OR l[i] > l[i-2] THEN\n                i := i + 1\n            ELSE\n                RETURN FALSE\n            END IF\n        ELSE\n            i := i + 1\n        END IF\n    END WHILE\n    RETURN TRUE\nEND PROCEDURE\n"}
{"task_id": "HumanEval/57", "completion": "\nALGORITHM:\n  FUNCTION monotonic(l)\n    IF l IS EMPTY THEN\n      RETURN TRUE\n    END IF\n    DIR = \"increasing\"\n    PREVIOUS_ELEMENT = l[0]\n    \n    FOR i FROM 1 TO LENGTH(l) - 1\n      IF l[i] > PREVIOUS_ELEMENT THEN\n        IF DIR \u2260 \"decreasing\" THEN\n          RETURN FALSE\n        END IF\n      ELSE IF l[i] < PREVIOUS_ELEMENT THEN\n        DIR = \"decreasing\"\n      END IF\n      PREVIOUS_ELEMENT = l[i]\n    END FOR\n    \n    RETURN TRUE\n  END FUNCTION\n"}
{"task_id": "HumanEval/57", "completion": "\nfunction monotonic(l: list):\n  if len(l) < 2:\n    return True\n  if l[0] > l[1]:\n    for i from 1 to len(l)-1:\n      if l[i-1] <= l[i]:\n        return False\n    return True\n  else:\n    for i from 1 to len(l)-1:\n      if l[i-1] >= l[i]:\n        return False\n    return True\n"}
{"task_id": "HumanEval/57", "completion": "function monotonic(l)\n    i = 1\n    while i < len(l)\n        if l[i-1] > l[i]\n            if i == 1 or l[i-2] <= l[i-1]\n                return false\n            else\n                return true\n        elif l[i-1] < l[i]\n            if i == 1 or l[i-2] >= l[i-1]\n                return false\n            else\n                return true\n        else\n            i += 1\n    return true\n"}
{"task_id": "HumanEval/57", "completion": "\nfunction monotonic(l):\n    if len(l) < 2:\n        return True\n    ascending = True\n    descending = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            descending = False\n        elif l[i] < l[i-1]:\n            ascending = False\n    return ascending or descending\n"}
{"task_id": "HumanEval/57", "completion": "\nfunction monotonic(l: list)\n    if length of l is 1 then\n        return true\n    else\n        if l[1] <= l[2] then\n            for i from 3 to end of l\n                if l[i-1] > l[i] then\n                    return false\n            return true\n        else\n            for i from 3 to end of l\n                if l[i-1] < l[i] then\n                    return false\n            return true\n    end if\nend functio"}
{"task_id": "HumanEval/57", "completion": "\nalgorithm monotonic(inputList):\n    if (inputList.length == 0) then\n        return true\n    else\n        if (inputList[0] <= inputList[1]) then\n            for i from 1 to inputList.length-2 do\n                if (inputList[i] <= inputList[i+1]) then\n                    continue\n                else\n                    return false\n            end for\n            return true\n        else\n            for i from 1 to inputList.length-2 do\n                if (inputList[i] >= inputList[i+1]) then\n                    continue\n                else\n                    return false\n            end for\n            return true\n    end if\nend algorithm\n"}
{"task_id": "HumanEval/57", "completion": "\nALGORITHM:\n    INPUT: a list of integers\n    OUTPUT: True if list is monotonically increasing or decreasing, False otherwise\n    IF length of input list is less than 2\n        RETURN True\n    FOR i FROM 0 TO length of list - 2\n        IF (list[i+1] > list[i]) AND (list[i+1] > list[i+2])\n            RETURN False\n        IF (list[i+1] < list[i]) AND (list[i+1] < list[i+2])\n            RETURN False\n    RETURN True\n"}
{"task_id": "HumanEval/57", "completion": "function monotonic(l):\n    isIncreasing = True\n    isDecreasing = True\n    previousElement = l[0]\n    \n    for element in l[1:]:\n        if element < previousElement:\n            isIncreasing = False\n        elif element > previousElement:\n            isDecreasing = False\n        previousElement = element\n    \n    return isIncreasing or isDecreasin"}
{"task_id": "HumanEval/57", "completion": "\nfunction monotonic(l):\n    increasing = True\n    decreasing = True\n    prev = l[0]\n    for each item in l:\n        if item < prev:\n            increasing = False\n        elif item > prev:\n            decreasing = False\n        prev = item\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\nALGORITHM:\n    Set S = set()\n    For each element e in l1:\n        Add e to S\n    For each element e in l2:\n        If e in S:\n            Append e to result\n    Sort result in ascending order\n    Return result\n"}
{"task_id": "HumanEval/58", "completion": "\nfunction common(l1: list, l2: list):\n    # Convert both lists to sets for efficient operations\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets (common elements)\n    common_elements = set1.intersection(set2)\n\n    # Convert the set back to a list and sort it\n    result = sorted(list(common_elements))\n\n    return result\n"}
{"task_id": "HumanEval/58", "completion": "\nsort l1 and l2 in ascending order\niterate through both lists simultaneously using a while loop\n    while there are elements in both lists\n        if current element in l1 is equal to current element in l2\n            add the element to a new list\n            remove the element from both l1 and l2\n        elif current element in l1 is less than current element in l2\n            move to the next element in l1\n        else\n            move to the next element in l2\n    return the new lis"}
{"task_id": "HumanEval/58", "completion": "function common(l1, l2):\n    # Convert the lists to sets\n    set1 = {}\n    set2 = {}\n    for item in l1:\n        if item not in set1:\n            set1[item] = True\n    for item in l2:\n        if item not in set2:\n            set2[item] = True\n\n    # Find the intersection of the sets\n    common_elements = set1.keys() & set2.keys()\n\n    # Convert the set back to a list and sort it\n    result = []\n    for item in common_elements:\n        if item in set1 and item in set2:\n            result.append(item)\n\n    return sorted(result)\n"}
{"task_id": "HumanEval/58", "completion": "function common(l1, l2) is\n    set intersection = empty set\n    for each item in l1 do\n        if item is in l2 then\n            add item to intersection\n    end for\n    return sort(intersection)\n"}
{"task_id": "HumanEval/58", "completion": "ALGORITHM:\n  FUNCTION common(l1: LIST, l2: LIST)\n    DECLARE result: LIST\n    DECLARE i: INTEGER = 0\n    DECLARE j: INTEGER = 0\n    DECLARE k: INTEGER = 0\n    \n    WHILE i < LENGTH(l1) AND j < LENGTH(l2)\n      IF l1[i] = l2[j]\n        IF NOT l1[i] IN result\n          result[k] = l1[i]\n          k = k + 1\n        END IF\n        i = i + 1\n        j = j + 1\n      ELSE IF l1[i] < l2[j]\n        i = i + 1\n      ELSE\n        j = j + 1\n      END IF\n    END WHILE\n    \n    RETURN sort(result)\n  END FUNCTIO"}
{"task_id": "HumanEval/58", "completion": "algorithm common(list l1, list l2):\n   set intersection = {}\n   for each item in l1:\n      if item is in l2 then\n         add item to intersection\n   sort intersection\n   return intersection\n"}
{"task_id": "HumanEval/58", "completion": "data = []\nfor item in set(l1) & set(l2):\n    data.append(item)\ndata.sort()\nreturn data\n"}
{"task_id": "HumanEval/58", "completion": "function common(l1, l2) is\n    set S = empty set\n    for each element e in l1 do\n        if e is in l2 then\n            add e to S\n    sort S\n    return S\n"}
{"task_id": "HumanEval/58", "completion": "\nALGORITHM\n    FUNCTION common(l1, l2)\n        SET result = EMPTY LIST\n        SORT l1 AND l2 IN PLACE\n        INDEX = 0\n        WHILE INDEX < LENGTH OF l1 AND INDEX < LENGTH OF l2\n            IF l1[INDEX] == l2[INDEX]\n                ADD l1[INDEX] TO result\n                INCREMENT INDEX\n            ELSE IF l1[INDEX] < l2[INDEX]\n                INCREMENT INDEX\n            ELSE\n                DECREMENT INDEX\n        END WHILE\n        RETURN result\n    END FUNCTIO"}
{"task_id": "HumanEval/59", "completion": "function largest_prime_factor(n)\n    max_factor = 0\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            while n % i == 0\n                n = n / i\n            max_factor = i\n        i = i + 1\n    return max_factor\n"}
{"task_id": "HumanEval/59", "completion": "\nfunction largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            largest_prime = i\n            while n % largest_prime == 0\n                n = n / largest_prime\n            return largest_prime\n        i = i + 1\n    return n\n"}
{"task_id": "HumanEval/59", "completion": "\nfunction largest_prime_factor(n: int):\n    largest = 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return largest\n"}
{"task_id": "HumanEval/59", "completion": "\nfunction largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/59", "completion": "\nfunction largest_prime_factor(n)\n    max_prime = 2\n    for i from 2 to sqrt(n) by 1\n        if n mod i is 0\n            while n mod i is 0\n                n = n / i\n            end while\n            max_prime = i\n        end if\n    end for\n    return max_prim"}
{"task_id": "HumanEval/59", "completion": "\nfunction largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n        else:\n            i = i + 1\n    return n\n"}
{"task_id": "HumanEval/59", "completion": "\nfunction largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return "}
{"task_id": "HumanEval/59", "completion": "\nfunction largest_prime_factor(n)\n    max_factor = 1\n    i = 2\n    while i * i <= n\n        if n mod i == 0\n            while n mod i == 0\n                n = n div i\n            max_factor = i\n        i = i + 1\n    return max_factor\n"}
{"task_id": "HumanEval/59", "completion": "\nfunction largest_prime_factor(n)\n    i = 2\n    while i * i <= n\n        if n % i == 0\n            max_prime_factor = i\n            while n % i == 0\n                n = n / i\n            return max_prime_factor\n        increment i by 1\n    return n\n"}
{"task_id": "HumanEval/59", "completion": "\nfunction largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return "}
{"task_id": "HumanEval/60", "completion": "function sum_to_n(n: int)\n    result = 0\n    i = 1\n    while i <= n:\n        result = result + i\n        i = i + 1\n    return result\n"}
{"task_id": "HumanEval/60", "completion": "\nALGORITHM sum_to_n(n: integer)\n   result := 0\n   FOR i FROM 1 TO n\n      result := result + i\n   END FOR\n   RETURN result\n"}
{"task_id": "HumanEval/60", "completion": "\nfunction sum_to_n(n: int)\n    result = 0\n    for i from 1 to n\n        result = result + i\n    return result\n"}
{"task_id": "HumanEval/60", "completion": "FUNCTION sum_to_n(n)\n   SET sum = 0\n   FOR i FROM 1 TO n\n      sum = sum + i\n   END FOR\n   RETURN sum\n"}
{"task_id": "HumanEval/60", "completion": "Procedure sum_to_n(n)\n    result = 0\n    i = 1\n    While i <= n\n        result = result + i\n        i = i + 1\n    return result\n"}
{"task_id": "HumanEval/60", "completion": "\nfunction sum_to_n(n: int)\n    result = 0\n    i = 1\n    while i <= n\n        result = result + i\n        i = i + 1\n    return result\n"}
{"task_id": "HumanEval/60", "completion": ""}
{"task_id": "HumanEval/60", "completion": "\nALGORITHM:\n    DECLARE sum = 0\n    FOR i FROM 1 TO n\n        sum = sum + i\n    RETURN sum\n"}
{"task_id": "HumanEval/60", "completion": "function sum_to_n(n)\n    total = 0\n    i = 1\n    while i <= n\n        total = total + i\n        i = i + 1\n    end while\n    return total\n"}
{"task_id": "HumanEval/60", "completion": "SUM = 0\nFOR i FROM 1 TO n\n    SUM = SUM + i\nEND FOR\nRETURN SU"}
{"task_id": "HumanEval/61", "completion": "function correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/61", "completion": "\nfunction correct_bracketing(brackets: str):\n    stack = new stack()\n    for each char in brackets:\n        if char == \"(\":\n            stack.push(char)\n        elif char == \")\":\n            if stack.is_empty():\n                return false\n            stack.pop()\n    return stack.is_empty("}
{"task_id": "HumanEval/61", "completion": "data stack empty-stack\n    loop each character in brackets from left to right:\n        if character is '(' then push it to stack\n        if character is ')' then\n            if stack is empty then return false\n            else pop stack\n    if stack is not empty then return false\n    return tru"}
{"task_id": "HumanEval/61", "completion": "function correct_bracketing(brackets: string):\n    stack = new stack\n    for each character in brackets:\n        if character is \"(\":\n            push character onto stack\n        elif character is \")\":\n            if stack is empty:\n                return False\n            else:\n                pop from stack\n    return stack is empty\n"}
{"task_id": "HumanEval/61", "completion": "\nfunction correct_bracketing(brackets: str)\n    stack = new empty stack\n    for each character in brackets:\n        if character is '(' then\n            push '(' onto stack\n        elif character is ')' then\n            if stack is empty then\n                return false\n            else\n                pop '(' from stack\n        end if\n    end for\n    return stack is empt"}
{"task_id": "HumanEval/61", "completion": "\nfunction correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/61", "completion": "function correct_bracketing(brackets: string):\n    stack = new stack\n    for each character c in brackets:\n        if c is '(':\n            stack.push(c)\n        elif c is ')':\n            if stack.isEmpty():\n                return false\n            else:\n                stack.pop()\n    return stack.isEmpty()\n"}
{"task_id": "HumanEval/61", "completion": "function correct_bracketing(brackets):\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/61", "completion": "\nfunction correct_bracketing(brackets):\n    stack = empty stack\n    for each character in brackets:\n        if character is '(' then push it to stack\n        elif character is ')' then\n            if stack is empty then return False\n            pop from stack\n    return stack is empt"}
{"task_id": "HumanEval/61", "completion": "\nfunction correct_bracketing(brackets: string)\n    stack = new empty stack\n    for each character c in brackets:\n        if c is \"(\" then push it onto stack\n        else if stack is not empty and top of stack is \"(\" then pop from stack\n        else return false\n    return stack is empty\n"}
{"task_id": "HumanEval/62", "completion": "\nfunction derivative(xs: list):\n    if length(xs) == 1:\n        return [0]\n    else if length(xs) == 2:\n        return [xs[1]]\n    else:\n        result = [0]\n        for i in range(1, length(xs) - 1):\n            result.append(i * xs[i])\n        return result\n"}
{"task_id": "HumanEval/62", "completion": "\nfunction derivative(xs: list):\n    n = length(xs)\n    result = []\n    \n    for i from 1 to n - 1:\n        result.append(i * xs[i])\n    \n    return result\n"}
{"task_id": "HumanEval/62", "completion": "function derivative(xs: list):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n"}
{"task_id": "HumanEval/62", "completion": "\nfunction derivative(xs: list):\n    result = []\n    power = 1\n    for i in range(1, len(xs)):\n        result.append(power * xs[i])\n        power += 1\n    return result\n"}
{"task_id": "HumanEval/62", "completion": "function derivative(xs: list)\n    result = new list\n    for i from 1 to length(xs) - 1\n        result.append(i * xs[i])\n    return result\n"}
{"task_id": "HumanEval/62", "completion": "\nfunction derivative(xs: list)\n    result = []\n    for i from 1 to length(xs) - 1 do\n        result.append(i * xs[i])\n    return result\n"}
{"task_id": "HumanEval/62", "completion": "\nALGORITHM DERIVATIVE(xs):\n    result = []\n    power = 1\n    for i from 1 to length of xs - 1:\n        result.append(power * xs[i])\n        power = power * (length of xs - i)\n    RETURN result\n"}
{"task_id": "HumanEval/62", "completion": "\nprocedure derivative(xs: list)\n    result = []\n    for i from 1 to length(xs) - 1\n        result.append(i * xs[i])\n    return result\nend procedure\n"}
{"task_id": "HumanEval/62", "completion": "\nfunction derivative(xs : list) {\n  result = []\n  for i from 1 to len(xs)-1 {\n    result.append(i * xs[i])\n  }\n  return result\n"}
{"task_id": "HumanEval/62", "completion": "\nfunction derivative(xs: list):\n    result = []\n    degree = len(xs) - 1\n    for i in range(1, degree + 1):\n        result.append(i * xs[i])\n    return resul"}
{"task_id": "HumanEval/63", "completion": "\nfunction fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return "}
{"task_id": "HumanEval/63", "completion": "function fibfib(n: int)\n    if n <= 1 then\n        return 0\n    elseif n == 2 then\n        return 1\n    else\n        a, b, c = 0, 0, 1\n        for i from 3 to n\n            c = a + b + c\n            a, b = b, c\n        end for\n        return c\n"}
{"task_id": "HumanEval/63", "completion": "\nfunction fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c\n"}
{"task_id": "HumanEval/63", "completion": "\nfunction fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(2, n):\n            a, b, c = b, c, a + b + c\n        return "}
{"task_id": "HumanEval/63", "completion": "\nfunction fibfib(n : int)\n    if n <= 1 then\n        return 0\n    else if n == 2 then\n        return 1\n    else\n        a, b, c = 0, 0, 1\n        for i from 3 to n\n            temp = a + b + c\n            a = b\n            b = c\n            c = temp\n        return c\n"}
{"task_id": "HumanEval/63", "completion": "function fibfib(n: int)\n    if n <= 1 then\n        return 0\n    else if n == 2 then\n        return 1\n    else\n        a, b, c := 0, 0, 1\n        for i from 3 to n do\n            d := a + b + c\n            a, b, c := c, d, a + b + c\n        return c\n"}
{"task_id": "HumanEval/63", "completion": "ALGORITHM\n    FUNCTION fibfib(n: int)\n        IF n = 0 THEN\n            RETURN 0\n        ELSE IF n = 1 THEN\n            RETURN 0\n        ELSE IF n = 2 THEN\n            RETURN 1\n        ELSE\n            a, b, c = 0, 0, 1\n            FOR i = 3 TO n\n                a, b, c = b, c, a + b + c\n            RETURN c\n"}
{"task_id": "HumanEval/63", "completion": "\nfunction fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i from 3 to n:\n            a, b, c = b, c, a + b + c\n        return c\n"}
{"task_id": "HumanEval/63", "completion": "\nfunction fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c\n"}
{"task_id": "HumanEval/63", "completion": "\nfunction fibfib(n as integer):\n    if n = 0 then\n        return 0\n    elif n = 1 then\n        return 0\n    elif n = 2 then\n        return 1\n    else\n        a, b, c = 0, 0, 1\n        for i from 3 to n:\n            a, b, c = b, c, a + b + c\n        return c\n"}
{"task_id": "HumanEval/64", "completion": "\nbegin\n    function vowels_count(s)\n        count := 0\n        for each character c in s do\n            if c is \"a\" or c is \"e\" or c is \"i\" or c is \"o\" or c is \"u\" then\n                if index of c in s is length of s - 1 then\n                    count := count + 1\n                else\n                    count := count + 1\n            end if\n        end for\n        return count\n    end function\n"}
{"task_id": "HumanEval/64", "completion": "\nFUNCTION vowels_count(s)\n    DECLARE count AS INTEGER\n    SET count TO 0\n    FOR EACH char IN s\n        IF (char IS 'a' OR char IS 'e' OR char IS 'i' OR char IS 'o' OR char IS 'u') THEN\n            IF (char IS NOT 'Y' OR s INDEXOF 'Y' IS s LENGTH) THEN\n                SET count TO count + 1\n            END IF\n        END IF\n    END FOR\n    RETURN count\nEND FUNCTIO"}
{"task_id": "HumanEval/64", "completion": "\nfunction vowels_count(s)\n    count := 0\n    lower_s := tolower(s)\n    for each char c in s do\n        if c is 'a' or c is 'e' or c is 'i' or c is 'o' or c is 'u'\n            or (c is 'y' and position(c, s) = length(s) - 1)\n            count := count + 1\n    return count\n"}
{"task_id": "HumanEval/64", "completion": "\nfunction vowels_count(s)\n    count = 0\n    for i from 0 to length(s) - 1 do\n        if s[i] equals \"a\" or s[i] equals \"e\" or s[i] equals \"i\" or s[i] equals \"o\" or s[i] equals \"u\" or (s[i] equals \"y\" and i equals length(s) - 1)\n            count = count + 1\n        end if\n    end for\n    return count\nend function\n"}
{"task_id": "HumanEval/64", "completion": "\nfunction vowels_count(s)\n    count := 0\n    for each character c in s\n        if c is \"a\" or c is \"e\" or c is \"i\" or c is \"o\" or c is \"u\"\n            if index(c, s) is equal to length(s) - 1 then\n                if c is \"y\"\n                    count := count + 1\n                next\n            else\n                count := count + 1\n    return coun"}
{"task_id": "HumanEval/64", "completion": "\nvowels = ['a', 'e', 'i', 'o', 'u']\nfunction vowels_count(s)\n    count = 0\n    for i from 0 to length(s) - 1\n        if s[i] is 'a' or s[i] is 'e' or s[i] is 'i' or s[i] is 'o' or s[i] is 'u'\n            or (s[i] is 'y' and i is length(s) - 1)\n            count = count + 1\n    return count\n"}
{"task_id": "HumanEval/64", "completion": "\nfunction vowels_count(s)\n    count := 0\n    for i from 1 to length of s do\n        if (s[i] is 'a') or (s[i] is 'e') or (s[i] is 'i') or (s[i] is 'o') or (s[i] is 'u') then\n            count := count + 1\n        elseif (s[i] is 'y' and i is equal to length of s) then\n            count := count + 1\n        end if\n    return count\n"}
{"task_id": "HumanEval/64", "completion": "\nfunction vowels_count(s)\n    count := 0\n    last_char_was_y := false\n    \n    for each char in s do\n        if char is 'a' or char is 'e' or char is 'i' or char is 'o' or char is 'u'\n            or (char is 'y' and not last_char_was_y) then\n            count := count + 1\n        end if\n        \n        last_char_was_y := char is 'y'\n    end for\n    \n    return count\n"}
{"task_id": "HumanEval/64", "completion": "function vowels_count(s):\n    count = 0\n    lower_s = s.lower()\n    for i in range(len(lower_s)):\n        if lower_s[i] == 'a' or lower_s[i] == 'e' or lower_s[i] == 'i' or lower_s[i] == 'o' or lower_s[i] == 'u':\n            count += 1\n        elif lower_s[i] == 'y' and i == len(lower_s) - 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/64", "completion": ""}
{"task_id": "HumanEval/65", "completion": ""}
{"task_id": "HumanEval/65", "completion": "\nInput: integer x, integer shift\nVariables: result = \"\", temp = x, count = 0\nWhile count < shift:\n    remainder = temp % 10\n    temp = temp // 10\n    count = count + 1\nresult = str(remainder) + str(temp)\nIf shift > count:\n    result = reverse(result)\nReturn result\nFunction reverse(s):\n    result = \"\"\n    While s != \"\":\n        result = result + s[0]\n        s = s[1:]\n    Return result\n"}
{"task_id": "HumanEval/65", "completion": "\nfunction circular_shift(x, shift):\n    str_x = convert integer x to string\n    num_digits = length of string_x\n    shift = remainder of shift modulo num_digits\n    if shift is 0:\n        return string_x\n    else:\n        return substring of string_x from shift to end + substring of string_x from 0 to shift\n"}
{"task_id": "HumanEval/65", "completion": "\nfunction circular_shift(x, shift):\n    # Convert the integer to a string\n    str_x = string(x)\n    # Calculate the effective shift value\n    shift = shift mod length(str_x)\n    # Split the string into a list of characters\n    chars = [char for char in str_x]\n    # Rotate the list of characters\n    chars = chars[shift:] + chars[:shift]\n    # Join the list of characters back into a string\n    result = join(chars)\n    return result\n"}
{"task_id": "HumanEval/65", "completion": "\nfunction circular_shift(x, shift):\n    str_x = convert x to string\n    if shift >= length of str_x:\n        return reverse(str_x)\n    else:\n        return str_x[-shift:] + str_x[:-shift]\n"}
{"task_id": "HumanEval/65", "completion": "function circular_shift(x, shift):\n    x = string(x)\n    if shift > length(x):\n        shift = shift mod length(x)\n    result = x.substring(length(x) - shift) + x.substring(0, length(x) - shift)\n    return result\n"}
{"task_id": "HumanEval/65", "completion": "\nFUNCTION circular_shift(x, shift)\n    IF shift >= DIGIT_COUNT(x) THEN\n        RETURN REVERSE(DIGITS(x))\n    END IF\n\n    str_x = STRINGIFY(x)\n    digits = ARRAYIFY(str_x)\n\n    result = []\n    FOR i FROM 0 TO DIGIT_COUNT(x) - 1\n        IF i < shift THEN\n            result.append(digits[DIGIT_COUNT(x) - 1 - (shift - i)])\n        ELSE\n            result.append(digits[i - shift])\n        END IF\n    END FOR\n\n    RETURN JOIN(result, '')\n"}
{"task_id": "HumanEval/65", "completion": "\nfunction circular_shift(x, shift):\n    # convert x to string\n    s = string(x)\n    \n    # calculate the actual shift amount\n    shift = shift mod length(s)\n    \n    # split the string into two parts\n    part1 = s[shift:]\n    part2 = s[:shift]\n    \n    # concatenate them in reverse order\n    result = part2 + part1\n    \n    return result\n"}
{"task_id": "HumanEval/65", "completion": "\nfunction circular_shift(x, shift)\n    // convert integer to string\n    s = convert x to string\n    \n    // get the length of the string\n    len = length(s)\n    \n    // calculate the actual shift\n    actual_shift = mod(shift, len)\n    \n    // take a substring from the end of the string with the length of actual shift\n    prefix = substr(s, len - actual_shift, len)\n    \n    // take a substring from the beginning of the string with the length of remaining characters\n    suffix = substr(s, 0, len - actual_shift)\n    \n    // concatenate prefix and suffix\n    result = prefix + suffix\n    \n    // return the result\n    return result\n"}
{"task_id": "HumanEval/65", "completion": "ALGORITHM circular_shift(x, shift)\n    // convert x to string\n    str_x = string(x)\n\n    // calculate the actual shift value\n    shift = shift % length(str_x)\n\n    // get the substring from the end of the string to the shift position\n    right_part = substr(str_x, length(str_x) - shift, length(str_x))\n\n    // get the substring from the start of the string to the end of the string minus the shift position\n    left_part = substr(str_x, 1, length(str_x) - shift)\n\n    // concatenate the two parts\n    result = right_part + left_part\n\n    return result\n"}
{"task_id": "HumanEval/66", "completion": "\nfunction digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return su"}
{"task_id": "HumanEval/66", "completion": "function digitSum(s)\n    sum = 0\n    for each character c in s:\n        if c is uppercase then\n            sum += ASCII code of c\n        end if\n    return sum\n"}
{"task_id": "HumanEval/66", "completion": "\nfunction digitSum(s)\n    sum := 0\n    for each char in s\n        if char is uppercase then\n            sum := sum + ASCII code of char\n        end if\n    end for\n    return su"}
{"task_id": "HumanEval/66", "completion": "\nFUNCTION digitSum(s)\n    SUM = 0\n    FOR EACH char IN s\n        IF char IS UPPERCASE\n            SUM = SUM + ASCII CODE OF char\n    END FOR\n    RETURN SUM\nEND FUNCTION\n"}
{"task_id": "HumanEval/66", "completion": "\nfunction digitSum(s)\n    result = 0\n    for each character c in s\n        if character is uppercase\n            result += ASCII value of character\n    return result\n"}
{"task_id": "HumanEval/66", "completion": "function digitSum(s)\n    sum := 0\n    for each c in s\n        if uppercase(c) then\n            sum += ASCII(c)\n    return su"}
{"task_id": "HumanEval/66", "completion": "\nfunction digitSum(s)\n    result = 0\n    for each char in s\n        if char is uppercase then\n            result = result + ASCII code of char\n        end if\n    return resul"}
{"task_id": "HumanEval/66", "completion": "algorithm digitSum(s):\n    sum := 0\n    for each char c in s:\n        if isupper(c) then\n            sum := sum + ASCII code of c\n    return sum\n"}
{"task_id": "HumanEval/66", "completion": "function digitSum(s)\n    sum := 0\n    for each char c in s\n        if isUpper(c)\n            sum += ASCIIValue(c)\n    return su"}
{"task_id": "HumanEval/66", "completion": "\nfunction digitSum(s):\n    sum = 0\n    for each char in s:\n        if char is uppercase then\n            sum = sum + ASCII value of char\n        end if\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "function fruit_distribution(s, n)\n    # extract the numbers of apples and oranges from the string s\n    s = s.replace(\"apples\", \"\")\n    s = s.replace(\"and\", \"\")\n    s = s.replace(\"oranges\", \"\")\n    apple_orange_count = int(s.split()[0])\n    apple_count = int(s.split()[0].split()[0])\n    orange_count = apple_orange_count - apple_count\n    \n    # calculate the number of mangoes\n    mango_count = n - (apple_count + orange_count)\n    \n    return mango_coun"}
{"task_id": "HumanEval/67", "completion": "\ninput_str = s\ntotal_fruits = n\n\nstart = input_str.find(\"and\")\napple_and_oranges = int(input_str[:start].replace(\" apples\", \"\").replace(\" apple\", \"\").replace(\" \", \"\"))\noranges = int(input_str[start+4:].replace(\" oranges\", \"\").replace(\" orange\", \"\").replace(\" \", \"\"))\n\nmangoes = total_fruits - apple_and_oranges - oranges\nreturn mangoes\n"}
{"task_id": "HumanEval/67", "completion": "\nBEGIN\n    input_string <- string\n    num_of_fruits <- integer\n    num_of_apples <- 0\n    num_of_oranges <- 0\n    num_of_mangoes <- 0\n    \n    FOR each word in input_string\n        IF word CONTAINS \"apples\"\n            num_of_apples <- INTEGER PART OF word\n        ELSE IF word CONTAINS \"oranges\"\n            num_of_oranges <- INTEGER PART OF word\n        END IF\n    END FOR\n    \n    num_of_mangoes <- num_of_fruits - num_of_apples - num_of_oranges\n    RETURN num_of_mangoes\nEN"}
{"task_id": "HumanEval/67", "completion": "input_string = input(\"Enter the string that represents the number of apples and oranges: \")\nn = int(input(\"Enter the total number of fruits in the basket: \"))\ns = s.replace(\"apples\", \" \")\ns = s.replace(\"oranges\", \" \")\ns = s.split()\ntotal_apples = int(s[2])\ntotal_oranges = int(s[4])\nmango_fruits = n - total_apples - total_oranges\nprint(mango_fruits)\n"}
{"task_id": "HumanEval/67", "completion": "\ninput_string <- input_string\nsplit_input <- split(input_string, \" \")\ntotal_fruits <- toInteger(split_input[2])\napples_and_oranges <- split_input[1]\nnum_apples <- 0\nnum_oranges <- 0\nfor each word in split(apples_and_oranges):\n    if word contains \"apples\":\n        num_apples <- toInteger(substring(word, 7))\n    else if word contains \"oranges\":\n        num_oranges <- toInteger(substring(word, 8))\nresult <- total_fruits - num_apples - num_oranges\nprint resul"}
{"task_id": "HumanEval/67", "completion": "\ninput_string = s\nn = int(n)\nwords = input_string.split()\napples = 0\noranges = 0\nfor word in words:\n    if word.startswith('apples'):\n        apples = int(word.replace('apples', '').strip())\n    elif word.startswith('oranges'):\n        oranges = int(word.replace('oranges', '').strip())\ntotal_fruits = n\ntotal_mangoes = total_fruits - apples - oranges\nreturn total_mangoes\n"}
{"task_id": "HumanEval/67", "completion": "\ninput_string = s.split()\nn = int(n)\ntotal_apples = 0\ntotal_oranges = 0\nfor word in input_string:\n    if word.endswith('apples'):\n        total_apples = int(word.replace('apples', ''))\n    elif word.endswith('oranges'):\n        total_oranges = int(word.replace('oranges', ''))\nresult = n - total_apples - total_oranges\n"}
{"task_id": "HumanEval/67", "completion": "\nfunction fruit_distribution(s, n)\n    # Extract the number of apples and oranges from the input string\n    parts := split(s, \" and \")\n    apples := toInt(parts[1].substring(7))\n    oranges := toInt(parts[2].substring(8))\n\n    # Calculate the number of mangoes\n    mangoes := n - apples - oranges\n\n    return mangoes\n"}
{"task_id": "HumanEval/67", "completion": "input_string = fruit_distribution(s)\nn = int(n)\nwords = input_string.split()\ncount_apples = 0\ncount_oranges = 0\nfor word in words:\n    if word.endswith('apples'):\n        count_apples = int(word.replace('apples', ''))\n    elif word.endswith('oranges'):\n        count_oranges = int(word.replace('oranges', ''))\nmango_count = n - count_apples - count_oranges\nreturn mango_coun"}
{"task_id": "HumanEval/67", "completion": "function fruit_distribution(s, n)\n    // split the input string into two parts at the word \"and\"\n    s1, s2 := split(s, \"and\")\n    \n    // extract the number of apples from the first part\n    apples := extract_number(s1)\n    \n    // extract the number of oranges from the second part\n    oranges := extract_number(s2)\n    \n    // calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes := n - apples - oranges\n    \n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\nfunction pluck(arr):\n    smallest_even_value = None\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and (smallest_even_value == None or arr[i] < smallest_even_value):\n            smallest_even_value = arr[i]\n            smallest_index = i\n    if smallest_even_value != None:\n        return [smallest_even_value, smallest_index]\n    else:\n        return ["}
{"task_id": "HumanEval/68", "completion": "function pluck(arr):\n    min_val = float('inf')\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    if min_val != float('inf'):\n        return [min_val, min_index]\n    else:\n        return []\n"}
{"task_id": "HumanEval/68", "completion": "PROCEDURE pluck(arr)\n    IF arr IS EMPTY THEN\n        RETURN []\n    END IF\n\n    min_even_value := INFINITY\n    min_even_index := -1\n\n    FOR each element in arr DO\n        IF element IS EVEN AND element < min_even_value THEN\n            min_even_value := element\n            min_even_index := INDEX OF element IN arr\n        END IF\n    END FOR\n\n    IF min_even_value == INFINITY THEN\n        RETURN []\n    ELSE\n        RETURN [min_even_value, min_even_index]\n    END IF\n"}
{"task_id": "HumanEval/68", "completion": "\nfunction pluck(arr):\n    even_nodes = []\n    for i in range(len(arr)):\n        if arr[i] mod 2 == 0:\n            even_nodes.append([arr[i], i])\n    if len(even_nodes) > 0:\n        min_even_node = min(even_nodes, key=lambda x: (x[0], x[1]))\n        return min_even_node\n    else:\n        return []\n"}
{"task_id": "HumanEval/68", "completion": "function pluck(arr)\n    min_even_node = []\n    min_even = float('inf')\n    for i in range(len(arr))\n        if arr[i] % 2 == 0 and arr[i] < min_even\n            min_even = arr[i]\n            min_even_node = [min_even, i]\n    return min_even_node\n"}
{"task_id": "HumanEval/68", "completion": "\nfunction pluck(arr):\n    min_even_value = -1\n    min_even_index = -1\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0 and (min_even_value == -1 or arr[i] < min_even_value):\n            min_even_value = arr[i]\n            min_even_index = i\n    if min_even_value != -1:\n        return [min_even_value, min_even_index]\n    else:\n        return []\n"}
{"task_id": "HumanEval/68", "completion": "\nfunction pluck(arr):\n    smallest_even = float('inf')\n    result = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            result = [smallest_even, i]\n    return result if result else []\n"}
{"task_id": "HumanEval/68", "completion": "\nfunction pluck(arr):\n    min_even_value = inf\n    min_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even_value:\n            min_even_value = arr[i]\n            min_index = i\n    if min_even_value != inf:\n        return [min_even_value, min_index]\n    else:\n        return []\n"}
{"task_id": "HumanEval/68", "completion": "ALGORITHM PSEUDO CODE:\nPLUCK procedure(arr)\n   min_even_value := -1\n   min_index := -1\n\n   FOR i FROM 0 TO (length(arr) - 1)\n      IF arr[i] IS EVEN AND arr[i] < min_even_value THEN\n         min_even_value := arr[i]\n         min_index := i\n      ELSE IF arr[i] IS EVEN AND arr[i] = min_even_value THEN\n         IF i < min_index THEN\n            min_index := i\n         END IF\n      END IF\n   END FOR\n\n   IF min_even_value \u2260 -1 THEN\n      RETURN [min_even_value, min_index]\n   ELSE\n      RETURN []\n"}
{"task_id": "HumanEval/68", "completion": "\nfunction pluck(arr):\n    min_even_index = -1\n    min_even_value = float('inf')\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < min_even_value:\n            min_even_index = i\n            min_even_value = arr[i]\n    if min_even_index != -1:\n        return [min_even_value, min_even_index]\n    else:\n        return []\n"}
{"task_id": "HumanEval/69", "completion": "\nfunction search(lst)\n    max_freq = 0\n    max_num = 0\n    for num in lst:\n        freq = 0\n        for n in lst:\n            if n == num:\n                freq += 1\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n            max_num = num\n    if max_num > 0:\n        return max_num\n    else:\n        return -1\n"}
{"task_id": "HumanEval/69", "completion": "\nFUNCTION search(lst)\n    FREQUENCY_ARRAY = {}\n    FOR each element IN lst\n        IF element is in FREQUENCY_ARRAY\n            FREQUENCY_ARRAY[element] = FREQUENCY_ARRAY[element] + 1\n        ELSE\n            FREQUENCY_ARRAY[element] = 1\n    MAX_VALUE = -1\n    FOR each key-value pair IN FREQUENCY_ARRAY\n        IF key > 0 AND key >= value\n            MAX_VALUE = key\n    RETURN MAX_VALUE\nEND FUNCTION\n"}
{"task_id": "HumanEval/69", "completion": "PROCEDURE search(lst)\n    // Initialize variables\n    max_freq = 0\n    result = -1\n    \n    FOR each num IN lst\n        // Count the frequency of the current number\n        freq = COUNT(num IN lst)\n        \n        // Check if the frequency of the current number is greater than or equal to the number itself\n        IF freq >= num THEN\n            // Update the maximum frequency and the result if necessary\n            IF freq > max_freq THEN\n                max_freq = freq\n                result = num\n            END IF\n        END IF\n    END FOR\n    \n    RETURN result\n"}
{"task_id": "HumanEval/69", "completion": "DATA frequency, max_value = 0, 0\nFOR each num IN lst\n    frequency = frequency + 1\n    IF num > max_value AND frequency >= num\n        max_value = num\n    ELSE IF num <= max_value AND frequency < num\n        max_value = -1\nRETURN max_value\n"}
{"task_id": "HumanEval/69", "completion": "FUNCTION search(LIST)\n    MAX_FREQ = 0\n    MAX_INT = -1\n\n    FOR EACH ITEM IN LIST\n        FREQ = COUNT OF ITEM IN LIST\n        IF FREQ >= ITEM AND FREQ > MAX_FREQ\n            MAX_FREQ = FREQ\n            MAX_INT = ITEM\n\n    IF MAX_INT > 0\n        RETURN MAX_INT\n    ELSE\n        RETURN -1\n"}
{"task_id": "HumanEval/69", "completion": "PROCEDURE search(lst)\n    FREQUENCY = {}\n    MAX_VALUE = 0\n    FOR each num IN lst\n        IF num > 0\n            COUNT = COUNT(FREQUENCY, num) + 1\n            ADD num, COUNT TO FREQUENCY\n            IF COUNT >= num AND num > MAX_VALUE\n                MAX_VALUE = num\n    IF MAX_VALUE == 0\n        RETURN -1\n    ELSE\n        RETURN MAX_VALUE\n"}
{"task_id": "HumanEval/69", "completion": "\nfunction search(lst)\n    max_val = -1\n    max_freq = 0\n    for num in lst:\n        freq = count(lst, num)\n        if freq >= num and num > 0 and freq > max_freq:\n            max_freq = freq\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/69", "completion": "\nfunction search(lst)\n    count_dict = {}\n    max_value = -1\n    for num in lst:\n        if num > 0:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n            if num >= count_dict[num]:\n                max_value = num\n    if max_value < 1:\n        return -1\n    return max_value\n"}
{"task_id": "HumanEval/69", "completion": "\nfunction search(lst)\n    max_freq = 0\n    max_num = -1\n    for num in lst:\n        freq = count(lst, num)\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n            max_num = num\n    if max_num <= 0:\n        return -1\n    else:\n        return max_num\n"}
{"task_id": "HumanEval/69", "completion": "\nfunction search(lst)\n    freq = {}\n    max_freq = 0\n    max_num = 0\n    \n    for num in lst:\n        if num > 0:\n            if num not in freq:\n                freq[num] = 1\n            else:\n                freq[num] += 1\n            \n            if freq[num] >= num and num > max_num:\n                max_num = num\n                max_freq = freq[num]\n    \n    if max_freq >= max_num:\n        return max_num\n    else:\n        return -"}
{"task_id": "HumanEval/70", "completion": "PROCEDURE strange_sort_list(lst)\n    IF lst IS EMPTY THEN\n        RETURN lst\n    END IF\n\n    sort_desc = FALSE\n    result = []\n\n    WHILE lst IS NOT EMPTY\n        IF sort_desc THEN\n            min_val = MIN(lst)\n            result.append(min_val)\n            lst = REMOVE_ALL[min_val] FROM lst\n        ELSE\n            max_val = MAX(lst)\n            result.append(max_val)\n            lst = REMOVE_ALL[max_val] FROM lst\n        END IF\n\n        sort_desc = NOT sort_desc\n    END WHILE\n\n    RETURN result\n"}
{"task_id": "HumanEval/70", "completion": "function strange_sort_list(lst):\n    if lst.empty():\n        return lst\n    sorted_lst = []\n    min_val = min(lst)\n    max_val = max(lst)\n    while len(lst) > 0:\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0:\n            min_val = min(lst)\n        else:\n            break\n        sorted_lst.append(max_val)\n        lst.remove(max_val)\n        if len(lst) > 0:\n            max_val = max(lst)\n        else:\n            break\n    return sorted_lst\n"}
{"task_id": "HumanEval/70", "completion": "\nprocedure strange_sort_list(lst)\n    if lst is empty then\n        return lst\n    else\n        min_val = the smallest element in lst\n        max_val = the largest element in lst\n        result = new empty list\n        while lst is not empty do\n            add min_val to result\n            remove min_val from lst\n            if lst is not empty then\n                add max_val to result\n                remove max_val from lst\n            else\n                break\n        end while\n        return result\nend procedur"}
{"task_id": "HumanEval/70", "completion": "\nfunction strange_sort_list(lst)\n    sorted_lst = []\n    while len(lst) > 0\n        min_val = min(lst)\n        sorted_lst.append(min_val)\n        lst.remove(min_val)\n        if len(lst) > 0\n            max_val = max(lst)\n            sorted_lst.append(max_val)\n            lst.remove(max_val)\n        end if\n    end while\n    return sorted_lst\n"}
{"task_id": "HumanEval/70", "completion": "PROCEDURE strange_sort_list(lst)\n    IF lst IS EMPTY THEN\n        RETURN lst\n    END IF\n\n    min_idx = INDEX OF MINIMUM VALUE IN lst\n    max_idx = INDEX OF MAXIMUM VALUE IN lst\n\n    result = NEW LIST\n    result.append(lst[min_idx])\n    lst.erase(min_idx)\n\n    WHILE lst IS NOT EMPTY\n        max_idx = INDEX OF MAXIMUM VALUE IN lst\n        result.append(lst[max_idx])\n        lst.erase(max_idx)\n\n    RETURN resul"}
{"task_id": "HumanEval/70", "completion": "input lst\nresult = []\nwhile not is_empty(lst):\n    result.append(min(lst))\n    lst.remove(min(lst))\n    if not is_empty(lst):\n        result.append(max(lst))\n        lst.remove(max(lst))\nreturn resul"}
{"task_id": "HumanEval/70", "completion": "procedure strange_sort_list(lst)\n    if lst is empty\n        return []\n\n    sort lst in ascending order\n    result = []\n    while lst is not empty\n        append the smallest element from lst to result\n        remove the smallest element from lst\n        if lst is not empty\n            append the largest element from lst to result\n            remove the largest element from lst\n\n    return result\n"}
{"task_id": "HumanEval/70", "completion": "function strange_sort_list(lst)\n    result = []\n    sorted_lst = sorted(lst)\n    while len(sorted_lst) > 0:\n        if len(result) == 0:\n            result.append(sorted_lst.pop(0))\n        else:\n            result.append(sorted_lst.pop())\n        if len(sorted_lst) > 0:\n            result.append(sorted_lst[0])\n            sorted_lst.pop(0)\n    return resul"}
{"task_id": "HumanEval/70", "completion": "\nALGORITHM strange_sort_list(lst)\n   INPUT: lst, a list of integers\n   OUTPUT: sorted list in strange order\n\n   IF lst IS EMPTY\n      RETURN []\n\n   ELSE\n      min_val = MINIMUM VALUE IN lst\n      max_val = MAXIMUM VALUE IN lst - min_val\n      result = [min_val]\n\n      WHILE lst IS NOT EMPTY\n         min_val = MINIMUM VALUE IN lst - {max_val, min_val}\n         if min_val IS NOT EMPTY\n            result = result + [min_val]\n         max_val = MAXIMUM VALUE IN lst - {min_val, result}\n         lst = lst - {min_val, max_val}\n\n      RETURN resul"}
{"task_id": "HumanEval/70", "completion": "PROCEDURE strange_sort_list(lst)\n    IF lst IS EMPTY\n        RETURN lst\n    END IF\n    min_val = MIN_VALUE_IN_LIST(lst)\n    max_val = MAX_VALUE_IN_LIST(lst)\n    sorted_list = []\n    WHILE lst IS NOT EMPTY\n        sorted_list ADD min_val\n        lst REMOVE min_val\n        IF lst IS NOT EMPTY\n            min_val = MIN_VALUE_IN_LIST(lst)\n        ELSE\n            sorted_list ADD max_val\n            RETURN sorted_list\n        END IF\n    END WHILE\nEND PROCEDUR"}
{"task_id": "HumanEval/71", "completion": "\nfunction triangle_area(a, b, c)\n    # Check if the sum of any two sides is greater than the third side\n    if (a + b > c) and (a + c > b) and (b + c > a)\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate area using Heron's formula\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        # Round area to 2 decimal places\n        return round(area, 2)\n    else\n        # If the sides do not form a valid triangle, return -1\n        return -1\n    end\n"}
{"task_id": "HumanEval/71", "completion": "FUNCTION triangle_area(a, b, c)\n    # Check if sides form a valid triangle\n    IF (a + b <= c) OR (a + c <= b) OR (b + c <= a)\n        RETURN -1\n    END IF\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate area using Heron's formula\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    # Round area to 2 decimal points\n    RETURN ROUND(area, 2)\nEND FUNCTIO"}
{"task_id": "HumanEval/71", "completion": "\nif (a + b > c) and (b + c > a) and (c + a > b) then\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\nelse\n    return -"}
{"task_id": "HumanEval/71", "completion": ""}
{"task_id": "HumanEval/71", "completion": "\nfunction triangle_area(a, b, c)\n    if (a + b > c) and (a + c > b) and (b + c > a)\n        semi_perimeter = (a + b + c) / 2\n        area = sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))\n        return round(area, 2)\n    else\n        return -1\n"}
{"task_id": "HumanEval/71", "completion": "\nfunction triangle_area(a, b, c):\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/71", "completion": ""}
{"task_id": "HumanEval/71", "completion": "\nfunction triangle_area(a, b, c)\n    if (a + b > c) and (a + c > b) and (b + c > a)\n        semi_perimeter = (a + b + c) / 2\n        area = sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))\n        return round(area, 2)\n    else\n        return -1\n"}
{"task_id": "HumanEval/71", "completion": "\nif (a + b > c) and (a + c > b) and (b + c > a):\n    semi_perimeter = (a + b + c) / 2\n    area = sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))\n    return round(area, 2)\nelse:\n    return -"}
{"task_id": "HumanEval/71", "completion": "\nfunction triangle_area(a, b, c)\n    if (a + b > c) and (b + c > a) and (a + c > b)\n        semiperimeter = (a + b + c) / 2\n        area = sqrt(semiperimeter * (semiperimeter - a) * (semiperimeter - b) * (semiperimeter - c))\n        return round(area, 2)\n    else\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "function will_it_fly(q, w)\n    // Convert q to a string to check for palindrome\n    s = toString(q)\n    reverse_s = reverse(s)\n    if s != reverse_s\n        return false\n    end if\n    \n    // Calculate the sum of the elements in q\n    sum = 0\n    for each element in q\n        sum += element\n    end for\n    \n    // Check if the sum is less than or equal to w\n    if sum <= w\n        return true\n    else\n        return false\n    end if\nend functio"}
{"task_id": "HumanEval/72", "completion": "function will_it_fly(q, w)\n    // Check if the list q is a palindrome\n    if q != reverse(q)\n        return false\n    \n    // Calculate the sum of elements in q\n    total = 0\n    for each e in q\n        total += e\n    \n    // Return true if the sum is less than or equal to w, false otherwise\n    return total <= "}
{"task_id": "HumanEval/72", "completion": "\nfunction will_it_fly(q, w):\n    if is_balanced(q) then\n        if sum(q) <= w then\n            return true\n        else\n            return false\n    else\n        return false\n\nfunction is_balanced(q):\n    return q == reverse(q)\n"}
{"task_id": "HumanEval/72", "completion": "\nfunction will_it_fly(q, w)\n    if is_palindrome(q) then\n        return sum(q) <= w\n    else\n        return false\n    end if\nend function\n\nfunction is_palindrome(list)\n    i = 0\n    j = length(list) - 1\n    while i < j do\n        if list[i] != list[j] then\n            return false\n        end if\n        i = i + 1\n        j = j - 1\n    end while\n    return true\nend function\n"}
{"task_id": "HumanEval/72", "completion": "if is_balanced(q) and sum(q) <= w then\n    return True\nelse\n    return False\nend if\n\nfunction is_balanced(lst)\n    str = \"\"\n    for each element in lst\n        str += element as string\n    end for\n    return str == reverse(str)\nend function\n"}
{"task_id": "HumanEval/72", "completion": "function will_it_fly(q, w):\n    # Check if q is a list\n    if not isinstance(q, list):\n        return False\n    # Check if q is empty\n    if len(q) == 0:\n        return True\n    # Check if q is balanced\n    if str(q) != str(q)[::-1]:\n        return False\n    # Calculate the sum of q\n    total = sum(q)\n    # Return True if the total is less than or equal to w, False otherwise\n    return total <= w\n"}
{"task_id": "HumanEval/72", "completion": "function will_it_fly(q, w)\n    if not is_palindromic_list(q):\n        return False\n    return sum(q) <= w\n\nfunction is_palindromic_list(l):\n    str_l = str(l)\n    return str_l == str_l[::-1]\n"}
{"task_id": "HumanEval/72", "completion": "function will_it_fly(q, w)\n    if is_palindromic(q) then\n        if sum(q) <= w then\n            return True\n        else\n            return False\n    else\n        return False\n"}
{"task_id": "HumanEval/72", "completion": "function will_it_fly(q, w)\n    if is_palindrome(q) then\n        return sum(q) <= w\n    else\n        return false\n    end if\nend function\n\nfunction is_palindrome(lst)\n    i = 0, j = length(lst) - 1\n    while i < j do\n        if lst[i] != lst[j] then\n            return false\n        end if\n        i = i + 1\n        j = j - 1\n    end while\n    return true\nend function\n"}
{"task_id": "HumanEval/72", "completion": "function will_it_fly(q, w)\n    if is_palindrome(q) then\n        if sum(q) <= w then\n            return True\n        else\n            return False\n    else\n        return False\n\nfunction is_palindrome(lst)\n    str_lst = convert lst to string\n    return str_lst equals reverse of str_ls"}
{"task_id": "HumanEval/73", "completion": "\nfunction smallest_change(arr):\n    n = len(arr)\n    count = 0\n    left, right = 0, n-1\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count\n"}
{"task_id": "HumanEval/73", "completion": "\nfunction smallestChange(arr)\n    n = length(arr)\n    count = 0\n    left = 0\n    right = n - 1\n    \n    while left < right\n        if arr[left] != arr[right]\n            count = count + 1\n        left = left + 1\n        right = right - 1\n    \n    return coun"}
{"task_id": "HumanEval/73", "completion": "\nalgorithm smallestChange(arr):\n    n = length(arr)\n    left = 0, right = n - 1\n    count = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            count = count + 1\n        left = left + 1\n        right = right - 1\n        \n    return coun"}
{"task_id": "HumanEval/73", "completion": "\nALGORITHM smallest_change(arr):\n    n = length of arr\n    count = 0\n    mid = n // 2\n\n    for i from 0 to mid:\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n\n    return coun"}
{"task_id": "HumanEval/73", "completion": "function smallest_change(arr):\n    n = length of arr\n    left = 0\n    right = n - 1\n    count = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            min_val = min(arr)\n            max_val = max(arr)\n            diff = min_val if min_val <= max_val else max_val\n            for i from 1 to n:\n                if arr[i] == diff:\n                    arr[left] = diff\n                    break\n            count = count + 1\n        left = left + 1\n        right = right - 1\n    return count\n"}
{"task_id": "HumanEval/73", "completion": "function smallest_change(arr)\n    n = size(arr)\n    left = 0\n    right = n - 1\n    changes = 0\n    \n    while left <= right\n        if arr[left] != arr[right]\n            changes = changes + 1\n        left = left + 1\n        right = right - 1\n    \n    return change"}
{"task_id": "HumanEval/73", "completion": "\nalgorithm smallest_change is\n    input: arr (list of integers)\n    output: min_changes (integer)\n\n    // create a frequency map for the array\n    freq_map = {}\n    for each num in arr:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n\n    // count the numbers with odd frequencies\n    odd_freq_count = 0\n    for val in freq_map.values():\n        if val % 2 != 0:\n            odd_freq_count += 1\n\n    // return the minimum changes needed\n    return odd_freq_count - 1\nend algorithm\n"}
{"task_id": "HumanEval/73", "completion": "procedure smallest_change(arr)\n    n = length(arr)\n    left = 0\n    right = n - 1\n    changes = 0\n    \n    while left < right\n        if arr[left] != arr[right]\n            if arr[left] != arr[right-1] and arr[left] != arr[right+1]\n                changes = changes + 1\n            else if arr[left] != arr[right-1]\n                changes = changes + 1\n            else if arr[left] != arr[right+1]\n                changes = changes + 1\n            else\n                changes = changes\n        else\n            changes = changes\n        left = left + 1\n        right = right - 1\n    end while\n    \n    return changes\n"}
{"task_id": "HumanEval/73", "completion": "\nALGORITHM smallest_change(arr):\n    n = LENGTH(arr)\n    l = 0\n    r = n - 1\n    changes = 0\n    \n    while l < r:\n        if arr[l] != arr[r]:\n            changes = changes + 1\n            temp = arr[r]\n            arr[r] = arr[l]\n            arr[l] = temp\n        l = l + 1\n        r = r - 1\n    \n    return changes\n"}
{"task_id": "HumanEval/73", "completion": "\ninput_arr = arr\nchanges = 0\nleft = 0\nright = len(input_arr) - 1\n\nwhile left < right:\n    if input_arr[left] != input_arr[right]:\n        changes += 1\n    left += 1\n    right -= 1\n\nreturn changes\n"}
{"task_id": "HumanEval/74", "completion": "function total_match(lst1, lst2)\n    char_count1 = 0\n    char_count2 = 0\n    \n    for string in lst1:\n        char_count1 += len(string)\n    \n    for string in lst2:\n        char_count2 += len(string)\n    \n    if char_count1 < char_count2:\n        return lst1\n    elif char_count2 < char_count1:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/74", "completion": "function total_match(lst1, lst2)\n    sum_len1 = 0\n    sum_len2 = 0\n    \n    for str in lst1:\n        sum_len1 += len(str)\n    \n    for str in lst2:\n        sum_len2 += len(str)\n    \n    if sum_len1 < sum_len2:\n        return lst1\n    elif sum_len1 > sum_len2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/74", "completion": "function total_match(lst1, lst2)\n    total_chars_list1 = sum(len(string) for string in lst1)\n    total_chars_list2 = sum(len(string) for string in lst2)\n\n    if total_chars_list1 < total_chars_list2:\n        return lst1\n    elif total_chars_list1 > total_chars_list2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/74", "completion": "function total_match(lst1, lst2)\n    if length(lst1) == 0 and length(lst2) == 0:\n        return []\n    else:\n        sum_chars_lst1 = sum(len(str(s)) for s in lst1)\n        sum_chars_lst2 = sum(len(str(s)) for s in lst2)\n        if sum_chars_lst1 < sum_chars_lst2:\n            return lst1\n        elif sum_chars_lst1 > sum_chars_lst2:\n            return lst2\n        else:\n            return lst1\n"}
{"task_id": "HumanEval/74", "completion": "function total_match(lst1, lst2):\n    total_chars1 = sum(len(string) for string in lst1)\n    total_chars2 = sum(len(string) for string in lst2)\n    \n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 < total_chars1:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/74", "completion": "\nfunction total_match(lst1, lst2)\n    total_chars1 = 0\n    total_chars2 = 0\n    \n    for each string in lst1:\n        total_chars1 += len(string)\n        \n    for each string in lst2:\n        total_chars2 += len(string)\n        \n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/74", "completion": "function total_match(list1, list2)\n    sum1 = 0\n    sum2 = 0\n    \n    for string in list1:\n        sum1 += len(string)\n    \n    for string in list2:\n        sum2 += len(string)\n    \n    if sum1 < sum2:\n        return list1\n    elif sum1 > sum2:\n        return list2\n    else:\n        return list1\n"}
{"task_id": "HumanEval/74", "completion": "\nfunction total_match(lst1, lst2):\n    sum_chars1 = 0\n    sum_chars2 = 0\n    for string1 in lst1:\n        sum_chars1 += len(string1)\n    for string2 in lst2:\n        sum_chars2 += len(string2)\n    if sum_chars1 < sum_chars2:\n        return lst1\n    elif sum_chars1 > sum_chars2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/74", "completion": "\nfunction total_match(lst1, lst2):\n    sum1 = 0\n    sum2 = 0\n    \n    for string1 in lst1:\n        sum1 += len(string1)\n        \n    for string2 in lst2:\n        sum2 += len(string2)\n        \n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/74", "completion": "function total_match(lst1, lst2)\n    sum1 = 0\n    sum2 = 0\n    for each str in lst1:\n        sum1 += len(str)\n    for each str in lst2:\n        sum2 += len(str)\n    if sum1 < sum2:\n        return lst1\n    elif sum2 < sum1:\n        return lst2\n    else:\n        return lst"}
{"task_id": "HumanEval/75", "completion": "\nfunction is_multiply_prime(a)\n    prime_numbers = []\n    for i from 2 to a\n        is_prime = true\n        for j from 2 to sqrt(i)\n            if i % j == 0\n                is_prime = false\n                break\n        if is_prime\n            prime_numbers.append(i)\n\n    result = false\n    for i from 0 to len(prime_numbers)\n        for j from 0 to len(prime_numbers)\n            for k from 0 to len(prime_numbers)\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k] == a\n                    result = true\n                    exit\n\n    return result\n"}
{"task_id": "HumanEval/75", "completion": "function is_multiply_prime(a)\n    for i from 2 to sqrt(a)\n        if a mod i is 0 then\n            for j from 2 to sqrt(i)\n                if i mod j is 0 then\n                    k = i / j\n                    if k * j is a and is_prime(k) and is_prime(j) and is_prime(i) then\n                        return true\n                end if\n            end for\n        end if\n    end for\n    return false\n\nfunction is_prime(n)\n    if n <= 1 then\n        return false\n    else if n <= 3 then\n        return true\n    else if n mod 2 is 0 or n mod 3 is 0 then\n        return false\n    else\n        for i from 5 to sqrt(n) step 6\n            if n mod i is 0 or n mod (i + 2) is 0 then\n                return false\n            end if\n        end for\n        return true\n    end if\n"}
{"task_id": "HumanEval/75", "completion": "\nfunction is_multiply_prime(a)\n    for i from 2 to sqrt(a)\n        if a mod i is 0\n            prime_factors = []\n            for j from 2 to i\n                if i mod j is 0\n                    prime_factors.append(j)\n            if length of prime_factors equals 2\n                return true\n        if i is prime\n            factors = []\n            for k from 2 to a/i\n                if a/i mod k is 0\n                    factors.append(k)\n            if length of factors equals 1\n                return true\n    return false\n"}
{"task_id": "HumanEval/75", "completion": "function is_multiply_prime(a)\n    is_prime(p) // helper function to check if a number is prime\n        if p <= 1 return false\n        for i from 2 to sqrt(p)\n            if p mod i == 0 return false\n        return true\n    \n    is_product_of_three_primes(n)\n        for i from 2 to n\n            for j from i to n\n                for k from j to n\n                    if is_prime(i) and is_prime(j) and is_prime(k) and i * j * k == n\n                        return true\n        return false\n    \n    return is_product_of_three_primes(a)\n"}
{"task_id": "HumanEval/75", "completion": "\nfunction is_multiply_prime(a)\n    for i from 2 to a\n        if is_prime(i) and is_prime((a / i)) and is_prime(a / i) then\n            return true\n        end if\n    end for\n    return false\n\nfunction is_prime(n)\n    if n < 2 then\n        return false\n    else\n        for i from 2 to sqrt(n)\n            if n mod i == 0 then\n                return false\n            end if\n        end for\n        return true\n    end if\nend functio"}
{"task_id": "HumanEval/75", "completion": "\nfunction is_multiply_prime(a):\n    for i from 2 to sqrt(a):\n        if a % i == 0:\n            is_divisor := true\n            for j from 2 to sqrt(i):\n                if i % j == 0:\n                    is_divisor := false\n                    break\n            if is_divisor:\n                for k from 2 to sqrt(a/i):\n                    if a/i % k == 0:\n                        is_divisor := false\n                        break\n                if is_divisor:\n                    return true\n    return false\n"}
{"task_id": "HumanEval/75", "completion": "function is_multiply_prime(a)\n    function is_prime(x)\n        if x <= 1\n            return false\n        for i from 2 to sqrt(x)\n            if x mod i == 0\n                return false\n        return true\n    end function\n\n    count = 0\n    i = 2\n    while i * i <= a\n        if is_prime(i) and a mod i == 0\n            j = a / i\n            while j > 1\n                if not is_prime(j)\n                    return false\n                j = j / i\n            return true\n        i = i + 1\n    return false\nend functio"}
{"task_id": "HumanEval/75", "completion": "function is_multiply_prime(a)\n    result = false\n    for i from 2 to sqrt(a)\n        if is_prime(i) then\n            for j from i to sqrt(a / i)\n                if is_prime(j) and (i * j) * a / (i * j) = a then\n                    result = true\n                    exit\n                end if\n            end for\n        end if\n    end for\n    return result\nend function\n\nfunction is_prime(n)\n    if n <= 1 then\n        return false\n    else\n        for i from 2 to sqrt(n)\n            if n mod i = 0 then\n                return false\n            end if\n        end for\n        return true\n    end if\n"}
{"task_id": "HumanEval/75", "completion": "\nFUNCTION is_multiply_prime(a)\n   FOR i FROM 2 TO sqrt(a)\n       IF a MOD i == 0 THEN\n           p = TRUE\n           FOR j FROM 2 TO sqrt(i)\n               IF i MOD j == 0 THEN\n                   p = FALSE\n                   EXIT FOR\n               END IF\n           END FOR\n           IF p AND is_multiply_prime(a / i) THEN\n               RETURN TRUE\n           END IF\n       END IF\n   END FOR\n   RETURN FALSE\nEND FUNCTIO"}
{"task_id": "HumanEval/75", "completion": "\nfunction is_multiply_prime(a)\n    for i from 2 to sqrt(a)\n        if a mod i = 0\n            prime = true\n            for j from 2 to sqrt(i)\n                if i mod j = 0\n                    prime = false\n                    break\n            if prime\n                for k from 2 to sqrt(a/i)\n                    if a/i mod k = 0\n                        for m from 2 to sqrt(k)\n                            if k mod m = 0\n                                return false\n                        return true\n                return false\n    return false\n"}
{"task_id": "HumanEval/76", "completion": "\nFUNCTION is_simple_power(x, n)\n    IF n = 0 THEN\n        RETURN FALSE\n    END IF\n    BASE = 1\n    EXPONENT = 0\n    WHILE x > BASE\n        EXPONENT = EXPONENT + 1\n        BASE = BASE * n\n    END WHILE\n    IF x = BASE THEN\n        RETURN TRUE\n    ELSE\n        RETURN FALSE\n    END IF\nEND FUNCTIO"}
{"task_id": "HumanEval/76", "completion": "\nfunction is_simple_power(x, n)\n    if x <= 0\n        return false\n    log_n = log(n, base=10)\n    log_x = log(x, base=10)\n    int_log_x = round(log_x / log_n)\n    if int_log_x * log_n == log_x\n        return true\n    else\n        return false\n"}
{"task_id": "HumanEval/76", "completion": "\nALGORITHM is_simple_power(x, n)\n    IF n = 1 THEN\n        RETURN TRUE\n    ELSE\n        log_val = log(n, x)\n        IF log_val % 1 = 0 THEN\n            RETURN TRUE\n        ELSE\n            RETURN FALSE\n        END IF\n    END IF\nEND ALGORITH"}
{"task_id": "HumanEval/76", "completion": "function is_simple_power(x, n)\n    if x <= 0 then\n        return false\n    end if\n    y = log(x, n)\n    return int(y) == y\n"}
{"task_id": "HumanEval/76", "completion": "FUNCTION is_simple_power(x, n)\n  IF x = 1 THEN\n    RETURN TRUE\n  END IF\n  root = LOG(n, x)\n  IF root % int(root) != 0 THEN\n    RETURN FALSE\n  END IF\n  RETURN TRUE\nEND FUNCTIO"}
{"task_id": "HumanEval/76", "completion": "function is_simple_power(x, n)\n    if x = 1 then\n        return true\n    else\n        root = sqrt(x)\n        return int(root) = root and int(root) ^ (log(int(root), n) = log(x, n))\n"}
{"task_id": "HumanEval/76", "completion": "FUNCTION is_simple_power(x, n)\n    IF x <= 0\n        RETURN FALSE\n    FOR i FROM 1 TO CEILING(LOG(x, n))\n        IF POWER(n, i) = x\n            RETURN TRUE\n        END IF\n    NEXT i\n    RETURN FALSE\n"}
{"task_id": "HumanEval/76", "completion": "\n procedure is_simple_power(x, n)\n   declare int := 0\n   while x > 1 do\n     if x mod n != 0 then\n       return false\n     else\n       x := x / n\n       int := int + 1\n     end if\n   end while\n   if int = 1 then\n     return true\n   else\n     return false\n   end if\n end procedur"}
{"task_id": "HumanEval/76", "completion": "\nfunction is_simple_power(x, n):\n    if n <= 0 then\n        return false\n    while x > 1 do\n        if x mod n != 0 then\n            return false\n        x = x / n\n    return true\n"}
{"task_id": "HumanEval/76", "completion": "FUNCTION is_simple_power(x, n)\n    IF n = 0 THEN\n        RETURN FALSE\n    END IF\n    IF x = 1 THEN\n        RETURN TRUE\n    END IF\n    log_n = LOG(n, x)\n    ROUND(log_n) = INTEGER(log_n)\n    IF ROUND(log_n) * n = x THEN\n        RETURN TRUE\n    ELSE\n        RETURN FALSE\n    END IF\nEND FUNCTIO"}
{"task_id": "HumanEval/77", "completion": "\nfunction iscube(a)\n    n <- 0\n    while (a != 0) do\n        digit <- a mod 10\n        n <- n + 1\n        a <- a div 10\n    end while\n    root <- floor(cbrt(n))\n    return (n == int(root) ** 3)\nend function\n"}
{"task_id": "HumanEval/77", "completion": "function iscube(a):\n    c = 0\n    while power(c, 3) <= a:\n        if power(c, 3) == a:\n            return true\n        c = c + 1\n    return fals"}
{"task_id": "HumanEval/77", "completion": "\nfunction iscube(a)\n    result = false\n    i = 1\n    while (i * i * i <= a)\n        if (i * i * i == a)\n            result = true\n            exit\n        i = i + 1\n    return result\n"}
{"task_id": "HumanEval/77", "completion": "function iscube(a)\n   root := sqrt(a)\n   if root = integer(root)\n      return true\n   else\n      return false\n"}
{"task_id": "HumanEval/77", "completion": "\nfunction iscube(a)\n    root <- sqrt(a)\n    return int(root + 0.5) ** 3 == a\n"}
{"task_id": "HumanEval/77", "completion": "\nfunction iscube(a)\n    c = 0\n    while a > 0 do\n        c = c + 1\n        if (a == c * c * c) then\n            return true\n        end if\n    end while\n    return false\nend function\n"}
{"task_id": "HumanEval/77", "completion": "\nfunction iscube(a)\n    c = 0\n    while (c * c * c <= a)\n        if (c * c * c == a)\n            return true\n        c = c + 1\n    return false\n"}
{"task_id": "HumanEval/77", "completion": "\nfunction iscube(a)\n    let root = sqrt(a)\n    if (root * root * root == a) then\n        return true\n    else\n        return false\n"}
{"task_id": "HumanEval/77", "completion": "\nprocedure iscube(a)\n    c = 0\n    while a > 0 do\n        a = a / int(sqrt(a))\n        c = c + 1\n    return (c * c * c) == a\n"}
{"task_id": "HumanEval/77", "completion": "function iscube(a)\n    let root = 1\n    while (root * root * root <= a)\n        if (root * root * root == a)\n            return True\n        increment(root)\n    return False\n"}
{"task_id": "HumanEval/78", "completion": "\nfunction hex_key(num)\n    count := 0\n    for i from 0 to length(num) - 1\n        digit := substr(num, i, 1)\n        if digit is \"2\" or digit is \"3\" or digit is \"5\" or digit is \"7\" or digit is \"B\" or digit is \"D\"\n            count := count + 1\n    return count\n"}
{"task_id": "HumanEval/78", "completion": "\nhex_key(num)\n    PRIMES = {2, 3, 5, 7, 11, 13, 17} # Define set of prime numbers\n    count = 0\n    for char in num:\n        if char in '23BD' or int(char, 16) in PRIMES: # Check if char is prime digit\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/78", "completion": "function hex_key(num)\n    count = 0\n    for each digit in num\n        if digit is '2' or '3' or '5' or '7' or 'B' or 'D'\n            count = count + 1\n    return count\n"}
{"task_id": "HumanEval/78", "completion": "\nfunction hex_key(num):\n    count = 0\n    for i from 0 to length of num - 1:\n        if num[i] is '2' or num[i] is '3' or num[i] is '5' or num[i] is '7' or num[i] is 'B' or num[i] is 'D':\n            count = count + 1\n    return count\n"}
{"task_id": "HumanEval/78", "completion": "\nfunction hex_key(num):\n    count = 0\n    for each character c in num:\n        if c is '2' or c is '3' or c is '5' or c is '7' or c is 'B' or c is 'D':\n            count = count + 1\n    return count\n"}
{"task_id": "HumanEval/78", "completion": "\nfunction hex_key(num)\n    count = 0\n    for each char in num\n        if char is '2' or char is '3' or char is '5' or char is '7' or char is 'B' or char is 'D' or char is 'F'\n            count = count + 1\n    return count\n"}
{"task_id": "HumanEval/78", "completion": "\nFUNCTION hex_key(num)\n    count := 0\n    FOR each char in num\n        IF char IN {\"B\", \"D\"}\n            count := count + 1\n        ELSE IF char IN {\"2\", \"3\", \"5\", \"7\"}\n            count := count + 1\n    END FOR\n    RETURN count\nEND FUNCTIO"}
{"task_id": "HumanEval/78", "completion": "\nhex_key(num)\n  result = 0\n  for each character c in num\n    if c is '2' or c is '3' or c is '5' or c is '7' or c is 'B' or c is 'D' or c is 'F'\n      increment result by 1\n  return result\n"}
{"task_id": "HumanEval/78", "completion": "\nfunction hex_key(num)\n    prime_hex = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    count = 0\n    for i from 0 to length(num) - 1 do\n        digit = substr(num, i, 1)\n        if digit in prime_hex then\n            count = count + 1\n        end if\n    end for\n    return count\nend function\n"}
{"task_id": "HumanEval/78", "completion": "\nALGORITHM hex_key(num)\n\n   DECLARE count INTEGER = 0\n   DECLARE hex_map CHARACTER = \"23BDF\"\n   DECLARE i INTEGER = 0\n   DECLARE j INTEGER = 0\n\n   WHILE i < LENGTH OF num\n      c = CHARACTER AT POSITION i OF num\n      IF c IS IN hex_map THEN\n         j = POSITION OF c IN hex_map + 1\n         IF j IS A PRIME NUMBER THEN\n            INC count BY 1\n         END IF\n      END IF\n      INC i BY 1\n   END WHILE\n\n   RETURN count\n"}
{"task_id": "HumanEval/79", "completion": "\nfunction decimal_to_binary(decimal)\n    result = \"\"\n    while decimal > 0 do\n        remainder = decimal mod 2\n        decimal = integer division of decimal by 2\n        if remainder = 1 then\n            result = \"1\" + result\n        else\n            result = \"0\" + result\n        end if\n    end while\n    return \"db\" + reverse(result) + \"db\"\nend function\n"}
{"task_id": "HumanEval/79", "completion": "\nPROCEDURE decimal_to_binary(decimal)\n    DECLARE binary_string STRING = \"\"\n    DECLARE remainder INTEGER\n    WHILE decimal > 0\n        remainder = decimal % 2\n        IF remainder = 0 THEN\n            binary_string = \"0\" + binary_string\n        ELSE\n            binary_string = \"1\" + binary_string\n        END IF\n        decimal = integer( decimal / 2 )\n    END WHILE\n    RETURN \"db\" + binary_string + \"db"}
{"task_id": "HumanEval/79", "completion": "\nfunction decimal_to_binary(decimal)\n    binary_string = \"\"\n    while decimal > 0\n        remainder = decimal mod 2\n        binary_string = remainder as string + binary_string\n        decimal = integer division of decimal by 2\n    end while\n    result = \"db\" + reverse(binary_string) + \"db\"\n    return result\n"}
{"task_id": "HumanEval/79", "completion": "\nFUNCTION decimal_to_binary(decimal)\n    binary_string = \"\"\n    IF decimal > 0 THEN\n        WHILE decimal > 0 DO\n            remainder = decimal MOD 2\n            IF remainder = 1 THEN\n                binary_string = \"1\" + binary_string\n            ELSE\n                binary_string = \"0\" + binary_string\n            END IF\n            decimal = decimal DIV 2\n        END WHILE\n    END IF\n    binary_string = \"db\" + binary_string + \"db\"\n    RETURN binary_string\nEND FUNCTION\n"}
{"task_id": "HumanEval/79", "completion": "\nfunction decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    binary = \"db\" + binary + \"db\"\n    return binary\n"}
{"task_id": "HumanEval/79", "completion": "\nFUNCTION decimal_to_binary(decimal)\n  result = \"db\"\n  while (decimal > 0) do\n    remainder = decimal modulo 2\n    decimal = integer division of decimal by 2\n    result = remainder + \"b\" + result\n  END WHILE\n  result = \"db\" + result + \"db\"\n  RETURN result\nEND FUNCTIO"}
{"task_id": "HumanEval/79", "completion": "\nfunction decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = (decimal % 2) + binary\n        decimal = decimal // 2\n    result = \"db\" + \"1\" * binary + \"db\"\n    return result\n"}
{"task_id": "HumanEval/79", "completion": "\nfunction decimal_to_binary(decimal)\n    binary = \"\"\n    while decimal > 0\n        remainder = decimal mod 2\n        if remainder == 1 then\n            binary = \"1\" + binary\n        else\n            binary = \"0\" + binary\n        end if\n        decimal = integer division decimal by 2\n    end while\n    return \"db\" + reverse(binary) + \"db\"\n"}
{"task_id": "HumanEval/79", "completion": "\n procedure decimal_to_binary(decimal)\n     result = \"\"\n     while decimal > 0 do\n         remainder = decimal mod 2\n         if remainder = 0 then\n             result = \"0\" + result\n         else\n             result = \"1\" + result\n         decimal = decimal div 2\n     end while\n     result = \"db\" + result + \"db\"\n     return result\n end procedure\n"}
{"task_id": "HumanEval/79", "completion": "\nfunction decimal_to_binary(decimal)\n    result = \"\"\n    decimal_str = str(decimal)\n    binary = \"\"\n    for digit in decimal_str:\n        if int(digit) % 2 == 0:\n            binary += \"0\"\n        else:\n            binary += \"1\"\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\nfunction is_happy(s)\n    if length(s) < 3 then\n        return false\n    end\n    for i from 1 to length(s)-2 do\n        substr = s.substring(i, i+3)\n        if repeat count of each character in substr > 1 then\n            return false\n        end\n    end\n    return true\nend\n"}
{"task_id": "HumanEval/80", "completion": "\nalgorithm is_happy(s)\n    if length(s) < 3 then\n        return false\n    else\n        i = 0\n        while i < length(s) - 2 do\n            substr = s.substring(i, i+3)\n            distinct_count = 0\n            j = 0\n            while j < length(substr) do\n                k = 0\n                is_found = false\n                while k < distinct_count do\n                    if substr.char(j) == distinct_elements[k] then\n                        is_found = true\n                        break\n                    end if\n                    k = k + 1\n                end while\n                if not is_found then\n                    distinct_count = distinct_count + 1\n                    distinct_elements[distinct_count] = substr.char(j)\n                end if\n                j = j + 1\n            end while\n            if distinct_count != 3 then\n                return false\n            end if\n            i = i + 1\n        end while\n    return true\nend algorithm\n"}
{"task_id": "HumanEval/80", "completion": "\nfunction is_happy(s):\n    if length(s) < 3:\n        return False\n    for i from 1 to length(s)-2:\n        for j from i+1 to i+2:\n            if s[i] == s[j]:\n                return False\n    return True\n"}
{"task_id": "HumanEval/80", "completion": "\nfunction is_happy(s):\n    if length of s is less than 3 then\n        return False\n    else\n        for i from 0 to length of s - 2 do\n            slice = substring of s from i to i + 2\n            if length of set containing characters of slice is not equal to 3 then\n                return False\n        end for\n        return True\n"}
{"task_id": "HumanEval/80", "completion": "if length of s is less than 3 then\n    return False\nelse\n    for i from 0 to length of s - 2\n        if character at i equals character at i + 1 or character at i equals character at i + 2 or character at i + 1 equals character at i + 2 then\n            return False\n    return True\n"}
{"task_id": "HumanEval/80", "completion": "\nfunction is_happy(s):\n    if length(s) < 3:\n        return False\n    for i from 1 to length(s)-2:\n        for j from i+1 to i+2:\n            if s[i] == s[j]:\n                return False\n    return True\n"}
{"task_id": "HumanEval/80", "completion": "\nfunction is_happy(s)\n    if length of s < 3\n        return false\n    for i from 0 to length of s - 2\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]\n            return false\n    return true\n"}
{"task_id": "HumanEval/80", "completion": "\nfunction is_happy(s):\n    if length of s is less than 3, return False\n    for i from 0 to length of s - 2:\n        for j from i + 1 to i + 2:\n            for k from j + 1 to length of s:\n                if substring of s from i to j is equal to substring of s from j to k, return False\n    return Tru"}
{"task_id": "HumanEval/80", "completion": "\nfunction is_happy(s)\n    if length(s) < 3 then\n        return false\n    end if\n    for i from 0 to length(s) - 3\n        subset = substring(s, i, i + 3)\n        if count(distinct characters in subset) < 3 then\n            return false\n        end if\n    end for\n    return tru"}
{"task_id": "HumanEval/80", "completion": "\nfunction is_happy(s):\n    if length(s) < 3:\n        return false\n    for i from 0 to length(s)-3:\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return false\n    return tru"}
{"task_id": "HumanEval/81", "completion": "function numerical_letter_grade(grades)\n    result = new list\n    for each grade in grades\n        if grade > 4.0 then\n            append 'A+' to result\n        elif grade > 3.7 then\n            append 'A' to result\n        elif grade > 3.3 then\n            append 'A-' to result\n        elif grade > 3.0 then\n            append 'B+' to result\n        elif grade > 2.7 then\n            append 'B' to result\n        elif grade > 2.3 then\n            append 'B-' to result\n        elif grade > 2.0 then\n            append 'C+' to result\n        elif grade > 1.7 then\n            append 'C' to result\n        elif grade > 1.3 then\n            append 'C-' to result\n        elif grade > 1.0 then\n            append 'D+' to result\n        elif grade > 0.7 then\n            append 'D' to result\n        else\n            append 'F' to result\n    return resul"}
{"task_id": "HumanEval/81", "completion": "INPUT: list of GPAs\nOUTPUT: list of letter grades\n\nIF GPA >= 4.0 THEN\n    OUTPUT \"A+\"\nELSE IF GPA > 3.7 THEN\n    OUTPUT \"A\"\nELSE IF GPA > 3.3 THEN\n    OUTPUT \"A-\"\nELSE IF GPA > 3.0 THEN\n    OUTPUT \"B+\"\nELSE IF GPA > 2.7 THEN\n    OUTPUT \"B\"\nELSE IF GPA > 2.3 THEN\n    OUTPUT \"B-\"\nELSE IF GPA > 2.0 THEN\n    OUTPUT \"C+\"\nELSE IF GPA > 1.7 THEN\n    OUTPUT \"C\"\nELSE IF GPA > 1.3 THEN\n    OUTPUT \"C-\"\nELSE IF GPA > 1.0 THEN\n    OUTPUT \"D+\"\nELSE IF GPA > 0.7 THEN\n    OUTPUT \"D\"\nELSE IF GPA > 0.0 THEN\n    OUTPUT \"D-\"\nELSE\n    OUTPUT \"E\"\n"}
{"task_id": "HumanEval/81", "completion": "\nfunction numerical_letter_grade(grades)\n    result = []\n    for each grade in grades\n        if grade >= 4.0\n            result.append(\"A+\")\n        else if grade > 3.7\n            result.append(\"A\")\n        else if grade > 3.3\n            result.append(\"A-\")\n        else if grade > 3.0\n            result.append(\"B+\")\n        else if grade > 2.7\n            result.append(\"B\")\n        else if grade > 2.3\n            result.append(\"B-\")\n        else if grade > 2.0\n            result.append(\"C+\")\n        else if grade > 1.7\n            result.append(\"C\")\n        else if grade > 1.3\n            result.append(\"C-\")\n        else if grade > 1.0\n            result.append(\"D+\")\n        else if grade > 0.7\n            result.append(\"D\")\n        else if grade > 0.0\n            result.append(\"D-\")\n        else\n            result.append(\"E\")\n    return result\n"}
{"task_id": "HumanEval/81", "completion": "\ninput grades as a list of floats\nlet letter_grades = []\nfor each grade in grades\n    if grade >= 4.0\n        append \"A+\" to letter_grades\n    else if grade > 3.7\n        append \"A\" to letter_grades\n    else if grade > 3.3\n        append \"A-\" to letter_grades\n    else if grade > 3.0\n        append \"B+\" to letter_grades\n    else if grade > 2.7\n        append \"B\" to letter_grades\n    else if grade > 2.3\n        append \"B-\" to letter_grades\n    else if grade > 2.0\n        append \"C+\" to letter_grades\n    else if grade > 1.7\n        append \"C\" to letter_grades\n    else if grade > 1.3\n        append \"C-\" to letter_grades\n    else if grade > 1.0\n        append \"D+\" to letter_grades\n    else if grade > 0.7\n        append \"D\" to letter_grades\n    else\n        append \"E\" to letter_grades\noutput letter_grades\n"}
{"task_id": "HumanEval/81", "completion": "function numerical_letter_grade(grades)\n    result = []\n    for g in grades\n        if g >= 4.0 then\n            result.append(\"A+\")\n        else if g >= 3.7 then\n            result.append(\"A\")\n        else if g >= 3.3 then\n            result.append(\"A-\")\n        else if g >= 3.0 then\n            result.append(\"B+\")\n        else if g >= 2.7 then\n            result.append(\"B\")\n        else if g >= 2.3 then\n            result.append(\"B-\")\n        else if g >= 2.0 then\n            result.append(\"C+\")\n        else if g >= 1.7 then\n            result.append(\"C\")\n        else if g >= 1.3 then\n            result.append(\"C-\")\n        else if g >= 1.0 then\n            result.append(\"D+\")\n        else if g >= 0.7 then\n            result.append(\"D\")\n        else\n            result.append(\"E\")\n    return result\n"}
{"task_id": "HumanEval/81", "completion": "\nfunction numerical_letter_grade(grades)\n    let letter_grades = []\n    \n    for each grade in grades\n        if grade >= 4.0 then\n            letter_grades.append(\"A+\")\n        else if grade > 3.7 then\n            letter_grades.append(\"A\")\n        else if grade > 3.3 then\n            letter_grades.append(\"A-\")\n        else if grade > 3.0 then\n            letter_grades.append(\"B+\")\n        else if grade > 2.7 then\n            letter_grades.append(\"B\")\n        else if grade > 2.3 then\n            letter_grades.append(\"B-\")\n        else if grade > 2.0 then\n            letter_grades.append(\"C+\")\n        else if grade > 1.7 then\n            letter_grades.append(\"C\")\n        else if grade > 1.3 then\n            letter_grades.append(\"C-\")\n        else if grade > 1.0 then\n            letter_grades.append(\"D+\")\n        else if grade > 0.7 then\n            letter_grades.append(\"D\")\n        else\n            letter_grades.append(\"E\")\n    \n    return letter_grades\n"}
{"task_id": "HumanEval/81", "completion": "function numerical_letter_grade(grades)\n    output = []\n    for g in grades\n        if g >= 4.0\n            output.append(\"A+\")\n        elif g > 3.7\n            output.append(\"A\")\n        elif g > 3.3\n            output.append(\"A-\")\n        elif g > 3.0\n            output.append(\"B+\")\n        elif g > 2.7\n            output.append(\"B\")\n        elif g > 2.3\n            output.append(\"B-\")\n        elif g > 2.0\n            output.append(\"C+\")\n        elif g > 1.7\n            output.append(\"C\")\n        elif g > 1.3\n            output.append(\"C-\")\n        elif g > 1.0\n            output.append(\"D+\")\n        elif g > 0.7\n            output.append(\"D\")\n        else\n            output.append(\"D-\")\n    return output\n"}
{"task_id": "HumanEval/81", "completion": "function numerical_letter_grade(grades)\n    result = []\n    for g in grades:\n        if g > 4.0:\n            letter_grade = 'A+'\n        elif g > 3.7:\n            letter_grade = 'A'\n        elif g > 3.3:\n            letter_grade = 'A-'\n        elif g > 3.0:\n            letter_grade = 'B+'\n        elif g > 2.7:\n            letter_grade = 'B'\n        elif g > 2.3:\n            letter_grade = 'B-'\n        elif g > 2.0:\n            letter_grade = 'C+'\n        elif g > 1.7:\n            letter_grade = 'C'\n        elif g > 1.3:\n            letter_grade = 'C-'\n        elif g > 1.0:\n            letter_grade = 'D+'\n        elif g > 0.7:\n            letter_grade = 'D'\n        elif g > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        result.append(letter_grade)\n    return result\n"}
{"task_id": "HumanEval/81", "completion": "\nFUNCTION numerical_letter_grade(grades)\n  DECLARE result AS LIST\n  FOR each g IN grades\n    IF g >= 4.0 THEN\n      result.append('A+')\n    ELSE IF g > 3.7 THEN\n      result.append('A')\n    ELSE IF g > 3.3 THEN\n      result.append('A-')\n    ELSE IF g > 3.0 THEN\n      result.append('B+')\n    ELSE IF g > 2.7 THEN\n      result.append('B')\n    ELSE IF g > 2.3 THEN\n      result.append('B-')\n    ELSE IF g > 2.0 THEN\n      result.append('C+')\n    ELSE IF g > 1.7 THEN\n      result.append('C')\n    ELSE IF g > 1.3 THEN\n      result.append('C-')\n    ELSE IF g > 1.0 THEN\n      result.append('D+')\n    ELSE IF g > 0.7 THEN\n      result.append('D')\n    ELSE IF g > 0.0 THEN\n      result.append('D-')\n    ELSE\n      result.append('E')\n  END FOR\n  RETURN result\n"}
{"task_id": "HumanEval/81", "completion": ""}
{"task_id": "HumanEval/82", "completion": "\nfunction prime_length(s)\n    len_s = length of s\n    if len_s <= 1 then\n        return false\n    elif len_s == 2 then\n        return true\n    else\n        for i from 2 to sqrt(len_s)\n            if len_s mod i == 0 then\n                return false\n        return true\n"}
{"task_id": "HumanEval/82", "completion": "function prime_length(s)\n    length = length of s\n    if length is 1 then\n        return true\n    elif length is 2 then\n        return true\n    else\n        for i from 2 to sqrt(length) inclusive do\n            if length mod i is 0 then\n                return false\n        end for\n        return true\n"}
{"task_id": "HumanEval/82", "completion": "procedure prime_length(s)\n    len = length of s\n    if len <= 1 then\n        return false\n    for i from 2 to sqrt(len) do\n        if len mod i == 0 then\n            return false\n    return true\n"}
{"task_id": "HumanEval/82", "completion": "\nfunction prime_length(s)\n    length = length of s\n    is_prime = true\n    if length <= 1\n        return false\n    else\n        for i from 2 to sqrt(length)\n            if length mod i equals 0\n                is_prime = false\n                break\n        end for\n        return is_prime\n    end if\nend functio"}
{"task_id": "HumanEval/82", "completion": "\nfunction prime_length(str):\n  len_str = length of str\n  is_prime = false\n  if len_str <= 1:\n    return false\n  for i from 2 to sqrt(len_str):\n    if len_str mod i == 0:\n      is_prime = false\n      break\n  else:\n    is_prime = true\n  return is_prime\n"}
{"task_id": "HumanEval/82", "completion": "\nfunction prime_length(s)\n    n = length(s)\n    if n <= 1 then\n        return false\n    end if\n    p = 2\n    while p * p <= n do\n        if n mod p = 0 then\n            return false\n        end if\n        p = p + 1\n    end while\n    return true\n"}
{"task_id": "HumanEval/82", "completion": "function prime_length(s)\n    len_s = length of s\n    is_prime = true\n    for i from 2 to sqrt(len_s)\n        if len_s mod i is 0\n            is_prime = false\n            break\n    return is_prime\n"}
{"task_id": "HumanEval/82", "completion": "\nfunction prime_length(string)\n    length = length of string\n    is_prime = true\n    if length < 2 then\n        is_prime = false\n    else\n        for i from 2 to sqrt(length) do\n            if length mod i = 0 then\n                is_prime = false\n                break\n            end if\n        end for\n    end if\n    return is_prime\nend function\n"}
{"task_id": "HumanEval/82", "completion": "\nfunction prime_length(s)\n    len_s = length of s\n    if len_s <= 1 then\n        return false\n    else\n        for i from 2 to sqrt(len_s) do\n            if len_s mod i = 0 then\n                return false\n        end for\n        return true\n"}
{"task_id": "HumanEval/82", "completion": "\nfunction prime_length(s)\n    length = length of s\n    is_prime = true\n    if length <= 1 then\n        is_prime = false\n    else\n        for i from 2 to sqrt(length) do\n            if length mod i == 0 then\n                is_prime = false\n                break\n            end if\n        end for\n    end if\n    return is_prime\n"}
{"task_id": "HumanEval/83", "completion": "\nFUNCTION starts_one_ends(n)\n    COUNT = 0\n    FOR i FROM 10 TO 10^n - 1\n        IF i MOD 10 = 1 OR i MOD 10^n - 1 = 1 THEN\n            COUNT = COUNT + 1\n        END IF\n    NEXT i\n    RETURN COUNT\nEND FUNCTION\n"}
{"task_id": "HumanEval/83", "completion": "\ninput: n\ncount = 0\nfor i from 10^(n-1) to 10^n - 1:\n    if i mod 10 = 1 or last digit of i = 1:\n        count = count + 1\noutput: count\n"}
{"task_id": "HumanEval/83", "completion": ""}
{"task_id": "HumanEval/83", "completion": "\nfunction starts_one_ends(n):\n    count = 0\n    for i from 1 to 10^(n-1):\n        if (i % 10 == 1) or (i % 10^n == 1):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/83", "completion": "\nALGORITHM:\n    Function starts_one_ends(n)\n        count = 0\n        FOR i FROM 1 TO 10^n - 1\n            num = i\n            WHILE num > 0\n                IF digit(num, 0) == 1 OR digit(num, length(num) - 1) == 1\n                    count = count + 1\n                    BREAK\n                ELSE\n                    num = integer division(num, 10)\n            END WHILE\n        NEXT i\n        RETURN count\n    END Function\n"}
{"task_id": "HumanEval/83", "completion": "\nALGORITHM starts_one_ends(n)\n    result = 0\n    FOR i FROM 1 TO 9\n        IF n == 1\n            result += 10 - 1  // count of 1-digit numbers that start or end with 1\n        ELSE\n            result += 10 * (9 * (10^(n-2)) + 9)  // count of n-digit numbers that start with 1\n            result += 9 * (10^(n-1))  // count of n-digit numbers that end with 1\n        END IF\n    END FOR\n    RETURN result\nEND ALGORITHM\n"}
{"task_id": "HumanEval/83", "completion": "FUNCTION starts_one_ends(n)\n    COUNT = 0\n    FOR i FROM 1 TO 10^n - 1\n        IF DIGIT(i, 0) == 1 OR DIGIT(i, n-1) == 1\n            INCREMENT COUNT\n    RETURN COUNT\n"}
{"task_id": "HumanEval/83", "completion": "\nPROCEDURE StartsOneEnds(n)\n    DECLARE i AS INTEGER\n    DECLARE count AS INTEGER\n    SET count TO 0\n\n    FOR i FROM 1 TO 10^n - 1 DO\n        IF (i MOD 10 = 1 OR i DIV 10^(n-1) MOD 10 = 1) THEN\n            INCREMENT count\n        END IF\n    NEXT i\n\n    RETURN count + 1\nEND PROCEDURE\n"}
{"task_id": "HumanEval/83", "completion": ""}
{"task_id": "HumanEval/83", "completion": "\nALGORITHM STARTS_ONE_ENDS(n)\n\n    count := 0\n\n    FOR i FROM 10 TO 10^n - 1 DO\n        IF i >= 10^(n-1) AND i MOD 10 = 1 THEN\n            count := count + 1\n        END IF\n        IF i MOD 10 = 1 THEN\n            count := count + 1\n        END IF\n    END FOR\n\n    RETURN count\nEND ALGORITH"}
{"task_id": "HumanEval/84", "completion": "function solve(N)\n    sum = 0\n    binary = \"\"\n    while N > 0\n        remainder = N mod 2\n        if remainder == 0 then\n            binary = \"0\" + binary\n        else\n            binary = \"1\" + binary\n        end if\n        sum = sum + remainder\n        N = floor(N / 2)\n    end while\n    return binary\n"}
{"task_id": "HumanEval/84", "completion": "\nFUNCTION solve(N)\n    SUM = 0\n    TEMP = N\n    WHILE TEMP > 0\n        DIGIT = TEMP MOD 2\n        SUM = SUM + DIGIT\n        TEMP = TEMP DIV 2\n    END WHILE\n    RETURN BIN(SUM)\nEND FUNCTION\n"}
{"task_id": "HumanEval/84", "completion": "\nPROCEDURE solve(N)\n   DECLARE binary_sum INT\n   DECLARE remainder INT\n   DECLARE result STRING\n\n   WHILE N > 0\n      REMAINDER \u2190 N % 2\n      BINARY_SUM \u2190 BINARY_SUM + REMAINDER\n      N \u2190 N / 2\n   END WHILE\n\n   RESULT \u2190 INTEGER_TO_BINARY(BINARY_SUM)\n\n   OUTPUT RESULT\nEND PROCEDURE\n"}
{"task_id": "HumanEval/84", "completion": "\nPROCEDURE solve(N)\n    DECLARE sum INTEGER\n    DECLARE bin INTEGER\n    DECLARE remainder INTEGER\n    DECLARE i INTEGER\n    DECLARE temp_string STRING\n    \n    sum = 0\n    WHILE N > 0 DO\n        remainder = N MOD 2\n        IF remainder = 1 THEN\n            sum = sum + 1\n        END IF\n        N = N DIV 2\n    END WHILE\n    temp_string = \"\"\n    WHILE sum > 0 DO\n        bin = sum MOD 10\n        temp_string = temp_string || str(bin)\n        sum = sum DIV 10\n    END WHILE\n    RETURN temp_string\nEND PROCEDURE\n"}
{"task_id": "HumanEval/84", "completion": "\nPROCEDURE solve(N)\n    DECLARE sum INTEGER\n    DECLARE binaryString STRING\n    SET sum TO 0\n    WHILE N > 0 DO\n        SET remainder TO N MOD 2\n        IF remainder == 0 THEN\n            SET binaryString TO \"0\" + binaryString\n        ELSE\n            SET binaryString TO \"1\" + binaryString\n        END IF\n        SET sum TO sum + remainder\n        SET N TO FLOOR(N / 2)\n    END WHILE\n    RETURN String(sum)\nEND PROCEDURE\n"}
{"task_id": "HumanEval/84", "completion": "function solve(N)\n    result = \"\"\n    while N > 0\n        remainder = N mod 2\n        N = floor(N / 2)\n        if remainder == 1\n            result = \"1\" + result\n        else\n            result = \"0\" + result\n    end while\n    return resul"}
{"task_id": "HumanEval/84", "completion": "\nALGORITHM\nFunctions:\n    Solve(N)\nInputs:\n    N: Positive Integer\nOutputs:\n    binary_sum: String\n\nVariables:\n    bin_sum: Integer\n    remainder: Integer\n    temp: Integer\n\nBegin Solve(N)\n    bin_sum = 0\n    temp = N\n\n    While temp > 0\n        remainder = temp mod 2\n        bin_sum = bin_sum + remainder\n        temp = temp div 2\n\n    While bin_sum > 0\n        remainder = bin_sum mod 2\n        Print(remainder)\n        bin_sum = bin_sum div 2\n\nEnd Solve(N"}
{"task_id": "HumanEval/84", "completion": "\nFUNCTION solve(N)\n    DECLARE binary_string AS STRING\n    DECLARE sum AS INTEGER\n    SET sum = 0\n    WHILE N > 0\n        temp = N % 2\n        IF temp = 1 THEN\n            ADD '1' TO binary_string\n        ELSE\n            ADD '0' TO binary_string\n        END IF\n        SET sum = sum + temp\n        SET N = FLOOR(N/2)\n    END WHILE\n    RETURN DECIMAL_TO_BINARY(sum)\nEND FUNCTIO"}
{"task_id": "HumanEval/84", "completion": "function solve(N):\n    binary = \"\"\n    while N > 0:\n        remainder = N mod 2\n        if remainder == 0 then\n            binary = \"0\" + binary\n        else\n            binary = \"1\" + binary\n        N = N div 2\n    return binary\n"}
{"task_id": "HumanEval/84", "completion": "\nalgorithm BinarySum(N)\n    set sum as 0\n    repeat N times\n        remainder as N mod 2\n        sum as sum + remainder\n        N as N divided by 2\n    while N > 0\n    convert sum to binary\n    return binary\nend algorith"}
{"task_id": "HumanEval/85", "completion": ""}
{"task_id": "HumanEval/85", "completion": "data: lst\nsum = 0\nfor i from 1 to length(lst) - 1 step 2 do\n    if lst[i] mod 2 = 0 then\n        sum = sum + lst[i]\nreturn sum\n"}
{"task_id": "HumanEval/85", "completion": "function add(lst)\n    sum = 0\n    for i = 1 to length(lst) - 1 step 2 do\n        if lst[i] mod 2 = 0 then\n            sum = sum + lst[i]\n    return su"}
{"task_id": "HumanEval/85", "completion": "\nALGORITHM:\nFunction: add(lst)\n    Declare variable sum as 0\n    Initialize an index as 1\n    While index is less than or equal to length of list\n        If (index - 1) is even and element at index is even\n            Add element at index to sum\n        Increment index by 1\n    Return sum\nEND FUNCTION\n"}
{"task_id": "HumanEval/85", "completion": "\nfunction add(lst)\n    sum = 0\n    for i from 1 to length(lst) step 2 do\n        if lst[i] mod 2 == 0 then\n            sum = sum + lst[i]\n        end if\n    end for\n    return sum\nend function\n"}
{"task_id": "HumanEval/85", "completion": "\nfunction add(lst)\n    sum = 0\n    for i from 1 to length(lst) step 2\n        if lst[i] mod 2 == 0\n            sum = sum + lst[i]\n    return sum\n"}
{"task_id": "HumanEval/85", "completion": "\nALGORITHM: add\n    DECLARE result = 0\n    DECLARE i = 0\n    FOR each element e IN lst\n        IF i IS ODD AND e MOD 2 = 0\n            ADD e TO result\n        INCREMENT i BY 1\n    RETURN result\n"}
{"task_id": "HumanEval/85", "completion": "\nSUM = 0\nFOR i FROM 1 TO LENGTH(lst) - 1 BY 2\n    IF lst[i] MOD 2 = 0 THEN\n        SUM = SUM + lst[i]\n    END IF\nEND FOR\nRETURN SU"}
{"task_id": "HumanEval/85", "completion": "function add(lst)\n    sum = 0\n    for i from 1 to length(lst) - 1 step 2\n        if lst[i] mod 2 == 0 then\n            sum = sum + lst[i]\n        end if\n    return sum\n"}
{"task_id": "HumanEval/85", "completion": "\ndata result := 0\nfor i := 1 to length(lst) - 1 step 2 do\n    if lst[i] mod 2 = 0 then\n        result := result + lst[i]\nreturn result\n"}
{"task_id": "HumanEval/86", "completion": "\nfunction anti_shuffle(s):\n    words = split(s, ' ')\n    result = \"\"\n    for word in words:\n        sorted_chars = sort(word)\n        result += join(sorted_chars) + \" \"\n    return trim(result)\n"}
{"task_id": "HumanEval/86", "completion": "function anti_shuffle(s):\n    s = s.split(' ')\n    result = ''\n    for word in s:\n        temp = sorted(word)\n        result += ''.join(temp) + ' '\n    return result.strip()\n"}
{"task_id": "HumanEval/86", "completion": "\nfunction anti_shuffle(s):\n    words = split(s, ' ')\n    result = ''\n    for word in words:\n        char_list = []\n        for char in word:\n            char_list.append(char)\n        char_list.sort()\n        result += ''.join(char_list) + ' '\n    return result.strip("}
{"task_id": "HumanEval/86", "completion": "\nfunction anti_shuffle(s)\n    words = s.split(\" \")\n    result = \"\"\n    for word in words:\n        sorted_word = \"\".join(sorted(word))\n        result += sorted_word + \" \"\n    return result.trim()\nend function\n"}
{"task_id": "HumanEval/86", "completion": "function anti_shuffle(s)\n    words = s.split(\" \")\n    result = \"\"\n    \n    for word in words:\n        sorted_word = \"\".join(sorted(word))\n        result = result + sorted_word + \" \"\n        \n    return result.strip()\n"}
{"task_id": "HumanEval/86", "completion": "function anti_shuffle(s):\n    words = s.split()\n    result = \"\"\n    for word in words:\n        char_list = list(word)\n        char_list.sort()\n        result += \"\".join(char_list) + \" \"\n    return result.strip("}
{"task_id": "HumanEval/86", "completion": "\nFUNCTION anti_shuffle(s)\n  WORDS = s.split(\" \")\n  RESULT = \"\"\n  FOR EACH WORD IN WORDS\n    CHARACTERS = SORT(CHARACTER IN WORD FOR CHARACTER IN WORD)\n    RESULT = RESULT + \"\".join(CHARACTERS) + \" \"\n  END FOR\n  RETURN TRIM(RESULT)\nEND FUNCTION\n"}
{"task_id": "HumanEval/86", "completion": "\nfunction anti_shuffle(s)\n    words = split(s, \" \")\n    result = \"\"\n    \n    for word in words\n        char_list = sort(enumerate(word), lambda x, y: x[1] - y[1])\n        result = result + join([char[1] for char in char_list], \"\")\n        result = result + \" \"\n    end\n    \n    return trim(result"}
{"task_id": "HumanEval/86", "completion": "PROCEDURE anti_shuffle(s)\n  FOR each word in s split by spaces\n    FOR each character c in word\n      output the ASCII value of c\n    END FOR\n  END FOR\nEND PROCEDURE\n"}
{"task_id": "HumanEval/86", "completion": "\nfunction anti_shuffle(s)\n    input_string = s.split(' ')\n    output_string = ''\n    for word in input_string:\n        sorted_word = sorted(word)\n        output_string += ''.join(sorted_word) + ' '\n    return output_string.strip("}
{"task_id": "HumanEval/87", "completion": "\nfunction get_row(lst, x)\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n"}
{"task_id": "HumanEval/87", "completion": "function get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return resul"}
{"task_id": "HumanEval/87", "completion": "function get_row(lst, x):\n    result = []\n    for i, row in enumerate(sorted([[i, j] for i, row in enumerate(lst) for j, val in enumerate(row) if val == x])):\n        result.append((i, len(row) - 1 - (list(reversed(row)).index(x)))\n    return resul"}
{"task_id": "HumanEval/87", "completion": "\nfunction get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            index = lst[i].index(x)\n            result.append((i, len(lst[i]) - 1 - index))\n    result.sort()\n    return result\n"}
{"task_id": "HumanEval/87", "completion": ""}
{"task_id": "HumanEval/87", "completion": "FUNCTION get_row(lst, x)\n    // Create an empty list to store the result\n    result = []\n\n    // Iterate over the list of lists\n    FOR each sublist IN lst\n        // Check if x exists in the current sublist\n        IF x IN sublist\n            // Find the indices of x in the current sublist\n            indices = [i FOR i, element IN enumerate(sublist) WHERE element == x]\n            \n            // Add the coordinates to the result list\n            FOR index IN indices\n                result.append((lst.index(sublist), index))\n                \n    // Sort the result list by row in ascending order and then by column in descending order\n    result.sort(key=lambda x: (x[0], -x[1]))\n    \n    RETURN resul"}
{"task_id": "HumanEval/87", "completion": "function get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            coords = [(i, j) for j, val in enumerate(row[::-1]) if val == x]\n            result.extend(coords)\n    return sorted(result)\n"}
{"task_id": "HumanEval/87", "completion": "function get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, elem in enumerate(reversed(row)):\n                if elem == x:\n                    coordinates.append((i, len(row) - 1 - j))\n                    break\n    return sorted(coordinates)\n"}
{"task_id": "HumanEval/87", "completion": "function get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            col_idx = lst[i].index(x)\n            result.append((i, len(lst[i]) - 1 - col_idx))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return resul"}
{"task_id": "HumanEval/87", "completion": "function get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n"}
{"task_id": "HumanEval/88", "completion": "\nfunction sort_array(array)\n    sum = array[0] + array[length(array) - 1]\n    if remainder(sum, 2) == 1 then\n        array_copy = duplicate array\n        sort array_copy in ascending order\n        return array_copy\n    else\n        array_copy = duplicate array\n        sort array_copy in descending order\n        return array_copy\n    end if\nend function\n"}
{"task_id": "HumanEval/88", "completion": "\nALGORITHM:\nFUNCTION sort_array(array)\n    IF length of array is less than 1 THEN\n        RETURN array\n    END IF\n    sum = array[0] + array[length of array - 1]\n    IF sum is odd THEN\n        array_copy = new empty array\n        FOR each element x in array\n            IF x is greater than largest element in array_copy THEN\n                INSERT x at end of array_copy\n            ELSE IF x is smaller than smallest element in array_copy THEN\n                INSERT x at beginning of array_copy\n            ELSE\n                INSERT x in correct position in array_copy\n            END IF\n        END FOR\n        RETURN array_copy\n    ELSE\n        array_copy = new empty array\n        FOR each element x in array\n            INSERT x in array_copy\n        END FOR\n        array_copy = reverse array_copy\n        RETURN array_copy\n    END IF\nEND FUNCTION\n"}
{"task_id": "HumanEval/88", "completion": "function sort_array(array)\n    if length(array) == 0 then\n        return array\n    end\n    sum = array[0] + array[length(array)-1]\n    if sum mod 2 == 0 then\n        array = sorted(array, ascending=False)\n    else\n        array = sorted(array)\n    end\n    return array\n"}
{"task_id": "HumanEval/88", "completion": "\nFunction sort_array(array)\n    sum_first_last = first element of array + last element of array\n    if sum_first_last is odd then\n        sorted_array = a copy of array\n        sort sorted_array in ascending order\n    else\n        sorted_array = a copy of array\n        sort sorted_array in descending order\n    end if\n    return sorted_array\nEnd Function\n"}
{"task_id": "HumanEval/88", "completion": "if length of array is 0 then\n    return array\nelse\n    first element = array[0]\n    last element = array[length of array - 1]\n    sum = first element + last element\n    if sum is odd then\n        copy = new array from array\n        sort copy in ascending order\n        return copy\n    else\n        copy = new array from array\n        sort copy in descending order\n        return copy\n"}
{"task_id": "HumanEval/88", "completion": "\nfunction sort_array(array)\n    sum_of_first_last = array[0] + array[len(array) - 1]\n    \n    if sum_of_first_last mod 2 == 1 then\n        array_copy = array\n        sorted_array = sort(array_copy)\n        return sorted_array\n    else\n        array_copy = array\n        sorted_array = sort(array_copy, desc = true)\n        return sorted_array\n    end if\nend function\n"}
{"task_id": "HumanEval/88", "completion": "function sort_array(array)\n    if size(array) == 0\n        return array\n    end\n    first_value = array[0]\n    last_value = array[size(array)-1]\n    sum = first_value + last_value\n    if sum mod 2 == 0\n        array_copy = new array\n        for i from 0 to size(array)-1\n            for j from i+1 to size(array)-1\n                if array[i] > array[j]\n                    temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n            end\n        end\n        return array_copy\n    else\n        array_copy = new array\n        for i from size(array)-1 downto 0\n            for j from i-1 downto 0\n                if array[i] < array[j]\n                    temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n                end\n            end\n        end\n        return array_copy\n    end\n"}
{"task_id": "HumanEval/88", "completion": "ALGORITHM sort_array(array)\n    IF array is empty THEN\n        RETURN array\n    END IF\n    SUM = array[0] + array[length(array) - 1]\n    IF SUM IS ODD THEN\n        NEW_ARRAY = SORT(array) IN ASCENDING ORDER\n    ELSE\n        NEW_ARRAY = SORT(array) IN DESCENDING ORDER\n    END IF\n    RETURN NEW_ARRAY\n"}
{"task_id": "HumanEval/88", "completion": "PROCEDURE sort_array(array)\n    DECLARE sum as integer\n    DECLARE i as integer\n    DECLARE j as integer\n    DECLARE temp as element\n    DECLARE sorted_array as array\n    \n    sum = array[0] + array[length(array) - 1]\n    \n    IF sum MOD 2 = 1 THEN\n        sorted_array = array\n        FOR i = 1 to length(array) - 1\n            FOR j = i+1 to length(array)\n                IF array[i] > array[j] THEN\n                    temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n                END IF\n            END FOR\n        END FOR\n    ELSE\n        sorted_array = array\n        FOR i = 1 to length(array) - 1\n            FOR j = i+1 to length(array)\n                IF array[i] < array[j] THEN\n                    temp = array[i]\n                    array[i] = array[j]\n                    array[j] = temp\n                END IF\n            END FOR\n        END FOR\n    END IF\n    \n    RETURN sorted_array\n"}
{"task_id": "HumanEval/88", "completion": "if length of array is 0 then\n    return a new array with same values as given array\n\nelse\n    sum = first element of array + last element of array\n    if sum is odd then\n        sort array in ascending order\n    else\n        sort array in descending order\n\n    return the sorted array\n"}
{"task_id": "HumanEval/89", "completion": "\nfunction encrypt(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shift_amount = 4  # 2 * 2\n    encrypted_string = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char.lower())\n            new_index = (index + shift_amount) % 26\n            if char.isupper():\n                encrypted_string += alphabet[new_index].upper()\n            else:\n                encrypted_string += alphabet[new_index]\n        else:\n            encrypted_string += char\n    \n    return encrypted_string\n"}
{"task_id": "HumanEval/89", "completion": "\nfunction encrypt(s)\n    result = \"\"\n    for each character c in s\n        if c is lowercase letter\n            ASCII value of 'a' + (ASCII value of c - ASCII value of 'a' + 2 * 2) mod 26\n        else if c is uppercase letter\n            ASCII value of 'A' + (ASCII value of c - ASCII value of 'A' + 2 * 2) mod 26\n        else\n            add c to result\n        end if\n        append result with character\n    end for\n    return result\n"}
{"task_id": "HumanEval/89", "completion": "\nfunction encrypt(s)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shift = 2 * 2\n    result = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char.lower())\n            new_index = (index + shift) % len(alphabet)\n            if char.isupper():\n                result += alphabet[new_index].upper()\n            else:\n                result += alphabet[new_index]\n        else:\n            result += char\n            \n    return result\n"}
{"task_id": "HumanEval/89", "completion": "function encrypt(s)\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        if char in alphabet:\n            position = alphabet.index(char) + 2 * 2\n            if position > len(alphabet):\n                position -= len(alphabet)\n            result += alphabet[position]\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/89", "completion": "\nfunction encrypt(s)\n  // define the size of the alphabet\n  alphabet_size = 26\n  \n  // create a new string to store the result\n  result = \"\"\n  \n  // iterate over each character in the input string\n  for each c in s\n    // get the position of the character in the alphabet (0-25)\n    pos = ord(c) - ord('a')\n    \n    // rotate the position by multiplying it by 2 and taking modulus with alphabet size\n    new_pos = (pos * 2) mod alphabet_size\n    \n    // convert the new position back to character and add it to the result\n    result += chr(new_pos + ord('a'))\n  \n  return result\nend function\n"}
{"task_id": "HumanEval/89", "completion": "function encrypt(s)\n    result = \"\"\n    for each char in s\n        if char is a letter\n            char_code = ASCII value of char\n            if char is lowercase\n                new_char_code = (char_code - 97 + 2 * 2) mod 26 + 97\n            else\n                new_char_code = (char_code - 65 + 2 * 2) mod 26 + 65\n            new_char = character corresponding to new_char_code\n            result = result + new_char\n        else\n            result = result + char\n    return resul"}
{"task_id": "HumanEval/89", "completion": "\nfunction encrypt(s)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shifted_alphabet = alphabet[2*2:] + alphabet[:2*2]\n    result = \"\"\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            result += shifted_alphabet[index]\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/89", "completion": "\nfunction encrypt(s)\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let result = \"\"\n    for each character c in s\n        if c is lowercase\n            let index = alphabet.index(c)\n            if index + (2 * 2) > length(alphabet)\n                result += alphabet[(index + (2 * 2)) % length(alphabet)]\n            else\n                result += alphabet[index + (2 * 2)]\n        else\n            result += c\n    return result\nend function\n"}
{"task_id": "HumanEval/89", "completion": "\nfunction encrypt(s)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in s\n        if char is lowercase letter in alphabet\n            index = alphabet.index(char) + 4*2\n            if index > len(alphabet)\n                index = index - 26\n            result += alphabet[index]\n        else\n            result += char\n    return result\n"}
{"task_id": "HumanEval/89", "completion": "\nfunction encrypt(s)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for each character in s\n        if character is a letter\n            index = alphabet.index(character)\n            new_index = (index + 4*2) mod 26\n            result = result + alphabet[new_index]\n        else\n            result = result + character\n    return result\n"}
{"task_id": "HumanEval/90", "completion": "if len(lst) < 2 then\n  return None\nelse\n  sorted_list = sort(lst)\n  if sorted_list[1] != sorted_list[0] then\n    return sorted_list[1]\n  else\n    return None\n"}
{"task_id": "HumanEval/90", "completion": "if len(lst) < 2:\n    return None\nsorted_lst = sorted(set(lst))\nif len(sorted_lst) < 2:\n    return None\nreturn sorted_lst[1"}
{"task_id": "HumanEval/90", "completion": "\nif is_empty(lst):\n    return None\nelse:\n    lst.sort()\n    for i from 0 to length(lst) - 2:\n        if lst[i] != lst[i + 1]:\n            return lst[i + 1]\n    return None\n"}
{"task_id": "HumanEval/90", "completion": "if len(lst) < 2:\n    return None\nmin_val = min(lst)\nlst.remove(min_val)\nreturn min(lst) if lst else Non"}
{"task_id": "HumanEval/90", "completion": "if length of list is less than 2 then\n    return None\nelse\n    sort list in ascending order\n    get the second smallest element from the sorted list\n    return the second smallest element\n"}
{"task_id": "HumanEval/90", "completion": "if len(lst) < 2 then\n    return None\nelse\n    first = min(lst)\n    lst.remove(first)\n    return min(lst)\n"}
{"task_id": "HumanEval/90", "completion": "if len(lst) < 2:\n    return None\nsmallest = min(lst)\nindex_smallest = lst.index(smallest)\nif index_smallest == len(lst) - 1:\n    return None\nreturn min(x for x in lst if x > smallest)\n"}
{"task_id": "HumanEval/90", "completion": "\nif len(lst) < 2:\n    return None\nlst.sort()\nfor i in range(1, len(lst)):\n    if lst[i] > lst[0]:\n        return lst[i]\nreturn None\n"}
{"task_id": "HumanEval/90", "completion": "\nif len(lst) < 2:\n    return None\n\nlst.sort()\nsecond_smallest = None\nfor num in lst:\n    if num != lst[0]:\n        second_smallest = num\n        break\nelse:\n    return None\nreturn second_smallest\n"}
{"task_id": "HumanEval/90", "completion": "\nfunction next_smallest(lst)\n    sort lst\n    if size(lst) < 2 then\n        return None\n    else\n        return lst[1]\n    end if\nend function\n"}
{"task_id": "HumanEval/91", "completion": "function is_bored(S)\n    boredoms = 0\n    sentence = \"\"\n    for each character in S\n        if character is ' ' or character is '.' or character is '?' or character is '!'\n            if sentence is not \"\" and sentence[0] is \"I\"\n                boredoms = boredoms + 1\n            sentence = \"\"\n        else\n            sentence = sentence + character\n    if sentence is not \"\" and sentence[0] is \"I\"\n        boredoms = boredoms + 1\n    return boredoms\n"}
{"task_id": "HumanEval/91", "completion": "begin\n    read S\n    boredom_count = 0\n    current_sentence = \"\"\n    for char in S:\n        if char in {\".\", \"?\", \"!\"}:\n            if current_sentence != \"\" and current_sentence.lower().startswith(\"i\"):\n                boredom_count = boredom_count + 1\n            current_sentence = \"\"\n        else:\n            current_sentence = current_sentence + char\n    if current_sentence != \"\" and current_sentence.lower().startswith(\"i\"):\n        boredom_count = boredom_count + 1\n    return boredom_count\n"}
{"task_id": "HumanEval/91", "completion": "\nfunction is_bored(S):\n    boredom_count = 0\n    sentence_start = True\n    for char in S + '.':\n        if char == ' ':\n            sentence_start = True\n        elif char in ['.', '?', '!']:\n            sentence_start = True\n        elif char == 'I' and sentence_start:\n            boredom_count = boredom_count + 1\n            sentence_start = False\n        else:\n            sentence_start = False\n    return boredom_count\n"}
{"task_id": "HumanEval/91", "completion": "\nfunction is_bored(S)\n    sentences = split(S, ['.', '?', '!'])\n    boredom_count = 0\n    for each sentence in sentences\n        if sentence starts with \"I\"\n            boredom_count = boredom_count + 1\n    return boredom_coun"}
{"task_id": "HumanEval/91", "completion": "\ndefine function is_bored(S)\n    initialize counter = 0\n    split S into sentences using '.' as delimiter\n    for each sentence\n        if sentence starts with 'I'\n            increment counter by 1\n    return counter\n"}
{"task_id": "HumanEval/91", "completion": "\nfunction is_bored(S)\n    boredom_count = 0\n    sentences = split(S, ['.', '?', '!'])\n    for each sentence in sentences\n        if starts_with(sentence, 'I')\n            boredom_count = boredom_count + 1\n    return boredom_count\n"}
{"task_id": "HumanEval/91", "completion": "\nfunction is_bored(S):\n    sentences = split(S, \".?!\")\n    count = 0\n    for s in sentences:\n        if starts_with(s, \"I\"):\n            count = count + 1\n    return count\n"}
{"task_id": "HumanEval/91", "completion": "\nfunction is_bored(S)\n    boredom_count = 0\n    sentences = split(S, \".|?!\")\n    for sentence in sentences:\n        if startsWith(sentence, \"I\"):\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "HumanEval/91", "completion": "function is_bored(S)\n    sentences = split(S, '.?!')\n    boredom_count = 0\n    for sentence in sentences:\n        if startswith(sentence, 'I'):\n            boredom_count = boredom_count + 1\n    return boredom_count\n"}
{"task_id": "HumanEval/91", "completion": ""}
{"task_id": "HumanEval/92", "completion": "function result = any_int(x, y, z)\n    if (is_integer(x) && is_integer(y) && is_integer(z)) then\n        if (x == y + z || x == y - z || y == x + z || y == x - z || z == x + y || z == x - y) then\n            return true\n        else\n            return false\n        end if\n    else\n        return false\n    end if\n"}
{"task_id": "HumanEval/92", "completion": ""}
{"task_id": "HumanEval/92", "completion": "\nfunction any_int(x, y, z)\n    if is_integer(x) and is_integer(y) and is_integer(z)\n        if x == y + z or x + y == z or x + z == y\n            return true\n        else\n            return false\n    else\n        return false\n    end if\nend function\n"}
{"task_id": "HumanEval/92", "completion": "\nfunction any_int(x: int, y: int, z: int)\n    if not (is_integer(x) and is_integer(y) and is_integer(z)) then\n        return false\n    end if\n    if x == y + z or x + y == z or x + z == y then\n        return true\n    else\n        return false\n    end if\nend function\n"}
{"task_id": "HumanEval/92", "completion": "\nFUNCTION any_int(x, y, z)\n    IF (x AND y AND z) ARE INT\n        IF (x == y + z) OR (y == x + z) OR (z == x + y)\n            RETURN TRUE\n        ELSE\n            RETURN FALSE\n    ELSE\n        RETURN FALSE\n    END IF\nEND FUNCTIO"}
{"task_id": "HumanEval/92", "completion": ""}
{"task_id": "HumanEval/92", "completion": ""}
{"task_id": "HumanEval/92", "completion": "function any_int(x, y, z)\n    if is_integer(x) and is_integer(y) and is_integer(z)\n        if x == y + z or x + y == z or y + z == x\n            return True\n        else\n            return False\n    else\n        return False\n"}
{"task_id": "HumanEval/92", "completion": "\nfunction any_int(x, y, z)\n    if not (x is an integer and y is an integer and z is an integer)\n        return false\n    if x == y + z or x == z + y or y == x + z\n        return true\n    return false\n"}
{"task_id": "HumanEval/92", "completion": "\nfunction any_int(x, y, z)\n    if not (is_integer(x) and is_integer(y) and is_integer(z))\n        return false\n    if x == y + z or x + y == z or x + z == y\n        return true\n    return false\n"}
{"task_id": "HumanEval/93", "completion": "function encode(message)\n    result = \"\"\n    for char in message\n        if char >= 'a' and char <= 'z'\n            if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u'\n                result = result + chr((ord(char) + 2) % 26 + 97)\n            else\n                result = result + chr(ord(char) + 32)\n        elif char >= 'A' and char <= 'Z'\n            if char == 'A' or char == 'E' or char == 'I' or char == 'O' or char == 'U'\n                result = result + chr((ord(char) + 2) % 26 + 65)\n            else\n                result = result + chr(ord(char) - 32)\n        else\n            result = result + char\n    return result\n"}
{"task_id": "HumanEval/93", "completion": "function encode(message):\n    result = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                if char in 'aeiou':\n                    result += chr((ord(char) + 2 - ord('a') % 26 + ord('a'))\n                else:\n                    result += chr(ord(char) + 32)\n            else:\n                if char in 'AEIOU':\n                    result += chr((ord(char) + 2 - ord('A') % 26 + ord('A'))\n                else:\n                    result += chr(ord(char) - 32)\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/93", "completion": "\nFUNCTION Encode(message)\n    result = \"\"\n    FOR each character c in message\n        IF c is uppercase\n            IF c is 'A', 'E', 'I', 'O', 'U' THEN\n                result = result + chr(ord(c) - 13)\n            ELSE\n                result = result + chr(ord(c) + 1)\n        ELSE\n            IF c is 'a', 'e', 'i', 'o', 'u' THEN\n                result = result + chr(ord(c) + 3)\n            ELSE\n                result = result + chr(ord(c) + 1)\n    RETURN result\nEND FUNCTIO"}
{"task_id": "HumanEval/93", "completion": "\nfunction encode(message)\n    encoded_message = \"\"\n    for each character c in message\n        if c is a lowercase letter\n            if c is a vowel\n                encoded_c = chr(ord(c) + 2)\n            else\n                encoded_c = chr(ord(c) - 32)\n        else\n            if c is a vowel\n                encoded_c = chr(ord(c) + 2 - 32)\n            else\n                encoded_c = chr(ord(c) + 32)\n        end if\n        append encoded_c to encoded_message\n    end for\n    return encoded_message\n"}
{"task_id": "HumanEval/93", "completion": "\ninput message\n    create an empty string called result\n    for each character in the message\n        if the character is a lowercase letter\n            if the character is a vowel\n                calculate the character 2 places ahead in the alphabet (wrapping around to 'a' after 'z')\n                add this character to the result\n            else\n                convert the character to uppercase\n                add this character to the result\n        else if the character is an uppercase letter\n            if the character is a vowel\n                calculate the character 2 places ahead in the alphabet (wrapping around to 'A' after 'Z')\n                add this character to the result\n            else\n                convert the character to lowercase\n                add this character to the result\n        else\n            add the character to the result as is\n    return the result\n"}
{"task_id": "HumanEval/93", "completion": "\nfunction encode(message)\n    result = \"\"\n    for character in message\n        if isVowel(character) then\n            vowelIndex = getVowelIndex(character)\n            newCharacter = getLetter(vowelIndex + 2)\n        else\n            newCharacter = character\n        end if\n        if isUppercase(character) then\n            result = result + lowercase(newCharacter)\n        else\n            result = result + uppercase(newCharacter)\n        end if\n    end for\n    return result\nend function\n\nfunction isVowel(character)\n    return character == \"a\" or character == \"e\" or character == \"i\" or character == \"o\" or character == \"u\"\nend function\n\nfunction getVowelIndex(character)\n    if character == \"a\" then return 0\n    if character == \"e\" then return 4\n    if character == \"i\" then return 8\n    if character == \"o\" then return 14\n    if character == \"u\" then return 18\n    return -1\nend function\n\nfunction getLetter(index)\n    if index < 26 then return chr(index + 97)\n    if index < 52 then return chr(index - 26 + 65)\n    return \"error\"\nend functio"}
{"task_id": "HumanEval/93", "completion": "\nFUNCTION ENCODE(MESSAGE)\n    NEW_MESSAGE = \"\"\n    FOR EACH CHARACTER C IN MESSAGE\n        IF IS_UPPER_CASE(C) THEN\n            IF C == \"A\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"C\"\n            ELSE IF C == \"B\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"D\"\n            ELSE IF C == \"C\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"E\"\n            ELSE IF C == \"D\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"F\"\n            ELSE IF C == \"E\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"G\"\n            ELSE IF C == \"F\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"H\"\n            ELSE IF C == \"G\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"I\"\n            ELSE IF C == \"H\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"K\"\n            ELSE IF C == \"I\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"K\"\n            ELSE IF C == \"J\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"L\"\n            ELSE IF C == \"K\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"M\"\n            ELSE IF C == \"L\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"N\"\n            ELSE IF C == \"M\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"O\"\n            ELSE IF C == \"N\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"O\"\n            ELSE IF C == \"O\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"Q\"\n            ELSE IF C == \"P\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"R\"\n            ELSE IF C == \"Q\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"S\"\n            ELSE IF C == \"R\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"U\"\n            ELSE IF C == \"S\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"V\"\n            ELSE IF C == \"T\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"W\"\n            ELSE IF C == \"U\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"X\"\n            ELSE IF C == \"V\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"Y\"\n            ELSE IF C == \"W\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"Z\"\n            ELSE IF C == \"X\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"A\"\n            ELSE IF C == \"Y\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"B\"\n            ELSE IF C == \"Z\" THEN\n                NEW_MESSAGE = NEW_MESSAGE + \"C\"\n            ELSE\n                IF C == \"a\" THEN\n                    IF C == \"a\" THEN\n                        NEW_MESSAGE = NEW_MESSAGE + \"c\"\n                    ELSE IF C == \"e\" THEN\n                        NEW_MESSAGE = NEW_MESSAGE + \"g\"\n                    ELSE IF C == \"i\" THEN\n                        NEW_MESSAGE = NEW_MESSAGE + \"k\"\n                    ELSE IF C == \"o\" THEN\n                        NEW_MESSAGE = NEW_MESSAGE + \"q\"\n                    ELSE IF C == \"u\" THEN\n                        NEW_MESSAGE = NEW_MESSAGE + \"x\"\n                ELSE\n                    NEW_MESSAGE = NEW_MESSAGE + C\n        ELSE\n            NEW_MESSAGE = NEW_MESSAGE + C\n    END FOR\n    RETURN NEW_MESSAGE\nEND FUNCTION\n"}
{"task_id": "HumanEval/93", "completion": "\nfunction encode(message)\n    result = \"\"\n    for each character in message\n        if character is uppercase\n            if character is a vowel\n                index = find_index_of_vowel(character) + 2\n                result = result + chr(index_to_ascii(index))\n            else\n                result = result + character\n        else\n            if character is a vowel\n                index = find_index_of_vowel(character.upper()) + 2\n                result = result + chr(index_to_ascii(index)).lower()\n            else\n                result = result + character\n    return result\n"}
{"task_id": "HumanEval/93", "completion": "\nfunction encode(message)\n    result = \"\"\n    for each character c in message\n        if c is lowercase letter then\n            if c is \"a\" or c is \"e\" or c is \"i\" or c is \"o\" or c is \"u\" then\n                if c is \"a\" then new_c = \"c\"\n                if c is \"e\" then new_c = \"g\"\n                if c is \"i\" then new_c = \"k\"\n                if c is \"o\" then new_c = \"q\"\n                if c is \"u\" then new_c = \"y\"\n                result = result + chr(ord(new_c) + ord(c) - 2*ord(\"a\"))\n            else\n                result = result + chr(ord(c) + 32)\n        else if c is uppercase letter then\n            if c is \"a\" or c is \"e\" or c is \"i\" or c is \"o\" or c is \"u\" then\n                if c is \"A\" then new_c = \"C\"\n                if c is \"E\" then new_c = \"G\"\n                if c is \"I\" then new_c = \"K\"\n                if c is \"O\" then new_c = \"Q\"\n                if c is \"U\" then new_c = \"Y\"\n                result = result + chr(ord(new_c) + ord(c) - 2*ord(\"A\"))\n            else\n                result = result + chr(ord(c) - 32)\n        else\n            result = result + c\n    return result\n"}
{"task_id": "HumanEval/93", "completion": "\nfunction encode(message)\n    result = \"\"\n    for each character in message\n        if character is uppercase then\n            if character is \"A\", \"E\", \"I\", \"O\", \"U\" then\n                result += chr(ord(character) + 2)\n            else\n                result += character.lower()\n        else if character is lowercase then\n            if character is \"a\", \"e\", \"i\", \"o\", \"u\" then\n                result += chr(ord(character) + 2)\n            else\n                result += character.upper()\n        else\n            result += character\n    return resul"}
{"task_id": "HumanEval/94", "completion": "function find_largest_prime_sum_digits(lst)\n    max_prime = 0\n    for each num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    sum_digits = 0\n    while max_prime > 0:\n        sum_digits += max_prime % 10\n        max_prime //= 10\n    return sum_digits\n\nfunction is_prime(num)\n    if num <= 1:\n        return False\n    for i from 2 to sqrt(num):\n        if num mod i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/94", "completion": "\nfunction is_prime(n):\n    if n <= 1:\n        return false\n    for i from 2 to sqrt(n):\n        if n mod i == 0:\n            return false\n    return true\n\nfunction solution(lst):\n    max_prime = -1\n    for num in lst:\n        if num > 0 and is_prime(num):\n            max_prime = num\n            break\n    if max_prime == -1:\n        return -1\n    else:\n        return sum(int(digit) for digit in str(max_prime)"}
{"task_id": "HumanEval/94", "completion": "\nfunction largest_prime_sum_digits(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))\n\nfunction is_prime(n):\n    if n < 2:\n        return false\n    for i from 2 to sqrt(n):\n        if n mod i == 0:\n            return false\n    return true\n"}
{"task_id": "HumanEval/94", "completion": "\nalgorithm largest_prime_sum_of_digits(input_list):\n    largest_prime = 0\n    for each num in input_list:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits\n\nfunction is_prime(num):\n    if num <= 1:\n        return false\n    for i from 2 to sqrt(num):\n        if num % i == 0:\n            return false\n    return tru"}
{"task_id": "HumanEval/94", "completion": "\ninput lst\nlargest_prime = -1\nfor each num in lst:\n    if is_prime(num) and num > largest_prime:\n        largest_prime = num\nsum_digits = 0\nwhile largest_prime > 0:\n    sum_digits = sum_digits + largest_prime % 10\n    largest_prime = largest_prime // 10\nreturn sum_digits\n\nfunction is_prime(num)\n    if num <= 1:\n        return False\n    for i from 2 to sqrt(num):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/94", "completion": "Function largest_prime_sum(lst)\n    max_prime = 0\n    for each num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n    sum_digits = 0\n    while max_prime > 0:\n        digit = max_prime mod 10\n        sum_digits = sum_digits + digit\n        max_prime = max_prime // 10\n    return sum_digits\n\nFunction is_prime(num)\n    if num <= 1:\n        return False\n    for i from 2 to sqrt(num):\n        if num mod i == 0:\n            return False\n    return Tru"}
{"task_id": "HumanEval/94", "completion": "function find_largest_prime_sum_digits(lst)\n    largest_prime = None\n    max_sum_digits = 0\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n            digit_sum = sum(int(digit) for digit in str(num))\n            if digit_sum > max_sum_digits:\n                max_sum_digits = digit_sum\n    return max_sum_digits\n\nfunction is_prime(n)\n    if n <= 1:\n        return False\n    for i from 2 to sqrt(n):\n        if n % i == 0:\n            return False\n    return Tru"}
{"task_id": "HumanEval/94", "completion": "\nfunction largest_prime_sum_digits(lst)\n    max_prime = 0\n    for each num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    sum_digits = 0\n    for digit in str(max_prime):\n        sum_digits += int(digit)\n    return sum_digits\n\nfunction is_prime(num)\n    if num <= 1:\n        return False\n    for i from 2 to sqrt(num):\n        if num mod i = 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/94", "completion": "function largest_prime_sum(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    digit_sum = 0\n    while max_prime > 0:\n        digit_sum += max_prime % 10\n        max_prime //= 10\n    return digit_sum\n\nfunction is_prime(num):\n    if num < 2:\n        return False\n    for i from 2 to sqrt(num):\n        if num % i == 0:\n            return False\n    return Tru"}
{"task_id": "HumanEval/94", "completion": "\nFunction max_prime_sum_digits(lst)\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))\n\nFunction is_prime(n)\n    if n <= 1:\n        return False\n    for i from 2 to sqrt(n):\n        if n mod i == 0:\n            return False\n    return Tru"}
{"task_id": "HumanEval/95", "completion": "\nfunction check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    flag = True\n    for key in dict:\n        if not (isinstance(key, str) and (key.islower() or key.isupper())):\n            flag = False\n            break\n    return flag\n"}
{"task_id": "HumanEval/95", "completion": "function check_dict_case(dict)\n    if size of dict is 0\n        return False\n    else\n        all_keys_upper = true\n        all_keys_lower = true\n        for each key in dict\n            if type of key is not string\n                return false\n            elif not (key is in lowercase or key is in uppercase)\n                all_keys_upper = false\n                all_keys_lower = false\n                break\n        if all_keys_upper or all_keys_lower\n            return true\n        else\n            return false\n"}
{"task_id": "HumanEval/95", "completion": "if len(dict) == 0 then\n    return False\nelse\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper\n"}
{"task_id": "HumanEval/95", "completion": ""}
{"task_id": "HumanEval/95", "completion": "if is_empty(dict):\n  return false\nelif all(all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())):\n  return true\nelse:\n  return false\n"}
{"task_id": "HumanEval/95", "completion": "\nfunction check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    return all_lower or all_uppe"}
{"task_id": "HumanEval/95", "completion": "\nfunction check_dict_case(dict)\n    if size(dict) == 0 then\n        return false\n    end if\n    \n    all_lowercase = true\n    all_uppercase = true\n    \n    for key in dict.keys()\n        if not (is_string(key) and (all_lowercase_string(key) or all_uppercase_string(key))) then\n            return false\n        end if\n    end for\n    \n    if all_lowercase then\n        return true\n    else if all_uppercase then\n        return true\n    else\n        return false\n    end if\nend function\n\nfunction all_lowercase_string(str)\n    for i = 1 to length(str)\n        if not (str[i] >= 'a' and str[i] <= 'z') then\n            return false\n        end if\n    end for\n    return true\nend function\n\nfunction all_uppercase_string(str)\n    for i = 1 to length(str)\n        if not (str[i] >= 'A' and str[i] <= 'Z') then\n            return false\n        end if\n    end for\n    return true\nend function\n"}
{"task_id": "HumanEval/95", "completion": ""}
{"task_id": "HumanEval/95", "completion": "\nif is_empty(dict):\n    return False\nresult = all(key.islower() for key in dict)\nif result:\n    return True\nresult = all(key.isupper() for key in dict)\nreturn result\n"}
{"task_id": "HumanEval/95", "completion": "function check_dict_case(dict):\n    if len(dict) == 0:\n        return false\n    elif all(isinstance(key, str) and key.islower() for key in dict.keys()):\n        return true\n    elif all(isinstance(key, str) and key.isupper() for key in dict.keys()):\n        return true\n    else:\n        return false\n"}
{"task_id": "HumanEval/96", "completion": "\nfunction count_up_to(n):\n    result = []\n    i = 2\n    while i < n:\n        is_prime = True\n        for j = 2 to sqrt(i):\n            if i mod j = 0:\n                is_prime = False\n                break\n        if is_prime:\n            result.append(i)\n        i = i + 1\n    return resul"}
{"task_id": "HumanEval/96", "completion": "function count_up_to(n):\n    result = []\n    for i from 2 to n-1:\n        is_prime = true\n        for j from 2 to sqrt(i):\n            if i mod j equals 0:\n                is_prime = false\n                break\n        if is_prime:\n            result.append(i)\n    return resul"}
{"task_id": "HumanEval/96", "completion": "\nfunction count_up_to(n)\n    primes = []\n    num = 2\n    while num < n\n        is_prime = true\n        for i = 2 to sqrt(num)\n            if num mod i = 0\n                is_prime = false\n                break\n        if is_prime\n            primes.append(num)\n        num = num + 1\n    return primes\n"}
{"task_id": "HumanEval/96", "completion": "\nfunction count_up_to(n):\n  result = []\n  num = 2\n  while num < n:\n    is_prime = true\n    for i from 2 to sqrt(num):\n      if num mod i == 0:\n        is_prime = false\n        break\n    if is_prime:\n      result.append(num)\n    num = num + 1\n  return result\n"}
{"task_id": "HumanEval/96", "completion": "\nPROCEDURE count_up_to(n)\n    DECLARE primes AS LIST OF INTEGER\n    DECLARE i AS INTEGER\n    DECLARE j AS INTEGER\n    DECLARE is_prime AS BOOLEAN\n    LET primes = []\n    FOR i = 2 TO n - 1\n        SET is_prime = TRUE\n        FOR j = 2 TO SQRT(i)\n            IF i MOD j = 0 THEN\n                SET is_prime = FALSE\n                BREAK\n            END IF\n        NEXT j\n        IF is_prime THEN\n            APPEND i TO primes\n        END IF\n    NEXT i\n    RETURN primes\nEND PROCEDURE\n"}
{"task_id": "HumanEval/96", "completion": "FUNCTION count_up_to(n)\n    result = []\n    i = 2\n    WHILE i < n\n        is_prime = TRUE\n        j = 2\n        WHILE j <= SQRT(i)\n            IF i MOD j = 0\n                is_prime = FALSE\n                BREAK\n            j = j + 1\n        END WHILE\n        IF is_prime\n            result ADD i\n        END IF\n        i = i + 1\n    END WHILE\n    RETURN result\n"}
{"task_id": "HumanEval/96", "completion": "function count_up_to(n):\n    result = []\n    for i from 2 to n - 1:\n        is_prime = true\n        for j from 2 to sqrt(i):\n            if i mod j = 0:\n                is_prime = false\n                break\n        if is_prime:\n            result.append(i)\n    return result\n"}
{"task_id": "HumanEval/96", "completion": "\nfunction count_up_to(n):\n    result = []\n    i = 2\n    while i < n:\n        is_prime = true\n        j = 2\n        while j * j <= i:\n            if i mod j == 0:\n                is_prime = false\n                break\n            j = j + 1\n        if is_prime:\n            result.append(i)\n        i = i + 1\n    return resul"}
{"task_id": "HumanEval/96", "completion": "\nfunction count_up_to(n)\n    if n <= 0 then\n        return []\n    end\n\n    result = []\n    i = 2\n    while i < n\n        is_prime = true\n        j = 2\n        while j * j <= i\n            if i mod j == 0 then\n                is_prime = false\n                break\n            end\n            j = j + 1\n        end\n        if is_prime then\n            result.append(i)\n        end\n        i = i + 1\n    end\n    return result\nend\n"}
{"task_id": "HumanEval/96", "completion": "function count_up_to(n):\n    result = []\n    i = 2\n    while i < n:\n        if is_prime(i):\n            result.append(i)\n        i = i + 1\n    return result\n\nfunction is_prime(k):\n    if k < 2:\n        return false\n    for i = 2 to sqrt(k):\n        if k mod i = 0:\n            return false\n    return true\n"}
{"task_id": "HumanEval/97", "completion": "\nfunction multiply(a, b)\n    digit_a = last_digit(a)\n    digit_b = last_digit(b)\n    return (digit_a * digit_b) % 10\n\nfunction last_digit(n)\n    return n mod 10\n"}
{"task_id": "HumanEval/97", "completion": "function multiply(a, b)\n    return (a mod 10) * (b mod 10)\n"}
{"task_id": "HumanEval/97", "completion": "function result = multiply(a, b)\n   get the last digit of a, call it x\n   get the last digit of b, call it y\n   return the product of x and y\n"}
{"task_id": "HumanEval/97", "completion": "\nFUNCTION multiply(a, b)\n    LET a_unit_digit = THE LAST DIGIT OF a\n    LET b_unit_digit = THE LAST DIGIT OF b\n    RETURN a_unit_digit * b_unit_digit\nEND FUNCTION\n"}
{"task_id": "HumanEval/97", "completion": "function multiply(a, b)\n    // extract unit digits of a and b\n    int a_unit = a mod 10\n    int b_unit = b mod 10\n    // calculate the product of unit digits\n    int result = a_unit * b_unit\n    return result\n"}
{"task_id": "HumanEval/97", "completion": "\nalgorithm multiply(a, b)\n   get the last digit of a (a_last_digit)\n   get the last digit of b (b_last_digit)\n   calculate the product of a_last_digit and b_last_digit\n   return the product\n"}
{"task_id": "HumanEval/97", "completion": "function multiply(a, b)\n    // Get the last digit of a and b\n    int last_digit_a = a mod 10\n    int last_digit_b = b mod 10\n    \n    // Return the product of last_digit_a and last_digit_b\n    return (last_digit_a * last_digit_b) mod 10\n"}
{"task_id": "HumanEval/97", "completion": "\nfunction multiply(a, b)\n    // extract the last digit of each number\n    int a_last = a mod 10\n    int b_last = b mod 10\n    \n    // calculate the product of the last digits\n    int result = a_last * b_last\n    \n    // return the result\n    return result\n"}
{"task_id": "HumanEval/97", "completion": "\nfunction multiply(a, b)\n    digit_a = last digit of a\n    digit_b = last digit of b\n    return (digit_a * digit_b) mod 1"}
{"task_id": "HumanEval/97", "completion": "function multiply(a, b)\n    // calculate the unit digits of a and b\n    unit_a = a % 10\n    unit_b = b % 10\n    \n    // return the product of the unit digits\n    return unit_a * unit_b\n"}
{"task_id": "HumanEval/98", "completion": "\nfunction count_upper(s)\n    count = 0\n    for i from 0 to length(s) - 1\n        if (i mod 2 == 0 and s[i] in 'AEIOU')\n            count = count + 1\n    return count\n"}
{"task_id": "HumanEval/98", "completion": "\nfunction count_upper(s)\n    result = 0\n    for i from 0 to length(s) - 1 with step 2\n        if s[i] is 'A' or s[i] is 'E' or s[i] is 'I' or s[i] is 'O' or s[i] is 'U'\n            result = result + 1\n    return result\n"}
{"task_id": "HumanEval/98", "completion": "\nfunction count_upper(s)\n    count = 0\n    for i from 0 to length(s) - 1\n        if (i mod 2 == 0 and s[i] in 'AEIOU')\n            count = count + 1\n    return count\n"}
{"task_id": "HumanEval/98", "completion": "function count_upper(s):\n    count = 0\n    for i from 0 to length(s) - 1:\n        if i mod 2 == 0 and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count = count + 1\n    return count\n"}
{"task_id": "HumanEval/98", "completion": "\nfunction count_upper(s)\n    count = 0\n    for i from 0 to length(s)-1 step 2 do\n        if s[i] is \"A\" or s[i] is \"E\" or s[i] is \"I\" or s[i] is \"O\" or s[i] is \"U\" then\n            increment count\n        end if\n    end for\n    return count\n"}
{"task_id": "HumanEval/98", "completion": "\nfunction count_upper(s)\n    result = 0\n    for i from 0 to length(s) - 1\n        if (i mod 2 == 0) and (s[i] in 'AEIOU')\n            result = result + 1\n    return result\n"}
{"task_id": "HumanEval/98", "completion": "\nfunction count_upper(s)\n    sum = 0\n    for i from 0 to length(s) - 1\n        if (i mod 2 == 0) and (s[i] in \"AEIOU\")\n            sum = sum + 1\n    return sum\n"}
{"task_id": "HumanEval/98", "completion": "\nfunction count_upper(s)\n    count = 0\n    for i from 0 to length(s) - 1\n        if (i mod 2 == 0 and s[i] is an uppercase vowel)\n            increment count\n    return count\nend function\n"}
{"task_id": "HumanEval/98", "completion": "\nfunction count_upper(s)\n    result = 0\n    for i from 0 to length(s) - 1 step 2 do\n        if character(s, i) is in {'A', 'E', 'I', 'O', 'U'} then\n            increment result by 1\n        end if\n    end for\n    return result\n"}
{"task_id": "HumanEval/98", "completion": "\nfunction count_upper(s)\n    count := 0\n    for i from 0 to length(s) - 1 by 2 do\n        if s[i] is an uppercase vowel then\n            count := count + 1\n        end if\n    end for\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "algorithm closest_integer(value)\n    input: value as a string\n    output: closest integer to value\n\n    convert value to float\n    integer_part = floor(value)\n    fractional_part = value - integer_part\n\n    if fractional_part < 0.5 then\n        return integer_part\n    else\n        return integer_part + "}
{"task_id": "HumanEval/99", "completion": "\nfunction closest_integer(value)\n    number = float(value)\n    integer_part = int(number)\n    fractional_part = abs(number - integer_part)\n    \n    if fractional_part < 0.5 then\n        return integer_part\n    else\n        if number > 0 then\n            return integer_part + 1\n        else\n            return integer_part - 1\n    end if\nend functio"}
{"task_id": "HumanEval/99", "completion": "\nfunction closest_integer(value)\n    input_value = convert_to_float(value)\n    integer_part = trunc(input_value)\n    decimal_part = input_value - integer_part\n    if decimal_part >= 0.5 then\n        if integer_part == 0 then\n            return 1\n        else\n            return integer_part + 1\n        end if\n    else\n        return integer_part\n    end if\nend function\n"}
{"task_id": "HumanEval/99", "completion": "function closest_integer(value)\n    value = float(value)\n    integer_part = int(value)\n    decimal_part = value - integer_part\n    if decimal_part >= 0.5 then\n        return integer_part + 1\n    else\n        return integer_part\n    end if\n"}
{"task_id": "HumanEval/99", "completion": "proc closest_integer(value: string) is\n    num := parse(float, value)\n    intPart := trunc(num)\n    decimalPart := num - intPart\n    if decimalPart < 0.5 then\n        return intPart\n    else\n        return intPart + 1\n    end if\n"}
{"task_id": "HumanEval/99", "completion": "\nBEGIN\n    INPUT: value AS STRING\n    Parse value into NUMBER x\n    IF x IS INTEGER THEN\n        RETURN x\n    ELSE\n        IF x < 0 THEN\n            IF x - FLOOR(x) <= CEILING(x) - x THEN\n                RETURN FLOOR(x)\n            ELSE\n                RETURN CEILING(x)\n        ELSE\n            IF x - FLOOR(x) <= CEILING(x) - x THEN\n                RETURN FLOOR(x)\n            ELSE\n                RETURN CEILING(x)\n    END IF\nEND"}
{"task_id": "HumanEval/99", "completion": "INPUT: value as string\nInitialize closest as 0\nConvert value to float\nIF value > 0 THEN\n    IF value - floor(value) < 0.5 THEN\n        closest = floor(value)\n    ELSE\n        closest = ceil(value)\nELSE IF value < 0 THEN\n    IF floor(value) - value < 0.5 THEN\n        closest = floor(value)\n    ELSE\n        closest = ceil(value)\nRETURN closest AS string\n"}
{"task_id": "HumanEval/99", "completion": "function closest_integer(value)\n    value = float(value)\n    if value - int(value) >= 0.5 then\n        return int(value) + 1\n    else\n        return int(value)\n"}
{"task_id": "HumanEval/99", "completion": "function closest_integer(value)\n    number = convert value to float\n    integer_part = floor(number)\n    fractional_part = number - integer_part\n    if fractional_part >= 0.5 then\n        return integer_part + 1\n    else\n        return integer_part\n"}
{"task_id": "HumanEval/99", "completion": "function closest_integer(value)\n    number = float(value)\n    integer_part = int(number)\n    fractional_part = abs(number - integer_part)\n    \n    if fractional_part > 0.5:\n        return integer_part + 1\n    else:\n        return integer_part\n"}
{"task_id": "HumanEval/100", "completion": "\nfunction make_a_pile(n):\n    pile = []\n    current_level = n\n    while current_level > 0:\n        pile.append(current_level)\n        if current_level % 2 == 0:\n            current_level -= 1\n        else:\n            current_level += 2\n    return pile.reverse()\n"}
{"task_id": "HumanEval/100", "completion": "\nresult = []\nn = n\nwhile n > 0:\n    if n % 2 == 0:\n        result.append(n)\n        n = n // 2 + 1\n    else:\n        result.append(n)\n        n = (n + 1) // 2\nreturn result[::-1]\n"}
{"task_id": "HumanEval/100", "completion": "function make_a_pile(n):\n    result = []\n    current_level = n\n    while current_level > 0:\n        result.append(current_level)\n        if current_level % 2 == 0:\n            current_level = current_level + 1\n        else:\n            current_level = current_level + 2\n    return result[::-1"}
{"task_id": "HumanEval/100", "completion": "\nfunction make_a_pile(n):\n    result = []\n    current_level = n\n    while current_level > 0:\n        result.append(current_level)\n        if current_level % 2 == 0:  # if current level is even\n            current_level -= 1\n        else:  # if current level is odd\n            current_level += 1\n        current_level //= 2\n    return result\n"}
{"task_id": "HumanEval/100", "completion": "algorithm make_a_pile(n):\n    pile = []\n    i = 1\n    while len(pile) < n:\n        if i % 2 == 0:\n            pile.append(i + 1)\n        else:\n            pile.append(i)\n        i += 1\n    return pile[:n"}
{"task_id": "HumanEval/100", "completion": "function make_a_pile(n):\n    result = []\n    current_level = n\n    while current_level > 0:\n        result.insert(0, current_level)\n        if current_level % 2 == 0:\n            current_level -= 1\n        else:\n            current_level += 1\n        current_level = int(current_level / 2)\n    return resul"}
{"task_id": "HumanEval/100", "completion": "\nfunction make_a_pile(n):\n    result = []\n    count = n\n    while count > 0:\n        result.append(count)\n        if count % 2 == 0:\n            count = count + 1\n        else:\n            count = count + 2\n        n = n - 1\n    return result[::-1"}
{"task_id": "HumanEval/100", "completion": "\nfunction make_a_pile(n):\n    result = []\n    current = n\n    while current > 0:\n        result.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return result"}
{"task_id": "HumanEval/100", "completion": "function make_a_pile(n):\n    result = []\n    current_level = n\n    while current_level > 0:\n        result.append(current_level)\n        if current_level % 2 == 0:\n            current_level = current_level + 1\n        else:\n            current_level = current_level + 2\n    return result[::-1"}
{"task_id": "HumanEval/100", "completion": "function make_a_pile(n):\n    result = []\n    current_level = n\n    for i in range(n):\n        result.append(current_level)\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n    return resul"}
{"task_id": "HumanEval/101", "completion": "\nfunction words_string(s)\n    // remove leading and trailing whitespace\n    s = trim(s)\n\n    // split the string into words\n    words = s.split(\",| \")\n\n    // return the array of words\n    return words\n"}
{"task_id": "HumanEval/101", "completion": "\nfunction words_string(s)\n    result = []\n    current_word = \"\"\n    for char in s:\n        if char in [\" \", \",\"]:\n            if current_word != \"\":\n                result.append(current_word)\n                current_word = \"\"\n        else:\n            current_word = current_word + char\n    if current_word != \"\":\n        result.append(current_word)\n    return result\n"}
{"task_id": "HumanEval/101", "completion": ""}
{"task_id": "HumanEval/101", "completion": "function words_string(s)\n    str := s\n    words := []\n    i := 0\n    while i < length(str)\n        if str[i] = \" \" or str[i] = \",\"\n            word := substr(str, 1, i-1)\n            words := append(words, word)\n            str := substring(str, i+1, length(str))\n            i := 0\n        else\n            i := i + 1\n    end while\n    word := substr(str, 1, length(str))\n    words := append(words, word)\n    return words\n"}
{"task_id": "HumanEval/101", "completion": "\nPROCEDURE words_string(s)\n    DECLARE result LIST OF STRING\n    DECLARE word STRING\n    DECLARE i INTEGER\n    i = 0\n    WHILE s[i] \u2260 \"\"\n        IF s[i] = \", \" OR s[i] = \" \" THEN\n            ADD word TO result\n            word = \"\"\n        ELSE\n            word = word + s[i]\n        END IF\n        i = i + 1\n    END WHILE\n    ADD word TO result\n    RETURN result\nEND PROCEDUR"}
{"task_id": "HumanEval/101", "completion": "function words_string(s)\n    array result = []\n    string current_word = \"\"\n    for each character c in s\n        if c is not a space or c is not a comma\n            append c to current_word\n        else\n            if current_word is not empty\n                append current_word to result\n                reset current_word\n    if current_word is not empty\n        append current_word to result\n    return resul"}
{"task_id": "HumanEval/101", "completion": "function words_string(s)\n  words = []\n  word = \"\"\n  for c in s\n    if c in {',', ' '} then\n      if word != \"\" then\n        append word to words\n        word = \"\"\n      end if\n    else\n      word = word + c\n    end if\n  end for\n  if word != \"\" then\n    append word to words\n  end if\n  return words\n"}
{"task_id": "HumanEval/101", "completion": "\nfunction words_string(s)\n  result = []\n  current_word = \"\"\n  for char in s\n    if char is \" \" or char is \",\"\n      if current_word not equals \"\"\n        result.append(current_word)\n        current_word = \"\"\n    else\n      current_word = current_word + char\n  if current_word not equals \"\"\n    result.append(current_word)\n  return result\n"}
{"task_id": "HumanEval/101", "completion": "\nfunction words_string(s)\n    input = s\n    output = []\n    word = \"\"\n    for char in s:\n        if char is not space and char is not comma:\n            word = word + char\n        else:\n            if word is not empty:\n                output.append(word)\n                word = \"\"\n    if word is not empty:\n        output.append(word)\n    return output\n"}
{"task_id": "HumanEval/101", "completion": "\nfunction words_string(s)\n    result = []\n    word = \"\"\n    for each char in s\n        if char is a space or char is a comma\n            if word is not empty\n                result.append(word)\n                word = \"\"\n        else\n            word = word + char\n    if word is not empty\n        result.append(word)\n    return result\n"}
{"task_id": "HumanEval/102", "completion": "\nif x > y then\n    return -1\nelse\n    largest_even = 0\n    for i from x to y inclusive do\n        if i mod 2 = 0 then\n            largest_even = i\n        end if\n    end for\n    return largest_even\n"}
{"task_id": "HumanEval/102", "completion": "\nfunction choose_num(x, y)\n    if x > y:\n        temp = x\n        x = y\n        y = temp\n\n    while x <= y:\n        if (x % 2 == 0):\n            return x\n        x = x + 1\n\n    return -1\n"}
{"task_id": "HumanEval/102", "completion": "if x > y then\n    return -1\nelse\n    max_even = x\n    while max_even <= y do\n        if max_even mod 2 = 0 then\n            return max_even\n        else\n            max_even += 1\n    end while\n    return -1\n"}
{"task_id": "HumanEval/102", "completion": "\nfunction choose_num(x, y)\n    if x > y then\n        swap(x, y)\n    end if\n    \n    while x <= y do\n        if x mod 2 = 0 then\n            return x\n        end if\n        x += 1\n    end while\n    \n    return -1\nend function\n"}
{"task_id": "HumanEval/102", "completion": "\nfunction choose_num(x, y)\n    if x > y then\n        swap x and y\n    end if\n    if x % 2 == 0 then\n        return x\n    else\n        i = x + 1\n        while i <= y do\n            if i % 2 == 0 then\n                return i\n            end if\n            i = i + 1\n        end while\n        return -1\n    end if\nend function\n"}
{"task_id": "HumanEval/102", "completion": "function choose_num(x, y)\n   if x > y then\n      swap x and y\n   end if\n   max_even = -1\n   for i from x to y\n      if i mod 2 == 0 then\n         max_even = i\n         break\n      end if\n   end for\n   return max_even\n"}
{"task_id": "HumanEval/102", "completion": "FUNCTION choose_num(x, y)\n   IF x > y\n      RETURN -1\n   END IF\n   WHILE x <= y\n      IF x IS EVEN THEN\n         RETURN x\n      END IF\n      x = x + 1\n   END WHILE\n   RETURN -1\n"}
{"task_id": "HumanEval/102", "completion": "\nfunction choose_num(x, y)\n   if x > y then\n      return -1\n   end if\n   while x <= y do\n      if x mod 2 == 0 then\n         return x\n      end if\n      x = x + 1\n   end while\n   return -1\n"}
{"task_id": "HumanEval/102", "completion": "\nfunction choose_num(x, y)\n    if x > y then\n        swap x and y\n    end if\n    while x <= y do\n        if x mod 2 == 0 then\n            return x\n        end if\n        x = x + 1\n    end while\n    return -1\n"}
{"task_id": "HumanEval/102", "completion": "FUNCTION choose_num(x, y)\n   IF x > y THEN\n      temp = x\n      x = y\n      y = temp\n   END IF\n\n   WHILE x % 2 != 0 AND x <= y\n      x = x + 1\n   END WHILE\n\n   IF x <= y THEN\n      RETURN x\n   ELSE\n      RETURN -1\n   END IF\n"}
{"task_id": "HumanEval/103", "completion": "IF n > m THEN\n    RETURN -1\nELSE\n    avg = (n + m) / 2\n    rounded_avg = ROUND(avg)\n    binary = CONV bin rounded_avg\n    RETURN binary\n"}
{"task_id": "HumanEval/103", "completion": "\nif n > m then\n    return -1\nelse\n    sum = 0\n    for i from n to m\n        sum = sum + i\n    avg = sum / (m - n + 1)\n    avg = round(avg)\n    bin_str = \"\"\n    while avg > 0\n        bin_str = str(avg mod 2) + bin_str\n        avg = avg div 2\n    return \"0b\" + bin_str\n"}
{"task_id": "HumanEval/103", "completion": "\nfunction rounded_avg(n, m)\n    if n > m then\n        return -1\n    end\n    sum = 0\n    for i from n to m\n        sum = sum + i\n    end\n    avg = (sum / (m - n + 1)) + 0.5\n    rounded_avg = round(avg)\n    binary_str = dec2bin(rounded_avg)\n    return \"0b\" + binary_str\n"}
{"task_id": "HumanEval/103", "completion": "\nif n > m then\n    return -1\nelse\n    sum = 0\n    for i from n to m\n        sum = sum + i\n    avg = (sum / (m - n + 1))\n    avg = round(avg)\n    return bin(avg)[2:]\n"}
{"task_id": "HumanEval/103", "completion": "\nfunction rounded_avg(n, m)\n    if n > m then\n        return -1\n    else\n        sum = 0\n        for i from n to m\n            sum = sum + i\n        avg = round(sum / (m - n + 1))\n        binary = to_binary(avg)\n        return binary\n    end if\nend function\n\nfunction to_binary(n)\n    binary = \"\"\n    while n > 0\n        remainder = n mod 2\n        if remainder == 0 then\n            binary = \"0\" + binary\n        else\n            binary = \"1\" + binary\n        end if\n        n = n div 2\n    end while\n    return \"0b\" + binary\nend functio"}
{"task_id": "HumanEval/103", "completion": "if n > m then\n    return -1\nend if\n\nsum = 0\nfor i from n to m do\n    sum = sum + i\nend for\n\navg = (sum / (m - n + 1))\nrounded_avg = round(avg)\n\nbinary_str = \"\"\nwhile rounded_avg > 0 do\n    binary_str = (rounded_avg mod 2) & \"b\" + binary_str\n    rounded_avg = rounded_avg div 2\nend while\n\nreturn binary_st"}
{"task_id": "HumanEval/103", "completion": "\nif n > m then\n    return -1\nelse\n    sum = 0\n    for i from n to m do\n        sum = sum + i\n    avg = round(sum / (m - n + 1))\n    bin_avg = bin(avg)[2:]\n    return \"0b\" + bin_avg\n"}
{"task_id": "HumanEval/103", "completion": "if n > m then\n    return -1\nelse\n    total = 0\n    for i from n to m do\n        total = total + i\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    binary = binary_of(rounded_avg)\n    return \"0b\" + binary\n"}
{"task_id": "HumanEval/103", "completion": "if n > m then\n    return -1\nelse\n    sum = 0\n    for i from n to m do\n        sum = sum + i\n    avg = sum / (m - n + 1)\n    rounded_avg = round(avg)\n    bin_str = bin(rounded_avg)[2:]\n    return '0b' + bin_str\n"}
{"task_id": "HumanEval/103", "completion": "\nif n > m then\n    return -1\nend if\n\nsum = 0\nfor i from n to m do\n    sum = sum + i\nend for\n\navg = (sum / (m - n + 1))\navg = round(avg)\n\nbinary_avg = \"\"\nwhile avg > 0 do\n    remainder = avg mod 2\n    avg = avg div 2\n    if remainder = 1 then\n        binary_avg = \"1\" + binary_avg\n    else\n        binary_avg = \"0\" + binary_avg\n    end if\nend while\n\nreturn \"0b\" + binary_avg\n"}
{"task_id": "HumanEval/104", "completion": "\nfunction unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sort(result)\n"}
{"task_id": "HumanEval/104", "completion": "function unique_digits(x)\n    result = []\n    for num in x:\n        is_all_odd = True\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                is_all_odd = False\n                break\n        if is_all_odd:\n            result.append(num)\n    return sort(result)\n"}
{"task_id": "HumanEval/104", "completion": "\nfunction unique_digits(x)\n    result = []\n    for each number in x\n        is_even = false\n        for each digit in the digits of the number\n            if the digit is even\n                is_even = true\n                break\n        if not is_even\n            result.append the number\n    sort result in ascending order\n    return result\n"}
{"task_id": "HumanEval/104", "completion": "\nfunction unique_digits(x):\n    result = []\n    for num in x:\n        is_odd = True\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                is_odd = False\n                break\n        if is_odd:\n            result.append(num)\n    return sorted(result)\n"}
{"task_id": "HumanEval/104", "completion": "function unique_digits(x)\n    result = []\n    for each number in x\n        has_even_digit = false\n        for each digit in number\n            if digit is even then\n                has_even_digit = true\n                break\n        if not has_even_digit then\n            result.append(number)\n    result.sort()\n    return resul"}
{"task_id": "HumanEval/104", "completion": "function unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        str_num = str(num)\n        for digit in str_num:\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return resul"}
{"task_id": "HumanEval/104", "completion": "\nfunction unique_digits(x)\n    // create an empty list to store the result\n    result = []\n\n    // iterate over each number in the input list\n    for each num in x\n        // check if the number has any even digits\n        has_even_digit = false\n        for each digit in num\n            if digit is even\n                has_even_digit = true\n                break\n\n        // if the number doesn't have any even digits, add it to the result list\n        if not has_even_digit\n            result.append(num)\n\n    // sort the result list in ascending order\n    result.sort()\n\n    // return the result list\n    return result\n"}
{"task_id": "HumanEval/104", "completion": "\nfunction unique_digits(x)\n    result = []\n    for each num in x:\n        has_even_digit = false\n        for each digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = true\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sort(result)\n"}
{"task_id": "HumanEval/104", "completion": "function unique_digits(x)\n    result = []\n    for each num in x:\n        has_odd_digit = false\n        for each digit in num:\n            if digit mod 2 != 0 then\n                has_odd_digit = true\n                break\n        if not has_odd_digit then\n            result.append(num)\n    return sort(result"}
{"task_id": "HumanEval/104", "completion": "function unique_digits(x)\n    result = []\n    for each number in x\n        flag = True\n        for each digit in str(number)\n            if int(digit) is even\n                flag = False\n                break\n        if flag\n            add number to result\n    sort result in increasing order\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "\nfunction by_length(arr):\n    result = []\n    sorted_arr = []\n    for each num in arr:\n        if 1 <= num <= 9:\n            sorted_arr.append(num)\n    sorted_arr.sort()\n    for each num in sorted_arr:\n        if 1 <= num <= 9:\n            result.append(number_to_word(num))\n    return result\n\nfunction number_to_word(n):\n    words = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return words[n]\n"}
{"task_id": "HumanEval/105", "completion": "INPUT: array of integers arr\nOUTPUT: array of strings\n\nif arr is empty then\n    return []\n\nfor each num in arr\n    if num is not between 1 and 9 (inclusive) then\n        continue\n\narr.sort()\n\narr.reverse()\n\nresult = []\n\nfor each num in arr\n    if num is 1 then\n        result.append(\"One\")\n    else if num is 2 then\n        result.append(\"Two\")\n    else if num is 3 then\n        result.append(\"Three\")\n    else if num is 4 then\n        result.append(\"Four\")\n    else if num is 5 then\n        result.append(\"Five\")\n    else if num is 6 then\n        result.append(\"Six\")\n    else if num is 7 then\n        result.append(\"Seven\")\n    else if num is 8 then\n        result.append(\"Eight\")\n    else\n        result.append(\"Nine\")\n\nreturn result\n"}
{"task_id": "HumanEval/105", "completion": "\nfunction by_length(arr)\n    result = []\n    sorted_arr = sort arr where x is between 1 and 9 inclusive\n    reversed_arr = reverse sorted_arr\n    for each num in reversed_arr\n        case num\n            when 1 then append \"One\" to result\n            when 2 then append \"Two\" to result\n            when 3 then append \"Three\" to result\n            when 4 then append \"Four\" to result\n            when 5 then append \"Five\" to result\n            when 6 then append \"Six\" to result\n            when 7 then append \"Seven\" to result\n            when 8 then append \"Eight\" to result\n            when 9 then append \"Nine\" to result\n            else do nothing\n        end case\n    end for\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "Input: arr\n\n1. If arr is empty:\n   Output: return []\n\n2. Filter the array to include only integers between 1 and 9:\n   sorted_arr = [x for x in arr if 1 <= x <= 9]\n\n3. Sort the filtered array in ascending order:\n   sorted_arr.sort()\n\n4. Reverse the sorted array:\n   reversed_arr = sorted_arr[::-1]\n\n5. Convert each integer in the reversed array to its corresponding string:\n   result = [num2words(x) for x in reversed_arr]\n\n6. Return the result:\n   return result\n"}
{"task_id": "HumanEval/105", "completion": "function by_length(arr):\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append({\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}[num])\n    result.reverse()\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "\nfunction by_length(arr):\n    result = []\n    for i in range(len(arr)):\n        if 1 <= arr[i] <= 9:\n            result.append(num_to_name[arr[i]])\n    result.reverse()\n    return result\n\nnum_to_name = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nprint(by_length(arr))  # Output: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\narr = []\nprint(by_length(arr))  # Output: []\n\narr = [1, -1 , 55]\nprint(by_length(arr))  # Output: ['One']\n"}
{"task_id": "HumanEval/105", "completion": "\nPROCEDURE BY_LENGTH(arr)\n   DECLARE result as array of string\n   DECLARE i as integer\n   DECLARE temp as string\n   IF arr is empty THEN\n      RETURN []\n   END IF\n   arr = SORT(arr)\n   arr = REVERSE(arr)\n   FOR i = 0 to length(arr) - 1\n      SWITCH arr[i]\n         CASE 1 TO 9\n            temp = \"Zero\" + i + \"One\" ... \"Nine\"\n            result = CONCATENATE(result, temp)\n         OTHERCASE\n            result = CONCATENATE(result, \"One\")\n      END SWITCH\n   NEXT\n   RETURN result\nEND PROCEDURE\n"}
{"task_id": "HumanEval/105", "completion": "function by_length(arr):\n  result = []  // initialize empty list\n  for each num in arr:\n    if 1 <= num <= 9:  // check if the number is between 1 and 9\n      result.append(str(num))  // convert to string\n    else:  // if not, skip it\n      continue\n  \n  result.sort()  // sort the list\n  result.reverse()  // reverse the list\n  \n  names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  for i in range(len(result)):\n    result[i] = names[int(result[i])]  // replace with corresponding name\n  \n  return result\n"}
{"task_id": "HumanEval/105", "completion": "PROCEDURE by_length(arr)\n    DECLARE result AS LIST OF STRINGS\n    DECLARE i AS INTEGER\n    DECLARE temp AS INTEGER\n    \n    IF length(arr) = 0 THEN\n        RETURN []\n    END IF\n    \n    arr = SORT(arr)\n    arr = REVERSE(arr)\n    \n    FOR i = 0 TO length(arr)-1\n        temp = arr[i]\n        IF temp >= 1 AND temp <= 9 THEN\n            SELECT\n                WHEN temp = 1 THEN\n                    result.append(\"One\")\n                WHEN temp = 2 THEN\n                    result.append(\"Two\")\n                WHEN temp = 3 THEN\n                    result.append(\"Three\")\n                WHEN temp = 4 THEN\n                    result.append(\"Four\")\n                WHEN temp = 5 THEN\n                    result.append(\"Five\")\n                WHEN temp = 6 THEN\n                    result.append(\"Six\")\n                WHEN temp = 7 THEN\n                    result.append(\"Seven\")\n                WHEN temp = 8 THEN\n                    result.append(\"Eight\")\n                WHEN temp = 9 THEN\n                    result.append(\"Nine\")\n            END SELECT\n        ELSE\n            result.append(\"Unknown\")\n        END IF\n    NEXT i\n    \n    RETURN result\n"}
{"task_id": "HumanEval/105", "completion": "function by_length(arr):\n    result = []\n    sorted_arr = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_arr = sorted_arr[::-1]\n    for num in reversed_arr:\n        if num >= 1 and num <= 9:\n            result.append(['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][num-1])\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\nfunction f(n)\n    result = []\n    for i from 1 to n\n        if i is even\n            result.append(factorial(i))\n        else\n            sum = 0\n            for j from 1 to i\n                sum = sum + j\n            result.append(sum)\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\nprocedure f(n)\n    result = []\n    for i = 1 to n\n        if i is even then\n            result.append(factorial(i))\n        else\n            result.append(sum(j from j = 1 to i))\n    return result\nend procedur"}
{"task_id": "HumanEval/106", "completion": "\nfunction f(n)\n    result = new list of size n\n    for i from 1 to n\n        if i is even\n            result[i] = factorial(i)\n        else\n            sum = 0\n            for j from 1 to i\n                sum = sum + j\n            result[i] = sum\n    return result\nend function\n"}
{"task_id": "HumanEval/106", "completion": "\nfunction f(n)\n    result = []\n    for i from 1 to n\n        if i is even\n            result.append(factorial(i))\n        else\n            sum = 0\n            for j from 1 to i\n                sum = sum + j\n            result.append(sum)\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "function f(n)\n    result = new list of size n\n    for i from 1 to n\n        if i is even\n            result[i-1] = factorial(i)\n        else\n            sum = 0\n            for j from 1 to i\n                sum = sum + j\n            result[i-1] = sum\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "function f(n)\n    result = []\n    for i from 1 to n\n        if i is even\n            result.append(factorial(i))\n        else\n            sum = 0\n            for j from 1 to i\n                sum = sum + j\n            result.append(sum)\n    return result\n\nfunction factorial(i)\n    result = 1\n    for j from 1 to i\n        result = result * j\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\nfunction f(n)\n    result = new list of size n\n    for i from 1 to n\n        if i is even\n            result[i] = factorial(i)\n        else\n            result[i] = sum from 1 to i\n    return result\nend function\n"}
{"task_id": "HumanEval/106", "completion": "\nfunction f(n)\n    result = []\n    for i from 1 to n\n        if i mod 2 == 0\n            result.append(factorial(i))\n        else\n            temp = 0\n            for j from 1 to i\n                temp = temp + j\n            result.append(temp)\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\nfunction f(n)\n    result = new list of size n\n    for i from 1 to n\n        if i is even\n            result[i] = factorial(i)\n        else\n            result[i] = sum of numbers from 1 to i\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\nfunction f(n):\n    result = []\n    for i from 1 to n:\n        if i is even:\n            result.append(factorial(i))\n        else:\n            total = 0\n            for j from 1 to i:\n                total = total + j\n            result.append(total)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "function even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i from 1 to n:\n        if i is even:\n            if reverse(i) equals i:\n                even_count = even_count + 1\n        else:\n            if reverse(i) equals i:\n                odd_count = odd_count + 1\n    return (even_count, odd_count)\n\nfunction reverse(x):\n    reversed_x = 0\n    while x greater than 0:\n        remainder = x modulo 10\n        reversed_x = reversed_x * 10 + remainder\n        x = x div 10\n    return reversed_x\n"}
{"task_id": "HumanEval/107", "completion": "\nfunction even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i from 1 to n:\n        if i == reverse(i):\n            if i mod 2 == 0 then\n                even_count = even_count + 1\n            else\n                odd_count = odd_count + 1\n    \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/107", "completion": "function even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i from 1 to n:\n        str_i = str(i)\n        if str_i == str_i[::-1]:\n            if int(str_i) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/107", "completion": "function even_odd_palindrome(n)\n    count_even = 0\n    count_odd = 0\n    for i from 1 to n\n        str_i = convert i to string\n        if str_i equals reverse of str_i\n            if integer value of str_i is even\n                increment count_even\n            else\n                increment count_odd\n    return (count_even, count_odd"}
{"task_id": "HumanEval/107", "completion": "\nfunction even_odd_palindrome(n)\n    count_even := 0\n    count_odd := 0\n    for i from 1 to n\n        num := str(i)\n        if i = int(num + reverse(num))\n            if is_even(i) then\n                count_even := count_even + 1\n            else\n                count_odd := count_odd + 1\n    return (count_even, count_odd)\n\nfunction is_even(n)\n    return n mod 2 = 0\n\nfunction reverse(s)\n    result := \"\"\n    for each char c in s\n        result := result + c\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\nfunction even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i from 1 to n:\n        str_i = str(i)\n        if str_i == str_i[::-1]:\n            if int(str_i) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/107", "completion": "\nFunction even_odd_palindrome(n)\n    even_count = 0\n    odd_count = 0\n\n    For i from 1 to n\n        num = integer_to_string(i)\n        if num == reverse_string(num) // check if the number is palindrome\n            if integer_to_string(i) modulo 2 is 0 // check if the number is even\n                even_count = even_count + 1\n            else\n                odd_count = odd_count + 1\n\n    Return (even_count, odd_count)\n"}
{"task_id": "HumanEval/107", "completion": "\nfunction even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i from 1 to n:\n        num_str = str(i)\n        if num_str == num_str[::-1]:\n            if int(num_str) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n"}
{"task_id": "HumanEval/107", "completion": "\nfunction even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count = even_count + 1\n            else:\n                odd_count = odd_count + 1\n    return (even_count, odd_count)\n\nfunction is_palindrome(num):\n    temp = num\n    reverse_num = 0\n    while temp > 0:\n        digit = temp % 10\n        reverse_num = (reverse_num * 10) + digit\n        temp = temp // 10\n    return num == reverse_num\n"}
{"task_id": "HumanEval/107", "completion": "\nfunction even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i from 1 to n:\n        if is_palindrome(i) and i mod 2 == 0:\n            even_count += 1\n        elif is_palindrome(i) and i mod 2 != 0:\n            odd_count += 1\n    return (even_count, odd_count)\n\nfunction is_palindrome(num):\n    str_num = num to string\n    left, right = 0, len(str_num) - 1\n    while left < right:\n        if str_num[left] != str_num[right]:\n            return false\n        left += 1\n        right -= 1\n    return true\n"}
{"task_id": "HumanEval/108", "completion": "\nfunction count_nums(arr)\n    count = 0\n    for each num in arr\n        if num >= 0\n            sum_digits = 0\n            for each digit in str(num)\n                sum_digits = sum_digits + int(digit)\n            if sum_digits > 0\n                count = count + 1\n        else\n            signed_digit_count = 1\n            num_str = str(abs(num))\n            for each digit in num_str\n                if digit != '0'\n                    signed_digit_count = signed_digit_count * 10 + int(digit)\n                else\n                    break\n            sum_digits = abs(sum(signed_digit_for_remaining_digits(num_str)))\n            if sum_digits > 0\n                count = count + 1\n    return count\n\nfunction signed_digit_for_remaining_digits(s)\n    sum = 0\n    for each digit in s\n        if digit != '0'\n            sum = sum + int(digit)\n        else\n            break\n    return sum\n"}
{"task_id": "HumanEval/108", "completion": "function count_nums(arr):\n    total = 0\n    for each num in arr:\n        if num < 0:\n            num = str(abs(num))\n            total += len([d for d in num if int(d) > 0])\n        else:\n            total += len([d for d in str(num) if int(d) > 0])\n    return tota"}
{"task_id": "HumanEval/108", "completion": "function count_nums(arr)\n    count := 0\n    for each num in arr\n        if num < 0\n            sign := -1\n        else\n            sign := 1\n        sum := 0\n        for each digit in str(abs(num))\n            sum := sum + int(digit)\n        if sign * sum > 0\n            count := count + 1\n    return coun"}
{"task_id": "HumanEval/108", "completion": "function count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            total_sum = 0\n            sign = 1\n        else:\n            total_sum = 1\n            sign = -1\n        num *= sign\n        while num > 0:\n            total_sum += num % 10\n            num //= 10\n        if total_sum > 0:\n            count += 1\n    return coun"}
{"task_id": "HumanEval/108", "completion": "\nfunction count_nums(arr):\n    count = 0\n    for each num in arr:\n        if num >= 0:\n            total = 0\n            for digit in str(num):\n                total += int(digit)\n            if total > 0:\n                count += 1\n        else:\n            total = 0\n            for i, digit in enumerate(str(abs(num))):\n                if i == 0 and digit == '-':\n                    continue\n                total += int(digit)\n            if total > 0:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/108", "completion": "\nfunction count_nums(arr):\n    count = 0\n    for each num in arr:\n        if num >= 0:\n            sum_of_digits = 0\n            temp_num = num\n            while temp_num > 0:\n                digit = temp_num mod 10\n                sum_of_digits = sum_of_digits + digit\n                temp_num = int(temp_num / 10)\n            if sum_of_digits > 0:\n                count = count + 1\n        else:\n            temp_num = abs(num)\n            sum_of_digits = 0\n            while temp_num > 0:\n                digit = temp_num mod 10\n                sum_of_digits = sum_of_digits + digit\n                temp_num = int(temp_num / 10)\n            if sum_of_digits > 0:\n                count = count + 1\n    return count\n"}
{"task_id": "HumanEval/108", "completion": "function count_nums(arr)\n    count = 0\n    for num in arr\n        if num >= 0\n            sum_digits = 0\n            for digit in convert_to_str(num)\n                sum_digits += int(digit)\n            if sum_digits > 0\n                count += 1\n        else\n            sum_signed_digits = 0\n            sign = -1\n            for digit in convert_to_str(abs(num))\n                sum_signed_digits += int(digit) * sign\n                sign = 1\n            if sum_signed_digits > 0\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/108", "completion": "\nfunction count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            total = 0\n            while num > 0:\n                digit = num mod 10\n                total = total + digit\n                num = num div 10\n            if total > 0:\n                count = count + 1\n        else:\n            num = -num\n            total = 0\n            while num > 0:\n                digit = num mod 10\n                total = total - digit\n                num = num div 10\n            if total > 0:\n                count = count + 1\n    return count\n"}
{"task_id": "HumanEval/108", "completion": "function count_nums(arr)\n    count := 0\n    for each num in arr\n        if num < 0\n            sign := -1\n        else\n            sign := 1\n        total := 0\n        for each digit in str(abs(num))\n            total := total + int(digit)\n        if total * sign > 0\n            count := count + 1\n    return coun"}
{"task_id": "HumanEval/108", "completion": "function count_nums(arr):\n    count = 0\n    for each num in arr:\n        sum_digits = 0\n        is_negative = false\n        if num < 0:\n            is_negative = true\n            num = -num\n        while num > 0:\n            digit = num mod 10\n            sum_digits = sum_digits + digit\n            num = num div 10\n        if not is_negative and sum_digits > 0:\n            count = count + 1\n        elif is_negative and sum_digits >= 1:\n            count = count + 1\n    return coun"}
{"task_id": "HumanEval/109", "completion": "\nPROCEDURE move_one_ball(arr)\n    IF size of arr is 0 THEN\n        RETURN TRUE\n    END IF\n\n    num_shifts = 0\n    i = 0\n    WHILE i < size of arr - 1\n        IF arr[i] > arr[i + 1]\n            num_shifts = num_shifts + 1\n            arr = shift_array_to_the_right(arr)\n        ELSE\n            i = i + 1\n        END IF\n    END WHILE\n\n    IF num_shifts % 2 == 1 THEN\n        RETURN FALSE\n    ELSE\n        RETURN TRUE\n    END IF\n\nEND PROCEDURE\n\nFUNCTION shift_array_to_the_right(arr)\n    temp = arr[0]\n    for j from 0 to size of arr - 1\n        arr[j] = arr[j + 1]\n    END FOR\n    arr[size of arr - 1] = temp\n    RETURN arr\nEND FUNCTIO"}
{"task_id": "HumanEval/109", "completion": "function move_one_ball(arr)\n    n = length(arr)\n    if n == 0\n        return True\n    else\n        min_val = min(arr)\n        if arr[0] == min_val\n            return True\n        else\n            for i from 1 to n-1\n                if arr[i] <= arr[i-1]\n                    return True\n            return False\n"}
{"task_id": "HumanEval/109", "completion": "\nfunction move_one_ball(arr)\n    if length(arr) == 0 then\n        return True\n    end\n    found = False\n    for i from 1 to length(arr) - 1 do\n        for j from i + 1 to length(arr) do\n            if arr[i] > arr[j] then\n                found = True\n                break\n            end\n        end\n        if found then\n            return False\n        end\n    end\n    return True\nend\n"}
{"task_id": "HumanEval/109", "completion": "\nALGORITHM:\n    Function move_one_ball(arr)\n        If arr is empty, return True\n        Initialize a flag to False\n        Initialize a variable 'temp' to arr[0]\n        For each element i from 1 to n (length of array)\n            If arr[i] < temp, set flag to True\n            temp = arr[i]\n        If flag is True, return False\n        Return True\n"}
{"task_id": "HumanEval/109", "completion": "\nProcedure move_one_ball(arr):\n    If length of arr is 0 then\n        return True\n    If all elements in arr are in non-decreasing order then\n        return True\n    else\n        last_element = arr[0]\n        temp_arr = []\n        while not all elements in arr are in non-decreasing order\n            temp_arr = arr[1..length of arr - 1]\n            arr = temp_arr + [last_element]\n            last_element = min(temp_arr)\n        return Tru"}
{"task_id": "HumanEval/109", "completion": "\nfunction move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n\n    left = 0\n    for right in range(len(arr) - 1):\n        if arr[right] > arr[right + 1]:\n            while left <= right and arr[left] < arr[left + 1]:\n                left += 1\n            if left >= right:\n                return False\n            right -= 1\n    return True\n"}
{"task_id": "HumanEval/109", "completion": "\nPROCEDURE move_one_ball(arr)\n    IF IS_EMPTY(arr) THEN\n        RETURN TRUE\n    END IF\n\n    min_index = 0\n    FOR i = 1 TO length(arr) - 1 DO\n        IF arr[i] < arr[min_index] THEN\n            min_index = i\n        END IF\n    END FOR\n\n    shifted_arr = arr\n    num_shifts = 0\n    FOR i = 0 TO length(arr) - 1 DO\n        shifted_arr = RIGHT_SHIFT(shifted_arr)\n        num_shifts = num_shifts + 1\n        IF arr == shifted_arr THEN\n            RETURN TRUE\n        END IF\n    END FOR\n\n    RETURN FALSE\nEND PROCEDURE\n"}
{"task_id": "HumanEval/109", "completion": "\nfunction move_one_ball(arr)\n    if length(arr) == 0:\n        return true\n    min_index = 0\n    for i from 1 to length(arr) - 1:\n        if arr[i] < arr[min_index]:\n            min_index = i\n    if min_index > 0:\n        for i from 0 to length(arr) - 1:\n            arr[i] = arr[i + 1]\n        arr[length(arr) - 1] = arr[0]\n    return is_sorted(arr)\n\nfunction is_sorted(arr)\n    for i from 1 to length(arr) - 1:\n        if arr[i] < arr[i - 1]:\n            return false\n    return true\n"}
{"task_id": "HumanEval/109", "completion": "\nfunction move_one_ball(arr):\n    n = size of arr\n    if n == 0:\n        return True\n    i = 0\n    while i < n-1:\n        if arr[i] > arr[i+1]:\n            return False\n        i = i + 1\n    return True\n"}
{"task_id": "HumanEval/109", "completion": "Procedure move_one_ball(arr)\n   If arr is empty then\n      Return True\n   End if\n\n   flag := True\n   prev := arr[0]\n\n   For i from 1 to size of arr - 1 do\n      If arr[i] < prev then\n         flag := False\n         Break\n      End if\n      prev := arr[i]\n   End for\n\n   If flag = True then\n      Return True\n   Else\n      For i from 1 to size of arr - 1 do\n         temp := arr[size of arr - i]\n         arr := concatenate(arr[0 .. size of arr - i - 1], temp, arr[size of arr - i])\n      End for\n      If array is sorted in non-decreasing order then\n         Return True\n      Else\n         Return False\n      End if\n   End if\nEnd procedur"}
{"task_id": "HumanEval/110", "completion": "\nALGORITHM\n exchange(lst1, lst2)\n   SET possible_to_exchange = TRUE\n   WHILE possible_to_exchange AND NOT all_elements_of_lst1_are_even(lst1)\n     possible_to_exchange = FALSE\n     FOR each element e in lst1\n       IF element e is odd\n         FOUND = FALSE\n         FOR each element f in lst2\n           IF element f is odd AND element f > element e\n             Swap element e with element f in lst1 and lst2\n             possible_to_exchange = TRUE\n             BREAK outer loop\n         END FOR\n       END IF\n     END FOR\n   END WHILE\n   IF possible_to_exchange THEN\n     RETURN \"YES\"\n   ELSE\n     RETURN \"NO\"\n   END IF\n END FUNCTION\n"}
{"task_id": "HumanEval/110", "completion": "\nfunction exchange(lst1, lst2)\n    odd_count = 0\n    for each num in lst1\n        if num is odd\n            odd_count = odd_count + 1\n    if odd_count > 0\n        for each num in lst2\n            if num is even and odd_count > 0\n                lst1[odd_count - 1] = num\n                odd_count = odd_count - 1\n            elif num is odd\n                return \"NO\"\n        if odd_count > 0\n            return \"NO\"\n    return \"YES"}
{"task_id": "HumanEval/110", "completion": "\nfunction exchange(lst1, lst2)\n    if not all(number % 2 == 0 for number in lst1):\n        return \"NO\"\n    else:\n        odd_numbers = [number for number in lst1 if number % 2 != 0]\n        if len(odd_numbers) > len([number for number in lst2 if number % 2 != 0]):\n            return \"NO\"\n        else:\n            return \"YES\"\n"}
{"task_id": "HumanEval/110", "completion": "ALGORITHM EXCHANGE\nINPUT: Two lists of numbers lst1, lst2\nOUTPUT: \"YES\" or \"NO\"\n\nBEGIN\n  IF ALL Elements in lst1 are EVEN THEN\n    RETURN \"YES\"\n  END IF\n\n  SET count = 0\n  FOR each element e IN lst1 DO\n    IF e is ODD THEN\n      FOR each element f IN lst2 DO\n        IF f is EVEN THEN\n          SWAP e and f in lst1 and lst2\n          INCREMENT count\n        END IF\n      END FOR\n    END IF\n  END FOR\n\n  IF count > 0 THEN\n    RETURN \"YES\"\n  ELSE\n    RETURN \"NO\"\n  END IF\nEND ALGORITH"}
{"task_id": "HumanEval/110", "completion": "\nFUNCTION exchange(lst1, lst2)\n    IF all element in lst1 is odd\n        RETURN \"NO\"\n    ELSE\n        FOR each i from 0 to length of lst1 - 1\n            FOR each j from 0 to length of lst2 - 1\n                IF element at index i in lst1 is odd\n                    IF element at index j in lst2 is even\n                        SWAP element at index i in lst1 with element at index j in lst2\n                    END IF\n                END IF\n            END FOR\n        END FOR\n        IF all element in lst1 is even\n            RETURN \"YES\"\n        ELSE\n            RETURN \"NO\"\n        END IF\n    END IF\nEND FUNCTIO"}
{"task_id": "HumanEval/110", "completion": "\nfunction exchange(lst1, lst2)\n    if length(lst1) = length(lst2) then\n        return \"NO\"  // If the lengths are different, it's impossible\n    else\n        for each element e in lst1\n            if e is odd then\n                if not contains(e, lst2) then\n                    return \"NO\"  // If an odd element cannot be replaced\n                else\n                    remove the first occurrence of e from lst2\n            end if\n        end for\n        return \"YES\"\n    end if\nend function\n"}
{"task_id": "HumanEval/110", "completion": "\nFUNCTION exchange(lst1, lst2)\n    IF ALL elem IN lst1 IS ODD THEN\n        RETURN \"NO\"\n    END IF\n\n    WHILE THERE EXISTS elem IN lst1 SUCH THAT elem IS ODD\n        FOR each i FROM 1 TO LENGTH(lst2)\n            IF elem IS IN lst2 THEN\n                REMOVE elem FROM lst1\n                ADD elem TO lst2\n                BREAK\n            END IF\n        END FOR\n\n        IF elem IS STILL IN lst1 THEN\n            RETURN \"NO\"\n        END IF\n    END WHILE\n\n    RETURN \"YES\"\n"}
{"task_id": "HumanEval/110", "completion": "\nALGORITHM:\n  FUNCTION exchange(lst1, lst2):\n    SET result = \"NO\"\n    SET odd_count = 0\n    \n    FOR each element e in lst1:\n      IF e is odd:\n        odd_count = odd_count + 1\n    \n    IF odd_count == 0:\n      result = \"YES\"\n    ELSE:\n      FOR each element e in lst2:\n        IF e is odd:\n          IF odd_count > 0:\n            odd_count = odd_count - 1\n            result = \"YES\"\n          ELSE:\n            result = \"NO\"\n    \n    RETURN result\n"}
{"task_id": "HumanEval/110", "completion": "\nfunction exchange(lst1, lst2)\n    if all(i % 2 == 0 for i in lst1):\n        return \"YES\"\n    else:\n        odd_elements_in_lst1 = [i for i in lst1 if i % 2 != 0]\n        for element in odd_elements_in_lst1:\n            if element not in lst2:\n                return \"NO\"\n            else:\n                lst2.remove(element)\n        return \"YES"}
{"task_id": "HumanEval/110", "completion": "ALGORITHM exchange(lst1, lst2):\n    # check if any odd number exists in lst1\n    FOR each element in lst1:\n        IF element is odd:\n            FOUND_ODD = TRUE\n            BREAK\n    IF NOT FOUND_ODD:\n        RETURN \"YES\"  // since all elements are even, no exchange needed\n\n    // check if at least one odd number in lst2 can be exchanged with odd number in lst1\n    FOR each element in lst2:\n        IF element is odd:\n            FOUND_EXCHANGE = TRUE\n            BREAK\n    IF NOT FOUND_EXCHANGE:\n        RETURN \"NO\"  // cannot find any odd number in lst2 to exchange\n\n    // check if all remaining elements in lst2 are even\n    FOR each element in lst2:\n        IF element is odd:\n            RETURN \"NO\"  // found odd number in lst2 after odd number exchange\n    RETURN \"YES"}
{"task_id": "HumanEval/111", "completion": "\nproc histogram(test):\n    let words = split(test, \" \")\n    let max_count = 0\n    let max_letters = {}\n    \n    for word in words:\n        let letter = first(word)\n        let count = count(word, letter)\n        \n        if count > max_count:\n            max_count = count\n            max_letters = {letter: count}\n        elseif count == max_count:\n            add letter to max_letters\n    \n    return max_letters\n"}
{"task_id": "HumanEval/111", "completion": "\nfunction histogram(test)\n    if test is empty then\n        return {}\n    else\n        word_list = split(test, ' ')\n        max_count = 0\n        result = {}\n        for each word in word_list\n            count = 0\n            for each character in word\n                if character is in result then\n                    result[character] = result[character] + 1\n                else\n                    result[character] = 1\n            if count > max_count then\n                max_count = count\n        max_result = {}\n        for each key-value pair in result\n            if value equals max_count then\n                add key-value pair to max_result\n        return max_result\n"}
{"task_id": "HumanEval/111", "completion": "function histogram(test):\n    result = {}\n    max_count = 0\n    most_common_letters = []\n    for each letter in test.split():\n        if letter not in result:\n            result[letter] = 0\n        result[letter] += 1\n        if result[letter] > max_count:\n            max_count = result[letter]\n            most_common_letters = [letter]\n        elif result[letter] == max_count:\n            most_common_letters.append(letter)\n    if max_count > 0:\n        return {letter: count for letter, count in result.items() if count in most_common_letters}\n    else:\n        return {"}
{"task_id": "HumanEval/111", "completion": "\nPROCEDURE histogram(test)\n    DECLARE max_count INTEGER := 0\n    DECLARE max_letter CHARACTER\n    DECLARE result DICTIONARY\n    DECLARE current_letter CHARACTER\n    DECLARE current_count INTEGER := 0\n    DECLARE temp_count INTEGER\n    \n    FOR each word IN split(test, \" \")\n        FOR each letter IN word\n            IF not letter in result then\n                result[letter] := 1\n            ELSE\n                result[letter] := result[letter] + 1\n            END IF\n        END FOR\n        \n        FOR each letter in result\n            IF result[letter] > max_count then\n                max_count := result[letter]\n                max_letter := letter\n            ELSE IF result[letter] = max_count then\n                temp_count := 0\n                FOR each key-value in result\n                    IF value = max_count then\n                        temp_count += 1\n                    END IF\n                END FOR\n                IF temp_count > 1 then\n                    RETURN result\n                END IF\n            END IF\n        END FOR\n        \n    END FOR\n    \n    RETURN {max_letter: max_count}\nEND PROCEDURE\n"}
{"task_id": "HumanEval/111", "completion": "\nfunction histogram(test)\n    // split the input string into array of words\n    words = split(test, \" \")\n\n    // create an empty dictionary to store the frequency of each letter\n    freq = {}\n\n    // iterate over each word in the array\n    for each word in words\n        // iterate over each character in the word\n        for each char in word\n            // increment the count of the character in the frequency dictionary\n            if char in freq then\n                freq[char] = freq[char] + 1\n            else\n                freq[char] = 1\n\n    // find the maximum frequency\n    max_freq = max(freq.values)\n\n    // create a new dictionary to store the final result\n    result = {}\n\n    // iterate over the frequency dictionary\n    for key, value in freq.items()\n        // if the value is equal to the maximum frequency, add it to the result dictionary\n        if value == max_freq then\n            result[key] = value\n\n    return result\n"}
{"task_id": "HumanEval/111", "completion": "data = {}\nmax_count = 0\nresult = {}\n\nfor word in test.split():\n    if word in data:\n        data[word] += 1\n    else:\n        data[word] = 1\n\nfor key, value in data.items():\n    if value > max_count:\n        max_count = value\n        result = {key: value}\n    elif value == max_count:\n        result[key] = value\n\nreturn resul"}
{"task_id": "HumanEval/111", "completion": "\nfunction histogram(test):\n    result = {}\n    max_count = 0\n    most_common_letters = []\n    for each word in test.split():\n        if len(word) > 0:\n            letter = word[0]\n            count = 0\n            for char in word:\n                if char == letter:\n                    count += 1\n            if count > max_count:\n                max_count = count\n                most_common_letters = [letter]\n            elif count == max_count:\n                most_common_letters.append(letter)\n    for letter in most_common_letters:\n        result[letter] = max_count\n    return result\n"}
{"task_id": "HumanEval/111", "completion": "\nfunction histogram(test):\n    result = {}\n    word_list = test.split()\n    max_count = 0\n    max_letters = []\n    \n    for word in word_list:\n        for char in word:\n            if char in result:\n                result[char] += 1\n            else:\n                result[char] = 1\n                \n            if result[char] > max_count:\n                max_count = result[char]\n                max_letters = [char]\n            elif result[char] == max_count:\n                max_letters.append(char)\n                \n    if max_count > 0:\n        return {k: v for k, v in result.items() if v in max_count}\n    else:\n        return {}\n"}
{"task_id": "HumanEval/111", "completion": "\nfunction histogram(test)\n    if test is empty then\n        return {}\n    else\n        frequency = {}\n        max_frequency = 0\n        result = {}\n        \n        for each word in test split by spaces\n            for each letter in word\n                if letter is already in frequency then\n                    frequency[letter] = frequency[letter] + 1\n                else\n                    frequency[letter] = 1\n                \n                if frequency[letter] > max_frequency then\n                    max_frequency = frequency[letter]\n        \n        for each key in frequency\n            if frequency[key] is equal to max_frequency then\n                result[key] = frequency[key]\n        \n        return result\n"}
{"task_id": "HumanEval/111", "completion": "\ninput: test\ncount = {}\nmax_count = 0\nresult = {}\n\nfor word in test.split():\n    if word in count:\n        count[word] += 1\n    else:\n        count[word] = 1\n\nfor key, value in count.items():\n    if value > max_count:\n        max_count = value\n        result = {key: max_count}\n    elif value == max_count:\n        result[max_count] = result.get(max_count, []) + [key]\n\nreturn result\n"}
{"task_id": "HumanEval/112", "completion": "\nfunction result = reverse_delete(s, c)\n    t = ''\n    for char in s:\n        if char not in c:\n            t = t + char\n    if t == reverse(t):\n        return (t, True)\n    else:\n        return (t, False)\n\nfunction reverse(s):\n    t = ''\n    for char in s:\n        t = char + t\n    return t\n"}
{"task_id": "HumanEval/112", "completion": "\nfunction reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result = result + char\n    reversed_result = result[::-1]\n    if result == reversed_result:\n        return (result, True)\n    else:\n        return (result, False"}
{"task_id": "HumanEval/112", "completion": "\nfunction reverse_delete(s,c):\n    // create an empty list to store the result\n    result = []\n    // iterate over each character in the string s\n    for char in s:\n        // if the character is not in the string c\n        if char not in c:\n            // add the character to the result list\n            result.append(char)\n    // join the result list into a string\n    result_string = ''.join(result)\n    // reverse the result string\n    reversed_string = result_string[::-1]\n    // compare the result string with its reverse\n    if result_string == reversed_string:\n        return (result_string, True)\n    else:\n        return (result_string, False"}
{"task_id": "HumanEval/112", "completion": ""}
{"task_id": "HumanEval/112", "completion": "function reverse_delete(s, c)\n    // create a new string t\n    t = \"\"\n    for i from 0 to length(s) - 1\n        if s[i] not in c\n            append s[i] to t\n    // check if t is palindrome\n    is_palindrome = true\n    left = 0\n    right = length(t) - 1\n    while left < right\n        if t[left] != t[right]\n            is_palindrome = false\n            break\n        left = left + 1\n        right = right - 1\n    // return result\n    return (t, is_palindrome)\n"}
{"task_id": "HumanEval/112", "completion": "FUNCTION reverse_delete(s, c)\n    NEWSTRING = \"\"\n    FOR EACH char IN s:\n        IF char IS NOT IN c:\n            NEWSTRING = NEWSTRING + char\n    REVERSESTRING = REVERSE(NEWSTRING)\n    IF s == REVERSESTRING THEN\n        RETURN (NEWSTRING, TRUE)\n    ELSE\n        RETURN (NEWSTRING, FALSE"}
{"task_id": "HumanEval/112", "completion": "FUNCTION reverse_delete(s, c)\n    NEW STRING result = \"\"\n    FOR EACH CHARACTER char IN s\n        IF char NOT IN c\n            result += char\n    END FOR\n    REVERSE result\n    IF result IS EQUAL TO REVERSE(result)\n        RETURN (result, TRUE)\n    ELSE\n        RETURN (result, FALSE)\n    END IF\n"}
{"task_id": "HumanEval/112", "completion": "\nfunction reverse_delete(s, c)\n    # Create an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is not in the characters to delete\n        if char not in c:\n            # Add the character to the result string\n            result += char\n            \n    # Reverse the result string\n    reversed_result = result[::-1]\n    \n    # Check if the result string is equal to its reverse\n    is_palindrome = result == reversed_result\n    \n    # Return the result string and whether it's a palindrome\n    return (result, is_palindrome)\n"}
{"task_id": "HumanEval/112", "completion": "\nfunction reverse_delete(s, c):\n    # create a set of characters to remove from s\n    chars_to_remove = set(c)\n\n    # create a new string by removing characters from s that are in chars_to_remove\n    new_string = \"\"\n    for char in s:\n        if char not in chars_to_remove:\n            new_string += char\n\n    # check if the new string is a palindrome\n    is_palindrome = new_string == new_string[::-1]\n\n    # return the new string and whether it's a palindrome\n    return (new_string, is_palindrome"}
{"task_id": "HumanEval/112", "completion": "function reverse_delete(s, c):\n    # create an empty string to store the result\n    result = \"\"\n\n    # iterate over the string s\n    for char in s:\n        # check if the current character is not in the string c\n        if char not in c:\n            # if it's not in c, add it to the result\n            result += char\n\n    # reverse the result string\n    reversed_result = result[::-1]\n\n    # check if the original result is equal to the reversed result\n    is_palindrome = result == reversed_result\n\n    # return the result and whether it's a palindrome\n    return (result, is_palindrome"}
{"task_id": "HumanEval/113", "completion": "\nfunction odd_count(lst)\n    result = []\n    for str in lst\n        count = 0\n        for char in str\n            if int(char) mod 2 != 0\n                count = count + 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(str.index(str)) + \"ng \" + str(str) + \" of the \" + str(str.index(str)) + \"nput.\")\n    return result\n"}
{"task_id": "HumanEval/113", "completion": "\nfunction odd_count(lst)\n    result = []\n    for i = 0 to length(lst) - 1\n        count = 0\n        for char in lst[i]\n            if (char - '0') mod 2 \u2260 0 then\n                increment count\n        append (\"the number of odd elements \" + str(i) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\") to result\n    return result\n"}
{"task_id": "HumanEval/113", "completion": "\nfunction odd_count(lst)\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for digit in lst[i]:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(i+1) + \"n the str\" + str(i+1) + \"ng \" + str(i+1) + \" of the \" + str(i+1) + \"nput.\")\n    return resul"}
{"task_id": "HumanEval/113", "completion": "\ninput_list = []\nfor each_string in lst:\n    count = 0\n    for digit in each_string:\n        if int(digit) % 2 != 0:\n            count += 1\n    output.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(lst.index(each_string) + 1) + \"ng \" + str(lst.index(each_string) + 1) + \" of the \" + str(lst.index(each_string) + 1) + \"nput.\")\n"}
{"task_id": "HumanEval/113", "completion": "function odd_count(lst)\n    result = []\n    for i, s in enumerate(lst):\n        count = 0\n        for digit in s:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\")\n    return resul"}
{"task_id": "HumanEval/113", "completion": "\nfunction odd_count(lst)\n    result = []\n    for i in range(len(lst)):\n        odd_count_in_string = 0\n        for digit in lst[i]:\n            if int(digit) % 2 != 0:\n                odd_count_in_string += 1\n        result.append(\"the number of odd elements \" + str(i) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"nput.\")\n    return resul"}
{"task_id": "HumanEval/113", "completion": "proc odd_count(lst)\n    result = new list\n    for each str in lst\n        count = 0\n        for each char in str\n            if char is odd digit then increment count\n        append \"the number of odd elements \" + str + \"n the str\" + str + \"ng \" + str + \" of the \" + str + \"nput.\" to result\n    return result\n"}
{"task_id": "HumanEval/113", "completion": "function odd_count(lst):\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for digit in lst[i]:\n            if int(digit) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(i+1) + \"n the str\" + str(i+1) + \"ng \" + str(i+1) + \" of the \" + str(i+1) + \"nput.\")\n    return result\n"}
{"task_id": "HumanEval/113", "completion": "\nfunction odd_count(lst):\n    result = []\n    for i, str in enumerate(lst):\n        count = sum(int(digit) % 2 for digit in str)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, str[0], i+1, 'input'))\n    return result\n"}
{"task_id": "HumanEval/113", "completion": "function odd_count(lst)\n    result = []\n    for i in range(len(lst))\n        count = 0\n        for char in lst[i]\n            if int(char) mod 2 != 0\n                count = count + 1\n        result.append(\"the number of odd elements \" + str(i+1) + \"n the str\" + str(i+1) + \"ng \" + str(i+1) + \" of the \" + str(i+1) + \"nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\nmin_sum = float('inf')\nfor i in range(len(nums)):\n    current_sum = 0\n    for j in range(i, len(nums)):\n        current_sum += nums[j]\n        min_sum = min(min_sum, current_sum)\nreturn min_sum\n"}
{"task_id": "HumanEval/114", "completion": "\nFunction minSubArraySum(nums)\n    min_sum = \u221e\n    current_sum = 0\n\n    for i from 0 to length of nums\n        current_sum = current_sum + nums[i]\n        if current_sum < min_sum then\n            min_sum = current_sum\n        elif current_sum > 0 then\n            current_sum = 0\n\n    return min_sum\n"}
{"task_id": "HumanEval/114", "completion": "\ninput: nums\n    initialize min_sum = infinity\n    initialize current_sum = 0\n    initialize left = 0\n    for i from 0 to length of nums-1:\n        current_sum += nums[i]\n        while current_sum > 0:\n            min_sum = min(min_sum, current_sum)\n            current_sum -= nums[left]\n            left += 1\n    return min_sum\n"}
{"task_id": "HumanEval/114", "completion": "function minSubArraySum(nums)\n    min_sum = \u221e\n    current_sum = 0\n    start = 0\n    end = 0\n    temp_start = 0\n    \n    for i = 0 to length(nums) - 1\n        current_sum = current_sum + nums[i]\n        \n        if current_sum < min_sum then\n            min_sum = current_sum\n            start = temp_start\n            end = i\n        end if\n        \n        if current_sum > 0 then\n            temp_start = i + 1\n            current_sum = 0\n        end if\n    end for\n    \n    return min_sum\n"}
{"task_id": "HumanEval/114", "completion": "\nmin_sum = infinity\ncurr_sum = 0\nfor num in nums:\n    curr_sum += num\n    if curr_sum < min_sum:\n        min_sum = curr_sum\n    if curr_sum > 0:\n        curr_sum = 0\nreturn min_sum\n"}
{"task_id": "HumanEval/114", "completion": "\nALGORITHM:\n  INPUT: nums (list of integers)\n  OUTPUT: min_sum (integer)\n\n  min_sum = infinity\n  current_sum = 0\n  start = 0\n\n  FOR i FROM 0 TO LENGTH[nums) - 1 DO\n    current_sum = current_sum + nums[i]\n    IF current_sum > min_sum THEN\n      min_sum = current_sum\n    END IF\n    WHILE current_sum > 0 AND start < i DO\n      current_sum = current_sum - nums[start]\n      start = start + 1\n    END WHILE\n  END FOR\n\n  RETURN min_sum\n"}
{"task_id": "HumanEval/114", "completion": ""}
{"task_id": "HumanEval/114", "completion": "function minSubArraySum(nums)\n    min_sum = infinity\n    current_sum = 0\n    start = 0\n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum > 0:\n            min_sum = min(min_sum, current_sum)\n            current_sum -= nums[start]\n            start += 1\n    return min_su"}
{"task_id": "HumanEval/114", "completion": "data minSubArraySum = { \n    sum := 0; \n    left := 0; \n    min_sum := infinity; \n    for right from 0 to length of nums do { \n        sum := sum + nums[right]; \n        while sum > 0 do { \n            min_sum := min(min_sum, sum); \n            sum := sum - nums[left]; \n            left := left + 1; \n        } \n    } \n    return min_sum; \n"}
{"task_id": "HumanEval/114", "completion": "\nfunction minSubArraySum(nums)\n    let min_sum = inf\n    let current_sum = 0\n    \n    for each num in nums\n        current_sum = current_sum + num\n        \n        if current_sum < min_sum\n            min_sum = current_sum\n        elif current_sum > 0\n            current_sum = 0\n            \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\nALGORITHM max_fill(grid, capacity)\n    total_water = 0\n    for each row in grid:\n        water_in_row = 0\n        for each cell in row:\n            if cell == 1:\n                water_in_row += 1\n        total_water += water_in_row\n    num_buckets_needed = math.ceil(total_water / capacity)\n    return num_buckets_needed\n"}
{"task_id": "HumanEval/115", "completion": "function max_fill(grid, capacity):\n    rows = grid.length\n    cols = grid[0].length\n    total_water = 0\n    buckets_needed = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                total_water += 1\n    while total_water > 0:\n        buckets_needed += math.ceil(total_water / capacity)\n        total_water %= capacity\n    return buckets_needed\n"}
{"task_id": "HumanEval/115", "completion": "function max_fill(grid, capacity)\n    total_water = 0\n    max_steps = 0\n    while total_water > 0:\n        total_water = 0\n        steps_in_this_round = 0\n        for i in range(0, grid.length):\n            for j in range(0, grid[0].length):\n                if grid[i][j] == 1:\n                    total_water = total_water + 1\n        for i in range(0, grid.length):\n            for j in range(0, grid[0].length):\n                if grid[i][j] == 1:\n                    grid[i][j] = 0\n                    total_water = total_water - capacity\n                    steps_in_this_round = steps_in_this_round + 1\n        max_steps = max_steps + steps_in_this_round\n    return max_steps\n"}
{"task_id": "HumanEval/115", "completion": "\nprocedure max_fill(grid, capacity):\n    result = 0\n    total_water = 0\n    for each row in grid:\n        total_water += sum(row)\n    \n    while total_water > 0:\n        for each row in grid:\n            if total_water >= capacity:\n                total_water -= capacity\n                result += 1\n            else:\n                amount_to_remove = total_water\n                total_water = 0\n                for i in range(len(row)):\n                    if row[i] == 1:\n                        row[i] = 0\n                        amount_to_remove -= 1\n                        if amount_to_remove == 0:\n                            break\n        total_water = sum([sum(row) for row in grid])\n    \n    return resul"}
{"task_id": "HumanEval/115", "completion": "\nfunction max_fill(grid, capacity):\n    total_water = 0\n    rows = grid.size[0]\n    cols = grid.size[1]\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                total_water += 1\n    return math.ceil(total_water / capacity)\n"}
{"task_id": "HumanEval/115", "completion": "\nfunction max_fill(grid, capacity):\n    total_water = 0\n    total_buckets = 0\n    for row in grid:\n        total_water += sum(row)\n    max_buckets_needed = math.ceil(total_water / capacity)\n    return max_buckets_needed\n"}
{"task_id": "HumanEval/115", "completion": "algorithm max_fill is\n    input: grid, capacity\n    n = size of grid\n    total_water = 0\n    for i = 1 to n do\n        for j = 1 to size of grid[i] do\n            if grid[i][j] = 1 then\n                total_water = total_water + 1\n    bucket_water = 0\n    steps = 0\n    while total_water > 0 do\n        for i = 1 to n do\n            if grid[i][1] = 1 then\n                bucket_water = bucket_water + min(capacity, total_water)\n                total_water = total_water - min(capacity, total_water)\n                grid[i][1] = 0\n        steps = steps + 1\n    return steps\n"}
{"task_id": "HumanEval/115", "completion": "\nfunction max_fill(grid, capacity)\n    result = 0\n    while there remains water in any well\n        for each well in grid\n            if the well is not empty\n                if the well can hold full bucket(s) (i.e., its height is at least bucket capacity)\n                    add the bucket(s) to the result\n                    reduce the height of the well by the bucket capacity until it is empty\n                else\n                    add 1 to the result (partial fill)\n                    fill the partial fill bucket and move on to the next well\n        return result\nend function\n"}
{"task_id": "HumanEval/115", "completion": "\nfunction max_fill(grid, capacity):\n    total_units = 0\n    for row in grid:\n        total_units += sum(row)\n    num_buckets = math.ceil(total_units / capacity)\n    return num_buckets\n"}
{"task_id": "HumanEval/115", "completion": "\nalgorithm max_fill is\n    input: grid - 2D array representing wells\n           capacity - integer representing the capacity of each bucket\n\n    let total_water = 0\n    let buckets_needed = 0\n\n    for each row in grid\n        let total_water_in_row = sum of all elements in row\n        while total_water_in_row > 0\n            let water_taken = min(total_water_in_row, capacity)\n            total_water += water_taken\n            total_water_in_row -= water_taken\n            buckets_needed++\n        end while\n\n    return buckets_needed\nend algorithm\n"}
{"task_id": "HumanEval/116", "completion": "ALGORITHM\n  INPUT: arr, an array of integers\n  OUTPUT: arr, sorted array\n\n  FUNCTION sort_array(arr)\n    DECLARE binary_to_decimal AS A FUNCTION TO CONVERT INTEGER TO DECIMAL IN BINARY REPRESENTATION\n    DECLARE count_ones AS A FUNCTION TO COUNT THE NUMBER OF ONES IN A BINARY REPRESENTATION\n    DECLARE result AS AN EMPTY ARRAY TO STORE THE FINAL RESULT\n\n    FOR EACH num IN arr\n      CALCULATE binary_value AS THE BINARY REPRESENTATION OF num\n      CALCULATE decimal_value AS THE DECIMAL VALUE OF binary_value\n      CALCULATE count AS THE NUMBER OF ONES IN binary_value\n      APPEND AN ARRAY CONTAINING (count, decimal_value) INTO result\n\n    SORT result IN ASCENDING ORDER BY THE FIRST ELEMENT (count) AND THEN BY THE SECOND ELEMENT (decimal_value)\n\n    FOR EACH entry IN result\n      APPEND entry[1] TO result_array\n\n    RETURN result_arra"}
{"task_id": "HumanEval/116", "completion": "sort_array(arr):\n    function sort(arr)\n        temp = new array\n        for each num in arr\n            count = count ones in binary of num\n            append (num, count) to temp\n        sort temp by second element of each tuple in ascending order\n        return first element of each tuple in temp\n"}
{"task_id": "HumanEval/116", "completion": "ALGORITHM\nDECLARE arr AS ARRAY OF INTEGER\nDECLARE result AS NEW ARRAY OF INTEGER\nDECLARE temp AS INTEGER\nDECLARE i AS INTEGER\nDECLARE j AS INTEGER\nDECLARE count AS INTEGER\nDECLARE binary AS STRING\n\nFOR i FROM 0 TO LENGTH(arr)-1\n    SET temp = arr[i]\n    SET count = 0\n    SET binary = CONVERSION(temp TO BINARY)\n    FOR j FROM 0 TO LENGTH(binary)-1\n        IF (BINARY[j] == '1')\n            INCREMENT count\n    END FOR\n    INSERT temp AFTER THE FIRST ELEMENT IN result WHERE count OCCURS FOR THE FIRST TIME\nNEXT i\n\nRETURN resul"}
{"task_id": "HumanEval/116", "completion": "\nPROCEDURE sort_array(arr)\n    DECLARE result AS LIST OF INTEGER\n    FOR EACH num IN arr\n        DECLARE count_of_ones AS INTEGER\n        count_of_ones = COUNT BITWISE_AND(num, ~num) // Count the number of 1's in binary representation\n        IF result IS EMPTY OR count_of_ones > FIRST(result)[1] THEN\n            INSERT num AT THE FRONT OF result\n        ELSE IF count_of_ones = FIRST(result)[1] THEN\n            INSERT num AFTER LAST ELEMENT OF result WHERE FIRST(result)[2] <= num\n        END IF\n    END FOR\n    RETURN result\nEND PROCEDURE\n"}
{"task_id": "HumanEval/116", "completion": "\nfunction sort_array(arr):\n    def count_ones(n):\n        count = 0\n        while n > 0:\n            if n % 2 == 1:\n                count += 1\n            n = n // 2\n        return count\n\n    arr.sort(key=lambda x: (count_ones(x), -x))\n    return arr\n"}
{"task_id": "HumanEval/116", "completion": "sort_array(arr) is\n    result = new array\n    for each element e in arr\n        count = count of ones in binary representation of e\n        insert e into result at correct position\n    return result\n\nfunction count_ones(n)\n    count = 0\n    while n > 0\n        count = count + n mod 2\n        n = n div 2\n    return count\n\nfunction insert_at_position(arr, x, pos)\n    arr[pos] = x\n    for i from pos to length of arr - 1\n        if arr[i] < x\n            temp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n    return arr\n\nfunction find_insertion_point(arr, target)\n    for i from 0 to length of arr\n        if arr[i] <= target\n            return i\n        else\n            return i + 1\n\narr = given array\nresult = []\nfor each e in arr\n    ones_count = count_ones(e)\n    insertion_point = find_insertion_point(result, e)\n    result = insert_at_position(result, e, insertion_point)\n\nreturn result"}
{"task_id": "HumanEval/116", "completion": "ALGORITHM:\nFUNCTION sort_array(arr)\n    DECLARE n = LENGTH OF arr\n    FOR i FROM 0 TO n-1\n        FOR j FROM i+1 TO n-1\n            IF COUNT ONES IN BINARY representation of arr[i] > COUNT ONES IN BINARY representation of arr[j]\n                SWAP arr[i] AND arr[j]\n            ELSE IF COUNT ONES IN BINARY representation of arr[i] = COUNT ONES IN BINARY representation of arr[j]\n                IF arr[i] > arr[j]\n                    SWAP arr[i] AND arr[j]\n    RETURN ar"}
{"task_id": "HumanEval/116", "completion": "ALGORITHM: sort_array(arr)\n    DECLARE: result_arr, num_ones, bin_num, i, j, temp\n    result_arr = arr\n    FOR i FROM 0 TO length(result_arr) - 1\n        bin_num = CONVERSION(result_arr[i], 10, 2)\n        num_ones = COUNT(ONES IN bin_num)\n        FOR j FROM i + 1 TO length(result_arr) - 1\n            IF num_ones <= COUNT(ONES IN CONVERSION(result_arr[j], 10, 2))\n                IF num_ones < COUNT(ONES IN CONVERSION(result_arr[j], 10, 2))\n                    SWAP result_arr[i], result_arr[j]\n                ELSE IF num_ones = COUNT(ONES IN CONVERSION(result_arr[j], 10, 2)) AND result_arr[i] > result_arr[j]\n                    SWAP result_arr[i], result_arr[j]\n            END IF\n        END FOR\n    END FOR\n    RETURN result_ar"}
{"task_id": "HumanEval/116", "completion": "function sort_array(arr):\n    function count_ones(n):\n        count = 0\n        while n > 0:\n            n = n & (n - 1)\n            count = count + 1\n        return count\n\n    result = []\n    for num in arr:\n        if num < 0:\n            result.append((abs(num), num))\n        else:\n            result.append((count_ones(num), num))\n    result.sort()\n    return [x[1] if x[0] == 0 else x[1] for x in result]\n"}
{"task_id": "HumanEval/116", "completion": "function sort_array(arr)\n    n = length(arr)\n    for i from 1 to n-1\n        for j from i+1 to n\n            if count_ones(arr[i]) > count_ones(arr[j])\n                swap arr[i] and arr[j]\n            else if count_ones(arr[i]) == count_ones(arr[j])\n                if arr[i] > arr[j]\n                    swap arr[i] and arr[j]\n    return arr\n\nfunction count_ones(x)\n    count = 0\n    while x > 0\n        if x mod 2 == 1\n            count = count + 1\n        x = floor(x/2)\n    return count\n"}
{"task_id": "HumanEval/117", "completion": "function select_words(s, n)\n    words = []\n    word = \"\"\n    for each character c in s\n        if c is not a space\n            add c to word\n        else\n            count = count_consonants(word)\n            if count == n\n                add word to words\n            word = \"\"\n    count = count_consonsants(word)\n    if count == n\n        add word to words\n    return words\n\nfunction count_consonants(s)\n    count = 0\n    for each character c in s\n        if c is not a vowel\n            increment count\n    return count\n"}
{"task_id": "HumanEval/117", "completion": "\nfunction select_words(s, n)\n    words = split(s, ' ')\n    result = []\n    for word in words do\n        count = 0\n        for char in word do\n            if char is not a vowel then\n                count = count + 1\n            end\n        end\n        if count equals n then\n            result.append(word)\n        end\n    end\n    return result\nend\n"}
{"task_id": "HumanEval/117", "completion": "\nfunction select_words(s, n):\n    // split the string into words\n    words = split(s, ' ')\n\n    result = []\n\n    for word in words:\n        // count the consonants in the word\n        consonant_count = 0\n        for char in word:\n            if char in ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']:\n                consonant_count = consonant_count + 1\n\n        // check if the word has exactly n consonants\n        if consonant_count == n:\n            result.append(word)\n\n    return result\n"}
{"task_id": "HumanEval/117", "completion": "\nfunction select_words(s, n)\n    words = []\n    word = \"\"\n    for each character c in s\n        if c is not a space\n            if word is empty\n                word = word + c\n            else\n                word = word + c\n            if count_consonants(word) == n\n                words.append(word)\n                word = \"\"\n        else\n            if length(word) > 0\n                word = \"\"\n    return words\n\nfunction count_consonants(s)\n    consonant_count = 0\n    for each character c in s\n        if c is not a vowel\n            consonant_count = consonant_count + 1\n    return consonant_count\n"}
{"task_id": "HumanEval/117", "completion": "\nfunction select_words(s, n):\n    words = split(s, ' ')\n    result = []\n    for word in words:\n        word_length = 0\n        consonant_count = 0\n        for char in word:\n            if char != ' ':\n                word_length += 1\n                if not (char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u'):\n                    consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/117", "completion": "function select_words(s, n)\n    words = split(s, \" \")\n    result = []\n    for word in words\n        count = 0\n        for char in word\n            if char not in \"aeiouAEIOU\"\n                count = count + 1\n        if count == n\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/117", "completion": "function select_words(s, n)\n    word_list = []\n    word = \"\"\n    count_consonants = 0\n    for each char in s\n        if char is not a space and not is_vowel(char)\n            count_consonants = count_consonants + 1\n        else\n            if char is not a space\n                if count_consonants is equal to n\n                    word_list.append(word)\n                    count_consonants = 0\n                word = \"\"\n            else\n                count_consonants = 0\n                word = \"\"\n    if count_consonants is equal to n\n        word_list.append(word)\n    return word_list\n"}
{"task_id": "HumanEval/117", "completion": "\nfunction select_words(s, n)\n    // Split the input string into a list of words\n    list words = split(s, ' ')\n\n    // Initialize an empty list to store the result\n    list result = []\n\n    // Iterate over each word in the list of words\n    for word in words\n        // Initialize a counter for the number of consonants in the current word\n        integer count = 0\n\n        // Iterate over each character in the current word\n        for char in word\n            // Check if the character is a consonant\n            if char not in ['a', 'e', 'i', 'o', 'u']\n                // Increment the count of consonants\n                count = count + 1\n\n        // Check if the count of consonants in the current word is equal to n\n        if count == n\n            // Add the current word to the result list\n            result.append(word)\n\n    // Return the result list\n    return result\n"}
{"task_id": "HumanEval/117", "completion": "function select_words(s, n)\n    words = split(s, ' ')\n    result = []\n    for each word in words\n        consonants = 0\n        for each char in word\n            if char is not 'a', 'e', 'i', 'o', 'u' and not space\n                consonants = consonants + 1\n        if consonants == n\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/117", "completion": "\nfunction select_words(s, n)\n    words = split(s, \" \")\n    result = []\n    for each word in words\n        consonant_count = 0\n        for each char in word\n            if char != \"a\" and char != \"e\" and char != \"i\" and char != \"o\" and char != \"u\" and char != \" \"\n                consonant_count = consonant_count + 1\n        if consonant_count == n\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "function get_closest_vowel(word)\n    index = 0\n    while index < length(word) and not is_vowel(word[index])\n        index = index + 1\n    if index = length(word)\n        return \"\"\n    index2 = index + 1\n    while index2 < length(word) and not is_consonant(word[index2])\n        index2 = index2 + 1\n    if index2 = length(word)\n        return \"\"\n    while index2 > 0 and not is_vowel(word[index2 - 1])\n        index2 = index2 - 1\n    return word[index2]\nend function\n\nfunction is_vowel(char)\n    if char = \"a\" or char = \"e\" or char = \"i\" or char = \"o\" or char = \"u\" or char = \"A\" or char = \"E\" or char = \"I\" or char = \"O\" or char = \"U\"\n        return true\n    else\n        return false\n    end function\n\nfunction is_consonant(char)\n    if not is_vowel(char)\n        return true\n    else\n        return false\n    end function\n"}
{"task_id": "HumanEval/118", "completion": "\nfunction get_closest_vowel(word):\n    for i from length(word)-2 down to 1:\n        if word[i] is 'a' or word[i] is 'e' or word[i] is 'i' or word[i] is 'o' or word[i] is 'u':\n            if i-1 > 0 and not (word[i-1] is 'a' or word[i-1] is 'e' or word[i-1] is 'i' or word[i-1] is 'o' or word[i-1] is 'u'):\n                return word[i]\n            if i+1 < length(word) and not (word[i+1] is 'a' or word[i+1] is 'e' or word[i+1] is 'i' or word[i+1] is 'o' or word[i+1] is 'u'):\n                return word[i]\n    return \""}
{"task_id": "HumanEval/118", "completion": "\nfunction get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i from length(word) - 2 downto 1:\n        if word[i] not in vowels:\n            for j from i - 1 downto 0:\n                if word[j] in vowels:\n                    result = word[j]\n                    return result\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\nfunction get_closest_vowel(word)\n    result = \"\"\n    for i from length of word - 2 down to 1\n        if word[i] is not 'a' and word[i] is not 'e' and word[i] is not 'i' and word[i] is not 'o' and word[i] is not 'u'\n            if word[i + 1] is 'a' or word[i + 1] is 'e' or word[i + 1] is 'i' or word[i + 1] is 'o' or word[i + 1] is 'u'\n                result = word[i + 1]\n                return result\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\nfunction get_closest_vowel(word):\n    i = len(word) - 1\n    while i > 0 and not is_vowel(word[i]):\n        i -= 1\n    if i == 0:\n        return \"\"\n    while not is_vowel(word[i]):\n        i -= 1\n    return word[i]\n"}
{"task_id": "HumanEval/118", "completion": "\nfunction get_closest_vowel(word)\n    left := 0\n    right := length(word) - 1\n    closest_vowel := \"\"\n    min_distance := infinity\n    \n    while left <= right\n        middle := (left + right) / 2\n        if is_vowel(middle)\n            if middle < right && not is_consonant(middle + 1)\n                return character(middle)\n            else if middle > left && not is_consonant(middle - 1)\n                return character(middle)\n            else\n                left := middle + 1\n        else\n            right := middle - 1\n    \n    return \"\"\nend function\n\nfunction is_vowel(index)\n    vowels := {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    return index >= 0 and index < length(word) and character(index) in vowels\nend function\n\nfunction is_consonant(index)\n    return not is_vowel(index)\nend function\n"}
{"task_id": "HumanEval/118", "completion": "\nfunction get_closest_vowel(word)\n    vowel = \"aeiouAEIOU\"\n    for i from length(word) - 2 downto 1 do\n        if word[i] not in vowel and word[i+1] not in vowel then\n            if word[i+2] in vowel then\n                return word[i+2]\n        end if\n    end for\n    return \"\"\nend functio"}
{"task_id": "HumanEval/118", "completion": "\nword = input_string\nleft = 0\nfor i in range(len(word) - 1, -1, -1):\n    if word[i].lower() not in 'aeiou':\n        left = i + 1\n    else:\n        break\nfor i in range(left - 1, -1, -1):\n    if word[i].lower() in 'aeiou':\n        return word[i]\nreturn ''\n"}
{"task_id": "HumanEval/118", "completion": "\nprocedure get_closest_vowel(word):\n    vowel = {'a', 'e', 'i', 'o', 'u'}\n    i = length(word) - 1\n    while i > 0 and not word[i] in vowel:\n        i -= 1\n    if i == 0:\n        return \"\"\n    while word[i] not in vowel:\n        i -= 1\n    return word[i]\n"}
{"task_id": "HumanEval/118", "completion": "function get_closest_vowel(word)\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    result = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels:\n            left_consonant = True\n            right_consonant = True\n            for j in range(i - 1, -1, -1):\n                if not word[j] in vowels:\n                    left_consonant = False\n            for j in range(i + 1, len(word)):\n                if not word[j] in vowels:\n                    right_consonant = False\n            if left_consonant and right_consonant:\n                return word[i]\n    return result\n"}
{"task_id": "HumanEval/119", "completion": "function match_parens(lst)\n    stack = new stack\n    for char in lst[0] + lst[1]:\n        if char == '(' then\n            stack.push(char)\n        else if char == ')' then\n            if stack.isEmpty() then\n                return 'No'\n            else\n                stack.pop()\n    if stack.isEmpty() then\n        return 'Yes'\n    else\n        return 'No'\n"}
{"task_id": "HumanEval/119", "completion": "\nfunction match_parens(lst)\n    stack = new stack\n    for each char in lst[0] + lst[1]\n        if char is '(' then push char onto stack\n        else if stack is empty then return 'No'\n        else pop char from stack\n    if stack is empty then return 'Yes'\n    else return 'No'\nend function\n"}
{"task_id": "HumanEval/119", "completion": "function match_parens(lst)\n    stack = []\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/119", "completion": "\nfunction match_parens(lst)\n    stack = new stack\n    for each str in lst\n        for each char in str\n            if char is '(' then push char onto stack\n            if char is ')' then\n                if stack is empty then return 'No'\n                pop top of stack\n    if stack is empty then return 'Yes'\n    else return 'No'\n"}
{"task_id": "HumanEval/119", "completion": "function match_parens(lst)\n    stack = new stack\n    for each str in lst\n        for each char in str\n            if char == '(' then push char onto stack\n            elif char == ')' then\n                if stack is empty then return 'No'\n                else pop top from stack\n    if stack is empty then return 'Yes'\n    else return 'No'\n"}
{"task_id": "HumanEval/119", "completion": "function match_parens(lst)\n    stack = new stack\n    for char in lst[0] + lst[1]:\n        if char == '(':\n            stack.push(char)\n        elif char == ')':\n            if stack.isEmpty():\n                return 'No'\n            stack.pop()\n    if stack.isEmpty():\n        return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/119", "completion": "\nFunction match_parens(lst)\n    stack = new stack\n    for each str in lst\n        for each char in str\n            if char is '('\n                push char onto stack\n            else if char is ')'\n                if stack is empty then\n                    return 'No'\n                else\n                    pop char from stack\n    if stack is empty then\n        return 'Yes'\n    else\n        return 'No'\n"}
{"task_id": "HumanEval/119", "completion": "procedure match_parens(lst)\n    stack = new empty stack\n    for each str in lst\n        for each char in str\n            if char == '(' then\n                push '(' onto stack\n            else if char == ')' then\n                if stack is empty then\n                    return 'No'\n                else\n                    pop '(' from stack\n            if stack is empty then\n                return 'Yes'\n    if stack is not empty then\n        return 'No'\n    else\n        return 'Yes'\n"}
{"task_id": "HumanEval/119", "completion": "function match_parens(lst):\n    stack = []\n    s1 = lst[0]\n    s2 = lst[1]\n    \n    for char in s1 + s2:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    \n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/119", "completion": "\nfunction match_parens(lst)\n    stack = new stack\n    for each str in lst\n        for each char in str\n            if char is '(' then push it onto stack\n            else if stack is empty then return 'No'\n            else pop from stack\n        end for\n    end for\n    if stack is empty then return 'Yes'\n    else return 'No'\nend function\n"}
{"task_id": "HumanEval/120", "completion": "ALGORITHM maxKNumbers\n\nINPUT: array arr, positive integer k\nOUTPUT: sorted list of length k with maximum k numbers in arr\n\n1. sort arr in descending order\n2. return arr[0...k-1]\n"}
{"task_id": "HumanEval/120", "completion": "sort arr in descending order\nfor i from 0 to k-1:\n    print arr[i]\n"}
{"task_id": "HumanEval/120", "completion": "\nMAX_K = 1000\narr = []\nk = 0\n\n# Read input values\nfor i in range(len(arr)):\n    arr[i] = int(input())\nk = int(input())\n\n# Sort the array in descending order\narr.sort(reverse=True)\n\n# Return a sorted list of length k with the maximum k numbers in arr\nreturn arr[:k]\n"}
{"task_id": "HumanEval/120", "completion": "function max_k(arr, k)\n    sort arr in descending order\n    return arr[0..k-1]\n"}
{"task_id": "HumanEval/120", "completion": "\nfunction maximum(arr, k):\n    sort arr in descending order\n    result = []\n    for i from 0 to k-1:\n        append the ith element of arr to result\n    return resul"}
{"task_id": "HumanEval/120", "completion": "FUNCTION maximum(arr, k):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # return the first k elements of the sorted array\n    RETURN arr[:k"}
{"task_id": "HumanEval/120", "completion": "ALGORITHM maximum(arr, k)\n    sort arr in descending order\n    return first k elements of the sorted arr\n\nEND ALGORITHM\n"}
{"task_id": "HumanEval/120", "completion": "\nfunction maximum(arr, k)\n    sort arr in descending order\n    return the first k elements of arr\n"}
{"task_id": "HumanEval/120", "completion": "FUNCTION maximum(arr, k)\n    # Sort arr in descending order\n    sorted_arr = sort(arr, DESCENDING)\n    \n    # Return the first k elements of the sorted array\n    RETURN sorted_arr[0..k-1]\n"}
{"task_id": "HumanEval/120", "completion": "procedure maximum(arr, k)\n    sort arr in descending order\n    return first k elements of arr\n"}
{"task_id": "HumanEval/121", "completion": "\nfunction solution(lst)\n    sum_odd_even_positions = 0\n    for i from 1 to length(lst) step 2 do\n        if lst[i] modulo 2 is not 0 then\n            sum_odd_even_positions = sum_odd_even_positions + lst[i]\n    return sum_odd_even_positions\n"}
{"task_id": "HumanEval/121", "completion": "\ndata = input_list\nsum = 0\nfor i from 1 to length(data) - 1 step 2 do\n    if data[i] mod 2 != 0 then\n        sum = sum + data[i]\n    end if\nend for\noutput sum\n"}
{"task_id": "HumanEval/121", "completion": "function solution(lst)\n    sum = 0\n    for i from 0 to length(lst) - 1\n        if i mod 2 == 0 and lst[i] mod 2 != 0 then\n            sum = sum + lst[i]\n        end if\n    end for\n    return sum\n"}
{"task_id": "HumanEval/121", "completion": "\nfunction solution(lst):\n    result = 0\n    for i from 0 to length(lst) - 1:\n        if i mod 2 is 0 and lst[i] mod 2 is not 0:\n            result = result + lst[i]\n    return resul"}
{"task_id": "HumanEval/121", "completion": "\nfunction solution(lst)\n    sum_odd_at_even_positions = 0\n    for i from 0 to length(lst) - 1\n        if i mod 2 == 0 and lst[i] mod 2 != 0\n            sum_odd_at_even_positions = sum_odd_at_even_positions + lst[i]\n    return sum_odd_at_even_positions\n"}
{"task_id": "HumanEval/121", "completion": "\nfunction solution(lst):\n    total = 0\n    for i from 0 to length(lst)-1:\n        if i mod 2 == 0 and lst[i] mod 2 != 0:\n            total = total + lst[i]\n    return total\n"}
{"task_id": "HumanEval/121", "completion": "\nfunction solution(lst):\n    sum_odd_even = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum_odd_even = sum_odd_even + lst[i]\n    return sum_odd_even\n"}
{"task_id": "HumanEval/121", "completion": "\nfunction solution(lst)\n    sum = 0\n    for i from 0 to length(lst) - 1\n        if (i mod 2) is 0 and (lst[i] mod 2) is not 0\n            sum = sum + lst[i]\n    return sum\n"}
{"task_id": "HumanEval/121", "completion": "FUNCTION solution(LIST)\n   SUM = 0\n   FOR i = 1 TO LENGTH(LIST) - 1 BY 2\n      IF LIST[i] MOD 2 \u2260 0\n         SUM = SUM + LIST[i]\n      END IF\n   NEXT i\n   RETURN SUM\nEND FUNCTIO"}
{"task_id": "HumanEval/121", "completion": "\nfunction solution(lst)\n    sum = 0\n    index = 0\n    while index < length of lst\n        if index is even and lst[index] is odd\n            sum = sum + lst[index]\n        increment index by 1\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "\nALGORITHM add_elements(arr, k)\n    SUM = 0\n    i = 0\n    WHILE i < k\n        IF length of arr[i] <= 2\n            SUM = SUM + arr[i]\n        END IF\n        i = i + 1\n    END WHILE\n    RETURN SUM\nEND ALGORITHM\n"}
{"task_id": "HumanEval/122", "completion": "function add_elements(arr, k):\n    sum_result = 0\n    for i from 0 to min(k, len(arr)) - 1:\n        if len(str(arr[i])) <= 2:\n            sum_result = sum_result + arr[i]\n    return sum_resul"}
{"task_id": "HumanEval/122", "completion": "\nfunction add_elements(arr, k):\n    result = 0\n    for i from 1 to min(k, length(arr)):\n        element = arr[i]\n        if length(to_string(element)) <= 2:\n            result += element\n    return result\n"}
{"task_id": "HumanEval/122", "completion": "\nfunction add_elements(arr, k)\n    sum = 0\n    i = 0\n    while i < min(k, len(arr))\n        if len(str(arr[i])) <= 2\n            sum = sum + arr[i]\n        i = i + 1\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "function add_elements(arr, k)\n    sum <- 0\n    for i from 0 to k-1 do\n        if length of arr[i] <= 2 then\n            sum <- sum + arr[i]\n    end for\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "\nfunction add_elements(arr, k)\n    sum = 0\n    i = 0\n    while i < k and i < length(arr)\n        if log10(abs(arr[i])) <= 2\n            sum = sum + arr[i]\n        i = i + 1\n    return sum\n"}
{"task_id": "HumanEval/122", "completion": "\nfunction add_elements(arr, k)\n    sum := 0\n    for i from 1 to min(k, length(arr)) do\n        if length(to_string(arr[i])) <= 2 then\n            sum := sum + arr[i]\n    return sum\nend function\n"}
{"task_id": "HumanEval/122", "completion": "\nfunction add_elements(arr, k):\n    sum_result = 0\n    i = 0\n    while i < min(k, len(arr)):\n        num = arr[i]\n        if len(str(abs(num))) <= 2:\n            sum_result += num\n        i = i + 1\n    return sum_result\n"}
{"task_id": "HumanEval/122", "completion": "input: array arr, integer k\nsum := 0\nfor i from 1 to min(k, len(arr)) do\n    if length of arr[i] <= 2 then\n        sum := sum + arr[i]\n    end if\nend for\nreturn su"}
{"task_id": "HumanEval/122", "completion": "begin\n    sum := 0\n    for i from 0 to min(k, length(arr)) do\n        if length(arr[i]) <= 2 then\n            sum := sum + arr[i]\n        end if\n    end for\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\nfunction get_odd_collatz(n)\n    result = []\n    current = n\n    while current != 1\n        if current is odd then\n            result.append(current)\n            if current > 1 then\n                current = (3 * current) + 1\n            else\n                current = 1\n        else\n            current = (current / 2)\n    end while\n    return sort(result)\n"}
{"task_id": "HumanEval/123", "completion": "\nfunction get_odd_collatz(n)\n    result = []\n    while n != 1\n        if n is even\n            n = n / 2\n        else\n            n = 3 * n + 1\n        append n to result\n    end while\n    sort result\n    return result\nend functio"}
{"task_id": "HumanEval/123", "completion": "function get_odd_collatz(n)\n    result = []\n    current = n\n    while current != 1\n        if current mod 2 == 0\n            current = current / 2\n        else\n            current = 3 * current + 1\n        if current mod 2 != 0\n            result.append(current)\n    return sort(result"}
{"task_id": "HumanEval/123", "completion": "function get_odd_collatz(n):\n    sequence = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    odd_sequence = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_sequence"}
{"task_id": "HumanEval/123", "completion": "\nfunction get_odd_collatz(n):\n    sequence = []\n    current = n\n    while current != 1:\n        if current % 2 == 0:\n            current = current / 2\n        else:\n            current = 3 * current + 1\n        sequence.append(current)\n    odd_sequence = []\n    for num in sequence:\n        if num % 2 != 0:\n            odd_sequence.append(num)\n    return sorted(odd_sequence)\n"}
{"task_id": "HumanEval/123", "completion": "\nfunction get_odd_collatz(n):\n    sequence = []\n    while n > 1:\n        if n % 2 == 0 then\n            n = n / 2\n        else\n            n = 3 * n + 1\n        sequence.append(n)\n    result = []\n    for i in range(len(sequence)):\n        if sequence[i] % 2 != 0 then\n            result.append(sequence[i])\n    return sort(result)\n"}
{"task_id": "HumanEval/123", "completion": "function get_odd_collatz(n):\n    sequence = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        if n not in sequence:\n            sequence.append(n)\n    odd_sequence = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_sequence)\n"}
{"task_id": "HumanEval/123", "completion": "function get_odd_collatz(n)\n    result = []\n    i = n\n    while i > 1 do\n        if i mod 2 == 0 then\n            i = i / 2\n        else\n            i = 3 * i + 1\n        end\n        if i mod 2 != 0 then\n            result.append(i)\n        end\n    end\n    return sort(result)\n"}
{"task_id": "HumanEval/123", "completion": "function get_odd_collatz(n)\n    sequence = []\n    while n > 1\n        if n is odd\n            sequence.add n\n            n = 3 * n + 1\n        else\n            n = n / 2\n    end\n    return sort(sequence)\n"}
{"task_id": "HumanEval/123", "completion": "\nfunction get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    result.append(1)\n    return sorted(result)\n"}
{"task_id": "HumanEval/124", "completion": "function valid_date(date)\n    month, day, year = split(date, '-')\n    \n    if length(month) != 2 or length(day) != 2 or length(year) != 4 then\n        return false\n    end\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12 then\n        return false\n    end\n    \n    if month in [1,3,5,7,8,10,12] then\n        if day < 1 or day > 31 then\n            return false\n        end\n    elseif month in [4,6,9,11] then\n        if day < 1 or day > 30 then\n            return false\n        end\n    else\n        if day < 1 or day > 29 then\n            return false\n        end\n    end\n    \n    return true\n"}
{"task_id": "HumanEval/124", "completion": "\nfunction valid_date(date)\n    // Split the input string into day, month and year\n    day, month, year = split(date, '-')\n\n    // Check if the date string is not empty\n    if length(date) == 0 then\n        return false\n    end if\n\n    // Check if the month is within the range 1 to 12\n    if month < 1 or month > 12 then\n        return false\n    end if\n\n    // Check if the day is valid for the given month\n    if (month in [1,3,5,7,8,10,12] and day < 1 or day > 31) or\n       (month in [4,6,9,11] and day < 1 or day > 30) or\n       (month == 2 and day < 1 or day > 29) then\n        return false\n    end if\n\n    // If all checks pass, the date is valid\n    return true\n"}
{"task_id": "HumanEval/124", "completion": "\nfunction valid_date(date)\n    input: str date\n    parts := split(date, '-')\n    month := integer parse(parts[1])\n    day := integer parse(parts[2])\n    year := integer parse(parts[3])\n\n    if length(date) != 10 then\n        return false\n    end if\n    if month < 1 or month > 12 then\n        return false\n    end if\n    if (month = 1 or month = 3 or month = 5 or month = 7 or month = 8 or month = 10 or month = 12) then\n        if day < 1 or day > 31 then\n            return false\n        end if\n    else if (month = 4 or month = 6 or month = 9 or month = 11) then\n        if day < 1 or day > 30 then\n            return false\n        end if\n    else if (month = 2) then\n        if (year mod 4 = 0 and year mod 100 <> 0) or (year mod 400 = 0) then\n            if day < 1 or day > 29 then\n                return false\n            end if\n        else\n            if day < 1 or day > 28 then\n                return false\n            end if\n        end if\n    end if\n    return true\n"}
{"task_id": "HumanEval/124", "completion": "\nfunction valid_date(date)\n    split date into month, day, year\n    if length(date) < 10 then\n        return false\n    end if\n    if month < 1 or month > 12 then\n        return false\n    end if\n    if day < 1 then\n        return false\n    end if\n    if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) then\n        if day > 31 then\n            return false\n        end if\n    else if (month == 4 or month == 6 or month == 9 or month == 11) then\n        if day > 30 then\n            return false\n        end if\n    else if (month == 2) then\n        if day > 29 then\n            return false\n        end if\n    end if\n    return true\n"}
{"task_id": "HumanEval/124", "completion": "\nfunction valid_date(date)\n    // Split the date string into three parts: month, day, and year\n    month, day, year = split(date, '-')\n\n    // Check if the date string is not empty\n    if length(date) == 0 then\n        return false\n\n    // Check if the month is within the range [1, 12]\n    if month < 1 or month > 12 then\n        return false\n\n    // Check if the day is within the valid range for the given month\n    if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) then\n        if day < 1 or day > 31 then\n            return false\n    else if (month == 4 or month == 6 or month == 9 or month == 11) then\n        if day < 1 or day > 30 then\n            return false\n    else if (month == 2) then\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) then\n            if day < 1 or day > 29 then\n                return false\n        else\n            if day < 1 or day > 28 then\n                return false\n\n    // Check if the date is in the correct format (mm-dd-yyyy)\n    if len(month) != 2 or len(day) != 2 or len(year) != 4 then\n        return false\n\n    // If all checks pass, the date is valid\n    return tru"}
{"task_id": "HumanEval/124", "completion": "\nfunction valid_date(date_string)\n    month, day, year = split(date_string, '-')\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if len(date_string) != 10 or date_string[2] != '-' or date_string[5] != '-':\n        return false\n\n    if month < 1 or month > 12:\n        return false\n\n    if month == 2:\n        if day < 1 or day > 29:\n            return false\n    else if month in [1,3,5,7,8,10,12]:\n        if day < 1 or day > 31:\n            return false\n    else:\n        if day < 1 or day > 30:\n            return false\n\n    return tru"}
{"task_id": "HumanEval/124", "completion": "\nfunction valid_date(date_string)\n    date_parts = split(date_string, '-')\n    month = integer_value(date_parts[0])\n    day = integer_value(date_parts[1])\n    year = integer_value(date_parts[2])\n    \n    if length(date_string) != 10 then\n        return false\n    end if\n    \n    if month < 1 or month > 12 then\n        return false\n    end if\n    \n    if day < 1 then\n        return false\n    end if\n    \n    if month in [4, 6, 9, 11] and day > 30 then\n        return false\n    end if\n    \n    if month == 2 and day > 29 then\n        if is_leap_year(year) then\n            if day > 29 then\n                return false\n            end if\n        else\n            if day > 28 then\n                return false\n            end if\n        end if\n    end if\n    \n    if day > days_in_month(month, year) then\n        return false\n    end if\n    \n    return true\n\nfunction days_in_month(month, year)\n    if month in [1, 3, 5, 7, 8, 10, 12] then\n        return 31\n    elseif month == 2 then\n        if is_leap_year(year) then\n            return 29\n        else\n            return 28\n        end if\n    else\n        return 30\n    end if\n\nfunction is_leap_year(year)\n    if (year mod 4) == 0 then\n        if (year mod 100) == 0 then\n            if (year mod 400) == 0 then\n                return true\n            else\n                return false\n        else\n            return true\n        end if\n    else\n        return false\n    end if\nend functio"}
{"task_id": "HumanEval/124", "completion": "\nFUNCTION valid_date(date_string)\n   SEPARATE date_string INTO month, day, year\n   IF date_string IS EMPTY OR length(date_string) \u2260 10 THEN\n      RETURN FALSE\n   END IF\n   IF month < 1 OR month > 12 THEN\n      RETURN FALSE\n   END IF\n   IF day < 1 OR day > 31 THEN\n      RETURN FALSE\n   END IF\n   IF (month IN {1, 3, 5, 7, 8, 10, 12} AND day > 31) OR (month IN {4, 6, 9, 11} AND day > 30) OR (month = 2 AND day > 29) THEN\n      RETURN FALSE\n   END IF\n   RETURN TRUE\nEND FUNCTIO"}
{"task_id": "HumanEval/124", "completion": "\nfunction valid_date(date)\n    month, day, year = split(date, '-')\n    if length(month) < 2 or length(day) < 2 or length(year) < 4 then\n        return false\n    end if\n    if not is_integer(to_integer(month)) or not is_integer(to_integer(day)) then\n        return false\n    end if\n    month = to_integer(month)\n    day = to_integer(day)\n    if month < 1 or month > 12 then\n        return false\n    end if\n    if month in [1, 3, 5, 7, 8, 10, 12] then\n        if day < 1 or day > 31 then\n            return false\n        end if\n    else if month in [4, 6, 9, 11] then\n        if day < 1 or day > 30 then\n            return false\n        end if\n    else\n        if day < 1 or day > 29 then\n            return false\n        end if\n    end if\n    return true\n"}
{"task_id": "HumanEval/124", "completion": "function valid_date(date_string)\n    // Split the date string into month, day, year\n    month, day, year = split(date_string, \"-\")\n    \n    // Check if the date string is not empty\n    if length(date_string) == 0 then\n        return false\n    \n    // Check if the month is not less than 1 or higher than 12\n    if integer(month) < 1 or integer(month) > 12 then\n        return false\n    \n    // Check if the day is not less than 1 or higher than 31 days for certain months\n    if (integer(month) == 1 or integer(month) == 3 or integer(month) == 5 or integer(month) == 7 or integer(month) == 8 or integer(month) == 10 or integer(month) == 12) then\n        if integer(day) < 1 or integer(day) > 31 then\n            return false\n    else if (integer(month) == 4 or integer(month) == 6 or integer(month) == 9 or integer(month) == 11) then\n        if integer(day) < 1 or integer(day) > 30 then\n            return false\n    else if integer(month) == 2 then\n        // Check if the day is not less than 1 or higher than 29\n        if integer(day) < 1 or integer(day) > 29 then\n            return false\n    \n    // Check if the date is in the correct format\n    if not is_integer(day) or not is_integer(year) then\n        return false\n    \n    // If all checks pass, the date is valid\n    return tru"}
{"task_id": "HumanEval/125", "completion": "function split_words(txt)\n    words = []\n    spaces = txt.find(\" \")\n    while spaces != -1:\n        words.append(txt[0:spaces])\n        txt = txt[spaces+1:]\n        spaces = txt.find(\" \")\n    if txt == \"\":\n        return words\n    elif txt.find(\",\") != -1:\n        words = txt.split(\",\")\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.isalpha() and ord(char) % 2 != 0:\n                odd_count += 1\n        return odd_count\n"}
{"task_id": "HumanEval/125", "completion": "\nfunction split_words(txt)\n    if txt contains a space:\n        return list of words split on spaces\n    else if txt contains a comma:\n        return list of words split on commas\n    else:\n        count = 0\n        for each character c in txt:\n            if ord(c) is odd and lowercase:\n                increment count\n        return count\n"}
{"task_id": "HumanEval/125", "completion": "\nINPUT: txt\nwords = []\nsplit = True\nresult = []\nfor char in txt:\n    if char == ' ' and split:\n        result.append(words)\n        words = []\n        split = False\n    elif char == ',' and not split:\n        split = True\n    else:\n        words.append(char)\nif split:\n    result.append(words)\n    words = []\nodd_letters = 0\nfor char in txt.lower():\n    if char >= 'a' and char <= 'z':\n        if ord(char) % 2 != 0:\n            odd_letters += 1\nreturn if len(result) > 0 else odd_letter"}
{"task_id": "HumanEval/125", "completion": "function split_words(txt)\n    if contains_whitespace(txt)\n        return split(txt, ' ')\n    elif contains_comma(txt)\n        return split(txt, ',')\n    else\n        count = 0\n        for char in txt\n            if is_lower_case(char) and ord(char) mod 2 != 0\n                count += 1\n        return count\n"}
{"task_id": "HumanEval/125", "completion": "\nfunction split_words(txt)\n    words = []\n    index = 0\n    while index < length(txt)\n        char = txt[index]\n        if char == ' ' or char == ','\n            if len(words) > 0\n                append(words, substring(txt, index - length(words[-1]) + 1, index))\n            else\n                index += 1\n                continue\n        end if\n        if char == '' or index == length(txt) - 1\n            if len(words) > 0\n                append(words, substring(txt, index - length(words[-1]) + 1, index + 1))\n            else\n                words = substring(txt, 0, index + 1)\n            end if\n            break\n        end if\n        index += 1\n    end while\n    \n    if length(words) == 0\n        count = 0\n        for i from 0 to length(txt) - 1\n            if ascii(txt[i]) >= ascii('a') and ascii(txt[i]) <= ascii('z') and (ord(txt[i]) - ord('a')) % 2 == 1\n                count += 1\n            end if\n        end for\n        return count\n    else\n        return words\n    end if\nend function\n"}
{"task_id": "HumanEval/125", "completion": ""}
{"task_id": "HumanEval/125", "completion": "\nfunction split_words(txt)\n    list result\n    index i = 0\n    while i < length of txt\n        if character at index i is a space\n            add substring from 0 to i to result\n            i = i + 1\n            while character at index i is a space\n                i = i + 1\n        else if character at index i is a comma\n            add substring from 0 to i to result\n            i = i + 1\n            while character at index i is a comma\n                i = i + 1\n        else\n            count = 0\n            while character at index i is lowercase letter\n                count = count + 1\n                i = i + 1\n            if count mod 2 = 1 then\n                return count\n            end if\n        end if\n    add substring from 0 to i to result\n    return resul"}
{"task_id": "HumanEval/125", "completion": "function split_words(txt)\n    result = []\n    words = txt.split()\n    if len(words) > 0:\n        for word in words:\n            result.append(word)\n    else:\n        if ',' in txt:\n            words = txt.split(',')\n            if len(words) > 0:\n                result = [word.strip() for word in words]\n            else:\n                odd_count = 0\n                for char in txt.lower():\n                    if 'a' <= char <= 'z' and (ord(char) - ord('a')) % 2 != 0:\n                        odd_count += 1\n                return odd_count\n    return resul"}
{"task_id": "HumanEval/125", "completion": "\nfunction split_words(txt)\n    words = []\n    whitespace_count = 0\n    comma_count = 0\n    odd_letters = 0\n\n    for char in txt:\n        if char == ' ':\n            whitespace_count += 1\n        elif char == ',':\n            comma_count += 1\n        else:\n            if ord(char) >= ord('a') and ord(char) <= ord('z'):\n                if (ord(char) - ord('a')) % 2 != 0:\n                    odd_letters += 1\n\n    if whitespace_count > 0:\n        words = txt.split()\n    elif comma_count > 0:\n        words = txt.split(',')\n    else:\n        return odd_letters\n\n    return words\n"}
{"task_id": "HumanEval/125", "completion": "\nfunction split_words(txt)\n    if contains whitespace in txt\n        return split(txt, whitespace)\n    elif contains comma in txt\n        return split(txt, comma)\n    else\n        count = 0\n        for char in txt\n            if ord(char) mod 2 != 0 and ord('a') <= ord(char) <= ord('z')\n                count += 1\n        return count\n    end if\nend function\n"}
{"task_id": "HumanEval/126", "completion": "\nFunction is_sorted(lst)\n    If length of lst is 0 then\n        Return True\n    Else\n        For i from 1 to length of lst - 1 do\n            If lst[i-1] > lst[i] then\n                If count of lst[i] in lst is greater than 1 then\n                    Return False\n                Else\n                    Return False\n            End If\n        End For\n        Return True\nEnd Functio"}
{"task_id": "HumanEval/126", "completion": ""}
{"task_id": "HumanEval/126", "completion": "function is_sorted(lst)\n    i = 0\n    while i < len(lst) - 1\n        if lst[i] > lst[i + 1]\n            return False\n        for j = 0 to i\n            if lst[j] == lst[i + 1]\n                return False\n        i = i + 1\n    return Tru"}
{"task_id": "HumanEval/126", "completion": "\nfunction is_sorted(lst)\n    if len(lst) <= 1:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n            if lst.count(lst[i]) > 1:\n                return False\n        return Tru"}
{"task_id": "HumanEval/126", "completion": "\nfunction is_sorted(lst)\n    if length(lst) <= 1 then\n        return true\n    else\n        for i from 1 to length(lst) - 1 do\n            if lst[i] >= lst[i + 1] then\n                if lst.count(lst[i]) > 1 then\n                    return false\n            else\n                return false\n        end if\n    end for\n    return true\n"}
{"task_id": "HumanEval/126", "completion": "ALGORITHM is_sorted(lst)\n    SET unique_list = []\n    FOR each element in lst\n        IF element is not in unique_list\n            ADD element to unique_list\n        ELSE\n            RETURN False\n    FOR i = 1 TO len(unique_list) - 1\n        IF unique_list[i] > unique_list[i + 1]\n            RETURN False\n    RETURN Tru"}
{"task_id": "HumanEval/126", "completion": "if len(lst) <= 1:\n    return True\nelse:\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/126", "completion": "function is_sorted(lst)\n    if length(lst) <= 1 then\n        return true\n    else\n        sorted = true\n        for i from 1 to length(lst) - 1 do\n            if lst[i] > lst[i+1] then\n                sorted = false\n                break\n            elif i < length(lst) - 1 and lst[i] == lst[i+1] then\n                sorted = false\n                break\n        end for\n        return sorted\n    end if\n"}
{"task_id": "HumanEval/126", "completion": "FUNCTION is_sorted(lst)\n    flag = True\n    previous = lst[0]\n    count = 1\n\n    FOR i FROM 1 TO length(lst) - 1\n        IF lst[i] < previous\n            previous = lst[i]\n            count = 1\n        ELSE IF lst[i] == previous\n            count = count + 1\n        ELSE\n            flag = False\n            BREAK\n\n    IF flag AND count > 1\n        RETURN False\n    ELSE\n        RETURN flag\n"}
{"task_id": "HumanEval/126", "completion": "function is_sorted(lst)\n    if length(lst) <= 1:\n        return true\n    else:\n        for i from 1 to length(lst)-1:\n            if lst[i-1] > lst[i]:\n                return false\n        count = 0\n        for i from 1 to length(lst):\n            if lst[i] == lst[i-1]:\n                count += 1\n        if count > 1:\n            return false\n        return true\n"}
{"task_id": "HumanEval/127", "completion": "\nfunction intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/127", "completion": "function intersection(interval1, interval2):\n    start1 = interval1[0]\n    end1 = interval1[1]\n    start2 = interval2[0]\n    end2 = interval2[1]\n\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nfunction is_prime(n):\n    if n <= 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n % 2 == 0:\n        return \"NO\"\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return \"NO\"\n        i += 2\n    return \"YES\"\n"}
{"task_id": "HumanEval/127", "completion": "\nfunction intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO"}
{"task_id": "HumanEval/127", "completion": "algorithm intersection(interval1, interval2):\n    # Extract start and end points from the intervals\n    start1, end1 = interval1[0], interval1[1]\n    start2, end2 = interval2[0], interval2[1]\n\n    # Calculate the intersection of the two intervals\n    if start1 > end2 or start2 > end1:\n        return \"NO\"  // Intervals do not intersect\n    else:\n        start = max(start1, start2)\n        end = min(end1, end2)\n        intersection_length = end - start\n\n        # Check if the intersection length is prime\n        if intersection_length <= 1:\n            return \"NO\"\n        for i in range(2, int(intersection_length**0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        return \"YES\"\n"}
{"task_id": "HumanEval/127", "completion": "\nfunction intersection(interval1, interval2):\n    start1 = interval1[0]\n    end1 = interval1[1]\n    start2 = interval2[0]\n    end2 = interval2[1]\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i from 2 to sqrt(n):\n            if n mod i == 0:\n                return False\n        return True\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO"}
{"task_id": "HumanEval/127", "completion": "\nALGORITHM:\nINPUT: interval1, interval2\n\n// Calculate the start and end points of the intersection\nint start = max(interval1[0], interval2[0])\nint end = min(interval1[1], interval2[1])\n\n// Check if the intervals do not intersect\nif start > end:\n    RETURN \"NO\"\n\n// Calculate the length of the intersection\nint length = end - start + 1\n\n// Check if the length of the intersection is a prime number\nfunction is_prime(n):\n    if n < 2:\n        return false\n    for i from 2 to sqrt(n):\n        if n mod i == 0:\n            return false\n    return true\n\nIF is_prime(length):\n    RETURN \"YES\"\nELSE:\n    RETURN \"NO\"\n"}
{"task_id": "HumanEval/127", "completion": "function intersection(interval1, interval2):\n    start = max(min(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n    end = min(max(interval1[0], interval2[0]), max(interval1[1], interval2[1]))\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES"}
{"task_id": "HumanEval/127", "completion": "algorithm intersection(interval1, interval2):\n    // calculate start and end of intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    // check if the intervals intersect\n    if start > end then\n        return \"NO\"\n\n    // calculate the length of the intersection\n    length = end - start + 1\n\n    // check if the length is a prime number\n    is_prime = true\n    for i from 2 to sqrt(length) do\n        if length mod i == 0 then\n            is_prime = false\n            break\n\n    if is_prime then\n        return \"YES\"\n    else\n        return \"NO"}
{"task_id": "HumanEval/127", "completion": "ALGORITHM intersection(interval1, interval2)\n\nDATA start1, end1, start2, end2, intersection_start, intersection_end, length, i\nCOMMENT get the start and end of both intervals\nstart1 = interval1[0]\nend1 = interval1[1]\nstart2 = interval2[0]\nend2 = interval2[1]\n\nCOMMENT check if the intervals do not intersect\nIF (start1 > end2 OR start2 > end1)\n    RETURN \"NO\"\n\nCOMMENT calculate the start and end of the intersection\nIF (start1 <= start2 AND end1 >= start2)\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\nELSE IF (start1 >= start2 AND end1 <= end2)\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\nELSE\n    RETURN \"NO\"\n\nCOMMENT calculate the length of the intersection\nlength = intersection_end - intersection_start + 1\n\nCOMMENT check if the length is a prime number\ni = 2\nWHILE (i * i <= length)\n    IF (length % i == 0)\n        RETURN \"NO\"\n    i = i + 1\n\nRETURN \"YES"}
{"task_id": "HumanEval/127", "completion": "\nfunction intersection(interval1, interval2):\n    start1 = interval1[0]\n    end1 = interval1[1]\n    start2 = interval2[0]\n    end2 = interval2[1]\n\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "function prod_signs(arr):\n    if size of arr is 0 then\n        return none\n    sign_product = 1\n    magnitude_sum = 0\n    for each element e in arr do\n        if e is not equal to 0 then\n            magnitude_sum += absolute value of e\n            if e is less than 0 then\n                sign_product *= -1\n    return sign_product * magnitude_su"}
{"task_id": "HumanEval/128", "completion": "if is_empty(arr):\n    return None\n\nproduct = 1\ntotal = 0\n\nfor num in arr:\n    if num == 0:\n        return 0\n    product *= sign(num)\n    total += abs(num)\n\nreturn product * total\n"}
{"task_id": "HumanEval/128", "completion": "if is_empty_array(arr):\n    return None\n\nsign_product = 1\nmagnitude_sum = 0\n\nfor num in arr:\n    sign = 1 if num > 0 else -1 if num < 0 else 0\n    sign_product *= sign\n    magnitude_sum += abs(num)\n\nreturn sign_product * magnitude_su"}
{"task_id": "HumanEval/128", "completion": "\nif is_empty(arr):\n    return None\n\nsign_product = 1\nmagnitude_sum = 0\nfor num in arr:\n    if num < 0:\n        sign_product *= -1\n    else if num == 0:\n        return 0\n    magnitude_sum += abs(num)\nreturn sign_product * magnitude_sum\n"}
{"task_id": "HumanEval/128", "completion": "IF len(arr) == 0 THEN\n    RETURN None\nELSE\n    sign_product = 1\n    magnitude_sum = 0\n    FOR each element IN arr:\n        IF element < 0 THEN\n            sign_product *= -1\n        ELSE IF element > 0 THEN\n            sign_product *= 1\n        END IF\n        magnitude_sum += abs(element)\n    END FOR\n    RETURN sign_product * magnitude_sum\n"}
{"task_id": "HumanEval/128", "completion": "\nfunction prod_signs(arr):\n    if length of arr is 0 then\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for each element in arr do\n        if element is 0 then\n            return 0\n        sign_product = sign_product * sign of element\n        magnitude_sum = magnitude_sum + absolute value of element\n    return sign_product * magnitude_sum\n"}
{"task_id": "HumanEval/128", "completion": "\nfunction prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        sign_product *= 1 if num > 0 else -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum\n"}
{"task_id": "HumanEval/128", "completion": "\nfunction prod_signs(arr):\n    if len(arr) is 0:\n        return None\n    sign = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign *= 1\n        elif num < 0:\n            sign *= -1\n        magnitude_sum += abs(num)\n    return sign * magnitude_su"}
{"task_id": "HumanEval/128", "completion": "if is_empty_array(arr):\n    return None\nsign_product = 1\nfor num in arr:\n    sign_product *= get_sign(num)\nreturn sum(arr) * sign_product\n\nfunction get_sign(num):\n    if num > 0:\n        return 1\n    elif num < 0:\n        return -1\n    else:\n        return 0\n\nfunction is_empty_array(arr):\n    return len(arr) == 0\n"}
{"task_id": "HumanEval/128", "completion": "\nfunction prod_signs(arr)\n    if length(arr) is 0 then\n        return None\n    else\n        sign_product = 1\n        magnitude_sum = 0\n        for each num in arr do\n            if num > 0 then\n                sign_product *= 1\n            elif num < 0 then\n                sign_product *= -1\n            else\n                sign_product *= 0\n            magnitude_sum += abs(num)\n        end for\n        return sign_product * magnitude_sum\n    end if\n"}
{"task_id": "HumanEval/129", "completion": "\nfunction minPath(grid, k):\n    n = size of grid\n    m = number of ways to go in the next step (up, down, left, right)\n    memoization table dp = zeros(n*n*k+1, 0..n*n, 0..k)\n    visited = zeros(n*n+1, 0..n*n)\n\n    function dfs(i, j, k, path):\n        if k == 0:\n            return path\n        for each direction in [up, down, left, right]:\n            ni, nj = i + direction[0], j + direction[1]\n            if withinGrid(ni, nj) and !visited[ni*n+nj]:\n                visited[ni*n+nj] = 1\n                new_path = path + [grid[ni][nj]]\n                for w in [0..n*n]:\n                    if !memoization_table[ni*n+nj][k][w]:\n                        memoization_table[ni*n+nj][k][w] = 1\n                        res = dfs(ni, nj, k-1, new_path)\n                        if res:\n                            return res\n                visited[ni*n+nj] = 0\n        return None\n\n    for i in [0..n-1]:\n        for j in [0..n-1]:\n            visited[i*n+j] = 1\n            res = dfs(i, j, k, [])\n            if res:\n                return res\n\n    return None\n"}
{"task_id": "HumanEval/129", "completion": "\nProcedure minPath(grid, k):\n    function DFS(grid, k, x, y, path):\n        If k == 0 then\n            return path\n        For each direction (up, down, left, right) do\n            If x + dx and y + dy within grid boundaries and visited[x + dx][y + dy] == false then\n                Mark visited[x + dx][y + dy] as true\n                new_path = path + [grid[x + dx][y + dy]]\n                res = min(res, DFS(grid, k - 1, x + dx, y + dy, new_path))\n                Unmark visited[x + dx][y + dy]\n        Return res\n    m = size of grid\n    res = []\n    For each cell (x, y) in grid do\n        If visited[x][y] == false then\n            Mark visited[x][y] as true\n            res = min(res, DFS(grid, k, x, y, [grid[x][y]])\n            Unmark visited[x][y]\n    Return min(res, key=lambda x: sorted(x))\n"}
{"task_id": "HumanEval/129", "completion": "\nfunction minPath(grid, k):\n    n = size of grid\n    visited = matrix filled with False\n    min_path = null\n    min_length = infinity\n    for i = 0 to n-1:\n        for j = 0 to n-1:\n            dfs(i, j, k, [], grid, visited)\n    return min_path\n\nfunction dfs(i, j, k, path, grid, visited):\n    if k == 0:\n        if length of path < min_length:\n            min_length = length of path\n            min_path = path\n    else:\n        for each neighbor cell in grid:\n            if neighbor cell is within grid boundaries and not visited:\n                visited[neighbor cell] = True\n                dfs(neighbor cell, k-1, path + [grid[neighbor cell]], grid, visited)\n                visited[neighbor cell] = False\n\n    sort min_path in ascending order\n    return min_path\n"}
{"task_id": "HumanEval/129", "completion": "function minPath(grid, k):\n    n = size of grid\n    m = size of grid\n    dp = new array of size n * m * k + 1\n    dp[0][0][0] = 0\n    for i from 0 to n - 1:\n        for j from 0 to m - 1:\n            for l from 0 to k:\n                if l > 0:\n                    dp[i][j][l] = min(dp[i-1][j][l-1], dp[i][j-1][l-1], dp[i+1][j][l-1], dp[i][m-1][l-1]) + grid[i*m + j]\n                else:\n                    dp[i][j][l] = grid[i*m + j]\n    min_path = []\n    i, j = 0, 0\n    for l from 0 to k:\n        min_path.append(grid[i*m + j])\n        if dp[i][j][l] == dp[i-1][j][l-1]:\n            i -= 1\n        elif dp[i][j][l] == dp[i][j-1][l-1]:\n            j -= 1\n        else:\n            i += 1\n    return min_path\n"}
{"task_id": "HumanEval/129", "completion": "\nfunction minPath(grid, k):\n    N = size of grid[0]\n    seen = {}\n    memo = {}\n    res = []\n    for i in range(N*N):\n        seen[i+1] = True\n    while k > 0:\n        for i in range(N):\n            for j in range(N):\n                if seen.get((i+1)*(N)+j+1, False):\n                    res.append(grid[i][j])\n                    k -= 1\n                    if k == 0:\n                        return res\n                    for x in [(i-1,N,j),(i+1,N,j),(i,N-1,j),(i,N+1,j),(i,N,j-1),(i,N,j+1)]:\n                        if 1 <= x[0] <= N and 1 <= x[1] <= N:\n                            seen[x[0]*(N)+x[1]] = True\n                            break\n    return []\n"}
{"task_id": "HumanEval/129", "completion": "\n// Initialize a visited set to keep track of the cells we've visited\nvisited = set()\n// Initialize a queue for BFS with the starting cell\nqueue = [(0, 0, [])] // (row, column, path)\nmin_path = None\n\nwhile queue:\n    row, col, path = queue.pop(0)\n    if len(path) == k:\n        if not min_path or path < min_path:\n            min_path = path\n    else:\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nr, nc = row + dr, col + dc\n            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (nr, nc) not in visited:\n                queue.append((nr, nc, path + [grid[nr][nc]])\n                visited.add((nr, nc))\n\nreturn min_path\n"}
{"task_id": "HumanEval/129", "completion": "function minPath(grid, k):\n    N = size(grid)\n    cells = {}\n    for i from 1 to N:\n        for j from 1 to N:\n            cells[grid[i][j]] = (i, j)\n    pq = priority_queue()\n    pq.insert((0, [], 0))\n    visited = set()\n    while not pq.isEmpty():\n        dist, path, idx = pq.extractMin()\n        if len(path) == k:\n            return path\n        for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = idx[1] + x, idx[0] + y\n            if 1 <= nx and nx <= N and 1 <= ny and ny <= N and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                pq.insert((dist + 1, path + [grid[nx][ny]], (nx, ny)))\n    return ["}
{"task_id": "HumanEval/129", "completion": "ALGORITHM:\n    FUNCTION minPath(grid, k):\n        # Find the starting point for DFS\n        for row in range(0, len(grid)):\n            for col in range(0, len(grid[0])):\n                if visited[row][col] == False:\n                    dfs(grid, k, row, col, [], 0)\n        \n        return min_path\n    \n    FUNCTION dfs(grid, k, row, col, path, count):\n        # Base case: If count equals k, then return the path\n        if count == k:\n            return path\n        \n        # Mark the current cell as visited\n        visited[row][col] = True\n        \n        # Explore all neighbors\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if (i == 0 and j == 0) or i + row < 0 or j + col < 0 or i + row >= len(grid) or j + col >= len(grid[0]):\n                    continue\n                if visited[i + row][j + col] == False:\n                    temp = dfs(grid, k, i + row, j + col, path + [grid[i + row][j + col]], count + 1)\n                    if temp != None:\n                        return temp\n        \n        # Backtrack\n        visited[row][col] = False\n        return None\n    \n    FUNCTION is_min_path(path1, path2):\n        for i in range(len(path1)):\n            if path1[i] > path2[i]:\n                return False\n            elif path1[i] < path2[i]:\n                return True\n        return False\n    \n    FUNCTION main():\n        global visited\n        visited = [[False for _ in range(len(grid[0])) for _ in range(len(grid))]\n        min_path = None\n        for path in paths:\n            if min_path == None or is_min_path(min_path, path):\n                min_path = path\n        return min_path"}
{"task_id": "HumanEval/129", "completion": "\nfunction minPath(grid, k):\n    m = size(grid)\n    n = size(grid[0])\n    dp = new array of size (m*n, 2*m*n)\n    visited = new set\n    for i in range(m):\n        for j in range(n):\n            dp[i*n+j][0] = grid[i][j]\n    for l in range(1, k+1):\n        for i in range(m):\n            for j in range(n):\n                for x in [-1, 0, 1]:\n                    for y in [-1, 0, 1]:\n                        if 0 <= i+x < m and 0 <= j+y < n and not (i, j) in visited:\n                            temp = dp[i*n+j][l-1] + grid[i+x][j+y]\n                            if dp[i*n+(i+x)*n+j+y][l] is undefined or temp < dp[i*n+(i+x)*n+j+y][l]:\n                                dp[i*n+(i+x)*n+j+y][l] = temp\n                                visited.add((i, j))\n    res = []\n    i = argmin([dp[m*n+i][k] for i in range(m*n)])\n    while k > 0:\n        res.append(dp[i][k-1])\n        k -= 1\n    return res\n"}
{"task_id": "HumanEval/129", "completion": "function minPath(grid, k):\n    m = len(grid)\n    n = len(grid[0])\n    memo = {}\n    def dfs(i, j, visited, path):\n        if (i, j) in memo:\n            return memo[(i, j)]\n        if k == 0:\n            return path\n        min_path = float('inf')\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < m and 0 <= y < n and (x, y) not in visited:\n                new_visited = visited | {(x, y)}\n                new_path = path + [grid[x][y]]\n                min_path = min(min_path, dfs(x, y, new_visited, new_path))\n        memo[(i, j)] = min_path\n        return min_path\n    min_path_value = float('inf')\n    res = []\n    for i in range(m):\n        for j in range(n):\n            if (i, j) not in set(map(lambda x: (x//n, x% n), range(1, m*n+1))):\n                continue\n            path = dfs(i, j, {(i, j)}, [])\n            if path:\n                if len(path) > k:\n                    continue\n                if path not in res:\n                    res = path\n                    min_path_value = sum(path)\n                elif sum(path) < min_path_value:\n                    res = path\n    return res\n"}
{"task_id": "HumanEval/130", "completion": "\nfunction tri(n):\n  result = []\n  if n == 0:\n    return result\n  result.append(1)\n  if n > 0:\n    result.append(3)\n  for i from 2 to n:\n    if i is even:\n      result.append(i / 2 + 1)\n    else:\n      a = result[i-2]\n      b = result[i-1]\n      c = tri(i+1)\n      result.append(a + b + c)\n  return result\n"}
{"task_id": "HumanEval/130", "completion": "\nfunction tri(n):\n  result = []\n  a, b, c = 1, 3, 2\n  for i from 1 to n:\n    result.append(a)\n    if i == 1:\n      a, b, c = 1, 3, 2\n    elif i % 2 == 0:\n      a, b, c = b, c, 1 + c / 2\n    else:\n      a, b, c = b, c, a + b + c\n  return result\n"}
{"task_id": "HumanEval/130", "completion": "function tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tribonacci_sequence = [1, 3]\n        while len(tribonacci_sequence) < n + 1:\n            if len(tribonacci_sequence) % 2 == 0:\n                next_num = 1 + len(tribonacci_sequence) // 2\n            else:\n                last_three_numbers = tribonacci_sequence[-3:]\n                next_num = sum(last_three_numbers)\n            tribonacci_sequence.append(next_num)\n        return tribonacci_sequenc"}
{"task_id": "HumanEval/130", "completion": "ALGORITHM TRIBONACCI_SEQUENCE\n    INPUT: n, an integer\n    OUTPUT: trib_sequence, a list of integers\n    \n    Initialize: \n        trib_sequence = [1]\n        if n = 0, return trib_sequence\n    \n    Loop until length of trib_sequence > n:\n        if n is even:\n            append 1 + n / 2 to trib_sequence\n        else:\n            append tri(trib_sequence[-1] + tri(trib_sequence[-2]) + tri(trib_sequence[-3])) to trib_sequence\n        increment n by 1\n    \n    Return trib_sequenc"}
{"task_id": "HumanEval/130", "completion": "\nfunction tri(n):\n    result = []\n    if n > 0:\n        result.append(3)\n        if n > 1:\n            result.append(1)\n            if n > 2:\n                result.append(2)\n                for i in range(3, n + 1):\n                    if i % 2 == 0:\n                        result.append(1 + i/2)\n                    else:\n                        a, b = result[i-1], result[i-2] + result[i-3]\n                        result.append(a + b)\n    return result\n"}
{"task_id": "HumanEval/130", "completion": "\nfunction tri(n):\n    tribonacci_sequence = []\n    if n == 0:\n        return tribonacci_sequence\n    tribonacci_sequence.append(3)\n    if n == 1:\n        return tribonacci_sequence + [3]\n    if n == 2:\n        tribonacci_sequence.append(1 + 2 / 2)\n        return tribonacci_sequence\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + i / 2)\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3])\n    return tribonacci_sequence\n"}
{"task_id": "HumanEval/130", "completion": "function tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        seq = [1, 3]\n        for i in range(2, n):\n            if i % 2 == 0:\n                next_val = 1 + i / 2\n            else:\n                next_val = seq[i-1] + seq[i-2] + seq[i+1]\n            seq.append(next_val)\n        return seq\n"}
{"task_id": "HumanEval/130", "completion": "\nfunction tri(n):\n    tribonacci_sequence = [3]\n    \n    for i from 2 to n:\n        if i is even:\n            tribonacci_sequence.append(1 + i / 2)\n        else:\n            a, b, c = tribonacci_sequence[-1], tribonacci_sequence[-2], tribonacci_sequence[-3]\n            tribonacci_sequence.append(a + b + c)\n    \n    return tribonacci_sequence\n"}
{"task_id": "HumanEval/130", "completion": "Function tri(n)\n    result = []\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i from 2 to n:\n            if i is even:\n                result.append(1 + i / 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i])\n        return resul"}
{"task_id": "HumanEval/130", "completion": "\nfunction tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        while len(result) < n + 1:\n            if len(result) % 2 == 0:\n                next_tri = 1 + len(result) / 2\n            else:\n                next_tri = result[-1] + result[-2] + result[-3]\n            result.append(next_tri)\n        return result\n"}
{"task_id": "HumanEval/131", "completion": "\nfunction digits(n)\n    result = 1\n    while n > 0\n        digit = n mod 10\n        if digit is odd\n            result = result * digit\n        n = n div 10\n    if result is 1 then\n        return 0\n    else\n        return result\n"}
{"task_id": "HumanEval/131", "completion": "\nfunction digits(n)\n    result = 1\n    for each digit in the digits of n\n        if the digit is odd then\n            multiply result by the digit\n        end if\n    end for\n    return result\nend function\n"}
{"task_id": "HumanEval/131", "completion": "function digits(n)\n    result = 1\n    while n > 0\n        digit = n mod 10\n        if digit is odd then\n            result = result * digit\n        end if\n        n = floor(n / 10)\n    end while\n    return result\n"}
{"task_id": "HumanEval/131", "completion": "\nfunction digits(n):\n    result = 1\n    while n > 0:\n        digit = n mod 10\n        if digit is odd:\n            result = result * digit\n        n = n / 10\n    return result\n"}
{"task_id": "HumanEval/131", "completion": "function digits(n):\n    product = 1\n    while n > 0:\n        digit = n mod 10\n        if digit is odd then\n            product = product * digit\n        n = n div 10\n    return product\n"}
{"task_id": "HumanEval/131", "completion": "INPUT: n\nLOOP FOR each digit d in the digits of n\n  IF d is odd\n    multiply result by d\n  END IF\nEND LOOP\nIF result is 1 then output 0 else output resul"}
{"task_id": "HumanEval/131", "completion": "\nfunction digits(n)\n    result = 1\n    for each digit in string(n)\n        if digit is odd\n            result = result * int(digit)\n        end if\n    next\n    if result is 1 then\n        return 0\n    else\n        return result\n    end if\nend function\n"}
{"task_id": "HumanEval/131", "completion": "\nfunction digits(n)\n    odd_product = 1\n    while n > 0 do\n        digit = n mod 10\n        if digit is odd then\n            odd_product = odd_product * digit\n        end if\n        n = n div 10\n    end while\n    return odd_product\n"}
{"task_id": "HumanEval/131", "completion": "\nINPUT n\nSET result = 1\nWHILE n > 0\n    DIGIT = n % 10\n    IF DIGIT IS ODD THEN\n        result = result * DIGIT\n    END IF\n    n = n / 10\nEND WHILE\nRETURN result\n"}
{"task_id": "HumanEval/131", "completion": "\nfunction digits(n)\n    sum = 0\n    while n > 0 do\n        digit = n mod 10\n        if digit is odd then\n            sum = sum + digit\n        end if\n        n = floor(n / 10)\n    end while\n    return sum\nend function\n"}
{"task_id": "HumanEval/132", "completion": "function is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > "}
{"task_id": "HumanEval/132", "completion": "function is_nested(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return stack != ["}
{"task_id": "HumanEval/132", "completion": "\nfunction is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0\n"}
{"task_id": "HumanEval/132", "completion": "\nfunction is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > "}
{"task_id": "HumanEval/132", "completion": "function is_nested(s)\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack.isEmpty():\n                return false\n            else:\n                stack.pop()\n    return stack.isEmpty() == false\n"}
{"task_id": "HumanEval/132", "completion": "\nfunction is_nested(s)\n    stack = []\n    for each char in s\n        if char == '['\n            push stack, char\n        elif char == ']'\n            if is_empty stack then\n                return false\n            else\n                pop stack\n    return not is_empty stac"}
{"task_id": "HumanEval/132", "completion": "\nfunction is_nested(s)\n    stack = []\n    for each char in s\n        if char == '[' then\n            stack.append(char)\n        else if char == ']' then\n            if stack.isEmpty() then\n                return false\n            else\n                stack.pop()\n        end if\n    end for\n    return stack.isEmpty()\n"}
{"task_id": "HumanEval/132", "completion": "\nfunction is_nested(s)\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > 0\n"}
{"task_id": "HumanEval/132", "completion": "\nfunction is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) > "}
{"task_id": "HumanEval/132", "completion": "\nfunction is_nested(s)\n    stack = []\n    for char in s:\n        if char == '[' then\n            stack.append(char)\n        elif char == ']' then\n            if stack.length == 0 then\n                return false\n            else\n                stack.pop()\n    return stack.length > "}
{"task_id": "HumanEval/133", "completion": "function sum_squares(lst)\n    sum = 0\n    for num in lst\n        sum += math.ceil(num)^2\n    return sum\n"}
{"task_id": "HumanEval/133", "completion": "function sum_squares(lst)\n    sum = 0\n    for each num in lst\n        rounded_num = ceiling(num)\n        sum = sum + rounded_num * rounded_num\n    return sum\n"}
{"task_id": "HumanEval/133", "completion": "\nfunction sum_squares(lst):\n    sum = 0\n    for each number in lst:\n        number = ceil(number)\n        sum = sum + number * number\n    return su"}
{"task_id": "HumanEval/133", "completion": "function sum_squares(lst)\n    sum = 0\n    for each num in lst\n        rounded_num = ceil(num)\n        sum = sum + (rounded_num ^ 2)\n    return sum\n"}
{"task_id": "HumanEval/133", "completion": "function sum_squares(lst)\n    sum = 0\n    for each num in lst\n        sum = sum + ceil(num)^2\n    return sum\n"}
{"task_id": "HumanEval/133", "completion": "\nPROCEDURE sum_squares(lst)\n    DECLARE sum = 0\n    FOR each num IN lst\n        num = CEIL(num)\n        sum = sum + (num * num)\n    RETURN sum\nEND PROCEDURE\n"}
{"task_id": "HumanEval/133", "completion": "\nfunction sum_squares(lst)\n    sum := 0\n    for each num in lst\n        num := ceil(num)\n        sum := sum + num^2\n    return sum\n"}
{"task_id": "HumanEval/133", "completion": "\nfunction sum_squares(lst)\n    total = 0\n    for each num in lst\n        num = ceil(num)\n        total += num * num\n    return total\n"}
{"task_id": "HumanEval/133", "completion": "ALGORITHM sum_squares(lst)\n    square_sum = 0\n    FOR each num IN lst\n        num = CEILING(num)\n        square_sum = square_sum + (num * num)\n    RETURN square_sum\n"}
{"task_id": "HumanEval/133", "completion": "\nfunction sum_squares(lst)\n    result = 0\n    for num in lst\n        num = ceil(num)\n        result = result + num * num\n    return result\n"}
{"task_id": "HumanEval/134", "completion": "\nfunction check_if_last_char_is_a_letter(txt)\n    // Split the input string into words\n    words = txt.split(\" \")\n    \n    // Get the last word\n    last_word = words[words.length - 1]\n    \n    // Check if the last word is not empty\n    if last_word != \"\"\n        // Check if the last character of the last word is an alphabetical character\n        if is_alphabetic(last_word[last_word.length - 1])\n            // Check if the last character is not part of a word\n            if last_word[last_word.length - 1] == \" \"\n                return true\n        end if\n    end if\n    \n    return false\nend function\n\nfunction is_alphabetic(char)\n    // Check if the character is an alphabetical character (a-z or A-Z)\n    return char >= \"a\" and char <= \"z\" or char >= \"A\" and char <= \"Z\"\nend function\n"}
{"task_id": "HumanEval/134", "completion": "\nfunction check_if_last_char_is_a_letter(txt)\n    if txt == \"\" then\n        return false\n    else\n        last_char = txt[txt.length - 1]\n        if is_alphabetical(last_char) and not is_part_of_word(last_char, txt) then\n            return true\n        else\n            return false\n        end if\n    end if\nend function\n\nfunction is_alphabetical(char)\n    if char >= 'a' and char <= 'z' or char >= 'A' and char <= 'Z' then\n        return true\n    else\n        return false\n    end if\nend function\n\nfunction is_part_of_word(char, txt)\n    i = 0\n    while i < txt.length do\n        if txt[i] == char then\n            return true\n        end if\n        i = i + 1\n    end while\n    return false\nend function\n"}
{"task_id": "HumanEval/134", "completion": "\nfunction check_if_last_char_is_a_letter(txt)\n    if txt == \"\" then\n        return false\n    else\n        last_char = substring(txt, length(txt), length(txt))\n        is_letter = isalpha(last_char)\n        is_not_part_of_word = indexof(last_char, \" \") == -1\n        return is_letter and is_not_part_of_word\n"}
{"task_id": "HumanEval/134", "completion": "function check_if_last_char_is_a_letter(txt)\n    if txt == \"\"\n        return False\n    last_char = txt[txt.length - 1]\n    if not isalpha(last_char) or txt.lastIndexOf(\" \") != txt.length - 1\n        return False\n    return True\n"}
{"task_id": "HumanEval/134", "completion": "PROCEDURE check_if_last_char_is_a_letter(txt)\n    DECLARE last_char AS CHARACTER\n    DECLARE is_letter AS BOOLEAN\n    last_char = SUBSTRING(txt, LENGTH(txt), 1)\n    is_letter = IS_LOWER_CASE(last_char) OR IS_UPPER_CASE(last_char)\n    IF LAST_WORD_CONTAINS_CHAR(txt, last_char) THEN\n        RETURN FALSE\n    ELSEIF is_letter THEN\n        RETURN TRUE\n    ELSE\n        RETURN FALSE\n    END IF\nEND PROCEDURE\n\nFUNCTION LAST_WORD_CONTAINS_CHAR(txt, char)\n    DECLARE word AS CHARACTER\n    DECLARE i AS INTEGER\n    i = 1\n    WHILE i <= LENGTH(txt) DO\n        word = SUBSTRING(txt, 1, i)\n        IF CHAR(word, LENGTH(word)) = char THEN\n            RETURN TRUE\n        END IF\n        i = i + 1\n    END WHILE\n    RETURN FALSE\nEND FUNCTION\n\nFUNCTION IS_LOWER_CASE(char)\n    IF char >= 'a' AND char <= 'z' THEN\n        RETURN TRUE\n    ELSE\n        RETURN FALSE\n    END IF\nEND FUNCTION\n\nFUNCTION IS_UPPER_CASE(char)\n    IF char >= 'A' AND char <= 'Z' THEN\n        RETURN TRUE\n    ELSE\n        RETURN FALSE\n    END IF\nEND FUNCTIO"}
{"task_id": "HumanEval/134", "completion": "`function check_if_last_char_is_a_letter(txt)\n    if txt == \"\" then\n        return false\n    end if\n    \n    str_arr = split(txt, \" \")\n    last_word = str_arr[len(str_arr) - 1]\n    \n    last_char = substr(last_word, length(last_word), 1)\n    \n    if is_alphabetic(last_char) and last_char != \" \" then\n        return true\n    else\n        return false\n    end if\nend function"}
{"task_id": "HumanEval/134", "completion": "\nfunction check_if_last_char_is_a_letter(txt)\n    if txt is empty then\n        return false\n    else\n        last_char = get last character of txt\n        if is alphabetical character(last_char) then\n            previous_chars = substring(txt, 0, length(txt) - 1)\n            if previous_chars contains a space then\n                return true\n            else\n                return false\n        else\n            return false\n"}
{"task_id": "HumanEval/134", "completion": "\nproc check_if_last_char_is_a_letter(txt):\n    if txt = \"\"\n        return False\n    last_char = txt[txt.length() - 1]\n    if not is_alphabetical(last_char)\n        return False\n    if not is_part_of_word(last_char, txt)\n        return True\n    return False\n\nproc is_alphabetical(char):\n    if char >= 'a' and char <= 'z' or char >= 'A' and char <= 'Z'\n        return True\n    return False\n\nproc is_part_of_word(char, txt):\n    i = 0\n    while i < txt.length()\n        if txt[i] == char\n            return True\n        if txt[i] == \" \"\n            return False\n        i = i + 1\n    return False\n"}
{"task_id": "HumanEval/134", "completion": "function check_if_last_char_is_a_letter(txt)\n    if txt.length == 0 then\n        return false\n    last_char = txt.substring(txt.length - 1)\n    if isalpha(last_char) then\n        words = txt.split(\" \")\n        if words[words.length - 1] != \"\" then\n            return true\n        else\n            return false\n    else\n        return false\n"}
{"task_id": "HumanEval/134", "completion": ""}
{"task_id": "HumanEval/135", "completion": "\nfunction can_arrange(arr):\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i + 1] <= arr[i]:\n            return i\n        i = i + 1\n    return -1\n"}
{"task_id": "HumanEval/135", "completion": "\nfunction can_arrange(arr)\n    max_index = -1\n    for i from 0 to length(arr) - 1\n        if arr[i] <= arr[i-1]\n            max_index = i\n        else\n            break\n    return max_index\n"}
{"task_id": "HumanEval/135", "completion": "function can_arrange(arr)\n    i = 0\n    while i < length(arr) - 1 do\n        if arr[i] >= arr[i+1]\n            return i\n        i = i + 1\n    end while\n    return -1\n"}
{"task_id": "HumanEval/135", "completion": "\nfunction can_arrange(arr):\n    n = length of arr\n    max_index = -1\n    for i from 0 to n-1:\n        if arr[i] <= arr[i-1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/135", "completion": "\nfunction can_arrange(arr):\n    i = 0\n    while i < length(arr) - 1:\n        if arr[i + 1] <= arr[i]:\n            return i\n        i = i + 1\n    return -1\n"}
{"task_id": "HumanEval/135", "completion": "function can_arrange(arr)\n    i = 0\n    while i < size(arr) - 1 do\n        if arr[i] >= arr[i + 1] then\n            return i\n        end if\n        i = i + 1\n    end while\n    return -1\n"}
{"task_id": "HumanEval/135", "completion": "\nfunction can_arrange(arr)\n    n = length(arr)\n    for i from 0 to n-1\n        if arr[i] <= arr[i-1]\n            return i\n    return -1\nend function\n"}
{"task_id": "HumanEval/135", "completion": "\nfunction can_arrange(arr):\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] >= arr[i + 1]:\n            return i\n        i += 1\n    return -1\n"}
{"task_id": "HumanEval/135", "completion": "\nfunction can_arrange(arr)\n    i := 0\n    while i < length(arr) - 1 do\n        if arr[i] >= arr[i + 1] then\n            return i\n        i := i + 1\n    return -1\n"}
{"task_id": "HumanEval/135", "completion": "function can_arrange(arr)\n    largest_index = -1\n    for i from 0 to length(arr) - 1\n        if arr[i] < arr[i + 1]\n            largest_index = i\n        else\n            break\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "function largest_smallest_integers(lst):\n    max_negative = None\n    min_positive = None\n    \n    for num in lst:\n        if num < 0 and (max_negative is None or abs(num) > abs(max_negative)):\n            max_negative = num\n        elif num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n            \n    if max_negative is not None and min_positive is not None:\n        return (max_negative, min_positive)\n    else:\n        return (None, None"}
{"task_id": "HumanEval/136", "completion": "function largest_smallest_integers(lst):\n    max_negative = None\n    min_positive = None\n    found_negative = False\n    found_positive = False\n    \n    for each num in lst:\n        if num < 0:\n            if not found_negative:\n                max_negative = num\n                found_negative = True\n            elif num > max_negative:\n                max_negative = num\n        elif num > 0:\n            if not found_positive:\n                min_positive = num\n                found_positive = True\n            elif num < min_positive:\n                min_positive = num\n    \n    if found_negative and found_positive:\n        return (max_negative, min_positive)\n    else:\n        return (None, None"}
{"task_id": "HumanEval/136", "completion": "function largest_smallest_integers(lst)\n    max_negative = None\n    min_positive = None\n\n    for num in lst:\n        if num < 0:\n            if max_negative is None or num > max_negative:\n                max_negative = num\n        elif num > 0:\n            if min_positive is None or num < min_positive:\n                min_positive = num\n\n    if max_negative is not None and min_positive is not None:\n        return (max_negative, min_positive)\n    else:\n        return (None, None)\n"}
{"task_id": "HumanEval/136", "completion": "function largest_smallest_integers(lst)\n   negatives = []\n   positives = []\n   largest_negative = None\n   smallest_positive = None\n\n   for num in lst:\n       if num < 0:\n           negatives.append(num)\n       elif num > 0:\n           positives.append(num)\n\n   if len(negatives) > 0:\n       largest_negative = max(negatives)\n   if len(positives) > 0:\n       smallest_positive = min(positives)\n\n   if largest_negative is not None and smallest_positive is not None:\n       return (largest_negative, smallest_positive)\n   else:\n       return (None, None"}
{"task_id": "HumanEval/136", "completion": "\nfunction largest_smallest_integers(lst):\n    negative_numbers = [num for num in lst if num < 0]\n    positive_numbers = [num for num in lst if num > 0]\n    \n    if negative_numbers:\n        max_negative = max(negative_numbers)\n    else:\n        max_negative = None\n    \n    if positive_numbers:\n        min_positive = min(positive_numbers)\n    else:\n        min_positive = None\n    \n    return (max_negative, min_positive"}
{"task_id": "HumanEval/136", "completion": "function largest_smallest_integers(lst):\n    max_negative = None\n    min_positive = None\n    has_negative = False\n    has_positive = False\n    \n    for num in lst:\n        if num < 0:\n            has_negative = True\n            if max_negative is None or num > max_negative:\n                max_negative = num\n        elif num > 0:\n            has_positive = True\n            if min_positive is None or num < min_positive:\n                min_positive = num\n        \n    if has_negative and has_positive:\n        return (max_negative, min_positive)\n    else:\n        return (None, None"}
{"task_id": "HumanEval/136", "completion": "function largest_smallest_integers(lst)\n    max_negative = None\n    min_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if max_negative is None or num > max_negative:\n                max_negative = num\n        elif num > 0:\n            if min_positive is None or num < min_positive:\n                min_positive = num\n                \n    if max_negative is None and min_positive is None:\n        return (None, None)\n    elif max_negative is None:\n        return (None, min_positive)\n    elif min_positive is None:\n        return (max_negative, None)\n    else:\n        return (max_negative, min_positive)\n"}
{"task_id": "HumanEval/136", "completion": ""}
{"task_id": "HumanEval/136", "completion": "function largest_smallest_integers(lst):\n    max_negative = None\n    min_positive = None\n    for num in lst:\n        if num < 0:\n            if max_negative is None or num > max_negative:\n                max_negative = num\n        elif num > 0:\n            if min_positive is None or num < min_positive:\n                min_positive = num\n    if max_negative is None and min_positive is None:\n        return (None, None)\n    elif max_negative is None:\n        return (None, min_positive)\n    elif min_positive is None:\n        return (max_negative, None)\n    else:\n        return (max_negative, min_positive)\n"}
{"task_id": "HumanEval/136", "completion": "function largest_smallest_integers(lst)\n    largest_negative = None\n    smallest_positive = None\n    for each num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    if largest_negative is not None and smallest_positive is not None:\n        return (largest_negative, smallest_positive)\n    else:\n        return (None, None"}
{"task_id": "HumanEval/137", "completion": "function compare_one(a, b):\n    if type(a) is int:\n        if type(b) is int:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(b) is float:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(b) is str:\n            if isinstance(b, str) and b.startswith('.'):\n                b = float(b.replace('.', ''))\n            elif isinstance(b, str) and b.startswith(','):\n                b = float(b.replace(',', '.'))\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n    elif type(a) is float:\n        if type(b) is int:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(b) is float:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(b) is str:\n            if isinstance(b, str) and b.startswith('.'):\n                b = float(b.replace('.', ''))\n            elif isinstance(b, str) and b.startswith(','):\n                b = float(b.replace(',', '.'))\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n    elif type(a) is str:\n        if isinstance(a, str) and a.startswith('.'):\n            a = float(a.replace('.', ''))\n        elif isinstance(a, str) and a.startswith(','):\n            a = float(a.replace(',', '.'))\n        if type(b) is int:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(b) is float:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n        elif type(b) is str:\n            if isinstance(b, str) and b.startswith('.'):\n                b = float(b.replace('.', ''))\n            elif isinstance(b, str) and b.startswith(','):\n                b = float(b.replace(',', '.'))\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n"}
{"task_id": "HumanEval/137", "completion": "\nfunction compare_one(a, b):\n    if is_integer(a):\n        if is_integer(b):\n            if a > b:\n                return a\n            else if a < b:\n                return b\n            else:\n                return None\n        elif is_float(b):\n            if a > b:\n                return a\n            else:\n                return b\n        else:\n            if a > float(b.replace(\",\", \".\")):\n                return a\n            else:\n                return b.replace(\",\", \".\")\n    elif is_integer(b):\n        if is_float(a):\n            if a > b:\n                return a\n            else:\n                return b\n        else:\n            if a > float(b.replace(\",\", \".\")):\n                return a\n            else:\n                return b.replace(\",\", \".\")\n    elif is_float(a) and is_float(b):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        if a > float(b.replace(\",\", \".\")):\n            return a\n        else:\n            return b.replace(\",\", \".\")\n"}
{"task_id": "HumanEval/137", "completion": "\nif isinstance(a, str) and isinstance(b, str):\n    # Split strings into numbers\n    a_num = float(''.join(filter(str.isdigit, a.replace(',', '.'))) or 0)\n    b_num = float(''.join(filter(str.isdigit, b.replace(',', '.'))) or 0)\n\n    if a_num > b_num:\n        return a\n    elif b_num > a_num:\n        return b\n    else:\n        return None\n\nelif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\nelse:\n    raise TypeError(\"Inputs must be integers, floats, or strings\")\n"}
{"task_id": "HumanEval/137", "completion": ""}
{"task_id": "HumanEval/137", "completion": "FUNCTION compare_one(a, b)\n   IF TYPE(a) = INTEGER THEN\n      IF TYPE(b) = FLOAT OR TYPE(b) = STRING THEN\n         IF a < b THEN\n            RETURN b\n         ELSE IF a > b THEN\n            RETURN a\n         ELSE\n            RETURN None\n      ELSE IF TYPE(b) = INTEGER THEN\n         IF a < b THEN\n            RETURN b\n         ELSE IF a > b THEN\n            RETURN a\n         ELSE\n            RETURN None\n   ELSE IF TYPE(a) = FLOAT OR TYPE(a) = STRING THEN\n      IF TYPE(b) = INTEGER THEN\n         IF a < b THEN\n            RETURN b\n         ELSE IF a > b THEN\n            RETURN a\n         ELSE\n            RETURN None\n      ELSE IF TYPE(b) = FLOAT OR TYPE(b) = STRING THEN\n         IF a < b THEN\n            RETURN b\n         ELSE IF a > b THEN\n            RETURN a\n         ELSE\n            RETURN None\n   ELSE\n      IF a < b THEN\n         RETURN b\n      ELSE IF a > b THEN\n         RETURN a\n      ELSE\n         RETURN None\n"}
{"task_id": "HumanEval/137", "completion": "if type(a) != type(b):\n    if type(a) == int:\n        if type(b) == str:\n            if ',' in b:\n                b = float(b.replace(',', '.'))\n            else:\n                b = float(b)\n        elif type(b) == float:\n            pass\n        elif type(b) == int:\n            pass\n    elif type(a) == str:\n        if ',' in a:\n            a = float(a.replace(',', '.'))\n        else:\n            a = float(a)\n        if type(b) == str:\n            if ',' in b:\n                b = float(b.replace(',', '.'))\n            else:\n                b = float(b)\n        elif type(b) == float:\n            pass\n        elif type(b) == int:\n            pass\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\nelse:\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/137", "completion": "\nDEF compare_one(a, b):\n    IF isinstance(a, str) AND \".\" IN a OR \",\" IN a:\n        a = FLOAT(a.replace(\",\", \"\"))\n    IF isinstance(b, str) AND \".\" IN b OR \",\" IN b:\n        b = FLOAT(b.replace(\",\", \"\"))\n    IF a > b:\n        RETURN a\n    ELSEIF b > a:\n        RETURN b\n    ELSE:\n        RETURN NONE\n"}
{"task_id": "HumanEval/137", "completion": "\nFUNCTION compare_one(a, b)\n    IF type(a) == int and type(b) == int\n        IF a > b\n            RETURN a\n        ELSE IF a < b\n            RETURN b\n        ELSE\n            RETURN None\n    ELSE IF type(a) == float and type(b) == float\n        IF a > b\n            RETURN a\n        ELSE IF a < b\n            RETURN b\n        ELSE\n            RETURN None\n    ELSE IF type(a) == str and type(b) == str\n        a_num = remove_comma(a)\n        b_num = remove_comma(b)\n        IF float(a_num) > float(b_num)\n            RETURN a\n        ELSE IF float(a_num) < float(b_num)\n            RETURN b\n        ELSE\n            RETURN None\n    ELSE\n        a_num = convert_to_float(a)\n        b_num = convert_to_float(b)\n        IF a_num > b_num\n            RETURN a_num\n        ELSE IF a_num < b_num\n            RETURN b_num\n        ELSE\n            RETURN None\n\n    END FUNCTION\n"}
{"task_id": "HumanEval/137", "completion": "PROCEDURE compare_one(a, b)\n    IF type(a) = integer THEN\n        IF type(b) = integer THEN\n            IF a > b THEN\n                RETURN a\n            ELSE IF a < b THEN\n                RETURN b\n            ELSE\n                RETURN NONE\n        ELSE IF type(b) = float THEN\n            IF a > b THEN\n                RETURN a\n            ELSE IF a < b THEN\n                RETURN b\n            ELSE\n                RETURN NONE\n        ELSE IF type(b) = string THEN\n            IF a > b THEN\n                RETURN a\n            ELSE IF a < b THEN\n                RETURN b\n            ELSE\n                RETURN NONE\n    ELSE IF type(a) = float THEN\n        IF type(b) = integer THEN\n            IF a > b THEN\n                RETURN a\n            ELSE IF a < b THEN\n                RETURN b\n            ELSE\n                RETURN NONE\n        ELSE IF type(b) = float THEN\n            IF a > b THEN\n                RETURN a\n            ELSE IF a < b THEN\n                RETURN b\n            ELSE\n                RETURN NONE\n        ELSE IF type(b) = string THEN\n            IF a > b THEN\n                RETURN a\n            ELSE IF a < b THEN\n                RETURN b\n            ELSE\n                RETURN NONE\n    ELSE IF type(a) = string THEN\n        IF type(b) = integer THEN\n            numA = parse integer from string a\n            IF numA > b THEN\n                RETURN a\n            ELSE IF numA < b THEN\n                RETURN b\n            ELSE\n                RETURN NONE\n        ELSE IF type(b) = float THEN\n            numB = parse float from string b\n            IF a > numB THEN\n                RETURN a\n            ELSE IF a < numB THEN\n                RETURN b\n            ELSE\n                RETURN NONE\n        ELSE IF type(b) = string THEN\n            numA = parse float from string a\n            numB = parse float from string b\n            IF numA > numB THEN\n                RETURN a\n            ELSE IF numA < numB THEN\n                RETURN b\n            ELSE\n                RETURN NONE\n"}
{"task_id": "HumanEval/137", "completion": "function compare_one(a, b)\n    if type(a) is int and type(b) is int:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif type(a) is float and type(b) is float:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif type(a) is str and type(b) is str:\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        a = float(a)\n        b = float(b)\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif type(a) is int and type(b) is str:\n        a = float(a)\n        b = b.replace(\",\", \".\")\n        b = float(b)\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif type(a) is str and type(b) is int:\n        a = a.replace(\",\", \".\")\n        a = float(a)\n        b = float(b)\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n"}
{"task_id": "HumanEval/138", "completion": "\nfunction is_equal_to_sum_even(n)\n    for i from 2 to n-1 with step 2\n        for j from 2 to n-1 with step 2\n            for k from 2 to n-1 with step 2\n                if i + j + k + (n - i - j - k) = n\n                    return true\n    return false\n"}
{"task_id": "HumanEval/138", "completion": "\nfunction is_equal_to_sum_even(n):\n    for i from 2 to n-1 step 2:\n        total = 0\n        for j from 2 to i step 2:\n            total += j\n            if total > n:\n                break\n            elif total == n:\n                return True\n    return Fals"}
{"task_id": "HumanEval/138", "completion": "function is_equal_to_sum_even(n)\n    if n < 2 then\n        return false\n    end if\n    sum := 0\n    for i from 2 to n step 2 do\n        if sum + i > n then\n            return false\n        end if\n        sum := sum + i\n        if sum = n then\n            return true\n        end if\n    end for\n    return false\n"}
{"task_id": "HumanEval/138", "completion": "\nfunction is_equal_to_sum_even(n)\n    result = false\n    for i from 2 to sqrt(n)\n        for j from 2 to sqrt(n - i * 2)\n            k = (n - i - j) / 2\n            if k is integer and k >= 2 and j >= 2 and i >= 2\n                result = true\n                exit\n    return result\n"}
{"task_id": "HumanEval/138", "completion": "\nfunction is_equal_to_sum_even(n)\n    set i = 2\n    while i <= n\n        set sum = 0\n        set j = i\n        while j <= n\n            if n - sum >= 2 * j\n                sum = sum + j\n                if sum == n\n                    return True\n                else if sum > n\n                    return False\n            else\n                break\n            set j = j + 2\n        end while\n    end while\n    return False\n"}
{"task_id": "HumanEval/138", "completion": "\nfunction is_equal_to_sum_even(n)\n    for i from 2 to n/2 step 2\n        for j from 2 to (n-i)/2 step 2\n            for k from 2 to (n-i-j)/2 step 2\n                for l from 2 to (n-i-j-k)/2 step 2\n                    if i + j + k + l == n then\n                        return true\n    return false\n"}
{"task_id": "HumanEval/138", "completion": "\nalgorithm is_equal_to_sum_even(n):\n    for i from 2 to n/2:\n        if i is even then\n            for j from i+2 to n-i:\n                if j is even then\n                    for k from j+2 to n-j:\n                        if k is even then\n                            for l from k+2 to n-k:\n                                if l is even and i+j+k+l = n then\n                                    return true\n    return false\n"}
{"task_id": "HumanEval/138", "completion": "function is_equal_to_sum_even(n):\n    for i from 2 to n/2 step 2:\n        total = 0\n        for j from 2 to n/2 step 2:\n            total = total + j\n            if total == n:\n                return true\n        return false\n"}
{"task_id": "HumanEval/138", "completion": "\nfunction is_equal_to_sum_even(n):\n    for i from 2 to n-3 with step 2:\n        for j from 2 to n-3-i with step 2:\n            for k from 2 to n-3-i-j with step 2:\n                for m from 2 to n-3-i-j-k with step 2:\n                    if i + j + k + m == n:\n                        return True\n    return Fals"}
{"task_id": "HumanEval/138", "completion": "function is_equal_to_sum_even(n)\n    if n < 2 then\n        return false\n    else\n        for i from 2 to n/2 step 2 do\n            for j from 2 to (n-i)/2 step 2 do\n                for k from 2 to (n-i-j)/2 step 2 do\n                    for l from 2 to (n-i-j-k)/2 step 2 do\n                        if i+j+k+l = n then\n                            return true\n        return false\n"}
{"task_id": "HumanEval/139", "completion": "\nfunction special_factorial(n)\n    if n < 1 then\n        error \"n must be greater than 0\"\n    end if\n    result = 1\n    for i from n downto 1 do\n        result = result * i!\n    end for\n    return result\nend function\n"}
{"task_id": "HumanEval/139", "completion": "function special_factorial(n)\n    if n <= 0 then\n        return \"Error: Input must be a positive integer.\"\n    else\n        result = 1\n        for i from n down to 1 do\n            result = result * factorial(i)\n        return result\n    end if\nend function\n\nfunction factorial(m)\n    if m <= 1 then\n        return 1\n    else\n        return m * factorial(m - 1)\n    end if\nend functio"}
{"task_id": "HumanEval/139", "completion": "function special_factorial(n)\n    result = 1\n    i = n\n    while i > 1 do\n        temp = 1\n        j = i\n        while j > 1 do\n            temp = temp * j\n            j = j - 1\n        end\n        result = result * temp\n        i = i - 1\n    end\n    return result\n"}
{"task_id": "HumanEval/139", "completion": "function special_factorial(n)\n    if n <= 0 then\n        print(\"Error: Input must be a positive integer.\")\n    else\n        result = 1\n        for i from n downto 1 do\n            result = result * factorial(i)\n        return result\n    end if\n\nfunction factorial(n)\n    if n <= 1 then\n        return 1\n    else\n        return n * factorial(n - 1)\n    end if\n"}
{"task_id": "HumanEval/139", "completion": "\nfunction special_factorial(n)\n    result = 1\n    i = n\n    while i > 0\n        result = result * factorial(i)\n        i = i - 1\n    return result\n\nfunction factorial(n)\n    if n == 0 then\n        return 1\n    else\n        return n * factorial(n - 1)\n    end if\n\ninput = 4\nprint(special_factorial(input)"}
{"task_id": "HumanEval/139", "completion": "ALGORITHM special_factorial(n)\n    IF n <= 0 THEN\n        RETURN \"Error: Input should be a positive integer\"\n    END IF\n\n    result := 1\n    i := n\n\n    WHILE i > 1 DO\n        temp := i\n        factorial := 1\n\n        WHILE temp > 1 DO\n            factorial := factorial * temp\n            temp := temp - 1\n        END WHILE\n\n        result := result * factorial\n        i := i - 1\n    END WHILE\n\n    RETURN resul"}
{"task_id": "HumanEval/139", "completion": "\nfunction special_factorial(n)\n    if n <= 0 then\n        error \"Input must be a positive integer\"\n    else\n        result = 1\n        for i from n downto 1 do\n            result = result * factorial(i)\n        return result\n    end if\nend function\n\nfunction factorial(n)\n    if n == 0 or n == 1 then\n        return 1\n    else\n        return n * factorial(n - 1)\n    end if\nend function\n"}
{"task_id": "HumanEval/139", "completion": "\nfunction special_factorial(n)\n    result = 1\n    temp = 1\n    i = n\n    while i > 0 do\n        temp = 1\n        j = i\n        while j > 1 do\n            temp = temp * j\n            j = j - 1\n        result = result * temp\n        i = i - 1\n    return result\n"}
{"task_id": "HumanEval/139", "completion": "function special_factorial(n):\n    result = 1\n    for i from n downto 1:\n        result = result * i!\n    return result\n"}
{"task_id": "HumanEval/139", "completion": "\nfunction special_factorial(n)\n    if n <= 0 then\n        error \"Input must be a positive integer\"\n    end if\n    result = 1\n    temp = n\n    while temp > 0 do\n        result = result * fact(temp)\n        temp = temp - 1\n    end while\n    return result\n\nfunction fact(n)\n    if n == 0 or n == 1 then\n        return 1\n    else\n        return n * fact(n - 1)\n    end if\nend function\n"}
{"task_id": "HumanEval/140", "completion": "function fix_spaces(text)\n    result := \"\"\n    i := 0\n    while i < length of text\n        if text[i] is space\n            if result is not empty and result[length of result] is space\n                result := result + \"-\"\n            else\n                result := result + \"_\"\n        else\n            result := result + text[i]\n        end if\n        i := i + 1\n    end while\n    return resul"}
{"task_id": "HumanEval/140", "completion": "\ninput_text = text\noutput_text = \"\"\ncurrent_word = \"\"\n\nfor char in input_text:\n    if char == \" \":\n        if len(current_word) > 0:\n            output_text += \"_\" + current_word\n            current_word = \"\"\n        else:\n            output_text += \"-\"\n    else:\n        current_word += char\n\nif len(current_word) > 0:\n    output_text += \"_\" + current_word\n\nreturn output_text\n"}
{"task_id": "HumanEval/140", "completion": "\nfunction fix_spaces(text)\n    new_text = \"\"\n    space_count = 0\n    for char in text:\n        if char == \" \":\n            space_count += 1\n            if space_count <= 1:\n                new_text += \"_\"\n            else:\n                new_text += \"-\"\n                space_count = 0\n        else:\n            new_text += char\n            space_count = 0\n    return new_text\n"}
{"task_id": "HumanEval/140", "completion": "function fix_spaces(text)\n    result = \"\"\n    i = 0\n    while i < length of text\n        if character at index i is space\n            if result is not empty and last character of result is not space\n                append \"_\" to result\n            else if result is not empty and last character of result is space and count of consecutive spaces in result is less than 2\n                continue\n            else\n                append \"-\" to result\n        else\n            append character at index i to result\n        end if\n        increment i\n    end while\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "function fix_spaces(text)\n    result = \"\"\n    for i in range(0, length of text)\n        if i < length of text - 1 and text[i] == \" \" and text[i+1] == \" \"\n            if i > 0 and result[i-1] != \"-\"\n                result += \"-\"\n            else\n                result += \"-\"\n        else\n            if text[i] == \" \"\n                result += \"_\"\n            else\n                result += text[i]\n    return resul"}
{"task_id": "HumanEval/140", "completion": "function fix_spaces(text)\n    new_text = \"\"\n    i = 0\n    while i < length(text)\n        if text[i] is space and i + 1 < length(text) and text[i + 1] is space\n            new_text = new_text + \"-\"\n        else if text[i] is space\n            new_text = new_text + \"_\"\n        else\n            new_text = new_text + text[i]\n        i = i + 1\n    return new_text\n"}
{"task_id": "HumanEval/140", "completion": "function fix_spaces(text)\n    new_text = \"\"\n    i = 0\n    while i < length of text\n        if character at position i is space and i + 1 is less than length of text and character at position i + 1 is space\n            add \"_\" to new_text\n            i = i + 1\n        elseif character at position i is space\n            add \"_\" to new_text\n        else\n            add character at position i to new_text\n        end if\n        i = i + 1\n    end while\n    return new_tex"}
{"task_id": "HumanEval/140", "completion": "\nfunction fix_spaces(text)\n    result = \"\"\n    prev_char = \"\"\n    for each char in text\n        if char is a space and prev_char is a space then\n            if result's length > 0 then\n                result = result + \"-\"\n            else\n                result = result\n        else\n            result = result + char\n        end if\n        prev_char = char\n    end for\n    return replace all spaces in result with underscores\nend function\n"}
{"task_id": "HumanEval/140", "completion": "function fix_spaces(text)\n    new_text = \"\"\n    count_spaces = 0\n    for each char in text:\n        if char is space:\n            count_spaces = count_spaces + 1\n            if count_spaces > 2:\n                new_text = new_text + \"-\"\n            else:\n                new_text = new_text + \"_\"\n        else:\n            new_text = new_text + char\n            count_spaces = 0\n    return new_text\n"}
{"task_id": "HumanEval/140", "completion": "\nfunction fix_spaces(text)\n    new_text = \"\"\n    i = 0\n    while i < length of text\n        if character at index i is space and i > 0 and character at index i-1 is space\n            append \"-\" to new_text\n        elseif character at index i is space\n            append \"_\" to new_text\n        else\n            append character at index i to new_text\n        end\n        increment i\n    return new_text\n"}
{"task_id": "HumanEval/141", "completion": "\nfunction file_name_check(file_name):\n  if count_digits(file_name) > 3 then\n    return \"No\"\n  if count_occurrences('.' , file_name) != 1 then\n    return \"No\"\n  if not starts_with_alpha(file_name.substring(0, file_name.indexOf('.'))) then\n    return \"No\"\n  if not in_list(file_name.substring(file_name.indexOf('.') + 1), ['txt', 'exe', 'dll']) then\n    return \"No\"\n  return \"Yes\"\n"}
{"task_id": "HumanEval/141", "completion": "function file_name_check(file_name)\n    count_digits = 0\n    for each character in file_name\n        if character is a digit\n            count_digits = count_digits + 1\n        end if\n    end for\n\n    if count_digits > 3 then\n        return 'No'\n    end if\n\n    dot_index = position of the first dot in file_name\n\n    if dot_index does not exist then\n        return 'No'\n    end if\n\n    prefix = substring of file_name from the beginning to dot_index\n    suffix = substring of file_name from dot_index + 1 to the end\n\n    if prefix is empty then\n        return 'No'\n    end if\n\n    if not (prefix starts with a latin alphabet letter) then\n        return 'No'\n    end if\n\n    if suffix is not one of ['txt', 'exe', 'dll'] then\n        return 'No'\n    end if\n\n    return 'Yes'\n"}
{"task_id": "HumanEval/141", "completion": "function file_name_check(file_name):\n    count_digits = 0\n    found_dot = False\n    file_extension = \"\"\n    valid_initial_letter = False\n    allowed_extensions = [\"txt\", \"exe\", \"dll\"]\n    \n    for i in file_name:\n        if i.isdigit():\n            count_digits += 1\n        elif i == \".\":\n            found_dot = True\n        elif found_dot:\n            file_extension += i\n        elif i.isalpha():\n            valid_initial_letter = True\n    \n    if count_digits > 3:\n        return \"No\"\n    if not found_dot or file_extension == \"\":\n        return \"No\"\n    if not valid_initial_letter:\n        return \"No\"\n    if file_extension not in allowed_extensions:\n        return \"No\"\n    \n    return \"Yes"}
{"task_id": "HumanEval/141", "completion": "\nfunction file_name_check(file_name):\n    if length(file_name) <= 255 then\n        digits_in_file_name = 0\n        dot_position = -1\n        before_dot = \"\"\n        after_dot = \"\"\n\n        for each character in file_name do\n            if character is a digit then\n                digits_in_file_name = digits_in_file_name + 1\n            else if character == \".\" then\n                dot_position = position\n            else if dot_position != -1 then\n                after_dot = after_dot + character\n            else\n                before_dot = before_dot + character\n\n        if digits_in_file_name > 3 then\n            return \"No\"\n        else if dot_position == -1 or length(before_dot) == 0 then\n            return \"No\"\n        else if not (before_dot[1] is an uppercase letter or before_dot[1] is a lowercase letter) then\n            return \"No\"\n        else if not (after_dot in [\"txt\", \"exe\", \"dll\"]) then\n            return \"No\"\n\n        return \"Yes\"\n"}
{"task_id": "HumanEval/141", "completion": "function file_name_check(file_name):\n    if count_digits(file_name) > 3 then\n        return 'No'\n    if count_occurrences('. ', file_name) != 1 then\n        return 'No'\n    if left(file_name, find('. ', file_name) - 1) == '' or !is_latin_alphabet(left(file_name, find('. ', file_name) - 1)) then\n        return 'No'\n    if right(file_name, find('.', file_name) + 1) not in ['txt', 'exe', 'dll'] then\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/141", "completion": "\nFunction file_name_check(file_name):\n    if len(file_name) > 3:\n        count = 0\n        for char in file_name:\n            if char.isdigit():\n                count += 1\n                if count > 3:\n                    return \"No\"\n    if \".\" not in file_name:\n        return \"No\"\n    before_dot, after_dot = file_name.split(\".\")\n    if not before_dot.isalpha():\n        return \"No\"\n    if after_dot.lower() not in [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    return \"Yes\"\n"}
{"task_id": "HumanEval/141", "completion": "\nfunction file_name_check(file_name):\n  if more_than_three_digits(file_name) then\n    return \"No\"\n  end if\n\n  dot_index = find_dot(file_name)\n  if dot_index does not exist then\n    return \"No\"\n  end if\n\n  before_dot = substring(file_name, 1, dot_index-1)\n  after_dot = substring(file_name, dot_index+1)\n  if length(before_dot) equals 0 then\n    return \"No\"\n  end if\n  if not starts_with_latin_letter(before_dot) then\n    return \"No\"\n  end if\n\n  if after_dot not in [\"txt\", \"exe\", \"dll\"] then\n    return \"No\"\n  end if\n\n  return \"Yes\"\n"}
{"task_id": "HumanEval/141", "completion": "function file_name_check(file_name)\n    digit_count = 0\n    for each character in file_name\n        if character is a digit\n            digit_count = digit_count + 1\n        end if\n    end for\n    if digit_count > 3\n        return \"No\"\n    end if\n    dot_index = find the index of the dot in file_name\n    if dot_index not exists or dot_index == 0 or dot_index == length(file_name) - 1\n        return \"No\"\n    end if\n    prefix = file_name[0..dot_index - 1]\n    suffix = file_name[dot_index + 1..length(file_name)]\n    if not is_latin_letter(prefix) or length(prefix) == 0\n        return \"No\"\n    end if\n    if suffix not in [\"txt\", \"exe\", \"dll\"]\n        return \"No\"\n    end if\n    return \"Yes\"\n"}
{"task_id": "HumanEval/141", "completion": "\nfunction file_name_check(file_name):\n    if length(file_name) > 0:\n        if count(digits(file_name)) <= 3:\n            if contains(file_name, \".\"):\n                before_dot = substring(file_name, 1, index(file_name, \".\") - 1)\n                after_dot = substring(file_name, index(file_name, \".\") + 1)\n                if length(before_dot) > 0 and isalpha(substring(1, 1, before_dot)):\n                    if after_dot in [\"txt\", \"exe\", \"dll\"]:\n                        return \"Yes\"\n    return \"No"}
{"task_id": "HumanEval/141", "completion": "\nFUNCTION file_name_check(file_name)\n  LET valid = TRUE\n  IF LENGTH(file_name) < 2 THEN\n    RETURN \"No\"\n  END IF\n  LET dot_index = INDEX(file_name, \".\")\n  IF dot_index = 0 OR dot_index = LENGTH(file_name) THEN\n    RETURN \"No\"\n  END IF\n  LET filename, extension = SPLIT(file_name, \".\")\n  IF LENGTH(filename) < 1 OR NOT ISALPHANUMERIC(filename[1]) THEN\n    RETURN \"No\"\n  END IF\n  LET allowed_extensions = [\"txt\", \"exe\", \"dll\"]\n  IF NOT IN(extension, allowed_extensions) THEN\n    RETURN \"No\"\n  END IF\n  LET digit_count = COUNT(DIGITS(filename), 1)\n  IF digit_count > 3 THEN\n    RETURN \"No\"\n  END IF\n  RETURN \"Yes\"\nEND FUNCTION\n"}
{"task_id": "HumanEval/142", "completion": "function sum_squares(lst)\n    sum <- 0\n    for i from 0 to len(lst) - 1 do\n        if i mod 3 is 0 then\n            sum <- sum + lst[i]^2\n        else if i mod 4 is 0 and i mod 3 is not 0 then\n            sum <- sum + lst[i]^3\n    return sum\n"}
{"task_id": "HumanEval/142", "completion": "function sum_squares(lst)\n    total_sum = 0\n    for i from 0 to length(lst)-1\n        if i mod 3 = 0 then\n            total_sum = total_sum + (lst[i])^2\n        else if i mod 4 = 0 and i mod 3 \u2260 0 then\n            total_sum = total_sum + (lst[i])^3\n    return total_su"}
{"task_id": "HumanEval/142", "completion": "function sum_squares(lst)\n    sum <- 0\n    for i from 0 to length(lst) - 1\n        if i mod 3 == 0 then\n            sum <- sum + lst[i]^2\n        else if i mod 4 == 0 and i mod 3 != 0 then\n            sum <- sum + lst[i]^3\n    return sum\n"}
{"task_id": "HumanEval/142", "completion": "\nFUNCTION sum_squares(lst)\n    Initialize SUM to 0\n    FOR EACH entry IN lst\n        IF (index of entry) MOD 3 == 0 THEN\n            entry = entry * entry\n        ELSE IF (index of entry) MOD 4 == 0 AND (index of entry) MOD 3 != 0 THEN\n            entry = entry * entry * entry\n        END IF\n        ADD entry TO SUM\n    END FOR\n    RETURN SUM\nEND FUNCTION\n"}
{"task_id": "HumanEval/142", "completion": "\nSUM = 0\nFOR i FROM 0 TO LENGTH(lst)-1 DO\n    IF i MOD 3 = 0 THEN\n        SUM = SUM + (lst[i])^2\n    ELSE IF i MOD 4 = 0 AND i MOD 3 != 0 THEN\n        SUM = SUM + (lst[i])^3\n    END IF\nEND FOR\nRETURN SUM\n"}
{"task_id": "HumanEval/142", "completion": "function sum_squares(lst)\n    sum = 0\n    for i from 0 to length(lst) - 1\n        if i mod 3 = 0 and i mod 4 \u2260 0\n            sum = sum + lst[i] ^ 3\n        else if i mod 3 = 0\n            sum = sum + lst[i] ^ 2\n        else\n            sum = sum + lst[i]\n    return sum\n"}
{"task_id": "HumanEval/142", "completion": "function sum_squares(lst)\n    sum <- 0\n    for i <- 0 to length(lst) - 1\n        if i mod 3 is 0 then\n            sum <- sum + (lst[i])^2\n        else if i mod 4 is 0 and i mod 3 is not 0 then\n            sum <- sum + (lst[i])^3\n    return sum\n"}
{"task_id": "HumanEval/142", "completion": "function sum_squares(lst)\n    sum = 0\n    for i from 0 to length(lst) - 1\n        if i mod 3 equals 0 then\n            sum = sum + lst[i] * lst[i]\n        elseif i mod 4 equals 0 and i mod 3 does not equal 0 then\n            sum = sum + lst[i] * lst[i] * lst[i]\n        end if\n    end for\n    return su"}
{"task_id": "HumanEval/142", "completion": ""}
{"task_id": "HumanEval/142", "completion": "\nfunction sum_squares(lst)\n    sum = 0\n    for i from 0 to length(lst) - 1 do\n        if i mod 3 is equal to 0 then\n            sum = sum + (lst[i])^2\n        elif i mod 4 is equal to 0 and not i mod 3 is equal to 0 then\n            sum = sum + (lst[i])^3\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "function words_in_sentence(sentence)\n    result = \"\"\n    words = split(sentence, \" \")\n    for each word in words:\n        if is_prime(length(word)) then\n            result = result + word + \" \"\n    return trim(result)\n\nfunction is_prime(n)\n    if n <= 1 then return false\n    for i from 2 to sqrt(n)\n        if n mod i == 0 then return false\n    return true\n"}
{"task_id": "HumanEval/143", "completion": "\nPROCEDURE words_in_sentence(sentence)\n    result := \"\"\n    split sentence into words\n    FOR each word in words\n        IF length(word) is a prime number\n            result := result + word + \" \"\n    END FOR\n    RETURN trim(result)\nEND PROCEDURE\n"}
{"task_id": "HumanEval/143", "completion": "\nfunction words_in_sentence(sentence)\n    word_list = split(sentence, ' ')\n    result = \"\"\n    for each word in word_list\n        if is_prime_length(word.length)\n            result = result + word + \" \"\n    return trim(result)\n\nfunction is_prime_length(n)\n    if n <= 1 then return false\n    for i = 2 to sqrt(n)\n        if n mod i = 0 then return false\n    return true\n"}
{"task_id": "HumanEval/143", "completion": "\nfunction words_in_sentence(sentence)\n    split_sentence = split(sentence, \" \")\n    result = \"\"\n    for word in split_sentence\n        if is_prime_length(word) then\n            result = concatenate(result, word, \" \")\n    return trim(result, \" \")\n\nfunction is_prime_length(word)\n    length = length(word)\n    if length <= 1 then\n        return false\n    for i = 2 to sqrt(length)\n        if length mod i == 0 then\n            return false\n    return true\n"}
{"task_id": "HumanEval/143", "completion": "function words_in_sentence(sentence)\n    words = split(sentence, \" \")\n    result = \"\"\n    for word in words\n        if is_prime(word.length)\n            result += word + \" \"\n    return trim(result)\n\nfunction is_prime(n)\n    if n <= 1\n        return false\n    for i from 2 to sqrt(n)\n        if n mod i == 0\n            return false\n    return true\n"}
{"task_id": "HumanEval/143", "completion": "\nFUNCTION words_in_sentence(sentence)\n    result = \"\"\n    split_sentence = SPLIT(sentence, \" \")\n    FOR each_word IN split_sentence\n        IF IS_PRIME(LENGTH(each_word))\n            result = CONCAT(result, each_word, \" \")\n    END FOR\n    RETURN TRIM(result)\nEND FUNCTIO"}
{"task_id": "HumanEval/143", "completion": "function words_in_sentence(sentence)\n    words = split(sentence, \" \")\n    result = \"\"\n    for each word in words\n        if is_prime_length(word.length)\n            result = result + word + \" \"\n    return trim(result)\n\nfunction is_prime_length(n)\n    if n <= 1 then\n        return false\n    for i from 2 to sqrt(n)\n        if n mod i == 0\n            return false\n    return tru"}
{"task_id": "HumanEval/143", "completion": "function words_in_sentence(sentence)\n    words = split(sentence, \" \")\n    result = \"\"\n    for each word in words\n        length = length(word)\n        if is_prime(length)\n            result = concatenate(result, word + \" \")\n    end for\n    return trim(result)\nend function\n\nfunction is_prime(n)\n    if n < 2 then\n        return false\n    else\n        for i from 2 to sqrt(n)\n            if (n mod i) == 0 then\n                return false\n            end if\n        end for\n        return true\n    end if\nend function\n"}
{"task_id": "HumanEval/143", "completion": "\nfunction words_in_sentence(sentence)\n    input_words = split(sentence, ' ')\n    result = ''\n    for each word in input_words\n        if length(word) is prime\n            result += word + ' '\n    return trim(result)\nend function\n\nfunction is_prime(n)\n    if n < 2 then\n        return false\n    else\n        for i from 2 to sqrt(n)\n            if n mod i is 0 then\n                return false\n            end if\n        return true\n    end function\n"}
{"task_id": "HumanEval/143", "completion": "procedure words_in_sentence(sentence)\n    words = split(sentence, ' ')\n    result = \"\"\n    for each word in words do\n        if is_prime(length(word)) then\n            result = result + word + \" \"\n    end for\n    return trim(result)\n\nfunction is_prime(n)\n    if n <= 1 then\n        return false\n    for i = 2 to sqrt(n) do\n        if n mod i = 0 then\n            return false\n        end if\n    end for\n    return true\n"}
{"task_id": "HumanEval/144", "completion": "\nfunction simplify(x, n):\n    # split the input strings into numerators and denominators\n    x_num, x_den = split(x, '/')\n    n_num, n_den = split(n, '/')\n\n    # calculate the least common multiple (LCM) of the denominators\n    lcm = (x_den * n_den) / gcd(x_den, n_den)\n\n    # calculate the new numerator for the simplified fraction\n    new_x_num = x_num * (lcm / x_den)\n    new_n_num = n_num * (lcm / n_den)\n\n    # calculate the gcd of the new numerator and denominator\n    gcd_new = gcd(new_x_num, lcm)\n\n    # return true if the new numerator divided by the gcd is equal to the new denominator\n    return new_x_num / gcd_new == lcm / gcd_new\n\nfunction gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a mod b"}
{"task_id": "HumanEval/144", "completion": "\nfunction simplify(x, n)\n    split x into numerator_x and denominator_x\n    split n into numerator_n and denominator_n\n    lcm of denominator_x and denominator_n\n    multiply numerator_x by (lcm / denominator_x) and numerator_n by (lcm / denominator_n)\n    if (numerator_x * denominator_n == numerator_n * denominator_x) then\n        return true\n    else\n        return false\n"}
{"task_id": "HumanEval/144", "completion": "function simplify(x, n):\n    # convert x and n into fractions\n    x_num = int(x.split('/')[0])\n    x_den = int(x.split('/')[1])\n    n_num = int(n.split('/')[0])\n    n_den = int(n.split('/')[1])\n\n    # calculate the product\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # check if the product is a whole number\n    if product_num % product_den == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/144", "completion": "function simplify(x, n)\n    // Convert strings into numerator and denominator for both x and n\n    let nx_num = gcd(gcd(str_split(x, '/')[0], str_split(x, '/')[2]), str_split(x, '/')[1])\n    let nx_den = str_split(x, '/')[1]\n    let nn_num = gcd(gcd(str_split(n, '/')[0], str_split(n, '/')[2]), str_split(n, '/')[1])\n    let nn_den = str_split(n, '/')[1]\n\n    // Calculate the simplified numerator and denominator\n    let simp_num = (nx_num / gcd(nx_num, nn_den)) * (nn_num / gcd(nn_num, nx_den))\n    let simp_den = gcd(nx_den, nn_den)\n\n    // Check if the simplified fraction is a whole number\n    if simp_num == 0 then\n        return true\n    else if simp_den != 1 then\n        return false\n    else\n        return true\n\nfunction gcd(a, b)\n    if b == 0 then\n        return a\n    else\n        return gcd(b, a mod b"}
{"task_id": "HumanEval/144", "completion": "DATA numerator1, denominator1, numerator2, denominator2 \nWHILE NOT (nominator1 > 0) DO\n  numerator1 = numerator1 * (-1)\n  denominator1 = denominator1 * (-1)\nEND WHILE\nWHILE NOT (nominator2 > 0) DO\n  numerator2 = numerator2 * (-1)\n  denominator2 = denominator2 * (-1)\nEND WHILE\nGREATEST_COMMON_DIVIDER = GCD(nominator1 * denominator2, denominator1 * numerator2)\nnumerator1 = numerator1 / GREATEST_COMMON_DIVIDER\ndenominator1 = denominator1 / GREATEST_COMMON_DIVIDER\nnumerator2 = numerator2 / GREATEST_Common_DIVIDER\ndenominator2 = denominator2 / GREATEST_COMMON_DIVIDER\nIF (numerator1 = numerator2) AND (denominator1 = denominator2) THEN\n  RETURN TRUE\nELSE\n  RETURN FALSE\nENDIF\n"}
{"task_id": "HumanEval/144", "completion": "function simplify(x, n):\n    num_x = int((split(x, \"/\")[0])\n    denom_x = int(split(x, \"/\")[1])\n    num_n = int((split(n, \"/\")[0])\n    denom_n = int(split(n, \"/\")[1])\n\n    result_num = num_x * num_n\n    result_denom = denom_x * denom_n\n\n    if gcd(result_num, result_denom) > 1:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/144", "completion": "\nfunction simplify(x, n):\n    # convert the fractions into integers\n    x_int = int(int(x.split('/')[0]) * int(n.split('/')[1])) // int(n.split('/')[0])\n    n_int = int(int(n.split('/')[0]) * int(x.split('/')[1])) // int(x.split('/')[0])\n\n    # check if the results are equal\n    if x_int == n_int:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/144", "completion": "function simplify(x, n)\n    numerator_x = int(x.split('/')[0])\n    denominator_x = int(x.split('/')[1])\n    numerator_n = int(n.split('/')[0])\n    denominator_n = int(n.split('/')[1])\n\n    product_numerator = numerator_x * numerator_n\n    product_denominator = denominator_x * denominator_n\n\n    greatest_common_divisor = gcd(product_numerator, product_denominator)\n\n    simplified_numerator = product_numerator / greatest_common_divisor\n    simplified_denominator = product_denominator / greatest_common_divisor\n\n    return simplified_numerator == int(simplified_numerator) and simplified_denominator == 1\nend\n\nfunction gcd(a, b)\n    if b == 0 then\n        return a\n    else\n        return gcd(b, a mod b)\n    end\nen"}
{"task_id": "HumanEval/144", "completion": ""}
{"task_id": "HumanEval/144", "completion": "function simplify(x, n)\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n\n    gcd = find_gcd(product_numerator, product_denominator)\n    simplified_numerator = product_numerator // gcd\n    simplified_denominator = product_denominator // gcd\n\n    if simplified_denominator == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "function order_by_points(nums):\n    # sort based on sum of digits and original index\n    return sorted((sum(int(digit) for digit in str(num)), i) for i, num in enumerate(nums))\n"}
{"task_id": "HumanEval/145", "completion": "function order_by_points(nums):\n    nums.sort(key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n    return nums\n"}
{"task_id": "HumanEval/145", "completion": "\nsort(nums) from smallest to largest by:\n    calculate sum of digits for each number in nums\n    store (sum, index) pairs in a list of tuples\n    sort the list of tuples by the first element (sum)\n    return a list of numbers from the sorted list of tuples\n"}
{"task_id": "HumanEval/145", "completion": "function order_by_points(nums)\n    // sort nums by the sum of digits first\n    nums = sort(nums, (x, y) => sum_of_digits(x) - sum_of_digits(y))\n\n    // sort again by the original index if sums are equal\n    nums = sort(nums, (x, y) => index(x) - index(y))\n\n    return nums\n\nfunction sum_of_digits(n)\n    result = 0\n    while n > 0\n        digit = n mod 10\n        result = result + digit\n        n = n div 10\n    return result\n\nfunction index(x)\n    return nums.index(x)\n"}
{"task_id": "HumanEval/145", "completion": "\nprocedure order_by_points(nums):\n    let sorted_nums = new empty list\n    \n    for each num in nums:\n        let digit_sum = sum of the digits of num\n        add tuple (digit_sum, original_index of num) to the end of sorted_nums\n        \n    sort sorted_nums in ascending order of the first element of the tuples and then in ascending order of the second element of the tuples\n    \n    return the second element of each tuple in the sorted list\n"}
{"task_id": "HumanEval/145", "completion": "\nfunction order_by_points(nums)\n    sorted_nums = []\n    for num in nums\n        digit_sum = sum(int(digit) for digit in str(abs(num)))\n        nums_index = nums.index(num)\n        sorted_nums.append((digit_sum, nums_index, num))\n    sorted_sorted_nums = sorted(sorted_nums)\n    result = []\n    for item in sorted_sorted_nums\n        result.append(item[2])\n    return result\n"}
{"task_id": "HumanEval/145", "completion": "\nfunction order_by_points(nums)\n    sort nums by (sum of each number's digits, index of each number in nums)\n    return nums\n"}
{"task_id": "HumanEval/145", "completion": "\nfunction order_by_points(nums):\n    # calculate the sum of digits for each number in the list\n    sums = [(num, sum(int(digit) for digit in str(abs(num))), i) for i, num in enumerate(nums)]\n    \n    # sort the list based on the sum of digits and original index\n    sums.sort(key=lambda x: (x[1], x[2]))\n    \n    # return the sorted list of numbers\n    return [num for num, _, _ in sums"}
{"task_id": "HumanEval/145", "completion": "function order_by_points(nums)\n    sorted_nums = []\n    while length(nums) > 0\n        min_sum = 0\n        min_index = 0\n        for i from 0 to length(nums) - 1\n            sum_digits = 0\n            for digit in str(nums[i])\n                sum_digits += int(digit)\n            if sum_digits < min_sum or (sum_digits == min_sum and i < min_index)\n                min_sum = sum_digits\n                min_index = i\n        sorted_nums.append(nums.pop(min_index))\n    return sorted_nums\n"}
{"task_id": "HumanEval/145", "completion": "function order_by_points(nums)\n    sort nums based on two criteria:\n        1. sum of the digits\n        2. original index\n    for each num in nums\n        total = 0\n        for digit in str(abs(num))\n            total = total + int(digit)\n        new_list.append((total, nums.index(num), num))\n    new_list.sort()\n    result = []\n    for item in new_list\n        result.append(item[2])\n    return result\n"}
{"task_id": "HumanEval/146", "completion": "\nfunction specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return coun"}
{"task_id": "HumanEval/146", "completion": "\nfunction specialFilter(nums)\n    count := 0\n    for each num in nums\n        if num > 10\n            first_digit := floor(num / 10)\n            last_digit := num mod 10\n            if first_digit mod 2 != 0 and last_digit mod 2 != 0\n                count := count + 1\n    return count\n"}
{"task_id": "HumanEval/146", "completion": "function specialFilter(nums)\n    count = 0\n    for each num in nums\n        if num > 10\n            first_digit = num div 10 mod 10\n            last_digit = num mod 10\n            if first_digit is odd and last_digit is odd\n                count = count + 1\n    return count\n"}
{"task_id": "HumanEval/146", "completion": "\nfunction specialFilter(nums):\n    count := 0\n    for each num in nums:\n        if num > 10:\n            firstDigit := num div 10\n            lastDigit := num mod 10\n            if firstDigit % 2 != 0 and lastDigit % 2 != 0:\n                count := count + 1\n    return count\n"}
{"task_id": "HumanEval/146", "completion": "function specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 10 is 1 or num % 10 is 3 or num % 10 is 5 or num % 10 is 7 or num % 10 is 9:\n                if floor(log10(num)) mod 10 is 1 or floor(log10(num)) mod 10 is 3 or floor(log10(num)) mod 10 is 5 or floor(log10(num)) mod 10 is 7 or floor(log10(num)) mod 10 is 9:\n                    count = count + 1\n    return count\n"}
{"task_id": "HumanEval/146", "completion": "\nALGORITHM:\n   Input: nums, an array of integers\n   Output: count, the number of elements in nums that satisfy the condition\n   Initialize: count = 0\n   FOR each num in nums:\n      IF num > 10:\n         IF first digit of num is odd and last digit of num is odd:\n            increment count\n   RETURN count\n"}
{"task_id": "HumanEval/146", "completion": "\nfunction specialFilter(nums):\n    count := 0\n    for each num in nums:\n        if num > 10 then\n            first_digit := floor(num / 10)\n            last_digit := mod(num, 10)\n            if first_digit is odd and last_digit is odd then\n                count += 1\n        end if\n    end for\n    return count\n"}
{"task_id": "HumanEval/146", "completion": "function specialFilter(nums)\n    count := 0\n    for each num in nums\n        if num > 10 and num mod 10 is odd and floor(num / 10) mod 10 is odd\n            increment count\n    return coun"}
{"task_id": "HumanEval/146", "completion": "\nFUNCTION specialFilter(NUMS)\n    COUNT = 0\n    FOR EACH num IN NUMS\n        IF num > 10 AND (num % 10) IS ODD AND (FLOOR(num / 10) % 10) IS ODD\n            INCREMENT COUNT\n    END FOR\n    RETURN COUNT\nEND FUNCTION\n"}
{"task_id": "HumanEval/146", "completion": "\nfunction specialFilter(nums):\n    count = 0\n    for each num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return coun"}
{"task_id": "HumanEval/147", "completion": "Function get_max_triples(n)\n    Create an empty set S\n    For i from 1 to n\n        Calculate ai = i * i - i + 1\n        Add ai to S\n    Count := 0\n    For i from 1 to n-2\n        For j from i+1 to n-1\n            For k from j+1 to n\n                If (ai + aj + ak) mod 3 is 0\n                    Count++\n    Return Count\n"}
{"task_id": "HumanEval/147", "completion": "function get_max_triples(n)\n    a = []\n    for i from 1 to n\n        a[i] = i * i - i + 1\n    \n    count = 0\n    for i from 1 to n\n        for j from i + 1 to n\n            for k from j + 1 to n\n                if (a[i] + a[j] + a[k]) mod 3 == 0\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "function get_max_triples(n)\n    result = 0\n    for i from 1 to n\n        a[i] = i * i - i + 1\n    end\n    for i from 1 to n\n        for j from i + 1 to n\n            for k from j + 1 to n\n                if (a[i] + a[j] + a[k]) mod 3 == 0\n                    result = result + 1\n                end\n            end\n        end\n    return result\n"}
{"task_id": "HumanEval/147", "completion": "function get_max_triples(n):\n    result = 0\n    for i from 1 to n:\n        for j from i + 1 to n:\n            for k from j + 1 to n:\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) mod 3 == 0:\n                    result += 1\n    return result\n"}
{"task_id": "HumanEval/147", "completion": "\nfunction get_max_triples(n)\n    array a\n    for i from 1 to n\n        a[i] = i * i - i + 1\n    triple_count = 0\n    for i from 1 to n\n        for j from i + 1 to n\n            for k from j + 1 to n\n                if (a[i] + a[j] + a[k]) mod 3 == 0\n                    triple_count = triple_count + 1\n    return triple_coun"}
{"task_id": "HumanEval/147", "completion": "Procedure get_max_triples(n)\n    Create an array a of length n\n    For i from 1 to n\n        a[i] = i * i - i + 1\n    count = 0\n    For i from 1 to n - 2\n        For j from i + 1 to n - 1\n            For k from j + 1 to n\n                If a[i] + a[j] + a[k] is divisible by 3\n                    Increment count\n    Return coun"}
{"task_id": "HumanEval/147", "completion": "\nfunction get_max_triples(n)\n    array a of size n\n    count = 0\n    for i = 1 to n\n        a[i] = i * i - i + 1\n    for i = 1 to n-2\n        for j = i+1 to n-1\n            for k = j+1 to n\n                if (a[i] + a[j] + a[k]) % 3 == 0\n                    count = count + 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\nprocedure get_max_triples(n):\n    max_count = 0\n    for i from 1 to n:\n        a[i] = i * i - i + 1\n    for i from 1 to n - 2:\n        for j from i + 1 to n - 1:\n            for k from j + 1 to n:\n                if (a[i] + a[j] + a[k]) mod 3 == 0:\n                    max_count = max(max_count, 1)\n    return max_count\n"}
{"task_id": "HumanEval/147", "completion": "\nfunction get_max_triples(n):\n    count = 0\n    for i from 1 to n:\n        for j from i+1 to n:\n            for k from j+1 to n:\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1) mod 3 == 0:\n                    count = count + 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\nALGORITHM:\n\n    Function get_max_triples(n)\n        Create an array a of size n\n        Initialize count as 0\n        For each i from 1 to n\n            a[i] = i * i - i + 1\n        For each i from 1 to n-2\n            For each j from i+1 to n-1\n                For each k from j+1 to n\n                    If (a[i] + a[j] + a[k]) mod 3 == 0\n                        Increment count by 1\n        Return count\n    END FUNCTION\n"}
{"task_id": "HumanEval/148", "completion": "\n planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\ndef bf(planet1, planet2):\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx2 < idx1:\n        idx2 += 1\n    return tuple(planets[idx1+1:idx2])\n"}
{"task_id": "HumanEval/148", "completion": "\nplanet_list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\ndef bf(planet1, planet2):\n    if planet1 not in planet_list or planet2 not in planet_list:\n        return ()\n    idx1 = planet_list.index(planet1)\n    idx2 = planet_list.index(planet2)\n    result = planet_list[idx1+1:idx2]\n    return tuple(sorted(result))\n"}
{"task_id": "HumanEval/148", "completion": "\nfunction bf(planet1, planet2)\n    // Define the list of planets in order from closest to farthest from the sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    // Check if both planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets\n        return ()\n    \n    // Find the indices of planet1 and planet2 in the list of planets\n    idx1 = index(planet1, planets)\n    idx2 = index(planet2, planets)\n    \n    // Calculate the range of planets that need to be returned\n    start_idx = max(idx1 - 1, 0)\n    end_idx = min(idx2 + 1, len(planets) - 1)\n    \n    // Return the planets in the specified range, sorted by distance from the sun\n    return tuple(sorted(planets[i] for i in range(start_idx, end_idx)))\n"}
{"task_id": "HumanEval/148", "completion": "PLANET_ORDER = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    if planet1 not in PLANET_ORDER or planet2 not in PLANET_ORDER:\n        return ()\n    index1 = PLANET_ORDER.index(planet1)\n    index2 = PLANET_ORDER.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(PLANET_ORDER[index1+1:index2])\n"}
{"task_id": "HumanEval/148", "completion": "\nPLANETS = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    if planet1 not in PLANETS or planet2 not in PLANETS:\n        return ()\n    index1 = PLANETS.index(planet1)\n    index2 = PLANETS.index(planet2)\n    if index2 < index1:\n        index1, index2 = index2, index1\n    return tuple(sorted([PLANETS[i] for i in range(index1 + 1, index2)]))\n"}
{"task_id": "HumanEval/148", "completion": "PLANET_ORDER = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\ndef bf(planet1, planet2):\n    if planet1 not in PLANET_ORDER or planet2 not in PLANET_ORDER:\n        return ()\n    index1 = PLANET_ORDER.index(planet1)\n    index2 = PLANET_ORDER.index(planet2)\n    if index2 < index1:\n        index1, index2 = index2, index1\n    planets = PLANET_ORDER[index1+1:index2]\n    return tuple(PLANET_ORDER[i] for i in range(len(PLANET_ORDER)) if PLANET_ORDER[i] in planets)\n"}
{"task_id": "HumanEval/148", "completion": "\nPLANET_ORDER = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    planets_between = ()\n    i = PLANET_ORDER.index(planet1)\n    j = PLANET_ORDER.index(planet2)\n    for k in range(i + 1, j):\n        planets_between += (PLANET_ORDER[k],)\n    if len(planets_between) == 0:\n        return ()\n    else:\n        return tuple(sorted(planets_between))\n"}
{"task_id": "HumanEval/148", "completion": "DATA planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nFUNCTION bf(planet1, planet2) IS\n   IF planet1 NOT IN planets OR planet2 NOT IN planets THEN\n      RETURN ()\n   END IF\n   POS1 = POS_OF(planet1)\n   POS2 = POS_OF(planet2)\n   result = {}\n   FOR each planet IN planets\n      IF POS_OF(planet) > POS1 AND POS_OF(planet) < POS2 THEN\n         result = result + {planet}\n      END IF\n   END FOR\n   SORT result BY POS_OF\n   RETURN (result)\nEND FUNCTION\n"}
{"task_id": "HumanEval/148", "completion": "\nPLANET_ORDER = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\ndef bf(planet1, planet2):\n    index1 = PLANET_ORDER.index(planet1)\n    index2 = PLANET_ORDER.index(planet2)\n    if index1 < 0 or index2 < 0:\n        return ()\n    start = max(0, index1)\n    end = min(index2 + 1, len(PLANET_ORDER))\n    return tuple(PLANET_ORDER[i] for i in range(start, end)"}
{"task_id": "HumanEval/148", "completion": "DATA PLANETS = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nINDEX = {\"Mercury\": 0, \"Venus\": 1, \"Earth\": 2, \"Mars\": 3, \"Jupiter\": 4, \"Saturn\": 5, \"Uranus\": 6, \"Neptune\": 7}\n\nfunction bf(planet1, planet2):\n    i1 = INDEX.get(planet1, -1)\n    i2 = INDEX.get(planet2, -1)\n    \n    if i1 == -1 or i2 == -1:\n        return ()\n\n    start = max(i1, 0)\n    end = min(i2 + 1, len(PLANETS))\n    \n    result = PLANETS[start:end]\n    \n    return tuple(sorted(result))\n"}
{"task_id": "HumanEval/149", "completion": "function sorted_list_sum(lst)\n    new_lst = []\n    for str in lst:\n        if len(str) % 2 == 0 then\n            new_lst.append(str)\n    new_lst.sort(key=lambda x: (len(x), x))\n    return new_lst\n"}
{"task_id": "HumanEval/149", "completion": "\nfunction sorted_list_sum(lst):\n    # filter out strings with odd length\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # sort the list first by length and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list\n"}
{"task_id": "HumanEval/149", "completion": "function sorted_list_sum(lst)\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0 then\n            result.append(word)\n    result.sort(key=lambda x: (len(x), x))\n    return resul"}
{"task_id": "HumanEval/149", "completion": "\nfunction sorted_list_sum(lst)\n    new_lst = []\n    for str in lst:\n        if len(str) % 2 == 0:\n            new_lst.append(str)\n    new_lst.sort(key=lambda x: (len(x), x))\n    return new_lst\n"}
{"task_id": "HumanEval/149", "completion": "\nfunction sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return ls"}
{"task_id": "HumanEval/149", "completion": "\nfunction sorted_list_sum(lst)\n    new_list = []\n    for each string s in lst:\n        if len(s) is even then\n            new_list.append(s)\n    new_list.sort(key = lambda x: (len(x), x))\n    return new_list\n"}
{"task_id": "HumanEval/149", "completion": "\nfunction sorted_list_sum(lst):\n    result = []\n    for string in lst:\n        if len(string) % 2 == 0:\n            result.append(string)\n    result.sort(key=lambda x: (len(x), x))\n    return result\n"}
{"task_id": "HumanEval/149", "completion": "\nfunction sorted_list_sum(lst):\n    new_list = []\n    for str in lst:\n        if len(str) % 2 == 0:\n            new_list.append(str)\n    new_list.sort(key=lambda x: (len(x), x))\n    return new_list\n"}
{"task_id": "HumanEval/149", "completion": "\nfunction sorted_list_sum(lst)\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=lambda x: (len(x), x))\n    return result\n"}
{"task_id": "HumanEval/149", "completion": "\nfunction sorted_list_sum(lst):\n    result = []\n    for str in lst:\n        if len(str) % 2 == 0:\n            result.append(str)\n    result.sort(key=lambda x: (len(x), x))\n    return result\n"}
{"task_id": "HumanEval/150", "completion": "function x_or_y(n, x, y)\n    is_prime = true\n    if n <= 1 then\n        is_prime = false\n    else\n        for i from 2 to sqrt(n) do\n            if (n mod i) == 0 then\n                is_prime = false\n                break\n            end\n        end\n    end\n    if is_prime then\n        return x\n    else\n        return y\n    end\n"}
{"task_id": "HumanEval/150", "completion": "function x_or_y(n, x, y)\n    is_prime = true\n    for i from 2 to sqrt(n)\n        if n mod i is 0 then\n            is_prime = false\n            break\n    if is_prime then\n        return x\n    else\n        return y\n"}
{"task_id": "HumanEval/150", "completion": "\nfunction x_or_y(n, x, y)\n    is_prime = true\n    if n <= 1 then\n        is_prime = false\n    else\n        for i from 2 to sqrt(n) do\n            if n mod i is 0 then\n                is_prime = false\n                break\n        end for\n    end if\n    if is_prime then\n        return x\n    else\n        return y\n    end if\nend function\n"}
{"task_id": "HumanEval/150", "completion": "\nfunction x_or_y(n, x, y)\n    if is_prime(n) then\n        return x\n    else\n        return y\n    end if\n\n    function is_prime(num)\n        if num <= 1 then\n            return false\n        else\n            for i from 2 to sqrt(num)\n                if num mod i = 0 then\n                    return false\n                end if\n            next i\n            return true\n        end if\n    end function\n"}
{"task_id": "HumanEval/150", "completion": "\nfunction x_or_y(n, x, y)\n   is_prime = true\n   if n <= 1 then\n      is_prime = false\n   else\n      for i from 2 to sqrt(n)\n         if n mod i == 0 then\n            is_prime = false\n            break\n         end\n      end\n   end\n   if is_prime then\n      return x\n   else\n      return y\n   end\nend\n"}
{"task_id": "HumanEval/150", "completion": "\nPROCEDURE x_or_y(n, x, y)\n   IF ISPRIME(n) THEN\n      RETURN x\n   ELSE\n      RETURN y\n   END IF\nEND PROCEDURE\n\nPROCEDURE ISPRIME(m)\n   IF m <= 1 THEN\n      RETURN FALSE\n   ELSE\n      FOR i = 2 TO SQRT(m) DO\n         IF m MOD i = 0 THEN\n            RETURN FALSE\n         END IF\n      NEXT i\n      RETURN TRUE\n   END IF\nEND PROCEDUR"}
{"task_id": "HumanEval/150", "completion": "\nFUNCTION x_or_y(n, x, y)\n  IF is_prime(n) THEN\n    RETURN x\n  ELSE\n    RETURN y\n  END IF\nEND FUNCTION\n\nFUNCTION is_prime(num)\n  IF num <= 1 THEN\n    RETURN FALSE\n  ELSE IF num <= 3 THEN\n    RETURN TRUE\n  ELSE IF num MOD 2 = 0 THEN\n    RETURN FALSE\n  ELSE\n    FOR i FROM 3 TO SQRT(num) INCREMENT 2\n      IF num MOD i = 0 THEN\n        RETURN FALSE\n      END IF\n    NEXT\n    RETURN TRUE\n  END IF\nEND FUNCTION\n"}
{"task_id": "HumanEval/150", "completion": "\nfunction x_or_y(n, x, y):\n    is_prime = true\n    for i from 2 to n - 1 do\n        if n mod i equals 0 then\n            is_prime = false\n            break\n    if is_prime then\n        return x\n    else\n        return y\n"}
{"task_id": "HumanEval/150", "completion": "\nfunction is_prime(num):\n    if num < 2:\n        return false\n    for i from 2 to sqrt(num):\n        if num mod i equals 0:\n            return false\n    return true\n\nfunction x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/150", "completion": "\nfunction x_or_y(n, x, y)\n    function is_prime(m)\n        if m <= 1 then\n            return false\n        end\n        for i from 2 to sqrt(m) do\n            if m mod i = 0 then\n                return false\n            end\n        end\n        return true\n    end\n    if is_prime(n) then\n        return x\n    else\n        return y\n    end\nend\n"}
{"task_id": "HumanEval/151", "completion": "\nfunction double_the_difference(lst)\n    total_sum = 0\n    for each num in lst\n        if num is an integer and num > 0\n            total_sum = total_sum + (num * num)\n    return 2 * total_su"}
{"task_id": "HumanEval/151", "completion": "\nfunction double_the_difference(lst)\n    sum = 0\n    for each number in lst:\n        if number is an integer and number >= 0:\n            if number mod 2 != 0:\n                sum = sum + number * number\n    return sum\n"}
{"task_id": "HumanEval/151", "completion": "function double_the_difference(lst):\n    sum_of_squares = 0\n    for each number in lst:\n        if number is an integer and number is positive:\n            sum_of_squares = sum_of_squares + (number * number)\n    return sum_of_squares\n"}
{"task_id": "HumanEval/151", "completion": "FUNCTION double_the_difference(lst)\n    SUM = 0\n    FOR each num IN lst\n        IF num IS INTEGER AND num > 0\n            SUM = SUM + (num * num)\n    RETURN 2 * SU"}
{"task_id": "HumanEval/151", "completion": "\nfunction double_the_difference(lst)\n    sum = 0\n    for each num in lst:\n        if num is an integer and num >= 0:\n            sum += num * num\n    return sum\n"}
{"task_id": "HumanEval/151", "completion": "\nfunction double_the_difference(lst)\n    sum_of_squares = 0\n    for each num in lst:\n        if num is an integer and num >= 0 and num % 2 != 0 then\n            sum_of_squares = sum_of_squares + (num * num)\n        end if\n    end for\n    return sum_of_squares\nend function\n"}
{"task_id": "HumanEval/151", "completion": "function double_the_difference(lst)\n    result = 0\n    for each num in lst:\n        if (isinstance(num, int) and num >= 0) then\n            result += num * num\n    return result\n"}
{"task_id": "HumanEval/151", "completion": "\nfunction double_the_difference(lst)\n    sum_of_squares := 0\n    for each num in lst\n        if num is an integer and num > 0 then\n            sum_of_squares := sum_of_squares + (num * num)\n        end if\n    end for\n    return 2 * sum_of_square"}
{"task_id": "HumanEval/151", "completion": "PROCEDURE double_the_difference(lst)\n    result := 0\n    FOR each number IN lst\n        IF (number IS INTEGER AND number >= 0) THEN\n            IF (number MOD 2 != 0) THEN\n                result := result + number * number\n            END IF\n        END IF\n    END FOR\n    RETURN result\n"}
{"task_id": "HumanEval/151", "completion": "function double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if type(num) is int and num >= 0:\n            sum_of_squares += num ** 2\n    return sum_of_square"}
{"task_id": "HumanEval/152", "completion": "data = input arrays\nresult = []\nfor i from 0 to data.length - 1\n    if data[guess] == data[scores]\n        append 0 to result\n    else\n        append |data[guess] - data[scores]| to result\nreturn result\n"}
{"task_id": "HumanEval/152", "completion": "\nALGORITHM\nDECLARE an empty list called \"result\"\n\nFOR i FROM 0 TO LENGTH(game)-1\n  IF game[i] = guess[i]\n    APPEND 0 to result\n  ELSE\n    APPEND ABS(game[i]-guess[i]) to result\n\nRETURN result\n"}
{"task_id": "HumanEval/152", "completion": "\nfunction compare(game,guess):\n  result = []\n  for i from 0 to game.length-1:\n    if game[i] == guess[i]:\n      result.append(0)\n    else:\n      result.append(abs(game[i] - guess[i]))\n  return result\n"}
{"task_id": "HumanEval/152", "completion": "\nfunction compare(game, guess)\n    output = []\n    for i from 0 to length(game) - 1\n        if game[i] == guess[i]\n            output.append(0)\n        else\n            output.append(abs(game[i] - guess[i]))\n    return output\n"}
{"task_id": "HumanEval/152", "completion": "input: game, guess (two lists of same length)\nresult = []\nfor i from 0 to length of game - 1:\n    if game[i] == guess[i]:\n        result.append(0)\n    else:\n        result.append(abs(game[i] - guess[i]))\noutput: resul"}
{"task_id": "HumanEval/152", "completion": "function compare(game,guess):\n    result = []\n    for i from 0 to length of game - 1:\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return resul"}
{"task_id": "HumanEval/152", "completion": "\nalgorithm CompareGameScores\n   input: game (array), guess (array)\n   output: result (array)\n\n   declare length, i, diff\n\n   set length = length of game\n\n   for i from 0 to length - 1 do\n       diff = abs(guess[i] - game[i])\n       if diff == 0 then\n           result[i] = 0\n       else\n           result[i] = diff\n   end for\n\n   return resul"}
{"task_id": "HumanEval/152", "completion": "function compare(game,guess):\n    result = []\n    for i from 0 to (length of game) - 1:\n        diff = abs(guess[i] - game[i])\n        if diff == 0 then\n            append 0 to result\n        else\n            append diff to result\n    return result\n"}
{"task_id": "HumanEval/152", "completion": "\nfunction compare(game, guess):\n    result = []\n    for i from 0 to game.length - 1:\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result\n"}
{"task_id": "HumanEval/152", "completion": "\nalgorithm compare:\n    input: game (array of scores), guess (array of guesses)\n    output: result (array of differences)\n\n    result = new array of same length as game and guess\n    for i from 0 to length of game - 1:\n        if game[i] equals guess[i]:\n            result[i] = 0\n        else:\n            result[i] = absolute value of game[i] minus guess[i]\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\nfunction Strongest_Extension(class_name, extensions)\n    max_strength = 0\n    strongest_extension = \"\"\n\n    for each extension in extensions\n        CAP = 0\n        SM = 0\n\n        for each character in extension\n            if character is uppercase\n                CAP = CAP + 1\n            else\n                SM = SM + 1\n\n        if CAP - SM > max_strength\n            max_strength = CAP - SM\n            strongest_extension = extension\n\n    return class_name + \".\" + strongest_extension\n"}
{"task_id": "HumanEval/153", "completion": "\nfunction Strongest_Extension(class_name, extensions)\n    max_strength = 0\n    strongest_extension = \"\"\n    for each extension in extensions:\n        count_uppercase = 0\n        count_lowercase = 0\n        for each character in extension:\n            if character.isupper():\n                count_uppercase += 1\n            else if character.islower():\n                count_lowercase += 1\n        strength = count_uppercase - count_lowercase\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n"}
{"task_id": "HumanEval/153", "completion": "\nfunction Strongest_Extension(class_name, extensions)\n    strongest_extension = None\n    max_strength = -float('inf')\n\n    for extension in extensions:\n        CAP = 0\n        SM = 0\n        for char in extension:\n            if char.isupper():\n                CAP += 1\n            elif char.islower():\n                SM += 1\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return class_name + '.' + strongest_extension\n"}
{"task_id": "HumanEval/153", "completion": "STRONGEST_EXTENSION = None\nSTRONGEST_STRENGTH = -1\n\nfor extension in extensions:\n    CAP = sum(1 for char in extension if char.isupper())\n    SM = len(extension) - CAP\n    STRENGTH = CAP - SM\n\n    if STRENGTH > STRONGEST_STRENGTH:\n        STRONGEST_EXTENSION = extension\n        STRONGEST_STRENGTH = STRENGTH\n\nreturn class_name + \".\" + STRONGEST_EXTENSION\n"}
{"task_id": "HumanEval/153", "completion": "\nFunction Strongest_Extension(class_name, extensions)\n    max_strength = 0\n    strongest_extension = \"\"\n    For each extension in extensions\n        cap = 0\n        sm = 0\n        For each character in extension\n            If character is uppercase\n                cap = cap + 1\n            Else\n                sm = sm + 1\n        strength = cap - sm\n        If strength > max_strength\n            max_strength = strength\n            strongest_extension = extension\n    Return class_name + \".\" + strongest_extension\n"}
{"task_id": "HumanEval/153", "completion": "\nalgorithm Strongest_Extension(class_name, extensions)\n    strongest_extension = None\n    max_strength = 0\n    for each extension in extensions\n        calculate CAP = count of uppercase letters in extension\n        calculate SM = count of lowercase letters in extension\n        strength = CAP - SM\n        if strength > max_strength or (strength == max_strength and extensions.index(extension) < extensions.index(strongest_extension))\n            strongest_extension = extension\n            max_strength = strength\n    return class_name + '.' + strongest_extension\n"}
{"task_id": "HumanEval/153", "completion": "\ninput class_name, extensions\nmax_strength = 0\nstrongest_extension = \"\"\nfor each extension in extensions:\n    CAP = 0\n    SM = 0\n    for each char in extension:\n        if char.isupper():\n            CAP += 1\n        else:\n            SM += 1\n    strength = CAP - SM\n    if strength > max_strength:\n        max_strength = strength\n        strongest_extension = extension\noutput class_name + \".\" + strongest_extension\n"}
{"task_id": "HumanEval/153", "completion": "\nfunction Strongest_Extension(class_name, extensions)\n    strongest_extension = None\n    max_strength = -inf\n    \n    for each extension in extensions\n        count_uppercase = 0\n        count_lowercase = 0\n        \n        for each char in extension\n            if char is uppercase then\n                count_uppercase = count_uppercase + 1\n            else\n                count_lowercase = count_lowercase + 1\n        \n        strength = count_uppercase - count_lowercase\n        \n        if strength > max_strength then\n            max_strength = strength\n            strongest_extension = extension\n        \n    return class_name + '.' + strongest_extension\n"}
{"task_id": "HumanEval/153", "completion": "FUNCTION Strongest_Extension(class_name, extensions)\n    strongest_extension = NONE\n    strongest_strength = -INFINITY\n    FOR each extension IN extensions\n        CAP = 0\n        SM = 0\n        FOR each character IN extension\n            IF character IS UPPERCASE THEN\n                CAP = CAP + 1\n            ELSE\n                SM = SM + 1\n        END FOR\n        extension_strength = CAP - SM\n        IF extension_strength > strongest_strength THEN\n            strongest_extension = extension\n            strongest_strength = extension_strength\n    END FOR\n    RETURN class_name + '.' + strongest_extensio"}
{"task_id": "HumanEval/153", "completion": "\nfunction Strongest_Extension(class_name, extensions)\n    strongest_extension = None\n    strongest_strength = -float('inf')\n\n    for each extension in extensions\n        CAP = count uppercase letters in extension\n        SM = count lowercase letters in extension\n        strength = CAP - SM\n\n        if strength > strongest_strength\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return class_name + '.' + strongest_extension\n"}
{"task_id": "HumanEval/154", "completion": "\nfunction cycpattern_check(a, b):\n    len_a = length of a\n    len_b = length of b\n    for i from 0 to len_a - len_b:\n        if b is a substring of a starting from index i:\n            return True\n        else:\n            b = rotate(b)  # rotate string b by one character to the right\n    return False\n"}
{"task_id": "HumanEval/154", "completion": "\nfunction cycpattern_check(a, b)\n    len_a = length(a)\n    len_b = length(b)\n    for i from 0 to len_a - len_b\n        if substr(a, i, len_b) equals b or\n           substr(a, i, len_b) equals reverse(b)\n            return true\n    return fals"}
{"task_id": "HumanEval/154", "completion": "\nfunction cycpattern_check(a, b):\n    len_a = length of a\n    len_b = length of b\n    \n    for i from 0 to len_a - length of b:\n        if substring of a from i to i + length of b equals b or substring of a from i to i + length of b equals rotation of b:\n            return True\n    \n    return Fals"}
{"task_id": "HumanEval/154", "completion": ""}
{"task_id": "HumanEval/154", "completion": "function cycpattern_check(a, b)\n    set flag = False\n    for i in range(1, len(b))\n        temp = b + b[0:i]\n        if temp in a:\n            flag = True\n            break\n    return fla"}
{"task_id": "HumanEval/154", "completion": "\nfunction cycpattern_check(a, b)\n    // Convert word 'b' into an array\n    b_array = [ ]\n    for i from 0 to length(b) - 1\n        b_array.append(b[i])\n\n    // Check if b or any rotation of b is a substring in a\n    for j from 0 to length(b) - 1\n        temp_b_array = b_array.copy()\n        for k from 0 to length(temp_b_array) - 1\n            temp_b_array.rotate(k)\n        for i from 0 to length(a) - 1\n            if is_substring(a, temp_b_array)\n                return true\n    return false\n\nfunction is_substring(s1, s2)\n    i = 0\n    while i <= length(s1) - length(s2)\n        if equal(s1.substring(i, i + length(s2)), s2)\n            return true\n        i = i + 1\n    return false\n"}
{"task_id": "HumanEval/154", "completion": "FUNCTION cycpattern_check(a, b)\n    rotate_b = b\n    WHILE (rotate_b != b)\n        IF (rotate_b IS A SUBSTRING OF a)\n            RETURN TRUE\n        END IF\n        rotate_b = rotate_b + LEFTMOST CHARACTER OF b\n    END WHILE\n    RETURN FALSE\nEND FUNCTIO"}
{"task_id": "HumanEval/154", "completion": "function cycpattern_check(a, b)\n    for i from 0 to length(a) - length(b)\n        if a.substring(i, i + length(b)) equals b\n            return true\n        end if\n    end for\n    return false\n"}
{"task_id": "HumanEval/154", "completion": "\nfunction cycpattern_check(a, b):\n    len_a = length of a\n    len_b = length of b\n    for i from 0 to len_a - len_b:\n        if a.substring(i, i + len_b) equals b:\n            return true\n        else:\n            return false\n"}
{"task_id": "HumanEval/154", "completion": "function cycpattern_check(a, b)\n    rotation_count = len(b)\n    for i in range(0, rotation_count)\n        if b == a[i:i+rotation_count]\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\nfunction even_odd_count(num):\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit mod 2 == 0 then\n            even_count += 1\n        else\n            odd_count += 1\n        num = floor(num / 10)\n    return (even_count, odd_count"}
{"task_id": "HumanEval/155", "completion": "\nfunction even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/155", "completion": "function even_odd_count(num)\n    num_str = convert num to string\n    even_count = 0\n    odd_count = 0\n    for each char in num_str\n        if int(char) is even then\n            increment even_count\n        else\n            increment odd_count\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/155", "completion": "procedure even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num mod 10\n        if digit mod 2 == 0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        num = num div 10\n    return (even_count, odd_count"}
{"task_id": "HumanEval/155", "completion": "\nALGORITHM:\n\nDEFINE function even_odd_count(num)\n   DECLARE variable even_count = 0\n   DECLARE variable odd_count = 0\n\n   WHILE num > 0\n       IF (num MOD 10) MOD 2 == 0 THEN\n           INC even_count\n       ELSE\n           INC odd_count\n       END IF\n       num = num DIV 10\n   END WHILE\n\n   RETURN (even_count, odd_count)\nEND FUNCTIO"}
{"task_id": "HumanEval/155", "completion": "\nprocedure even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num != 0 do\n        digit = num mod 10\n        if digit mod 2 == 0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        num = int(num / 10)\n    end while\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/155", "completion": "function even_odd_count(num)\n    if num < 0 then\n        num = -num\n    end if\n    even_count = 0\n    odd_count = 0\n    while num > 0 do\n        digit = num mod 10\n        if digit mod 2 == 0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        end if\n        num = floor(num / 10)\n    end while\n    return (even_count, odd_count"}
{"task_id": "HumanEval/155", "completion": "\ninput num\neven_count = 0\nodd_count = 0\nwhile num > 0 do\n    digit = num mod 10\n    if digit mod 2 == 0 then\n        even_count = even_count + 1\n    else\n        odd_count = odd_count + 1\n    num = num div 10\nend while\nreturn (even_count, odd_count"}
{"task_id": "HumanEval/155", "completion": "\nfunction even_odd_count(num)\n    num_str = convert num to string\n    even_count = 0\n    odd_count = 0\n    for each digit in num_str\n        if digit is even\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/155", "completion": "\nfunction even_odd_count(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0\n        digit = num mod 10\n        if digit mod 2 is 0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        end if\n        num = floor(num / 10)\n    end while\n    return (even_count, odd_count"}
{"task_id": "HumanEval/156", "completion": "\nfunction int_to_mini_roman(number)\n    if number >= 1000:\n        roman = 'm' + int_to_mini_roman(number - 1000)\n    elif number >= 900:\n        roman = 'cm' + int_to_mini_roman(number - 900)\n    elif number >= 500:\n        roman = 'd' + int_to_mini_roman(number - 500)\n    elif number >= 400:\n        roman = 'cd' + int_to_mini_roman(number - 400)\n    elif number >= 100:\n        if number % 100 >= 90:\n            roman = 'xc' + int_to_mini_roman(number - 90)\n        else:\n            roman = ''\n            while number >= 100:\n                roman = 'c' + roman\n                number -= 100\n    elif number >= 50:\n        roman = 'l' + int_to_mini_roman(number - 50)\n    elif number >= 40:\n        roman = 'xl' + int_to_mini_roman(number - 40)\n    elif number >= 10:\n        if number % 10 >= 9:\n            roman = 'ix' + int_to_mini_roman(number - 9)\n        else:\n            roman = ''\n            while number >= 10:\n                roman = 'x' + roman\n                number -= 10\n    elif number >= 5:\n        roman = 'v' + int_to_mini_roman(number - 5)\n    elif number >= 4:\n        roman = 'iv' + int_to_mini_roman(number - 4)\n    else:\n        roman = ''\n        while number > 0:\n            if number >= 3:\n                roman = 'i' + roman\n                number -= 1\n            elif number >= 2:\n                roman = 'ii' + roman\n                number -= 2\n            else:\n                roman = 'iii' + roman\n                number -= 3\n    return roman.lower("}
{"task_id": "HumanEval/156", "completion": "\nfunction int_to_mini_roman(number)\n    if number >= 1000\n        return \"m\" + int_to_mini_roman(number - 1000)\n    elif number >= 900\n        return \"cm\" + int_to_mini_roman(number - 900)\n    elif number >= 500\n        return \"d\" + int_to_mini_roman(number - 500)\n    elif number >= 400\n        return \"cd\" + int_to_mini_roman(number - 400)\n    elif number >= 100\n        if number % 100 >= 90\n            return \"xc\" + int_to_mini_roman(number % 100 - 90)\n        else\n            result = \"\"\n            while number >= 100\n                result += \"c\"\n                number -= 100\n            return result + int_to_mini_roman(number)\n    elif number >= 90\n        return \"xc\" + int_to_mini_roman(number - 90)\n    elif number >= 50\n        return \"l\" + int_to_mini_roman(number - 50)\n    elif number >= 40\n        return \"xl\" + int_to_mini_roman(number - 40)\n    elif number >= 10\n        if number % 10 >= 9\n            return \"ix\" + int_to_mini_roman(number % 10 - 9)\n        else\n            result = \"\"\n            while number >= 10\n                result += \"x\"\n                number -= 10\n            return result + int_to_mini_roman(number)\n    elif number >= 9\n        return \"ix\"\n    elif number >= 5\n        return \"v\" + int_to_mini_roman(number - 5)\n    elif number >= 4\n        return \"iv\" + int_to_mini_roman(number - 4)\n    else\n        result = \"\"\n        while number >= 1\n            result += \"i\"\n            number -= 1\n        return result\nend functio"}
{"task_id": "HumanEval/156", "completion": "\nfunction int_to_mini_roman(number)\n    if number >= 1000:\n        roman = \"m\" + int_to_mini_roman(number - 1000)\n    elif number >= 900:\n        roman = \"cm\" + int_to_mini_roman(number - 900)\n    elif number >= 500:\n        roman = \"d\" + int_to_mini_roman(number - 500)\n    elif number >= 400:\n        roman = \"cd\" + int_to_mini_roman(number - 400)\n    elif number >= 100:\n        if number >= 90:\n            roman = \"xc\" + int_to_mini_roman(number - 90)\n        else:\n            roman = \"c\" + int_to_mini_roman(number - 100)\n    elif number >= 50:\n        roman = \"l\" + int_to_mini_roman(number - 50)\n    elif number >= 40:\n        roman = \"xl\" + int_to_mini_roman(number - 40)\n    elif number >= 10:\n        if number >= 9:\n            roman = \"ix\" + int_to_mini_roman(number - 9)\n        else:\n            roman = \"x\" + int_to_mini_roman(number - 10)\n    elif number >= 5:\n        roman = \"v\" + int_to_mini_roman(number - 5)\n    elif number >= 4:\n        roman = \"iv\" + int_to_mini_roman(number - 4)\n    else:\n        roman = \"i\"\n    return roman\n"}
{"task_id": "HumanEval/156", "completion": "\nfunction int_to_mini_roman(number):\n    roman_numerals = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n\n    result = ''\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower("}
{"task_id": "HumanEval/156", "completion": "function int_to_mini_roman(number):\n    roman_map = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    roman = ''\n    for value, symbol in roman_map:\n        while number >= value:\n            roman += symbol\n            number -= value\n            \n    return roman.lower("}
{"task_id": "HumanEval/156", "completion": "\nfunction int_to_mini_roman(number)\n    if number >= 1000 then\n        result := \"m\"\n        number := number - 1000\n    end if\n    if number >= 900 then\n        result := result + \"cm\"\n        number := number - 900\n    end if\n    if number >= 500 then\n        result := result + \"d\"\n        number := number - 500\n    end if\n    if number >= 400 then\n        result := result + \"cd\"\n        number := number - 400\n    end if\n    if number >= 100 then\n        if number >= 90 then\n            result := result + \"xc\"\n            number := number - 90\n        else\n            for i := 1 to 9 do\n                if number >= i * 10 then\n                    result := result + i * \"i\"\n                    number := number - i * 10\n                    break\n                end if\n            end for\n        end if\n    end if\n    if number >= 40 then\n        result := result + \"xl\"\n        number := number - 40\n    end if\n    if number >= 30 then\n        result := result + \"xxviii\"\n        number := number - 30\n    end if\n    for i := 1 to 9 do\n        if number >= i then\n            result := result + i \"i\"\n            number := number - i\n            break\n        end if\n    end for\n    return result\nend function\n"}
{"task_id": "HumanEval/156", "completion": "\nfunction int_to_mini_roman(number)\n    if number >= 1000 then\n        result = 'm' * (number // 1000)\n        number = number % 1000\n    end if\n\n    if number >= 900 then\n        result = result + 'cm'\n        number = number - 900\n    elseif number >= 500 then\n        result = result + 'd' * (number // 500)\n        number = number % 500\n    end if\n\n    if number >= 400 then\n        result = result + 'cd'\n        number = number - 400\n    elseif number >= 100 then\n        result = result + 'c' * (number // 100)\n        number = number % 100\n    end if\n\n    if number >= 90 then\n        result = result + 'lc'\n        number = number - 90\n    elseif number >= 50 then\n        result = result + 'l' * (number // 50)\n        number = number % 50\n    end if\n\n    if number >= 40 then\n        result = result + 'xl'\n        number = number - 40\n    elseif number >= 10 then\n        result = result + 'x' * (number // 10)\n        number = number % 10\n    end if\n\n    if number >= 9 then\n        result = result + 'ix'\n        number = number - 9\n    elseif number >= 5 then\n        result = result + 'v' * (number // 5)\n        number = number % 5\n    end if\n\n    if number >= 4 then\n        result = result + 'iv'\n        number = number - 4\n    else\n        result = result + 'i' * number\n    end if\n\n    return result\nend function\n"}
{"task_id": "HumanEval/156", "completion": "function int_to_mini_roman(number):\n    result = \"\"\n    while number > 0:\n        if number >= 1000:\n            result += \"m\"\n            number -= 1000\n        elif number >= 900:\n            result += \"cm\"\n            number -= 900\n        elif number >= 500:\n            result += \"d\"\n            number -= 500\n        elif number >= 400:\n            result += \"cd\"\n            number -= 400\n        elif number >= 100:\n            if number >= 90:\n                result += \"xc\"\n                number -= 90\n            elif number >= 50:\n                result += \"l\"\n                number -= 50\n            else:\n                result += \"c\"\n                number -= 100\n        elif number >= 40:\n            result += \"xl\"\n            number -= 40\n        elif number >= 10:\n            if number >= 9:\n                result += \"ix\"\n                number -= 9\n            elif number >= 5:\n                result += \"v\"\n                number -= 5\n            else:\n                result += \"x\"\n                number -= 10\n        elif number >= 4:\n            result += \"iv\"\n            number -= 4\n        else:\n            if number >= 3:\n                result += \"iii\"\n                number -= 3\n            elif number >= 2:\n                result += \"ii\"\n                number -= 2\n            else:\n                result += \"i\"\n                number -= 1\n    return result.lower()\n"}
{"task_id": "HumanEval/156", "completion": "function int_to_mini_roman(num)\n    if num >= 1000\n        roman = \"m\" + int_to_mini_roman(num - 1000)\n    else if num >= 900\n        roman = \"cm\" + int_to_mini_roman(num - 900)\n    else if num >= 500\n        roman = \"d\" + int_to_mini_roman(num - 500)\n    else if num >= 400\n        roman = \"cd\" + int_to_mini_roman(num - 400)\n    else if num >= 100\n        if num % 100 >= 90\n            roman = \"xc\" + int_to_mini_roman(num - 90)\n        else if num % 100 >= 50\n            roman = \"l\" + int_to_mini_roman(num % 100)\n        else\n            roman = roman_numeral_map[num % 100]\n    else if num >= 40\n        roman = \"xl\" + int_to_mini_roman(num - 40)\n    else if num >= 30\n        roman = \"xxx\" + int_to_mini_roman(num - 30)\n    else if num >= 20\n        roman = \"xx\" + int_to_mini_roman(num - 20)\n    else if num >= 10\n        if num % 10 >= 9\n            roman = \"ix\" + int_to_mini_roman(num - 9)\n        else if num % 10 >= 5\n            roman = \"v\" + int_to_mini_roman(num % 10)\n        else\n            roman = roman_numeral_map[num % 10]\n    else if num >= 4\n        roman = \"iv\" + int_to_mini_roman(num - 4)\n    else if num >= 3\n        roman = \"iii\" + int_to_mini_roman(num - 3)\n    else if num >= 2\n        roman = \"ii\" + int_to_mini_roman(num - 2)\n    else\n        roman = \"i\"\n    \n    return tolower(roman)\n"}
{"task_id": "HumanEval/156", "completion": "\nfunction int_to_mini_roman(number):\n    roman_numerals = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n                     (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n                     (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    result = ''\n    i = 0\n    while number > 0:\n        for value, symbol in roman_numerals:\n            while number >= value:\n                result += symbol\n                number -= value\n        i += 1\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "\nprocedure right_angle_triangle(a, b, c)\n    if (a * a + b * b == c * c) or (a * a + c * c == b * b) or (b * b + c * c == a * a) then\n        return true\n    else\n        return false\n    end if\nend procedure\n"}
{"task_id": "HumanEval/157", "completion": "\nfunction right_angle_triangle(a, b, c)\n    if a > b and a > c then\n        let side_a = a\n        let side_b = b\n        let side_c = c\n    else if b > a and b > c then\n        let side_a = b\n        let side_c = a\n        let side_b = c\n    else\n        let side_a = c\n        let side_b = a\n        let side_c = b\n    end if\n    if (side_a^2 == side_b^2 + side_c^2) or (side_b^2 == side_a^2 + side_c^2) or (side_c^2 == side_a^2 + side_b^2) then\n        return true\n    else\n        return false\n    end if\nend function\n"}
{"task_id": "HumanEval/157", "completion": "\nfunction right_angle_triangle(a, b, c)\n    if (a * a + b * b = c * c) or (a * a + c * c = b * b) or (b * b + c * c = a * a)\n        return True\n    else\n        return False\n"}
{"task_id": "HumanEval/157", "completion": "\nfunction right_angle_triangle(a, b, c)\n    if a > b and a > c then\n        if (b^2 + c^2) == a^2 then\n            return true\n        else\n            return false\n    elif b > a and b > c then\n        if (a^2 + c^2) == b^2 then\n            return true\n        else\n            return false\n    elif c > a and c > b then\n        if (a^2 + b^2) == c^2 then\n            return true\n        else\n            return false\n    else\n        return false\n"}
{"task_id": "HumanEval/157", "completion": "\nalgorithm right_angle_triangle(a, b, c)\n    if (a > b and a > c) then\n        let x = a^2\n        let y = b^2\n        let z = c^2\n        if (x == y + z) or (y == x + z) or (z == x + y) then\n            return True\n        else\n            return False\n    else if (b > a and b > c) then\n        let x = b^2\n        let y = a^2\n        let z = c^2\n        if (x == y + z) or (y == x + z) or (z == x + y) then\n            return True\n        else\n            return False\n    else if (c > a and c > b) then\n        let x = c^2\n        let y = a^2\n        let z = b^2\n        if (x == y + z) or (y == x + z) or (z == x + y) then\n            return True\n    else\n        return False\n"}
{"task_id": "HumanEval/157", "completion": "function right_angle_triangle(a, b, c)\n    if a^2 + b^2 = c^2 then\n        return True\n    else\n        return False\n"}
{"task_id": "HumanEval/157", "completion": "\nFUNCTION right_angle_triangle(a, b, c)\n   IF (a^2 + b^2 = c^2) THEN\n      RETURN TRUE\n   ELSE\n      RETURN FALSE\n"}
{"task_id": "HumanEval/157", "completion": "function right_angle_triangle(a, b, c)\n    if a^2 + b^2 = c^2 then\n        return true\n    else\n        return false\n"}
{"task_id": "HumanEval/157", "completion": "\nalgorithm right_angle_triangle(a, b, c):\n    if a > 0 and b > 0 and c > 0 then\n        # calculate the squares of the sides\n        square_a = a * a\n        square_b = b * b\n        square_c = c * c\n        \n        # check if the sum of the squares of the two smaller sides equals the square of the largest side\n        if (square_a + square_b) == square_c or (square_a + square_c) == square_b or (square_b + square_c) == square_a then\n            return True\n        else\n            return False\n    else\n        return False\n"}
{"task_id": "HumanEval/157", "completion": "\nfunction right_angle_triangle(a, b, c)\n    if (a^2 + b^2 = c^2) or (a^2 + c^2 = b^2) or (b^2 + c^2 = a^2)\n        return true\n    else\n        return false\n"}
{"task_id": "HumanEval/158", "completion": ""}
{"task_id": "HumanEval/158", "completion": "\nfunction find_max(words)\n    max_length = 0\n    max_word = \"\"\n    \n    for word in words:\n        char_set = set(word)\n        if len(char_set) > max_length:\n            max_length = len(char_set)\n            max_word = word\n        elif len(char_set) == max_length:\n            if word < max_word:\n                max_word = word\n                \n    return max_word\n"}
{"task_id": "HumanEval/158", "completion": "\nfunction find_max(words) is\n    max_length = 0\n    max_word = \"\"\n    for each word in words do\n        set unique_chars to set of unique characters in word\n        if length of unique_chars > max_length then\n            max_length = length of unique_chars\n            max_word = word\n        elif length of unique_chars = max_length then\n            if word < max_word then\n                max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/158", "completion": "function find_max(words)\n    max_word = None\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n                \n    return max_wor"}
{"task_id": "HumanEval/158", "completion": "\nfunction find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(unique_chars)\n        elif len(unique_chars) == max_unique_chars:\n            if word < max_word:\n                max_word = word\n    \n    return max_word\n"}
{"task_id": "HumanEval/158", "completion": "\nfunction find_max(words)\n  max_chars = 0\n  max_word = \"\"\n  for each word in words:\n    word_chars = set(word)\n    if len(word_chars) > max_chars:\n      max_chars = len(word_chars)\n      max_word = word\n    elif len(word_chars) == max_chars:\n      if word < max_word:\n        max_word = word\n  return max_word\n"}
{"task_id": "HumanEval/158", "completion": "ALGORITHM\n  INPUT: A list of strings\n  VARIABLES:\n    max_word = None\n    max_unique_chars = 0\n  FOR each word in the list:\n    IF the word has more unique characters than max_unique_chars:\n      max_word = word\n      max_unique_chars = count unique characters in word\n  IF max_word is still None:\n    return \"\"\n  ELSE:\n    return max_word\n"}
{"task_id": "HumanEval/158", "completion": "function find_max(words)\n    max_word = None\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_word = word\n            max_unique_chars = unique_chars\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word\n"}
{"task_id": "HumanEval/158", "completion": "function find_max(words)\n    max_len = 0\n    result = \"\"\n    for word in words:\n        set_word = set(word)\n        len_word = len(set_word)\n        if len_word > max_len:\n            max_len = len_word\n            result = word\n        elif len_word == max_len and word < result:\n            result = word\n    return result\n"}
{"task_id": "HumanEval/158", "completion": "function find_max(words):\n    max_chars = 0\n    max_word = \"\"\n    for word in words:\n        char_set = set(word)\n        if len(char_set) > max_chars:\n            max_chars = len(char_set)\n            max_word = word\n        elif len(char_set) == max_chars:\n            if word < max_word:\n                max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\nALGORITHM: EAT\n\nDATA:\n    number: the number of carrots that you have eaten.\n    need: the number of carrots that you need to eat.\n    remaining: the number of remaining carrots that exist in stock.\n\nBEGIN\n    eaten_carrots = number + min(need, remaining)\n    leftover_carrots = remaining - (need - eaten_carrots)\n\n    RETURN [eaten_carrots, leftover_carrots"}
{"task_id": "HumanEval/159", "completion": "define function eat(number, need, remaining)\n    if number >= need\n        return [number + need, 0]\n    else\n        if remaining >= need - number\n            return [number + remaining, 0]\n        else\n            return [number + remaining, remaining - (need - number)]\n"}
{"task_id": "HumanEval/159", "completion": "\nalgorithm eat(number, need, remaining)\n    eaten = number + need\n    if eaten > remaining then\n        eaten = remaining\n    end if\n    leftover = remaining - eaten\n    return [eaten, leftover]\nend algorith"}
{"task_id": "HumanEval/159", "completion": "FUNCTION eat(number, need, remaining)\n    IF need > remaining THEN\n        eaten = number + remaining\n        leftover = 0\n    ELSE\n        eaten = number + need\n        leftover = remaining - (need - number)\n    END IF\n    RETURN [eaten, leftover]\nEND FUNCTIO"}
{"task_id": "HumanEval/159", "completion": "\nfunction eat(number, need, remaining):\n    eaten = number + (remaining if remaining >= need - number else need - number)\n    left = remaining - (eaten - number)\n    return [eaten, left]\n"}
{"task_id": "HumanEval/159", "completion": "ALGORITHM: eat\n    DECLARE: eaten, left\n    eaten = number + (remaining - (remaining % (need - number)))\n    left = remaining - ((remaining - (remaining % (need - number))) % (need - number))\n    RETURN [eaten, left]\n"}
{"task_id": "HumanEval/159", "completion": "\nFUNCTION eat(number, need, remaining)\n    IF need > remaining THEN\n        eaten = remaining + number\n        leftover = 0\n    ELSE\n        eaten = number + need\n        leftover = remaining - (need - number)\n    END IF\n    RETURN [eaten, leftover]\nEND FUNCTION\n"}
{"task_id": "HumanEval/159", "completion": "\nALGORITHM eat(number, need, remaining)\n    IF need > remaining THEN\n        total_eaten = number + remaining\n        remaining = 0\n    ELSE\n        total_eaten = number + need\n        remaining = remaining - need\n    END IF\n    RETURN [total_eaten, remaining]\nEND ALGORITHM\n"}
{"task_id": "HumanEval/159", "completion": "\nfunction eat(number, need, remaining):\n  if (need > remaining):\n    eaten = remaining\n    left = 0\n  else:\n    eaten = number + need\n    left = remaining - need\n\n  return [eaten, left]\n"}
{"task_id": "HumanEval/159", "completion": "\nalgorithms:\n    result = [number, remaining]\n    eaten = need - number\n    if eaten > remaining:\n        result[1] = 0\n        result[0] = need\n    else:\n        result[0] = need\n        result[1] = remaining - eaten\n    return result\n"}
{"task_id": "HumanEval/160", "completion": "\nproc do_algebra(operator, operand):\n    if length(operand) < 2 then\n        error \"operand list should have at least two elements\"\n    end if\n\n    expr = operand[0]\n    for i from 1 to length(operand) - 1 do\n        expr = eval(str(expr) + operator[i] + str(operand[i+1]))\n    end for\n    return expr\n"}
{"task_id": "HumanEval/160", "completion": "proc do_algebra(operator, operand):\n    if length(operand) < 2:\n        error \"operand list must have at least two elements\"\n    if length(operator) != length(operand) - 1:\n        error \"operator list must be one less than operand list\"\n\n    temp = operand[0]\n    for i from 1 to length(operand) - 1:\n        if operator[i-1] == \"+\":\n            temp = temp + operand[i]\n        elif operator[i-1] == \"-\":\n            temp = temp - operand[i]\n        elif operator[i-1] == \"*\":\n            temp = temp * operand[i]\n        elif operator[i-1] == \"//\":\n            temp = temp // operand[i]\n        elif operator[i-1] == \"**\":\n            temp = temp ** operand[i]\n\n    return temp\n"}
{"task_id": "HumanEval/160", "completion": "\nfunction do_algebra(operator, operand):\n    stack = []\n    for i from 0 to length(operand) - 1:\n        if i < length(operand) - 1:\n            stack.append(operand[i])\n        else:\n            continue\n        while length(stack) >= 2:\n            right = pop(stack)\n            left = pop(stack)\n            op = pop(stack)\n            if op == \"+\":\n                push(left + right)\n            elif op == \"-\":\n                push(left - right)\n            elif op == \"*\":\n                push(left * right)\n            elif op == \"//\":\n                push(left // right)\n            elif op == \"**\":\n                push(left ** right)\n        push(operand[i])\n    return pop(stack"}
{"task_id": "HumanEval/160", "completion": "\nfunction do_algebra(operator, operand)\n    if length(operator) != length(operand) - 1\n        error \"Invalid input\"\n    end if\n\n    result = operand[0]\n    for i = 1 to length(operator)\n        if operator[i] == \"+\"\n            result = result + operand[i]\n        else if operator[i] == \"-\"\n            result = result - operand[i]\n        else if operator[i] == \"*\"\n            result = result * operand[i]\n        else if operator[i] == \"//\"\n            result = result // operand[i]\n        else if operator[i] == \"**\"\n            result = result ** operand[i]\n    end for\n    return result\n"}
{"task_id": "HumanEval/160", "completion": "\nfunction do_algebra(operator, operand)\n    expression := \"\"\n    for i from 0 to length(operand) - 1\n        if i < length(operand) - 1 then\n            expression := expression + str(operand[i]) + operator[i] + \" \"\n        else\n            expression := expression + str(operand[i])\n    end for\n    return eval(expression)\nend function\n"}
{"task_id": "HumanEval/160", "completion": "function do_algebra(operator, operand)\n    expression = \"\"\n    for i from 0 to len(operator) - 1\n        if i == 0\n            expression = expression + str(operand[0])\n        elif i == len(operator) - 1\n            expression = expression + str(operand[i + 1])\n        else\n            expression = expression + str(operand[i]) + operator[i]\n    result = eval(expression)\n    return result\n"}
{"task_id": "HumanEval/160", "completion": "\nfunction do_algebra(operator, operand)\n    if length of operator list is not equal to length of operand list minus one then\n        error \"Invalid input\"\n    end if\n\n    expression = \"\"\n    for i from 0 to length of operator list - 1\n        expression = expression + str(operand[i])\n        expression = expression + operator[i]\n    end for\n\n    expression = expression + str(operand[length of operator list])\n\n    result = eval(expression)\n\n    return resul"}
{"task_id": "HumanEval/160", "completion": "ALGORITHM:\n\nINITIALIZE variable result = 0\nINITIALIZE variable prev_operand = 0\n\nFOR each operation in operator list\n    IF current operation is '+'\n        result = result + current operand\n    ELSE IF current operation is '-'\n        result = result - current operand\n    ELSE IF current operation is '*'\n        result = result * current operand\n    ELSE IF current operation is '//' or '**'\n        prev_operand = result\n        result = result // current operand or result ** current operand\n    END IF\n\nNEXT operation\n\nRETURN result\n"}
{"task_id": "HumanEval/160", "completion": "\nfunction do_algebra(operator, operand)\n    result = operand[0]\n    for i from 1 to length(operand) - 1\n        if i < length(operand) - 1\n            if operator[i] == '+'\n                result = result + operand[i + 1]\n            else if operator[i] == '-'\n                result = result - operand[i + 1]\n            else if operator[i] == '*'\n                result = result * operand[i + 1]\n            else if operator[i] == '//'\n                result = result // operand[i + 1]\n            else if operator[i] == '**'\n                result = result ** operand[i + 1]\n        else\n            if operator[i] == '+'\n                return result + operand[i]\n            else if operator[i] == '-'\n                return result - operand[i]\n            else if operator[i] == '*'\n                return result * operand[i]\n            else if operator[i] == '//'\n                return result // operand[i]\n            else if operator[i] == '**'\n                return result ** operand[i]\n    return result\n"}
{"task_id": "HumanEval/160", "completion": "function do_algebra(operator, operand)\n    result = operand[0]\n    for i from 1 to length(operand) - 1\n        if i < length(operand) - 1\n            if operator[i] == '+'\n                result = result + operand[i + 1]\n            elif operator[i] == '-'\n                result = result - operand[i + 1]\n            elif operator[i] == '*'\n                result = result * operand[i + 1]\n            elif operator[i] == '//'\n                result = result // operand[i + 1]\n            elif operator[i] == '**'\n                result = result ** operand[i + 1]\n        else\n            if operator[i] == '+'\n                result = result + operand[i]\n            elif operator[i] == '-'\n                result = result - operand[i]\n            elif operator[i] == '*'\n                result = result * operand[i]\n            elif operator[i] == '//'\n                result = result // operand[i]\n            elif operator[i] == '**'\n                result = result ** operand[i]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "function solve(s)\n    result = \"\"\n    for each character c in s\n        if c is a letter\n            if c is in lowercase then\n                append uppercase(c) to result\n            else\n                append lowercase(c) to result\n        else\n            append c to result\n    if s contains no letters then\n        reverse(result)\n    return resul"}
{"task_id": "HumanEval/161", "completion": "result = \"\"\nreversed = False\nfor char in s:\n    if char.isalpha():\n        result += char.swapcase()\n        reversed = not reversed\n    else:\n        result += char\nif not any(c.isalpha() for c in s):\n    result = result[::-1]\nreturn result\n"}
{"task_id": "HumanEval/161", "completion": "function solve(s)\n    result = \"\"\n    flag = false\n    for each char c in s\n        if c is a letter\n            if flag then\n                result = result + uppercase(c)\n            else\n                result = result + lowercase(c)\n            flag = not flag\n        else\n            result = result + c\n    if flag then\n        reverse(result)\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "function solve(s)\n    result = \"\"\n    for i from 0 to length(s) - 1\n        c = s[i]\n        if c is lowercase letter\n            result += uppercase(c)\n        elseif c is uppercase letter\n            result += lowercase(c)\n        else\n            result += c\n    if length(result) is 0 or not contains any letter in result\n        return reverse(result)\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\nfunction solve(s)\n    result = \"\"\n    for each char c in s\n        if c is a letter\n            if c is lowercase then\n                result += uppercase(c)\n            else\n                result += lowercase(c)\n        else\n            result += c\n    if no letters in s\n        result = reverse(result)\n    return resul"}
{"task_id": "HumanEval/161", "completion": "\nfunction solve(s)\n    result = \"\"\n    for each char c in s\n        if c is a letter then\n            if c is lower case then\n                result = result + chr(ord(c) - 32)\n            else\n                result = result + chr(ord(c) + 32)\n        else\n            result = result + c\n    end if\n    if length(result) is even then\n        return reverse(result)\n    else\n        return result\n    end if\nend function\n"}
{"task_id": "HumanEval/161", "completion": "\nfunction solve(s):\n    result = \"\"\n    for i from 0 to length(s) - 1:\n        if s[i] is a letter:\n            if s[i] is lowercase:\n                result += chr(ord(s[i]) - 32)\n            else:\n                result += chr(ord(s[i]) + 32)\n        else:\n            result += s[i]\n    if not any(c is a letter in result):\n        result = reverse(result)\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\nfunction solve(s):\n    result = \"\"\n    for i from 0 to length(s)-1:\n        if s[i] is a letter:\n            if s[i] is in lowercase:\n                result += chr(ord(s[i]) - 32)\n            else:\n                result += chr(ord(s[i]) + 32)\n        else:\n            result += s[i]\n    if not any(c is a letter in s):\n        result = reverse(result)\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "FUNCTION solve(s)\n    result = \"\"\n    flag = FALSE\n    FOR i = 0 TO s.length - 1\n        IF (s[i] >= 'a' AND s[i] <= 'z') OR (s[i] >= 'A' AND s[i] <= 'Z')\n            flag = NOT flag\n            IF flag\n                result += CHR(ORD(s[i]) - 32)\n            ELSE\n                result += CHR(ORD(s[i]) + 32)\n        ELSE\n            result += s[i]\n    END IF\n    RETURN result\n"}
{"task_id": "HumanEval/161", "completion": "function solve(s)\n    result = \"\"\n    for each char c in s\n        if c is a letter\n            if c is lower case then\n                result += chr(ord(c) - 32)\n            else\n                result += chr(ord(c) + 32)\n        else\n            result += c\n    if not any(char in 'abcdefghijklmnopqrstuvwxyz' for char in s)\n        reverse(result)\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\nfunction string_to_md5(text)\n    if text is empty then\n        return null\n    else\n        import hashlib\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode('utf-8'))\n        return md5_hash.hexdigest()\n    end if\n"}
{"task_id": "HumanEval/162", "completion": "\nfunction string_to_md5(text)\n    if text is \"\"\n        return None\n    else\n        import hashlib\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode('utf-8'))\n        return md5_hash.hexdigest()\n"}
{"task_id": "HumanEval/162", "completion": "\nfunction string_to_md5(text)\n    if text is \"\"\n        return null\n    else\n        return hash(text with MD5)\n    end if\n"}
{"task_id": "HumanEval/162", "completion": "\nPROCEDURE string_to_md5(text)\n    IF text IS EMPTY THEN\n        RETURN NULL\n    END IF\n    SET md5_hash = MD5 HASH OF text\n    RETURN md5_hash\nEND PROCEDURE\n"}
{"task_id": "HumanEval/162", "completion": "\nfunction string_to_md5(text)\n  if text is empty\n    return null\n  else\n    return md5(text)\n"}
{"task_id": "HumanEval/162", "completion": "function string_to_md5(text)\n    if text is \"\"\n        return None\n    else\n        import hashlib\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode())\n        return md5_hash.hexdigest()\n"}
{"task_id": "HumanEval/162", "completion": "\nfunction string_to_md5(text)\n    if text is empty then\n        return None\n    else\n        import hashlib\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode())\n        return md5_hash.hexdigest()\n    end if\nend function\n"}
{"task_id": "HumanEval/162", "completion": "\nfunction string_to_md5(text)\n    if text is \"\"\n        return None\n    else\n        import hashlib\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode())\n        return md5_hash.hexdigest()\n"}
{"task_id": "HumanEval/162", "completion": "\nfunction string_to_md5(text)\n    if text is \"\"\n        return null\n    else\n        import hashlib\n        md5_hash = hashlib.md5()\n        md5_hash.update(text.encode(\"utf-8\"))\n        return md5_hash.hexdigest()\n"}
{"task_id": "HumanEval/162", "completion": "if text is empty then\n    return null\nend if\n\nhash = create a new MD5 hash object\n\nupdate the hash with the input text\n\nreturn the hexadecimal representation of the has"}
{"task_id": "HumanEval/163", "completion": "\nfunction generate_integers(a, b)\n    if a > b then\n        swap(a, b)\n    end\n    result = []\n    for i from a to b do\n        while i > 0 do\n            if remainder(i, 2) == 0 then\n                append result with i mod 10\n            end\n            i = floor(i / 10)\n        end\n    end\n    sort result in ascending order\n    return result\n"}
{"task_id": "HumanEval/163", "completion": "\nfunction generate_integers(a, b)\n    if a > b then\n        swap a and b\n    end if\n\n    result = []\n\n    for i from a to b\n        str_i = string(i)\n        for each char c in str_i\n            if integer(c) mod 2 == 0 then\n                add integer(c) to result\n            end if\n        end for\n\n    return result\n"}
{"task_id": "HumanEval/163", "completion": "\nfunction generate_integers(a, b)\n    if a > b then\n        swap a and b\n    end if\n    \n    result = []\n    for each digit from a to b\n        if digit is even\n            add digit to result\n        end if\n    end for\n    \n    return result\n"}
{"task_id": "HumanEval/163", "completion": "function generate_integers(a, b)\n    if a > b then\n        temp = a\n        a = b\n        b = temp\n    result = []\n    for i from a to b\n        while i >= 10\n            last_digit = i mod 10\n            if last_digit is even\n                result.append(i)\n            i = floor(i / 10)\n        if i is even\n            result.append(i)\n    return result\n"}
{"task_id": "HumanEval/163", "completion": "\nfunction generate_integers(a, b)\n    if a > b then\n        swap a and b\n    result = []\n    for i from a to b\n        if i mod 2 == 0 then\n            result.append(i)\n    return resul"}
{"task_id": "HumanEval/163", "completion": "\nfunction generate_integers(a, b)\n    if a > b then\n        swap a and b\n    end if\n\n    result = []\n    while a <= b do\n        if is_even(a) then\n            append a to result\n        end if\n        increment a\n    end while\n\n    return result\nend function\n\nfunction is_even(n)\n    if n mod 2 == 0 then\n        return true\n    else\n        return false\n    end if\nend function\n"}
{"task_id": "HumanEval/163", "completion": "function generate_integers(a, b)\n    if a > b then\n        temp = a\n        a = b\n        b = temp\n    list = []\n    for i from a to b\n        string = str(i)\n        for j from 0 to length(string) - 1\n            if substring(j + 1, j + 1) % 2 == 0 then\n                list.append(int(substring(j + 1, j + 1)))\n    return list\n"}
{"task_id": "HumanEval/163", "completion": "function generate_integers(a, b)\n    if a > b\n        swap a and b\n    result = []\n    for i from a to b\n        if i mod 2 = 0\n            append i to result\n    return result\n"}
{"task_id": "HumanEval/163", "completion": "\nfunction generate_integers(a, b)\n    if a > b then\n        swap a and b\n    end if\n\n    result = []\n\n    for i from a to b\n        integerStr = str(i)\n        isEven = true\n        for j from 0 to length(integerStr) - 1\n            if integerStr[j] mod 2 != 0 then\n                isEven = false\n                break\n            end if\n        end for\n        if isEven then\n            result.append(i)\n        end if\n    end for\n\n    return result\n"}
{"task_id": "HumanEval/163", "completion": "\nalgorithm generate_integers(a, b)\n    if a > b then\n        swap(a, b)\n    result = []\n    for i from a to b\n        digit_sum = 0\n        temp = i\n        while temp > 0\n            digit_sum = digit_sum + temp mod 10\n            temp = temp / 10\n        if digit_sum mod 2 == 0 then\n            result.append(i)\n    return result\nend algorith"}
