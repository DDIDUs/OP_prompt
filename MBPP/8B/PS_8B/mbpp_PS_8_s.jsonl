{"task_id": "Mbpp/2", "completion": "\nfunction similar_elements(list1, list2):\n    set1 = set([i for i in list1])\n    set2 = set([i for i in list2])\n    return set1 & set2\n"}
{"task_id": "Mbpp/2", "completion": "FUNCTION similar_elements(test_tup1, test_tup2)\n    SET shared_elements = {}\n    FOR EACH element IN test_tup1\n        IF element IN test_tup2\n            ADD element TO shared_elements\n    RETURN set(shared_elements"}
{"task_id": "Mbpp/2", "completion": "function similar_elements(test_tup1, test_tup2)\n    return set(test_tup1) & set(test_tup2)\n"}
{"task_id": "Mbpp/2", "completion": "Function similar_elements(test_tup1, test_tup2):\n    set1 = Set(test_tup1)\n    set2 = Set(test_tup2)\n    return set1 Intersection set"}
{"task_id": "Mbpp/2", "completion": "function similar_elements(test_tup1, test_tup2)\n    set1 = convert_to_set(test_tup1)\n    set2 = convert_to_set(test_tup2)\n    return set1.intersection(set2)\n\nfunction convert_to_set(input_list)\n    result = {}\n    for element in input_list:\n        if element not in result:\n            result[element] = True\n    return set(result.keys())\n"}
{"task_id": "Mbpp/2", "completion": "\nfunction similar_elements(test_tup1, test_tup2)\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    result = set1.intersection(set2)\n    return result\n"}
{"task_id": "Mbpp/2", "completion": "function similar_elements(test_tup1, test_tup2)\n    # Convert tuples into sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the sets (common elements)\n    result = set1.intersection(set2)\n\n    return resul"}
{"task_id": "Mbpp/2", "completion": "function similar_elements(test_tup1, test_tup2)\n    result = {}\n    for element in test_tup1:\n        if element in test_tup2 and element not in result:\n            result.add(element)\n    return set(result)\n"}
{"task_id": "Mbpp/2", "completion": "function similar_elements(test_tup1, test_tup2)\n    return set(test_tup1).intersection(set(test_tup2)"}
{"task_id": "Mbpp/2", "completion": "function similar_elements(test_tup1, test_tup2)\n    list1 = []\n    list2 = []\n    \n    for element in test_tup1:\n        list1.append(element)\n        \n    for element in test_tup2:\n        list2.append(element)\n        \n    common_elements = set(list1) & set(list2)\n    return common_elements\n"}
{"task_id": "Mbpp/3", "completion": ""}
{"task_id": "Mbpp/3", "completion": "\nfunction is_not_prime(n):\n  if n <= 1:\n    return True\n  elif n <= 3:\n    return False\n  else:\n    for i from 2 to sqrt(n):\n      if n mod i is 0:\n        return True\n    return False\n"}
{"task_id": "Mbpp/3", "completion": "\nfunction is_not_prime(n):\n    if n <= 1:\n        return True\n    for i from 2 to sqrt(n):\n        if n % i == 0:\n            return True\n    return Fals"}
{"task_id": "Mbpp/3", "completion": ""}
{"task_id": "Mbpp/3", "completion": "\nfunction is_not_prime(n):\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i from 2 to sqrt(n):\n            if n mod i == 0:\n                return True\n        return Fals"}
{"task_id": "Mbpp/3", "completion": ""}
{"task_id": "Mbpp/3", "completion": "function is_not_prime(n):\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i = i + 6\n    return False\n"}
{"task_id": "Mbpp/3", "completion": ""}
{"task_id": "Mbpp/3", "completion": "function is_not_prime(n)\n    if n <= 1 then\n        return True\n    else\n        for i from 2 to sqrt(n) do\n            if n mod i is equal to 0 then\n                return True\n            end if\n        end for\n        return False\n"}
{"task_id": "Mbpp/3", "completion": ""}
{"task_id": "Mbpp/4", "completion": "function heap_queue_largest(nums, n):\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, -num)\n        else:\n            if -num > max_heap[0]:\n                hq.heappop(max_heap)\n                hq.heappush(max_heap, -num)\n    result = []\n    while max_heap:\n        result.append(-hq.heappop(max_heap))\n    return resul"}
{"task_id": "Mbpp/4", "completion": "\nfunction heap_queue_largest(nums, n):\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, -num)\n        elif -max_heap[0] < num:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, -num)\n    return [-x for x in reversed(max_heap)"}
{"task_id": "Mbpp/4", "completion": "function heap_queue_largest(nums, n):\n    # Create a max heap\n    max_heap = []\n\n    # Push the first n elements into the heap\n    for i in range(n):\n        heapq.heappush(max_heap, -nums[i])\n\n    # Iterate through the rest of the array\n    for i in range(n, len(nums)):\n        # If the current number is larger than the root of the heap (which is the smallest element in the heap)\n        if nums[i] > -max_heap[0]:\n            # Replace the root with the current number\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -nums[i])\n\n    # Convert the max heap to a list and return it\n    return [-x for x in max_heap"}
{"task_id": "Mbpp/4", "completion": "\nheap = []\nfor num in nums:\n    heapq.heappush(heap, -num)\nfor _ in range(n):\n    result.append(-heapq.heappop(heap))\nreturn result\n"}
{"task_id": "Mbpp/4", "completion": "\nfunction heap_queue_largest(input_list, num_largest):\n    # Create an empty heap\n    heap = []\n\n    # Push all elements from the input list into the heap\n    for num in input_list:\n        if len(heap) < num_largest:\n            heapq.heappush(heap, num)\n        else:\n            heapq.heappushpop(heap, num)\n\n    # Pop and return the top n elements from the heap\n    result = []\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n\n    return result[::-1"}
{"task_id": "Mbpp/4", "completion": ""}
{"task_id": "Mbpp/4", "completion": "heap = []\nfor num in nums:\n    if len(heap) < n:\n        hq.heappush(heap, -num)\n    else:\n        if num > -heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, -num)\nheap = [-i for i in heap]\nreturn [i for i in sorted(heap, reverse=True)"}
{"task_id": "Mbpp/4", "completion": "\nfunction heap_queue_largest(input_list, n):\n    max_heap = []\n    for num in input_list:\n        hq.heappush(max_heap, (-num, num))  # negate each number to make it a max heap\n    largest_n = []\n    for _ in range(n):\n        largest_n.append(hq.heappop(max_heap)[1])  # extract and append the largest number, then negate it back\n    return largest_n\n"}
{"task_id": "Mbpp/4", "completion": "\nfunction heap_queue_largest(nums, n):\n    nums = []\n    for num in reversed(sorted(nums)):\n        hq.heappush(nums, -num)\n    result = []\n    for _ in range(n):\n        result.append(-hq.heappop(nums))\n    return resul"}
{"task_id": "Mbpp/4", "completion": "\nfunction heap_queue_largest(nums: list, n: int) -> list:\n    # Create an empty max heap\n    max_heap = []\n    \n    # Iterate over each number in the input list\n    for num in nums:\n        # Push the negative of the number into the heap\n        # This is because Python's heapq is a min heap and we want a max heap\n        hq.heappush(max_heap, -num)\n        \n        # If the heap size exceeds 'n', pop the smallest element (which is the maximum in a max heap)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    \n    # Extract the 'n' largest elements from the heap in descending order\n    largest_nums = []\n    while max_heap:\n        largest_nums.append(-hq.heappop(max_heap))\n    \n    # Reverse the list to get the correct order\n    largest_nums.reverse()\n    \n    return largest_nums\n"}
{"task_id": "Mbpp/6", "completion": "\ndef differ_At_One_Bit_Pos(a: int, b: int):\n    # Convert both integers into binary and find the length of each\n    len_a = len(bin(a)[2:])\n    len_b = len(bin(b)[2:])\n    \n    # Make both lengths equal by padding with zeros from left\n    if len_a < len_b:\n        a = (0 * '0' + bin(a)[2:])\n    elif len_b < len_a:\n        b = (0 * '0' + bin(b)[2:])\n    \n    # Compare the binary strings character by character\n    for i in range(len_a):\n        if a[i] != b[i]:\n            # If difference found, check if it's the only difference\n            if i+1 == len_a or i == 0 or a[i+1] == b[i+1]:\n                return True\n    return Fals"}
{"task_id": "Mbpp/6", "completion": "\nfunction result = differ_At_One_Bit_Pos(a, b)\n    temp_a = a ^ b\n    while temp_a > 0:\n        if (temp_a & 1) == 0 then\n            return False\n        temp_a = temp_a >> 1\n    return True\n"}
{"task_id": "Mbpp/6", "completion": "\nfunction differ_At_One_Bit_Pos(a: int, b: int):\n    while a != b:\n        if a == 0:\n            return False\n        x = a & (a - 1)\n        a = a ^ x\n    return True\n"}
{"task_id": "Mbpp/6", "completion": "function differ_At_One_Bit_Pos(a: int, b: int):\n    while a != b:\n        if (a & 1) != (b & 1):\n            return False\n        a = a >> 1\n        b = b >> 1\n    return Tru"}
{"task_id": "Mbpp/6", "completion": "\nfunction differ_At_One_Bit_Pos(a: int, b: int):\n    while a != b:\n        a = a ^ b\n        if is_Power_Of_Two(a):\n            return True\n        b = a\n    return Fals"}
{"task_id": "Mbpp/6", "completion": "function differ_At_One_Bit_Pos(a: int, b: int):\n    while a != b:\n        if (a ^ b) % 2 == 0:\n            return False\n        a = a >> 1\n        b = b >> 1\n    return Tru"}
{"task_id": "Mbpp/6", "completion": ""}
{"task_id": "Mbpp/6", "completion": ""}
{"task_id": "Mbpp/6", "completion": "function differ_At_One_Bit_Pos(a: int, b: int):\n    if is_Power_Of_Two(a ^ b):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/6", "completion": "function differ_At_One_Bit_Pos(a: int, b: int):\n    x = a ^ b  # Calculate XOR of a and b\n    while x != 0:\n        if (x & (x - 1)) != 0:  # Check if there is more than one bit set\n            return False\n        x = x >> 1  # Right shift by 1\n    return True\n"}
{"task_id": "Mbpp/7", "completion": "\nfunction find_char_long(text):\n    # split text into words\n    words = text.split()\n    result = []\n    \n    for word in words:\n        # check if word length is at least 4\n        if len(word) >= 4:\n            result.append(word)\n    \n    return set(result"}
{"task_id": "Mbpp/7", "completion": "function find_char_long(text)\n    word_list = []\n    for word in text.split():\n        if len(word) >= 4:\n            word_list.append(word)\n    return set(word_list"}
{"task_id": "Mbpp/7", "completion": "function find_char_long(text):\n    words = text.split()\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return set(result"}
{"task_id": "Mbpp/7", "completion": "function find_char_long(text)\n    result = []\n    words = text.split()\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return set(result)\n"}
{"task_id": "Mbpp/7", "completion": ""}
{"task_id": "Mbpp/7", "completion": "\nfunction find_char_long(text)\n    words = split(text, ' ')\n    result = {}\n    for word in words:\n        if length(word) >= 4:\n            result.add(word)\n    return set(result"}
{"task_id": "Mbpp/7", "completion": "function find_char_long(text):\n    words = text.split()\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return set(result"}
{"task_id": "Mbpp/7", "completion": "function find_char_long(text):\n    words = re.split(' ', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return set(result"}
{"task_id": "Mbpp/7", "completion": "\nfunction find_char_long(text):\n    words = text.split()\n    result = set()\n    for word in words:\n        if len(word) >= 4:\n            result.add(word)\n    return result\n"}
{"task_id": "Mbpp/7", "completion": "function find_char_long(text)\n    words = split(text, ' ')\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return set(result"}
{"task_id": "Mbpp/8", "completion": "data = input_list\noutput_list = []\nfor num in data:\n    output_list.append(num * num)\nreturn output_lis"}
{"task_id": "Mbpp/8", "completion": "\nfunction square_nums(list nums)\n    result = new list\n    for each num in nums\n        result.append(num * num)\n    return result\n"}
{"task_id": "Mbpp/8", "completion": "function square_nums(nums)\n    result = []\n    for num in nums\n        result.append(num * num)\n    return resul"}
{"task_id": "Mbpp/8", "completion": "DATA square_nums_input : LIST OF NUMBER\n    input square_nums_input\n    FOR EACH num IN square_nums_input\n        SQUARE num AS result\n        OUTPUT result\n"}
{"task_id": "Mbpp/8", "completion": "function square_nums(input_list)\n    output_list = []\n    for num in input_list:\n        output_list.append(num * num)\n    return output_list\n"}
{"task_id": "Mbpp/8", "completion": "data = input_list\noutput_list = []\nfor each in data:\n    output_list.append(each ** 2)\n"}
{"task_id": "Mbpp/8", "completion": "\nfunction square_nums(nums):\n    result = []\n    for num in nums:\n        result.append(num * num)\n    return result\n"}
{"task_id": "Mbpp/8", "completion": "data = []\nfor num in nums:\n    data.append(num * num)\n"}
{"task_id": "Mbpp/8", "completion": "function square_nums(input_list):\n    result = []\n    for num in input_list:\n        result.append(num * num)\n    return resul"}
{"task_id": "Mbpp/8", "completion": "function square_nums(nums):\n    result = []\n    for num in nums:\n        result.append(num * num)\n    return resul"}
{"task_id": "Mbpp/9", "completion": "function find_rotations(s):\n    return len(s) - s.index(min(s))\n"}
{"task_id": "Mbpp/9", "completion": "function find_Rotations(s)\n    min_rotations = 1\n    while s != s[1:] + s[0]:\n        s = s[1:] + s[0]\n        min_rotations += 1\n    return min_rotations - "}
{"task_id": "Mbpp/9", "completion": "\nfunction find_Rotations(s):\n    for i from 1 to len(s) - 1:\n        if s[i:] + s[:i] == s:\n            return i\n    return None\n"}
{"task_id": "Mbpp/9", "completion": "function find_Rotations(s)\n    if len(s) == 0:\n        return 0\n    max_idx = 0\n    for i in range(1, len(s)):\n        if s[i] < s[max_idx]:\n            max_idx = i\n    return max_idx + 1\n"}
{"task_id": "Mbpp/9", "completion": "\nfunction find_Rotations(s):\n    if len(s) == 0:\n        return 0\n    for i in range(len(s)):\n        if s == s[i:] + s[:i]:\n            return i + 1\n    return -1\n"}
{"task_id": "Mbpp/9", "completion": ""}
{"task_id": "Mbpp/9", "completion": ""}
{"task_id": "Mbpp/9", "completion": "function find_Rotations(s):\n    n = length(s)\n    for i from 1 to n:\n        if s == s[i:] + s[:i]:\n            return i\n    return -1\n"}
{"task_id": "Mbpp/9", "completion": "function find_Rotations(s)\n    n = length(s)\n    for i from 1 to n-1\n        if s == s[n-i+1:] + s[1:n-i]\n            return i\n    return n\n"}
{"task_id": "Mbpp/9", "completion": "function find_Rotations(s):\n    for i in range(1, len(s)):\n        if s == s[i:] + s[:i]:\n            return i\n    return len(s)\n"}
{"task_id": "Mbpp/11", "completion": "s = input_string\nch = character_to_remove\nnew_str = s.replace(ch, '')\nfirst_char = new_str[0]\nlast_char = new_str[-1]\nreturn new_str.replace(first_char,'').replace(last_char,''"}
{"task_id": "Mbpp/11", "completion": "\nfunction remove_Occ(s, ch):\n    index = s.find(ch)\n    if index != -1:\n        s = s[0:index] + s[index+1:]\n    index = s.rfind(ch)\n    if index != -1:\n        s = s[0:index] + s[index+1:]\n    return s\n"}
{"task_id": "Mbpp/11", "completion": "function remove_Occ(s, ch)\n    if s.length() < 2:\n        return s\n    for i from 1 to s.length() - 1:\n        if s[i] == ch:\n            s = s[0..i-1] + s[i+1..s.length()]\n            break\n    for i from 1 to s.length() - 1:\n        if s[s.length()-i] == ch:\n            s = s[0..s.length-i]\n            break\n    return "}
{"task_id": "Mbpp/11", "completion": "s = input_string\nch = character_to_remove\n\ni = 0\nwhile i < len(s):\n    if s[i] == ch:\n        if i == 0:\n            s = s[1:]\n            i -= 1\n        elif i == len(s) - 1:\n            s = s[:i]\n        else:\n            s = s[:i] + s[i+1:]\n        i -= 1\n    else:\n        i += 1\n\nreturn "}
{"task_id": "Mbpp/11", "completion": "input_str = s\nchar = ch\npos = 0\nwhile pos < len(input_str):\n    if input_str[pos] == char:\n        if pos == 0 or pos == len(input_str) - 1:\n            input_str = input_str[:pos] + input_str[pos+1:]\n        else:\n            break\n    pos += 1\nreturn input_st"}
{"task_id": "Mbpp/11", "completion": "\nfunction remove_Occ(s, ch):\n    s = list(s)\n    if ch in s:\n        s.remove(ch)\n        s.remove(ch)\n    return \"\".join(s"}
{"task_id": "Mbpp/11", "completion": "function remove_Occ(s, ch):\n    index1 = s.find(ch)\n    while index1 != -1:\n        s = s[:index1] + s[index1+1:]\n        index1 = s.find(ch)\n    index2 = s.rfind(ch)\n    if index2 != -1:\n        s = s[:index2] + s[index2+1:]\n    return "}
{"task_id": "Mbpp/11", "completion": "function remove_occurrence(s, ch):\n    s = list(s)\n    if s[0] == ch:\n        s.pop(0)\n    if s[-1] == ch:\n        s.pop()\n    return ''.join(s"}
{"task_id": "Mbpp/11", "completion": "function remove_Occ(str1, char):\n    return str1.replace(char, '', 1) + str1[str1.index(char) + 1:-1"}
{"task_id": "Mbpp/11", "completion": "function remove_Occ(s, ch)\n    s = s.replace(ch, '')\n    s = s[1:-1]\n    return s\n"}
{"task_id": "Mbpp/12", "completion": "\nfunction sort_matrix(M):\n    # Calculate sum of each row\n    for i from 0 to M.length-1:\n        for j from 0 to M[i].length-1:\n            M[i][j] = M[i][j] + (M[0][0] + M[0][1])\n    # Sort the matrix in ascending order\n    for i from 0 to M.length-1:\n        for j from i+1 to M.length-1:\n            if sum(M[i]) > sum(M[j]):\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n    return "}
{"task_id": "Mbpp/12", "completion": "function sort_matrix(M)\n    sums = []\n    for each row in M:\n        sum_row = sum(row)\n        sums.append((sum_row, row))\n    sorted_sums = sorted(sums)\n    sorted_M = [row for _, row in sorted_sums]\n    return sorted_"}
{"task_id": "Mbpp/12", "completion": "function sort_matrix(M):\n    # Calculate the sum of each row in the matrix\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append((row_sum, row))\n\n    # Sort the rows based on their sums\n    sorted_rows = sorted(row_sums)\n\n    # Reconstruct the matrix with the sorted rows\n    sorted_M = [row[1] for row in sorted_rows]\n\n    return sorted_M\n"}
{"task_id": "Mbpp/12", "completion": "function sort_matrix(M):\n    # calculate the sum of each row in M\n    sums = [sum(row) for row in M]\n    \n    # combine each row with its sum into a list of tuples\n    rows_with_sums = [(row, sum) for row, sum in zip(M, sums)]\n    \n    # sort the list of tuples based on the sum\n    sorted_rows_with_sums = sorted(rows_with_sums, key=lambda x: x[1])\n    \n    # separate the sorted rows from their sums\n    sorted_M = [row for row, _ in sorted_rows_with_sums]\n    \n    return sorted_M\n"}
{"task_id": "Mbpp/12", "completion": "function sort_matrix(M):\n    # calculate the sum of each row\n    sums = []\n    for row in M:\n        sums.append(sum(row))\n    \n    # sort the matrix based on the sum of its rows\n    sorted_indices = sorted(range(len(M)), key=lambda i: sums[i])\n    sorted_M = [M[i] for i in sorted_indices]\n    \n    return sorted_"}
{"task_id": "Mbpp/12", "completion": "function sort_matrix(M):\n    M_sorted = sorted(M, key=sum)\n    return M_sorted\n"}
{"task_id": "Mbpp/12", "completion": "function sort_matrix(M)\n    sorted_rows = sorted(enumerate([sum(row) for row in M]), key=lambda x: x[1])\n    return [list(row[1]) for row in sorted_rows]\n"}
{"task_id": "Mbpp/12", "completion": "function sort_matrix(M):\n    S = []\n    for i from 0 to M.length - 1:\n        sum = 0\n        for j from 0 to M[i].length - 1:\n            sum = sum + M[i][j]\n        S.append([sum, M[i]])\n    S.sort()\n    result = []\n    for i from 0 to S.length - 1:\n        result = result + S[i][1]\n    return resul"}
{"task_id": "Mbpp/12", "completion": ""}
{"task_id": "Mbpp/12", "completion": "\nfunction sort_matrix(M):\n    # Calculate the sum of each row in M\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append((row_sum, row))\n    \n    # Sort the row sums and corresponding rows\n    sorted_row_sums = sorted(row_sums)\n    \n    # Reconstruct the sorted matrix\n    sorted_M = [row[1] for row in sorted_row_sums]\n    return sorted_M\n"}
{"task_id": "Mbpp/14", "completion": "function find_Volume(l, b, h)\n    return (1/2) * l * b * h\n"}
{"task_id": "Mbpp/14", "completion": ""}
{"task_id": "Mbpp/14", "completion": "function find_Volume(l, b, h)\n    return (l * b * h)\n"}
{"task_id": "Mbpp/14", "completion": ""}
{"task_id": "Mbpp/14", "completion": "\nALGORITHM:\n  Input: length (l), breadth (b), height (h)\n  Output: volume of the triangular prism\n  \n  Calculate the area of the base triangle:\n    base_area = 0.5 * l * b\n  \n  Calculate the volume of the prism:\n    volume = base_area * h\n  \n  Return the calculated volume\n"}
{"task_id": "Mbpp/14", "completion": ""}
{"task_id": "Mbpp/14", "completion": "\nALGORITHM:\n    input: length(l), breadth(b), height(h) of the triangular prism\n    output: volume(v) of the triangular prism\n    \n    calculate base_area = (1/2)*l*b\n    calculate volume = base_area*h\n    return volume\n"}
{"task_id": "Mbpp/14", "completion": ""}
{"task_id": "Mbpp/14", "completion": ""}
{"task_id": "Mbpp/14", "completion": ""}
{"task_id": "Mbpp/16", "completion": "function text_lowercase_underscore(text):\n    pattern = r\"[a-z]+_[a-z]+\"\n    return bool(re.fullmatch(pattern, text)"}
{"task_id": "Mbpp/16", "completion": ""}
{"task_id": "Mbpp/16", "completion": "\nfunction text_lowercase_underscore(text):\n    pattern = r\"[a-z]+_[a-z]+\"\n    return bool(re.fullmatch(pattern, text)"}
{"task_id": "Mbpp/16", "completion": "\nfunction text_lowercase_underscore(text):\n    pattern = r\"[a-z]+_[a-z]+\"\n    return bool(re.fullmatch(pattern, text)"}
{"task_id": "Mbpp/16", "completion": "\nfunction text_lowercase_underscore(text):\n    return bool(re.findall(r'[a-z]+_[a-z]+', text))\n"}
{"task_id": "Mbpp/16", "completion": "function text_lowercase_underscore(text):\n    pattern = \"^[a-z]+(_[a-z]+)*$\"\n    return re.match(pattern, text) != Non"}
{"task_id": "Mbpp/16", "completion": "\nfunction is_valid(input_string):\n    pattern = r\"[a-z]+_[a-z]+\"\n    return bool(re.search(pattern, input_string)"}
{"task_id": "Mbpp/16", "completion": "function text_lowercase_underscore(text):\n    return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n"}
{"task_id": "Mbpp/16", "completion": "function is_valid(input_string):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, input_string):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/16", "completion": ""}
{"task_id": "Mbpp/17", "completion": "function square_perimeter(a)\n    return 4 * "}
{"task_id": "Mbpp/17", "completion": "function square_perimeter(a):\n    return 4*"}
{"task_id": "Mbpp/17", "completion": "input side_length\nperimeter = 4 * side_length\noutput perimeter\n"}
{"task_id": "Mbpp/17", "completion": ""}
{"task_id": "Mbpp/17", "completion": "function square_perimeter(a)\n    return 4 * "}
{"task_id": "Mbpp/17", "completion": ""}
{"task_id": "Mbpp/17", "completion": ""}
{"task_id": "Mbpp/17", "completion": "`function square_perimeter(a):\n    return 4 * a"}
{"task_id": "Mbpp/17", "completion": ""}
{"task_id": "Mbpp/17", "completion": "function square_perimeter(a)\n    return 4 * a\n"}
{"task_id": "Mbpp/18", "completion": "\nfunction remove_dirty_chars(string, second_string)\n    temp = \"\"\n    for each_char in string:\n        if each_char not in second_string:\n            temp = temp + each_char\n    return temp\n"}
{"task_id": "Mbpp/18", "completion": "FUNCTION remove_dirty_chars(string, second_string)\n    result = \"\"\n    FOR each character c IN string\n        IF c IS NOT IN second_string\n            result = result + c\n    RETURN result\n"}
{"task_id": "Mbpp/18", "completion": "\nfunction remove_dirty_chars(string, second_string):\n    result = \"\"\n    for char in string:\n        if char not in second_string:\n            result += char\n    return resul"}
{"task_id": "Mbpp/18", "completion": "function remove_dirty_chars(string, second_string):\n    result = \"\"\n    for char in string:\n        if not char in second_string:\n            result += char\n    return resul"}
{"task_id": "Mbpp/18", "completion": ""}
{"task_id": "Mbpp/18", "completion": "function remove_dirty_chars(string, second_string)\n    result = \"\"\n    for char in string:\n        if char not in second_string:\n            result += char\n    return result\n"}
{"task_id": "Mbpp/18", "completion": "\nfunction remove_dirty_chars(string, second_string):\n    set_of_chars_to_remove = set(second_string)\n    result = \"\"\n    for char in string:\n        if char not in set_of_chars_to_remove:\n            result += char\n    return result\n"}
{"task_id": "Mbpp/18", "completion": "\nfunction remove_dirty_chars(string, second_string):\n    result = \"\"\n    for char in string:\n        if char not in second_string:\n            result += char\n    return result\n"}
{"task_id": "Mbpp/18", "completion": "function remove_dirty_chars(string, second_string):\n    set_second = set(second_string)\n    new_string = \"\"\n    for char in string:\n        if char not in set_second:\n            new_string += char\n    return new_strin"}
{"task_id": "Mbpp/18", "completion": "function remove_dirty_chars(string, second_string)\n    result = \"\"\n    for char in string:\n        if char not in second_string:\n            result += char\n    return result\n"}
{"task_id": "Mbpp/19", "completion": "function test_duplicate(arraynums):\n    set_of_elements = {}\n    for each number in arraynums:\n        if number in set_of_elements:\n            return True\n        else:\n            set_of_elements.add(number)\n    return False\n"}
{"task_id": "Mbpp/19", "completion": "function test_duplicate(arraynums):\n    setseen = {}\n    for num in arraynums:\n        if num in setseen:\n            return True\n        setseen[num] = 1\n    return False\n"}
{"task_id": "Mbpp/19", "completion": ""}
{"task_id": "Mbpp/19", "completion": "function test_duplicate(arraynums):\n  for i from 1 to length(arraynums) - 1:\n    for j from i + 1 to length(arraynums):\n      if arraynums[i] == arraynums[j]:\n        return True\n  return False\n"}
{"task_id": "Mbpp/19", "completion": "function test_duplicate(arraynums)\n    result = False\n    for i from 1 to length(arraynums)\n        for j from i + 1 to length(arraynums)\n            if arraynums[i] == arraynums[j]\n                result = True\n                exit\n    return resul"}
{"task_id": "Mbpp/19", "completion": "function test_duplicate(arraynums):\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = 1\n    return Fals"}
{"task_id": "Mbpp/19", "completion": "function test_duplicate(arraynums):\n    set_of_nums = {}\n    for num in arraynums:\n        if num in set_of_nums:\n            return True\n        else:\n            set_of_nums[num] = 1\n    return False\n"}
{"task_id": "Mbpp/19", "completion": ""}
{"task_id": "Mbpp/19", "completion": "function test_duplicate(arraynums):\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen[num] = 1\n    return False\n"}
{"task_id": "Mbpp/19", "completion": "\nfunction has_duplicates(arraynums):\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = 1\n    return False\n"}
{"task_id": "Mbpp/20", "completion": "function is_woodall(x)\n    if x >= 1 then\n        i = 2\n        while i * i <= x do\n            if x mod i == 0 then\n                return False\n            i = i + 1\n        return True\n"}
{"task_id": "Mbpp/20", "completion": "function is_woodall(x):\n  if (x % 2 != 0) and (sum(int(digit) for digit in str(x)) % 9 == 0):\n    return True\n  else:\n    return Fals"}
{"task_id": "Mbpp/20", "completion": "function is_woodall(x)\n    num_digits = number of digits in x\n    digit_sum = 0\n    for i from 1 to num_digits\n        digit_sum = digit_sum + (x mod 10)\n        x = floor(x / 10)\n    return digit_sum = num_digits and x = 0\n"}
{"task_id": "Mbpp/20", "completion": "function is_woodall(x):\n    if x % 2 == 0 and sum([int(digit) for digit in str(x)]) % 3 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/20", "completion": "function is_woodall(x):\n    if x > 1:\n        for i from 2 to sqrt(x):\n            if x mod i equals 0:\n                return False\n    return Tru"}
{"task_id": "Mbpp/20", "completion": "\nfunction is_woodall(x):\n    if x >= 10:\n        while x > 9:\n            digit_sum = 0\n            temp = x\n            while temp > 0:\n                digit_sum += temp % 10\n                temp //= 10\n            if digit_sum * 2 != x:\n                return False\n            x = digit_sum\n    else:\n        return False\n    return True\n"}
{"task_id": "Mbpp/20", "completion": "function is_woodall(x):\n    sum = 0\n    temp = x\n    while temp > 0:\n        digit = temp % 10\n        sum += digit * digit\n        temp //= 10\n    return sum == "}
{"task_id": "Mbpp/20", "completion": "\nfunction is_woodall(x):\n    digit_sum = 0\n    original_number = x\n    while x > 0:\n        digit = x mod 10\n        digit_sum = digit_sum + digit\n        x = x div 10\n    return digit_sum == original_numbe"}
{"task_id": "Mbpp/20", "completion": "function is_woodall(x)\n    if x mod 2 = 0 and x mod 3 = 0\n        return true\n    else\n        return false\n"}
{"task_id": "Mbpp/20", "completion": "function is_woodall(x):\n    if x mod 10 = 0 and x mod 100 != 0:\n        return true\n    else:\n        return false\n"}
{"task_id": "Mbpp/56", "completion": "function check(n):\n    reverse = 0\n    temp = n\n    while temp > 0:\n        digit = temp mod 10\n        reverse = reverse * 10 + digit\n        temp = temp // 10\n    if (n + 1) == 2 * reverse:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/56", "completion": "\nfunction check(n):\n    reverse_n = 0\n    original_n = n\n    while n > 0:\n        digit = n mod 10\n        reverse_n = (reverse_n * 10) + digit\n        n = n // 10\n    return original_n != (2 * reverse_n - 1"}
{"task_id": "Mbpp/56", "completion": "\nfunction check(n)\n    reverse_n = 0\n    original_n = n\n    while n > 0\n        remainder = n mod 10\n        reverse_n = reverse_n * 10 + remainder\n        n = n div 10\n    if original_n + 1 == 2 * reverse_n\n        return True\n    else\n        return False\n"}
{"task_id": "Mbpp/56", "completion": "\nfunction check(n):\n    reverse_n = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        reverse_n = reverse_n * 10 + digit\n        temp = temp // 10\n    return n != (2 * reverse_n - 1"}
{"task_id": "Mbpp/56", "completion": "function check(n):\n    reverse_n = 0\n    original_n = n\n    while n > 0:\n        digit = n mod 10\n        reverse_n = (reverse_n * 10) + digit\n        n = n div 10\n    if original_n == (2 * reverse_n) - 1:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/56", "completion": ""}
{"task_id": "Mbpp/56", "completion": "\nfunction check(n):\n    reverse_n = 0\n    original_n = n\n    while n > 0:\n        digit = n mod 10\n        reverse_n = reverse_n * 10 + digit\n        n = n div 10\n    return original_n - 1 != 2 * reverse_"}
{"task_id": "Mbpp/56", "completion": ""}
{"task_id": "Mbpp/56", "completion": "\nFUNCTION check(n)\n    REVERSE = 0\n    WHILE n > 0\n        DIGIT = n MOD 10\n        REVERSE = REVERSE * 10 + DIGIT\n        n = FLOOR(n / 10)\n    END WHILE\n    IF 2 * REVERSE - 1 == n THEN\n        RETURN True\n    ELSE\n        RETURN False\n    END IF\nEND FUNCTION\n"}
{"task_id": "Mbpp/56", "completion": "function check(n):\n    reverse_n = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        reverse_n = (reverse_n * 10) + digit\n        temp = temp // 10\n    return n != (2 * reverse_n - 1"}
{"task_id": "Mbpp/57", "completion": ""}
{"task_id": "Mbpp/57", "completion": "function find_Max_Num(arr):\n    sort arr in descending order\n    result = \"\"\n    for each digit in arr:\n        add the digit to the beginning of result\n    return resul"}
{"task_id": "Mbpp/57", "completion": ""}
{"task_id": "Mbpp/57", "completion": ""}
{"task_id": "Mbpp/57", "completion": "\nfunction find_Max_Num(arr):\n    max_num = \"\"\n    for i from 0 to len(arr)-1:\n        for j from i+1 to len(arr)-1:\n            if arr[i] > arr[j]:\n                swap arr[i] and arr[j]\n    for digit in arr:\n        max_num += str(digit)\n    return int(max_num"}
{"task_id": "Mbpp/57", "completion": "function find_Max_Num(arr)\n    sort arr in descending order\n    return join(arr)\n"}
{"task_id": "Mbpp/57", "completion": "data = arr\nn = len(data)\nnum = 0\nfor i in range(n, 0, -1):\n    while i > 0:\n        num = num * 10 + data[i-1]\n        i = i - 1\nreturn nu"}
{"task_id": "Mbpp/57", "completion": "function find_Max_Num(arr):\n    max_num = \"\"\n    for i from 0 to len(arr)-1:\n        max_num = max_num + str(arr[i])\n    return int(max_num)\n"}
{"task_id": "Mbpp/57", "completion": ""}
{"task_id": "Mbpp/57", "completion": ""}
{"task_id": "Mbpp/58", "completion": "\nfunction opposite_Signs(x, y):\n    if (x * y <= 0):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/58", "completion": ""}
{"task_id": "Mbpp/58", "completion": ""}
{"task_id": "Mbpp/58", "completion": ""}
{"task_id": "Mbpp/58", "completion": "\nfunction opposite_Signs(x, y):\n    if ((x > 0 and y < 0) or (x < 0 and y > 0)) then\n        return true\n    else\n        return false\n"}
{"task_id": "Mbpp/58", "completion": ""}
{"task_id": "Mbpp/58", "completion": ""}
{"task_id": "Mbpp/58", "completion": ""}
{"task_id": "Mbpp/58", "completion": ""}
{"task_id": "Mbpp/58", "completion": "if (x > 0 and y < 0) or (x < 0 and y > 0):\n    return True\nelse:\n    return False\n"}
{"task_id": "Mbpp/59", "completion": "function is_octagonal(n):\n    if n <= 0:\n        return None\n    else:\n        sum = 0\n        i = 1\n        while sum < n:\n            i += 1\n            sum = (i * (3*i - 1))\n        return su"}
{"task_id": "Mbpp/59", "completion": "function is_octagonal(n):\n    k = 1\n    sum = 0\n    while sum < n:\n        k += 1\n        sum += k\n        sum -= k - 1\n    return sum\n"}
{"task_id": "Mbpp/59", "completion": "function is_octagonal(n):\n    sum = 0\n    t = 1\n    count = 0\n    while sum < n:\n        sum += t\n        t += 2\n        count += 1\n    if sum == n:\n        return 8 * count - t + 1\n    else:\n        return Non"}
{"task_id": "Mbpp/59", "completion": "function find_nth_octagonal(n):\n    total = 0\n    num = 1\n    count = 1\n    while count <= n:\n        for i in range(num):\n            total += i + 1\n        if count == n:\n            return total\n        num += 2\n        count += 1\n"}
{"task_id": "Mbpp/59", "completion": "\nfunction calculate_octagonal_number(n):\n    sum_of_odd_numbers = 0\n    num = 1\n    count = 0\n    while count < n:\n        sum_of_odd_numbers += num\n        num += 2\n        count += 1\n    return sum_of_odd_number"}
{"task_id": "Mbpp/59", "completion": "\nfunction is_octagonal(n):\n    total = 0\n    i = 1\n    while total < n:\n        octagon = i * (3*i - 1)\n        if total + octagon == n:\n            return octagon\n        total += octagon\n        i += 1\n    return -1\n"}
{"task_id": "Mbpp/59", "completion": ""}
{"task_id": "Mbpp/59", "completion": "function is_octagonal(n):\n    let t = (8 * n**3 - 13*n + 6)\n    if t % 2 != 0:\n        return None\n    else:\n        return t // 2\n"}
{"task_id": "Mbpp/59", "completion": "\nfunction is_octagonal(n):\n    total = 0\n    i = 1\n    while total < n:\n        p = (8 * i) - 1\n        total += p\n        i += 1\n    return "}
{"task_id": "Mbpp/59", "completion": "\nfunction is_octagonal(n):\n    total := 0\n    i := 1\n    while total < n:\n        octagonal := 8*i^3 - 8*i + 1\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i = i + 1\n    return None\n"}
{"task_id": "Mbpp/61", "completion": ""}
{"task_id": "Mbpp/61", "completion": "function count_substrings(s):\n    n = len(s)\n    dp = [0]*(n+1)\n    prefix_sum = 0\n    count = 0\n    \n    for i in range(n):\n        prefix_sum += int(s[i])\n        if prefix_sum == i+1:\n            count += 1\n        for j in range(i):\n            if dp[j] == (i-j):\n                count += 1\n        dp[i] = dp[i-1] + 1 if i > 0 else 1\n    \n    return coun"}
{"task_id": "Mbpp/61", "completion": "function count_Substrings(s):\n    n = len(s)\n    res = 0\n    dp = [0] * (n + 1)\n    prefix_sum = 0\n    for i in range(n):\n        prefix_sum += int(s[i])\n        if prefix_sum % i == 0:\n            res += i\n        dp[i + 1] = prefix_sum\n    for i in range(1, n):\n        for j in range(i):\n            if dp[j] + int(s[i]) == i:\n                res += 1\n    return re"}
{"task_id": "Mbpp/61", "completion": ""}
{"task_id": "Mbpp/61", "completion": "function count_substrings(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    sum_ = 0\n    count = 0\n    for i in range(1, n + 1):\n        sum_ += int(s[i - 1])\n        if sum_ == i:\n            count += 1\n        if sum_ > i:\n            sum_ -= dp[i - 1]\n        dp[i] = max(dp[i - 1], sum_)\n    return count + dp[n]\n"}
{"task_id": "Mbpp/61", "completion": "function count_substrings(s):\n    n = len(s)\n    count = 0\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    current_sum = 0\n    for i in range(n):\n        current_sum += int(s[i])\n        if current_sum - 1 in prefix_sum:\n            count += prefix_sum[current_sum - 1]\n        prefix_sum[current_sum] += 1\n    return count + prefix_sum[current_sum]\n"}
{"task_id": "Mbpp/61", "completion": "function count_substrings(s):\n    count = 0\n    hashmap = defaultdict(int)\n    hashmap[0] = 1\n    current_sum = 0\n    for char in s:\n        current_sum += int(char)\n        if current_sum - 1 in hashmap:\n            count += hashmap[current_sum - 1]\n        hashmap[current_sum] += 1\n    return coun"}
{"task_id": "Mbpp/61", "completion": "function count_substrings(s):\n    n = len(s)\n    dp = [0] * (n + 1)\n    sum = 0\n    count = 0\n    for i from 1 to n:\n        sum += int(s[i-1])\n        if sum % i == 0:\n            count += 1\n        for j from 1 to i:\n            sum -= int(s[i-j])\n            if sum % (i-j+1) == 0:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/61", "completion": "function count_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        total = 0\n        for j in range(i, n):\n            total += int(s[j])\n            if total == j - i + 1:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/61", "completion": "function count_substrings(s):\n    count = 0\n    sum_digits = 0\n    seen = defaultdict(int)\n    \n    for digit in s:\n        sum_digits += int(digit)\n        if sum_digits == len(s):\n            count += 1\n        if sum_digits < len(s):\n            count += seen[sum_digits - int(digit)]\n        seen[sum_digits] += 1\n    \n    return count\n"}
{"task_id": "Mbpp/62", "completion": ""}
{"task_id": "Mbpp/62", "completion": ""}
{"task_id": "Mbpp/62", "completion": ""}
{"task_id": "Mbpp/62", "completion": ""}
{"task_id": "Mbpp/62", "completion": "data xs\nmin_num = xs[0]\nfor each x in xs:\n    if x < min_num then\n        min_num = x\nreturn min_nu"}
{"task_id": "Mbpp/62", "completion": ""}
{"task_id": "Mbpp/62", "completion": ""}
{"task_id": "Mbpp/62", "completion": ""}
{"task_id": "Mbpp/62", "completion": "\nfunction smallest_num(input_list):\n    smallest = input_list[0]\n    for each_element in input_list:\n        if each_element < smallest:\n            smallest = each_element\n    return smallest\n"}
{"task_id": "Mbpp/62", "completion": ""}
{"task_id": "Mbpp/63", "completion": "MAX = -float('inf')\nfor pair in test_list:\n    diff = abs(pair[0] - pair[1])\n    if diff > MAX:\n        MAX = diff\nreturn MA"}
{"task_id": "Mbpp/63", "completion": ""}
{"task_id": "Mbpp/63", "completion": "function max_difference(test_list):\n    max_diff = 0\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Mbpp/63", "completion": "max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_dif"}
{"task_id": "Mbpp/63", "completion": "data = []\nmax_diff = 0\nfor pair in test_list:\n    data.append(pair[1] - pair[0])\nmax_diff = max(data)\nreturn max_dif"}
{"task_id": "Mbpp/63", "completion": "function max_difference(test_list):\n    max_diff = 0\n    for i from 0 to len(test_list) - 1:\n        for j from i + 1 to len(test_list):\n            diff = abs(test_list[i][1] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_dif"}
{"task_id": "Mbpp/63", "completion": "function max_difference(list):\n    max_diff = 0\n    for pair in list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_dif"}
{"task_id": "Mbpp/63", "completion": ""}
{"task_id": "Mbpp/63", "completion": "function max_difference(list_of_tuples):\n    max_diff = 0\n    for pair in list_of_tuples:\n        difference = abs(pair[1] - pair[0])\n        if difference > max_diff:\n            max_diff = difference\n    return max_dif"}
{"task_id": "Mbpp/63", "completion": "function max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[i][1]) - abs(test_list[j][0] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_dif"}
{"task_id": "Mbpp/64", "completion": "function sort_by_second_value(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": "Mbpp/64", "completion": "function sort_subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": "Mbpp/64", "completion": "function sort_subject_marks(subjectmarks)\n    sorted_list = []\n    for mark in subjectmarks:\n        sorted_list.append((mark[1], mark[0]))\n    sorted_list.sort()\n    result = []\n    for i in range(len(sorted_list)):\n        result.append((sorted_list[i][1], sorted_list[i][0]))\n    return result\n"}
{"task_id": "Mbpp/64", "completion": "function sort_subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": "Mbpp/64", "completion": "function sort_subject_marks(subject_marks)\n    sort subject_marks based on the second value of each tuple in descending order\n    return subject_marks\n"}
{"task_id": "Mbpp/64", "completion": "\nsort_subject_marks = sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": "Mbpp/64", "completion": "function sort_subject_marks(subjectmarks)\n    sorted_subjectmarks = []\n    for mark in subjectmarks:\n        sorted_subjectmarks.append(mark)\n    sorted_subjectmarks.sort(key=lambda x: x[1])\n    return sorted_subjectmark"}
{"task_id": "Mbpp/64", "completion": "\nfunction sort_subject_marks(subject_marks):\n    return sorted(subject_marks, key=lambda x: x[1]"}
{"task_id": "Mbpp/64", "completion": "function sort_subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": "Mbpp/64", "completion": "function sort_by_second_value(list_of_tuples)\n    return sorted(list_of_tuples, key=lambda x: x[1])\n"}
{"task_id": "Mbpp/65", "completion": "function recursive_list_sum(data_list):\n    sum = 0\n    for item in data_list:\n        if type(item) == list:\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n"}
{"task_id": "Mbpp/65", "completion": "function result = 0\nif data_list is list then\n    for each element in data_list do\n        if element is list then\n            result += recursive_list_sum(element)\n        else\n            result += element\n    return result\nelse\n    return data_list\n"}
{"task_id": "Mbpp/65", "completion": "\nfunction recursive_list_sum(data_list)\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        sum = 0\n        for element in data_list:\n            sum = sum + recursive_list_sum(element)\n        return su"}
{"task_id": "Mbpp/65", "completion": "function recursive_list_sum(data_list):\n    if type(data_list) == list:\n        return sum(recursive_list_sum(i) for i in data_list)\n    else:\n        return data_lis"}
{"task_id": "Mbpp/65", "completion": "\nfunction flatten_and_sum(data_list):\n    sum = 0\n    for element in data_list:\n        if type(element) == list:\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n"}
{"task_id": "Mbpp/65", "completion": "function result = 0\nif data_list is not a list:\n    return data_list\nfor item in data_list:\n    if type(item) is list:\n        result = result + recursive_list_sum(item)\n    else:\n        result = result + item\nreturn resul"}
{"task_id": "Mbpp/65", "completion": ""}
{"task_id": "Mbpp/65", "completion": "\nfunction recursive_list_sum(data_list)\n    if data_list is not a list then\n        return data_list\n    else\n        sum = 0\n        for each item in data_list\n            sum = sum + recursive_list_sum(item)\n        return sum\n    end if\nend functio"}
{"task_id": "Mbpp/65", "completion": "function recursive_list_sum(data_list):\n    total = 0\n    for i in data_list:\n        if type(i) is list:\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return tota"}
{"task_id": "Mbpp/65", "completion": "\nfunction recursive_list_sum(data_list)\n    total = 0\n    for element in data_list:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n"}
{"task_id": "Mbpp/66", "completion": "function pos_count(input_list)\n    count := 0\n    for each element in input_list:\n        if element > 0 then\n            count := count + 1\n    return count\n"}
{"task_id": "Mbpp/66", "completion": "function pos_count(input_list)\n    count := 0\n    for each element in input_list:\n        if element > 0 then\n            increment count\n    return count\n"}
{"task_id": "Mbpp/66", "completion": "\nfunction pos_count(input_list)\n    count = 0\n    for each num in input_list:\n        if num > 0 then\n            count = count + 1\n        end if\n    return count\n"}
{"task_id": "Mbpp/66", "completion": "function pos_count(input_list):\n    count = 0\n    for each item in input_list:\n        if item > 0 then\n            increment count by 1\n        end if\n    return count\n"}
{"task_id": "Mbpp/66", "completion": "input_list = []\nfor each_num in l:\n    if each_num > 0:\n        input_list.append(each_num)\nreturn len(input_list"}
{"task_id": "Mbpp/66", "completion": "\nfunction pos_count(l)\n    count = 0\n    for each item in l\n        if item > 0\n            count = count + 1\n    return coun"}
{"task_id": "Mbpp/66", "completion": "function pos_count(list l):\n    count := 0\n    for each element e in l:\n        if e > 0 then\n            count := count + 1\n    return count\n"}
{"task_id": "Mbpp/66", "completion": ""}
{"task_id": "Mbpp/66", "completion": "\nfunction pos_count(list l)\n    count = 0\n    for each element e in l\n        if e > 0\n            increment count by 1\n    return count\n"}
{"task_id": "Mbpp/66", "completion": ""}
{"task_id": "Mbpp/67", "completion": "function bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += bell_number(i) * bell_number(n - 1 - i)\n        return resul"}
{"task_id": "Mbpp/67", "completion": "function bell_number(n):\n    result = 0\n    for i in range(n+1):\n        result += Bell(i)\n    return result\n"}
{"task_id": "Mbpp/67", "completion": "function bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        b = [1, 1]\n        for i in range(2, n+1):\n            b.append(b[i-1] + sum(b[j] * binomial(i-1, j) for j in range(i)))\n        return b[n]\n"}
{"task_id": "Mbpp/67", "completion": "\nfunction bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        ways = 0\n        for k in range(1, n + 1):\n            ways += bell_number(k - 1)\n        return ways\n"}
{"task_id": "Mbpp/67", "completion": "function bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        B = [0] * (n + 1)\n        B[0] = 1\n        for i in range(1, n + 1):\n            sum = 0\n            for k in range(i):\n                sum += B[k]\n            B[i] = sum\n        return B[n]\n"}
{"task_id": "Mbpp/67", "completion": "function BellNumber(n):\n    if n == 0:\n        return 1\n    else:\n        total = 0\n        for i in range(1, n + 1):\n            total += BellNumber(i - 1)\n        return total\n"}
{"task_id": "Mbpp/67", "completion": "function bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [1, 1]\n        for i in range(2, n+1):\n            bell.append(sum(bell[:i]))\n        return bell[n"}
{"task_id": "Mbpp/67", "completion": ""}
{"task_id": "Mbpp/67", "completion": "function bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        total_ways = 0\n        for i in range(1, n + 1):\n            total_ways += bell_number(i - 1)\n        return total_way"}
{"task_id": "Mbpp/67", "completion": "function bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        ways = 1\n        for i in range(1, n + 1):\n            ways *= (2 * i - 1)\n        return ways / (n + 1"}
{"task_id": "Mbpp/68", "completion": "\nfunction is_Monotonic(A):\n    flag_monotone_increasing = True\n    flag_monotone_decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            flag_monotone_increasing = True\n        elif A[i] < A[i-1]:\n            flag_monotone_decreasing = False\n        else:\n            continue\n        \n        if not (flag_monotone_increasing or flag_monotone_decreasing):\n            return False\n    \n    return flag_monotone_increasing or flag_monotone_decreasing\n"}
{"task_id": "Mbpp/68", "completion": ""}
{"task_id": "Mbpp/68", "completion": "\nfunction is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    increasing = A[0] <= A[1]\n    decreasing = A[0] >= A[1]\n    for i in range(1, len(A)-1):\n        if (increasing and A[i] > A[i+1]) or (decreasing and A[i] < A[i+1]):\n            return False\n    return Tru"}
{"task_id": "Mbpp/68", "completion": ""}
{"task_id": "Mbpp/68", "completion": ""}
{"task_id": "Mbpp/68", "completion": "function is_Monotonic(A):\n    increasing = True\n    decreasing = True\n    for i from 1 to length(A) - 1:\n        if A[i] > A[i-1]:\n            decreasing = False\n        elif A[i] < A[i-1]:\n            increasing = False\n    return increasing or decreasin"}
{"task_id": "Mbpp/68", "completion": "function is_Monotonic(A):\n    is_non_decreasing = True\n    is_non_increasing = True\n    \n    for i from 1 to length of A - 1:\n        if A[i] > A[i + 1]:\n            is_non_decreasing = False\n        elif A[i] < A[i + 1]:\n            is_non_increasing = False\n    \n    return is_non_decreasing or is_non_increasin"}
{"task_id": "Mbpp/68", "completion": "\nfunction is_Monotonic(A):\n    if len(A) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i-1] <= A[i]:\n            decreasing = False\n        if A[i-1] >= A[i]:\n            increasing = False\n    return increasing or decreasin"}
{"task_id": "Mbpp/68", "completion": ""}
{"task_id": "Mbpp/68", "completion": "function is_Monotonic(A):\n    if all(A[i] <= A[i + 1] for i in range(len(A) - 1)):\n        return True\n    elif all(A[i] >= A[i + 1] for i in range(len(A) - 1)):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/69", "completion": "function is_sublist(l, s):\n    i = 0\n    while i < len(l):\n        j = 0\n        k = 0\n        while k < len(s) and i + k < len(l):\n            if l[i + k] != s[k]:\n                break\n            k = k + 1\n        if k == len(s):\n            return True\n        i = i + 1\n    return Fals"}
{"task_id": "Mbpp/69", "completion": "function is_sublist(l,s)\n    i := 0\n    while i < len(l)\n        j := 0\n        k := 0\n        while j < len(s) and k+i < len(l)\n            if l[k+i] == s[j]\n                j := j + 1\n            k := k + 1\n        if j == len(s)\n            return true\n        i := i + 1\n    return false\n"}
{"task_id": "Mbpp/69", "completion": ""}
{"task_id": "Mbpp/69", "completion": "function is_sublist(list l, list s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return Fals"}
{"task_id": "Mbpp/69", "completion": "\nfunction is_sublist(list l, sublist s):\n    if length(s) > length(l):\n        return False\n    for i in range(length(l)-length(s)+1):\n        if is_subsequence(l[i..i+length(s)],s):\n            return True\n    return False\nend function\n"}
{"task_id": "Mbpp/69", "completion": "\nfunction is_sublist(l, s)\n    for i from 0 to length of l - length of s\n        if l[i .. i + length of s - 1] equals s\n            return true\n    return false\n"}
{"task_id": "Mbpp/69", "completion": ""}
{"task_id": "Mbpp/69", "completion": ""}
{"task_id": "Mbpp/69", "completion": "ALGORITHM is_sublist(l, s)\n  IF length of l is less than length of s THEN\n    RETURN FALSE\n  ELSE\n    FOR i from 0 to length of l - length of s\n      IF sublist s is equal to sublist of l starting at index i THEN\n        RETURN TRUE\n      END IF\n    END FOR\n  END IF\n  RETURN FALS"}
{"task_id": "Mbpp/69", "completion": "\nfunction is_sublist(list1, list2):\n    if len(list2) > len(list1):\n        return False\n    for i in range(len(list1) - len(list2) + 1):\n        sub_list = list1[i:i+len(list2)]\n        if sub_list == list2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/70", "completion": "\nfunction get_equal(input_list):\n    if len(set(map(len, input_list))) == 1:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/70", "completion": ""}
{"task_id": "Mbpp/70", "completion": ""}
{"task_id": "Mbpp/70", "completion": ""}
{"task_id": "Mbpp/70", "completion": "\nfunction get_equal(input_list):\n    if len(set(map(len, input_list))) <= 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/70", "completion": "define function get_equal(Input):\n    return len(set(map(len, Input))) <= "}
{"task_id": "Mbpp/70", "completion": ""}
{"task_id": "Mbpp/70", "completion": "input_tuples = Input\nif len(input_tuples) > 0:\n    first_tuple_length = len(input_tuples[0])\n    for tuple in input_tuples:\n        if len(tuple) != first_tuple_length:\n            return False\n    return True\nreturn False\n"}
{"task_id": "Mbpp/70", "completion": ""}
{"task_id": "Mbpp/70", "completion": "`for i in range(1, len(Input)):\n    if len(Input[0]) != len(Input[i]):\n        return False\nreturn True"}
{"task_id": "Mbpp/71", "completion": "function comb_sort(nums):\n    gap = length(nums)\n    shrink = 1.3\n    sorted = false\n    \n    while not sorted or gap > 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = true\n        for i in range(0, length(nums) - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n                sorted = false\n    return num"}
{"task_id": "Mbpp/71", "completion": "function comb_sort(nums):\n    gap = length(nums)\n    shrink = 1.3\n    swapped = True\n    \n    while gap > 0 and swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        swapped = False\n        \n        for i in range(length(nums) - gap):\n            j = i + gap\n            \n            if nums[i] > nums[j]:\n                swap nums[i], nums[j]\n                swapped = True\n        \n    return num"}
{"task_id": "Mbpp/71", "completion": "\nfunction comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted or gap > 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n"}
{"task_id": "Mbpp/71", "completion": ""}
{"task_id": "Mbpp/71", "completion": "function comb_sort(nums)\n    gap = length(nums)\n    shrink = 1.3\n\n    start_loop\n        gap = gap / shrink\n        if gap < 1\n            gap = 1\n        end if\n\n        for i = 0 to length(nums) - gap - 1\n            for j = i + gap to length(nums) - 1\n                if nums[j] < nums[i]\n                    swap nums[i], nums[j]\n                end if\n            next j\n        next i\n\n    return nums\n"}
{"task_id": "Mbpp/71", "completion": "\nprocedure CombSort(nums)\n    n = length of nums\n    gap = n\n    swapped = true\n    \n    while gap > 1 or swapped\n        gap = int(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        swapped = false\n        \n        for i = 0 to n - gap - 1\n            j = i + gap\n            if nums[i] > nums[j]\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n                swapped = true\n        end for\n    end while\n    \n    return num"}
{"task_id": "Mbpp/71", "completion": "function comb_sort(nums):\n    max_size = len(nums)\n    gap = max_size\n    swapped = true\n    \n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = false\n        \n        for i in range(0, max_size - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = true\n"}
{"task_id": "Mbpp/71", "completion": "function comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return num"}
{"task_id": "Mbpp/71", "completion": "function comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    \n    start_swapping = True\n    while gap > 1 or start_swapping:\n        gap = int(gap / shrink)\n        \n        start_swapping = False\n        for i in range(len(nums) - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                start_swapping = True\n                \n    return num"}
{"task_id": "Mbpp/71", "completion": "define maxSwapSize as 1.5\ndefine gap as length of input list\nrepeat until gap > maxSwapSize or list is sorted\n    if gap > 1 then\n        gap = gap / maxSwapSize\n    sort the list using the following method:\n        for i from 0 to length of list - gap\n            j = i + gap\n            while j < length of list and nums[j] < nums[i]\n                swap nums[i] and nums[j]\n                j = j + 1\n    output the sorted lis"}
{"task_id": "Mbpp/72", "completion": "function dif_Square(n):\n    start = 0\n    end = int(math.sqrt(n))\n    while start <= end:\n        mid = (start + end) / 2\n        square_mid = mid * mid\n        if square_mid == n:\n            return True\n        elif square_mid < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return Fals"}
{"task_id": "Mbpp/72", "completion": "\nfunction dif_Square(n):\n    for i from 1 to sqrt(n):\n        if (n - i * i) is a square:\n            return True\n    return Fals"}
{"task_id": "Mbpp/72", "completion": "function dif_Square(n):\n    i = 0\n    while i * i <= n:\n        j = int((i * i + n) ** 0.5)\n        if i * i + j * j == n:\n            return True\n        i = i + 1\n    return Fals"}
{"task_id": "Mbpp/72", "completion": "function dif_Square(n):\n    i = 0\n    while (i * i <= n):\n        j = sqrt(n - i * i)\n        if (j * j == (n - i * i)):\n            return True\n        i = i + 1\n    return Fals"}
{"task_id": "Mbpp/72", "completion": ""}
{"task_id": "Mbpp/72", "completion": "function dif_Square(n)\n    flag = 0\n    i = 1\n    while (i * i <= n)\n        j = sqrt(n - i * i)\n        if (int(j + 0.5) * int(j + 0.5) == j * j)\n            return True\n        i = i + 1\n    return False\n"}
{"task_id": "Mbpp/72", "completion": ""}
{"task_id": "Mbpp/72", "completion": "function dif_Square(n):\n    i = 0\n    while (i * i <= n):\n        j = sqrt(n - i * i)\n        if (int(j + 0.5) ** 2 == n - i * i):\n            return True\n        i = i + 1\n    return Fals"}
{"task_id": "Mbpp/72", "completion": "function dif_Square(n):\n    low = 0\n    high = sqrt(n)\n    while low <= high:\n        mid = (low + high) / 2\n        square = mid * mid\n        if square == n:\n            return True\n        elif square < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return Fals"}
{"task_id": "Mbpp/72", "completion": ""}
{"task_id": "Mbpp/74", "completion": "function is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/74", "completion": "function is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    i = 0\n    while i < len(colors):\n        if colors[i] != patterns[i]:\n            return False\n        j = i + 1\n        while j < len(colors) and patterns[j] == patterns[i]:\n            if colors[j] != patterns[i]:\n                return False\n            j += 1\n        i = j\n    return Tru"}
{"task_id": "Mbpp/74", "completion": "function is_samepatterns(colors, patterns):\n    for i from 0 to length of colors - 1:\n        if colors[i] != patterns[i]:\n            return False\n    return Tru"}
{"task_id": "Mbpp/74", "completion": "if len(colors) != len(patterns):\n    return False\nfor i in range(len(colors)):\n    if colors[i] != patterns[i]:\n        return False\nreturn True\n"}
{"task_id": "Mbpp/74", "completion": "\nfunction is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return Tru"}
{"task_id": "Mbpp/74", "completion": ""}
{"task_id": "Mbpp/74", "completion": "function is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return Tru"}
{"task_id": "Mbpp/74", "completion": "function is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    else:\n        for i in range(len(colors)):\n            if colors[i] != patterns[i]:\n                return False\n        return Tru"}
{"task_id": "Mbpp/74", "completion": "procedure is_samepatterns(colors, patterns):\n    n = length of colors\n    for i from 1 to n do\n        if colors[i] != patterns[i] then\n            return false\n    return true\n"}
{"task_id": "Mbpp/74", "completion": "begin\n    if length(colors) != length(patterns):\n        return False\n    for i from 0 to length(colors)-1:\n        if colors[i] != patterns[i]:\n            return False\n    return True\nen"}
{"task_id": "Mbpp/75", "completion": "\nresult = []\nfor t in test_list:\n    if all(x % K == 0 for x in t):\n        result.append(t)\nreturn result\n"}
{"task_id": "Mbpp/75", "completion": "function find_tuples(test_list, k):\n    result = []\n    for tuple in test_list:\n        is_divisible = True\n        for element in tuple:\n            if element % k != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(tuple)\n    return resul"}
{"task_id": "Mbpp/75", "completion": "\nfunction find_tuples(test_list, k):\n    result = []\n    for tuple in test_list:\n        if all(i % k == 0 for i in tuple):\n            result.append(tuple)\n    return resul"}
{"task_id": "Mbpp/75", "completion": "function find_tuples(test_list, K):\n    result = []\n    for tuple in test_list:\n        flag = True\n        for num in tuple:\n            if num % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(tuple)\n    return resul"}
{"task_id": "Mbpp/75", "completion": "\nfunction find_tuples(test_list, K):\n    result = []\n    for each_tuple in test_list:\n        is_all_divisible = True\n        for num in each_tuple:\n            if num % K != 0:\n                is_all_divisible = False\n                break\n        if is_all_divisible:\n            result.append(each_tuple)\n    return result\n"}
{"task_id": "Mbpp/75", "completion": "\nfunction find_tuples(test_list, k)\n    result = []\n    for tuple_element in test_list:\n        is_divisible = True\n        for element in tuple_element:\n            if element % k != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(tuple_element)\n    return resul"}
{"task_id": "Mbpp/75", "completion": ""}
{"task_id": "Mbpp/75", "completion": "function find_tuples(test_list, k):\n    result = []\n    for tuple in test_list:\n        is_divisible = True\n        for num in tuple:\n            if num % k != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(tuple)\n    return resul"}
{"task_id": "Mbpp/75", "completion": "input: list of tuples, integer\noutput: list of tuples\n\nfind_tuples = \n    result = []\n    for each tuple in input list\n        is_all_divisible = True\n        for each element in the tuple\n            if element is not divisible by k\n                is_all_divisible = False\n                break\n        if is_all_divisible\n            add the tuple to result\n\n    return resul"}
{"task_id": "Mbpp/75", "completion": "\nfunction find_tuples(test_list, k)\n    result = []\n    for each tuple in test_list:\n        is_divisible = True\n        for each element in tuple:\n            if each element mod k is not 0 then\n                is_divisible = False\n                break\n        if is_divisible then\n            result.append(tuple)\n    return result\n"}
{"task_id": "Mbpp/77", "completion": "\nfunction is_Diff(n):\n    sum = 0\n    odd_sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        if digit % 2 != 0:\n            odd_sum += digit\n        sum += digit\n        temp = temp // 10\n    return abs(sum - odd_sum) % 11 != "}
{"task_id": "Mbpp/77", "completion": ""}
{"task_id": "Mbpp/77", "completion": "function is_Diff(n):\n    digit_sum = 0\n    odd_digit_sum = 0\n    is_odd = false\n    temp = n\n    while temp > 0:\n        last_digit = temp mod 10\n        if is_odd:\n            odd_digit_sum += last_digit\n        else:\n            digit_sum += last_digit\n        is_odd = not is_odd\n        temp = temp div 10\n    return (digit_sum - odd_digit_sum) mod 11\n"}
{"task_id": "Mbpp/77", "completion": "\nfunction is_Diff(n)\n    sum = 0\n    odd_sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp mod 10\n        if digit % 2 != 0 then\n            odd_sum = odd_sum + digit\n        else\n            sum = sum + digit\n        temp = floor(temp / 10)\n    return (abs(sum - odd_sum) % 11) != "}
{"task_id": "Mbpp/77", "completion": ""}
{"task_id": "Mbpp/77", "completion": "function is_Diff(n):\n    sum = 0\n    odd_sum = 0\n    for i from 1 to n.length:\n        digit = n modulo 10\n        if i mod 2 != 0 then\n            odd_sum += digit\n        else\n            sum += digit\n        n = n div 10\n    return (sum - odd_sum) mod 11 == "}
{"task_id": "Mbpp/77", "completion": ""}
{"task_id": "Mbpp/77", "completion": "\nfunction is_Diff(n):\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum = sum + digit\n        temp = temp // 10\n    return (sum % 11 == 0"}
{"task_id": "Mbpp/77", "completion": "\nfunction is_Diff(n):\n    sum = 0\n    odd_sum = 0\n    even_index = 1\n    while n > 0:\n        digit = n mod 10\n        if even_index % 2 == 0:\n            sum = sum + digit\n        else:\n            odd_sum = odd_sum + digit\n        n = n / 10\n        even_index = even_index + 1\n    return (sum - odd_sum) % 11 == "}
{"task_id": "Mbpp/77", "completion": "function is_Diff(n):\n    sum = 0\n    odd_sum = 0\n    for i from 1 to length(n) step 2:\n        digit = int(midstr(n, i, i))  // convert to integer\n        sum = sum + digit\n    for i from 0 to length(n)-1 step 2:\n        digit = int(midstr(n, i, i+1))\n        odd_sum = odd_sum + digit\n    if sum - odd_sum == 0 then\n        return True\n    else\n        return Fals"}
{"task_id": "Mbpp/79", "completion": "\nfunction word_len(s):\n    len_s = length(s)\n    if (len_s modulo 2) == 0 then\n        return True\n    else\n        return Fals"}
{"task_id": "Mbpp/79", "completion": "\nfunction word_len(s):\n    if (length of s) mod 2 equals 0 then\n        return True\n    else\n        return False\n"}
{"task_id": "Mbpp/79", "completion": "\nfunction word_len(s):\n    if len(s) % 2 != 0:\n        return False\n    else:\n        return True\n"}
{"task_id": "Mbpp/79", "completion": "function word_len(s):\n    length = len(s)\n    if length mod 2 != 0:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/79", "completion": "function word_len(s):\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/79", "completion": ""}
{"task_id": "Mbpp/79", "completion": "function word_len(s)\n    if length(s) % 2 == 0 then\n        return True\n    else\n        return False\n"}
{"task_id": "Mbpp/79", "completion": "function word_len(s):\n    if length(s) % 2 != 0:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/79", "completion": ""}
{"task_id": "Mbpp/79", "completion": ""}
{"task_id": "Mbpp/80", "completion": "function tetrahedral_number(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i * (i + 1) * (i + 2) / 3\n        i = i + 1\n    return su"}
{"task_id": "Mbpp/80", "completion": "function tetrahedral_number(n):\n    total = 0\n    i = 1\n    while i <= n:\n        total += i * (i + 1) * (i + 2) / 3\n        i += 1\n    return int(total)\n"}
{"task_id": "Mbpp/80", "completion": "\nfunction tetrahedral_number(n):\n    result = 0\n    k = 1\n    while k <= n:\n        result += k * (k + 1) * (k + 2) / 3\n        k = k + 1\n    return result\n"}
{"task_id": "Mbpp/80", "completion": "\nfunction tetrahedral_number(n):\n    if n <= 0:\n        return 0\n    else:\n        result = 0\n        k = 1\n        while k <= n:\n            result += k * (k + 1) * (k + 2) / 3\n            k += 1\n        return int(result"}
{"task_id": "Mbpp/80", "completion": "\nfunction tetrahedral_number(n):\n    total = 0\n    i = 1\n    while i <= n:\n        total = total + i * (i + 1) * (i + 2) / 3\n        i = i + 1\n    return total\n"}
{"task_id": "Mbpp/80", "completion": ""}
{"task_id": "Mbpp/80", "completion": "\nfunction tetrahedral_number(n):\n    result = 0\n    i = 1\n    while i <= n:\n        j = 1\n        k = 1\n        sum = 0\n        while j <= i:\n            sum = sum + k\n            k = k + 1\n        result = result + sum\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/80", "completion": "function tetrahedral_number(n):\n    total := 0\n    i := 1\n    while i <= n:\n        total := total + i * (i + 1) * (i + 2) / 3\n        i := i + 1\n    return total\n"}
{"task_id": "Mbpp/80", "completion": "function tetrahedral_number(n)\n    total = 0\n    k = 1\n    while k <= n\n        total = total + (k * (k + 1) / 2) ** 2\n        k = k + 1\n    return total\n"}
{"task_id": "Mbpp/80", "completion": "function tetrahedral_number(n)\n    result = 0\n    k = 1\n    while k <= n:\n        result += k * (k + 1) * (k + 2) / 3\n        k += 1\n    return result\n"}
{"task_id": "Mbpp/82", "completion": "function volume_sphere(r)\n    result = (4/3) * 3.14159 * (r^2) * r\n    return result\n"}
{"task_id": "Mbpp/82", "completion": "function volume_sphere(r)\n    return (4/3) * pi * r^3\n"}
{"task_id": "Mbpp/82", "completion": "\nfunction volume_sphere(r):\n    volume = (4/3) * pi * (r^2)\n    return volume\n"}
{"task_id": "Mbpp/82", "completion": ""}
{"task_id": "Mbpp/82", "completion": ""}
{"task_id": "Mbpp/82", "completion": "function volume_sphere(r):\n    pi = 3.14159\n    volume = (4/3) * pi * r^3\n    return volume\n"}
{"task_id": "Mbpp/82", "completion": "function volume_sphere(r):\n    pi = 3.14159\n    volume = (4/3) * pi * r^3\n    return volum"}
{"task_id": "Mbpp/82", "completion": ""}
{"task_id": "Mbpp/82", "completion": "function volume_sphere(radius r):\n    return (4/3) * pi * (r^3)\n"}
{"task_id": "Mbpp/82", "completion": ""}
{"task_id": "Mbpp/83", "completion": "function get_Char(strr)\n    ascii_sum = 0\n    for each char in strr\n        ascii_sum = ascii_sum + ord(char)\n    return chr(ascii_sum % 26"}
{"task_id": "Mbpp/83", "completion": "\nfunction get_Char(strr):\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26"}
{"task_id": "Mbpp/83", "completion": "function get_Char(strr):\n    result = \"\"\n    total = 0\n    for char in strr:\n        total = (total + ord(char) - 96) % 26\n    result = chr(total + 96)\n    return resul"}
{"task_id": "Mbpp/83", "completion": "function get_Char(strr)\n    result = \"\"\n    for char in strr\n        result += chr((ord(char) - 97 + 1) % 26 + 97)\n    return resul"}
{"task_id": "Mbpp/83", "completion": ""}
{"task_id": "Mbpp/83", "completion": "function get_Char(strr):\n    result = \"\"\n    for char in strr:\n        result += chr((ord(char) - 97 + 1) % 26)\n    return result"}
{"task_id": "Mbpp/83", "completion": "\nfunction get_Char(strr)\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    result = chr(sum_ascii % 26)\n    return result\n"}
{"task_id": "Mbpp/83", "completion": "\nfunction get_Char(strr):\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char) - 96\n    result = chr((char_sum % 26 + 96))\n    return result\n"}
{"task_id": "Mbpp/83", "completion": ""}
{"task_id": "Mbpp/83", "completion": ""}
{"task_id": "Mbpp/84", "completion": "function sequence(n):\n    a, b = 0, 1\n    if n == 1:\n        return a\n    for i in range(1, n):\n        a, b = b, a + b\n    return "}
{"task_id": "Mbpp/84", "completion": "function sequence(n):\n    sequence = [0, 1]\n    while len(sequence) < n:\n        sequence.append((sequence[-1] + sequence[-2]) % 2)\n    return sequence[-1"}
{"task_id": "Mbpp/84", "completion": "function sequence(n):\n    a = 0\n    b = 1\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        for i from 3 to n:\n            temp = a + b\n            a = b\n            b = temp\n        return "}
{"task_id": "Mbpp/84", "completion": "\nfunction sequence(n):\n    a, b = 1, 1\n    for i in range(2, n):\n        a, b = b, a + b\n    return b\n"}
{"task_id": "Mbpp/84", "completion": "FUNCTION sequence(n)\n    a = 1\n    b = 1\n    FOR i FROM 2 TO n\n        t = a\n        a = b\n        b = t + b\n    RETURN "}
{"task_id": "Mbpp/84", "completion": "function sequence(n):\n    a, b = 1, 1\n    if n == 1:\n        return 1\n    else:\n        for i in range(2, n):\n            a, b = b, a + b\n        return "}
{"task_id": "Mbpp/84", "completion": "function sequence(n)\n    a, b = 1, 1\n    for i from 1 to n - 1\n        t = a + b\n        a = b\n        b = t\n    return b\n"}
{"task_id": "Mbpp/84", "completion": "function sequence(n)\n    let result = 1\n    let a = 1\n    let b = 1\n    for i from 2 to n\n        let temp = a + b\n        a = b\n        b = temp\n    return b\n"}
{"task_id": "Mbpp/84", "completion": "\nfunction sequence(n):\n    a = 0\n    b = 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    for i from 2 to n - 1:\n        temp = a\n        a = b\n        b = temp + b\n    return "}
{"task_id": "Mbpp/84", "completion": "function sequence(n)\n    result = 0\n    k = 1\n    while k < n:\n        result += 1\n        if k % 3 == 0 or k % 5 == 0:\n            result -= 1\n        k += 1\n    return result\n"}
{"task_id": "Mbpp/85", "completion": ""}
{"task_id": "Mbpp/85", "completion": "\nfunction surfacearea_sphere(r)\n    result = 4 * pi * r^2\n    return result\n"}
{"task_id": "Mbpp/85", "completion": "\nfunction surfacearea_sphere(r):\n    area = 4 * math.pi * (r ** 2)\n    return are"}
{"task_id": "Mbpp/85", "completion": ""}
{"task_id": "Mbpp/85", "completion": "function surfacearea_sphere(r)\n    return 4 * 3.14159 * r^2\n"}
{"task_id": "Mbpp/85", "completion": "\nfunction surface_area_sphere(radius):\n    surface_area = 4 * pi * (radius^2)\n    return surface_area\n"}
{"task_id": "Mbpp/85", "completion": "\nFUNCTION surfacearea_sphere(r)\n    DECLARE surface_area AS REAL\n    surface_area = 4 * PI * r^2\n    RETURN surface_area\n"}
{"task_id": "Mbpp/85", "completion": "function surfacearea_sphere(r)\n    return 4 * pi * r^2\n"}
{"task_id": "Mbpp/85", "completion": "\nfunction surface_area_sphere(r)\n    pi = 3.14159\n    return 4 * pi * r^"}
{"task_id": "Mbpp/85", "completion": "function surface_area_sphere(r):\n    PI = 3.14159\n    area = 4 * PI * r^2\n    return are"}
{"task_id": "Mbpp/86", "completion": "\nfunction centered_hexagonal_number(n):\n    return 2 * (n * ((3 * n) - 1)) - "}
{"task_id": "Mbpp/86", "completion": "function centered_hexagonal_number(n)\n    total := 0\n    i := 1\n    while total <= n\n        hexagon := i * (2 * i - 1)\n        total := total + hexagon\n        i := i + 1\n    return total - (hexagon - (i - 1) * (2 * (i - 1) - 1))\n"}
{"task_id": "Mbpp/86", "completion": "\nfunction centered_hexagonal_number(n):\n    total = 0\n    i = 1\n    while total < n:\n        hexagonal_number = (i * (3 * i - 1))\n        total += hexagonal_number\n        i += 1\n    return 2 * (n - 1) * (3 * (n - 1) - 1)\n"}
{"task_id": "Mbpp/86", "completion": "function centeredHexagonalNumber(n):\n    result = 0\n    i = 1\n    while True:\n        hexagonal = i * (2 * i - 1)\n        if hexagonal > n:\n            return result + (n - (i - 1) * (2 * i - 3)) // 2\n        result += hexagonal\n        i += 1\n"}
{"task_id": "Mbpp/86", "completion": "function centered_hexagonal_number(n):\n    if n <= 0:\n        return 0\n    else:\n        return (n * (2 * n - 1)) - "}
{"task_id": "Mbpp/86", "completion": "function centered_hexagonal_number(n):\n    k = 1\n    total = 0\n    while True:\n        hexagonal_number = k * (2 * k - 1)\n        if n <= total + hexagonal_number:\n            return hexagonal_number + 2 * (k - 1) - 1\n        total += hexagonal_number\n        k += "}
{"task_id": "Mbpp/86", "completion": "function centered_hexagonal_number(n):\n    result = 0\n    i = 1\n    while true:\n        hexagonal_number = i * (2 * i - 1)\n        if hexagonal_number > n:\n            return result + (n - (i-1) * (2 * i - 3)) / 2\n        result += hexagonal_number\n        i += "}
{"task_id": "Mbpp/86", "completion": "\nfunction centered_hexagonal_number(n):\n    if n <= 0:\n        return 0\n    else:\n        return n*(2*n - 1)\n"}
{"task_id": "Mbpp/86", "completion": "\nfunction centered_hexagonal_number(n):\n    if n < 1:\n        return -1\n    else:\n        return (6*n^2) - 3*n + 1\n"}
{"task_id": "Mbpp/86", "completion": "function centeredHexagonalNumber(n):\n    if n < 1:\n        return 0\n    return (6 * n^2 - n) // "}
{"task_id": "Mbpp/87", "completion": "function merge_dictionaries_three(dict1, dict2, dict3)\n    new_dict = {}\n    for key, value in dict1.items():\n        if key not in new_dict:\n            new_dict[key] = value\n    for key, value in dict2.items():\n        if key not in new_dict:\n            new_dict[key] = value\n    for key, value in dict3.items():\n        if key not in new_dict:\n            new_dict[key] = value\n    return new_dict\n"}
{"task_id": "Mbpp/87", "completion": "function merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dic"}
{"task_id": "Mbpp/87", "completion": "function merge_dictionaries_three(dict1, dict2, dict3)\n    result = {}\n    for key in set(list(dict1.keys()) + list(dict2.keys()) + list(dict3.keys())):\n        if key in dict1:\n            result[key] = dict1[key]\n        elif key in dict2:\n            result[key] = dict2[key]\n        else:\n            result[key] = dict3[key]\n    return result\n"}
{"task_id": "Mbpp/87", "completion": "function merge_dictionaries_three(dict1, dict2, dict3):\n    result = {}\n    for key in set(list(dict1.keys()) + list(dict2.keys()) + list(dict3.keys())):\n        if key in dict1:\n            result[key] = dict1[key]\n        elif key in dict2:\n            result[key] = dict2[key]\n        else:\n            result[key] = dict3[key]\n    return result\n"}
{"task_id": "Mbpp/87", "completion": ""}
{"task_id": "Mbpp/87", "completion": "function merge_dictionaries_three(dict1, dict2, dict3)\n    result = {}\n    for key, value in dict1.items():\n        if not key in result:\n            result[key] = value\n    for key, value in dict2.items():\n        if not key in result and not value in result.values():\n            result[key] = value\n    for key, value in dict3.items():\n        if not key in result and not value in result.values():\n            result[key] = value\n    return result\n"}
{"task_id": "Mbpp/87", "completion": "\nfunction merge_dictionaries_three(dict1, dict2, dict3)\n    merged_dict = {}\n    for key in set(list(dict1.keys()) + list(dict2.keys()) + list(dict3.keys()))\n        if key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n"}
{"task_id": "Mbpp/87", "completion": "\nfunction merge_dictionaries_three(dict1, dict2, dict3)\n    merged_dict = {}\n    for key in set(list(dict1.keys()) + list(dict2.keys()) + list(dict3.keys()):\n        if key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n"}
{"task_id": "Mbpp/87", "completion": "\nfunction merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3"}
{"task_id": "Mbpp/87", "completion": "function merge_dictionaries_three(dict1, dict2, dict3):\n    result = {}\n    for key in set(list(dict1.keys()) + list(dict2.keys()) + list(dict3.keys())):\n        if key in dict1:\n            result[key] = dict1[key]\n        elif key in dict2:\n            result[key] = dict2[key]\n        else:\n            result[key] = dict3[key]\n    return resul"}
{"task_id": "Mbpp/88", "completion": "function freq_count(list1):\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dic"}
{"task_id": "Mbpp/88", "completion": "\nfunction freq_count(list1):\n    frequency_dict = {}\n    for element in list1:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict\n"}
{"task_id": "Mbpp/88", "completion": "\nfunction freq_count(list1):\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n"}
{"task_id": "Mbpp/88", "completion": "function freq_count(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dic"}
{"task_id": "Mbpp/88", "completion": "function freq_count(list1):\n    result = {}\n    for element in list1:\n        if element in result:\n            result[element] += 1\n        else:\n            result[element] = 1\n    return resul"}
{"task_id": "Mbpp/88", "completion": "\nfunction freq_count(list1):\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return fre"}
{"task_id": "Mbpp/88", "completion": ""}
{"task_id": "Mbpp/88", "completion": ""}
{"task_id": "Mbpp/88", "completion": "function freq_count(list1):\n    result = {}\n    for item in list1:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return resul"}
{"task_id": "Mbpp/88", "completion": "\nfunction freq_count(list1):\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return fre"}
{"task_id": "Mbpp/89", "completion": "\nfunction closest_num(n):\n    if n > 0:\n        return n - 1\n    else:\n        return 1\n"}
{"task_id": "Mbpp/89", "completion": "function closest_num(N):\n    if N > 0:\n        return N - 1\n    else:\n        return "}
{"task_id": "Mbpp/89", "completion": "\nfunction closest_num(n):\n    if n == 0:\n        return -1\n    else:\n        return n - 1\n"}
{"task_id": "Mbpp/89", "completion": "function closest_num(n)\n    if n <= 0:\n        return 0\n    else:\n        prev = n - 1\n        while prev >= 1 and not is_smaller_than_n(prev, n):\n            prev = prev - 1\n        return prev\n\nfunction is_smaller_than_n(a, b)\n    return a < b\n"}
{"task_id": "Mbpp/89", "completion": "function closest_num(n)\n    if n - 1 > 0 then\n        return n - 1\n    else\n        return 0\n"}
{"task_id": "Mbpp/89", "completion": "\nfunction closest_num(n):\n    if n > 0:\n        return n - 1\n    else:\n        return n + "}
{"task_id": "Mbpp/89", "completion": "\nfunction closest_num(n)\n    smaller = -1\n    for i from 1 to n-1\n        if i < n and (smaller == -1 or n-i <= n-smaller)\n            smaller = i\n    return smaller\n"}
{"task_id": "Mbpp/89", "completion": "\nfunction closest_num(n)\n    smallest = n - 1\n    while (true) {\n        if (n % i == 0) then\n            return i\n        else\n            i = i - 1\n    }\n"}
{"task_id": "Mbpp/89", "completion": "\nfunction closest_num(n)\n    smallest_greater_than_n = -inf\n    for i in range(n-1, 0, -1):\n        if i < n and i > smallest_greater_than_n:\n            return i\n    return 0\n"}
{"task_id": "Mbpp/89", "completion": "function closest_num(N)\n    prev = -1\n    for i from N-1 downto 1\n        if i < N\n            return i\n    return pre"}
{"task_id": "Mbpp/90", "completion": "\nFUNCTION max_length(list1)\n    longest_word = \"\"\n    max_length = 0\n    FOR each word IN list1\n        IF length(word) > max_length\n            longest_word = word\n            max_length = length(word)\n    RETURN length(longest_word)\nEND FUNCTIO"}
{"task_id": "Mbpp/90", "completion": "function longest_word_length(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"}
{"task_id": "Mbpp/90", "completion": "\nfunction len_log(list1):\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"}
{"task_id": "Mbpp/90", "completion": "function max_length = 0\nfor each word in list1:\n    if len(word) > max_length:\n        max_length = len(word)\nreturn max_length\n"}
{"task_id": "Mbpp/90", "completion": "function longest_word_length(list1)\n    max_length = 0\n    for each word in list1:\n        if length(word) > max_length:\n            max_length = length(word)\n    return max_length\n"}
{"task_id": "Mbpp/90", "completion": "function max_length(list1):\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_lengt"}
{"task_id": "Mbpp/90", "completion": "\nfunction longest_word_length(input_list):\n    max_length = 0\n    for word in input_list:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"}
{"task_id": "Mbpp/90", "completion": "function max_length(input_list):\n    max_len = 0\n    for word in input_list:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"}
{"task_id": "Mbpp/90", "completion": "function longest_word_length(lst):\n    max_length = 0\n    for word in lst:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_lengt"}
{"task_id": "Mbpp/90", "completion": "function longest_word_length(input_list):\n    max_length = 0\n    for word in input_list:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_lengt"}
{"task_id": "Mbpp/91", "completion": "\nfunction find_substring(list_str, str)\n    found = False\n    for s in list_str:\n        if str in s:\n            found = True\n            break\n    return found\n"}
{"task_id": "Mbpp/91", "completion": "function find_substring(str_list, sub_str)\n    for str in str_list:\n        if sub_str in str:\n            return True\n    return False\n"}
{"task_id": "Mbpp/91", "completion": "\nfunction find_substring(list_of_strings, sub_str):\n    for s in list_of_strings:\n        if sub_str in s:\n            return True\n    return Fals"}
{"task_id": "Mbpp/91", "completion": "function find_substring(list_of_strings, sub_str):\n    for str1 in list_of_strings:\n        if sub_str in str1:\n            return True\n    return Fals"}
{"task_id": "Mbpp/91", "completion": "for str2 in str1:\n    if sub_str in str2:\n        return True\nreturn False\n"}
{"task_id": "Mbpp/91", "completion": "\nfunction find_substring(list_of_strings, substring):\n    for str in list_of_strings:\n        if substring in str:\n            return True\n    return False\n"}
{"task_id": "Mbpp/91", "completion": "function find_substring(list1, str2)\n    for each str in list1:\n        if str2 in str:\n            return True\n    return False\n"}
{"task_id": "Mbpp/91", "completion": "\nfunction find_substring(list_of_strings, str1):\n    for s in list_of_strings:\n        if str1 in s:\n            return True\n    return False\n"}
{"task_id": "Mbpp/91", "completion": "function find_substring(list_of_strings, target_string)\n    for each string in list_of_strings:\n        if target_string in string then\n            return True\n    return False\n"}
{"task_id": "Mbpp/91", "completion": "\nfunction find_substring(list_of_strings, target_string):\n    for string in list_of_strings:\n        if target_string in string:\n            return True\n    return Fals"}
{"task_id": "Mbpp/92", "completion": ""}
{"task_id": "Mbpp/92", "completion": ""}
{"task_id": "Mbpp/92", "completion": ""}
{"task_id": "Mbpp/92", "completion": "\nFUNCTION is_undulating(n)\n  i = 0\n  previous_digit = n MOD 10\n  while i < LENGTH OF n\n    current_digit = n DIV 10^i MOD 10\n    IF current_digit = previous_digit\n      return FALSE\n    previous_digit = current_digit\n    i = i + 1\n  END WHILE\n  RETURN TRUE\nEND FUNCTION\n"}
{"task_id": "Mbpp/92", "completion": "\nfunction is_undulating(n):\n    str_n = str(n)\n    i = 0\n    while i < len(str_n)-1:\n        if abs(int(str_n[i]) - int(str_n[i+1])) > 1:\n            return False\n        i += 1\n    return True\n"}
{"task_id": "Mbpp/92", "completion": ""}
{"task_id": "Mbpp/92", "completion": "\nALGORITHM is_undulating(n)\n    DECLARE i AS INTEGER, last_digit AS INTEGER\n    SET i TO 0\n    SET last_digit TO THE LAST DIGIT OF n\n    WHILE i < LENGTH OF n - 1\n        IF ABS(INT(n / 10^(i+1)) MOD 10 - last_digit) > 1 THEN\n            RETURN FALSE\n        END IF\n        SET last_digit TO INT(n / 10^i) MOD 10\n        INCREMENT i BY 1\n    END WHILE\n    RETURN TRUE\n"}
{"task_id": "Mbpp/92", "completion": "function is_undulating(n):\n    str_n = str(n)\n    for i in range(1, len(str_n) - 1):\n        if abs(int(str_n[i]) - int(str_n[i-1])) != abs(int(str_n[i+1]) - int(str_n[i])):\n            return False\n    return Tru"}
{"task_id": "Mbpp/92", "completion": ""}
{"task_id": "Mbpp/92", "completion": "\nfunction is_undulating(n):\n    str_n = str(n)\n    i = 0\n    while i < len(str_n) - 1:\n        if abs(int(str_n[i]) - int(str_n[i + 1])) != 1:\n            return False\n        i = i + 1\n    return True\n"}
{"task_id": "Mbpp/93", "completion": "function power(a, b)\n    result = 1\n    for i = 1 to b\n        result = result * a\n    end for\n    return resul"}
{"task_id": "Mbpp/93", "completion": ""}
{"task_id": "Mbpp/93", "completion": "\nfunction power(a, b):\n    result = 1\n    for i from 1 to b:\n        result = result * a\n    return resul"}
{"task_id": "Mbpp/93", "completion": "function power(a, b):\n    result = 1\n    for i from 0 to b-1:\n        result = result * a\n    return resul"}
{"task_id": "Mbpp/93", "completion": "\nfunction power(a, b)\n    result = 1\n    while (b > 0) do\n        if (b % 2) == 1 then\n            result = result * a\n        a = a * a\n        b = b / 2\n    return result\n"}
{"task_id": "Mbpp/93", "completion": "`if b == 0 then \n    return 1 \nelse if b % 2 == 0 then \n    temp = power(a, b/2) \n    return temp * temp \nelse \n    temp = power(a, (b-1)/2) \n    return a * temp * temp"}
{"task_id": "Mbpp/93", "completion": "function power(a, b)\n    if b is 0 then\n        return 1\n    else if b is 1 then\n        return a\n    else if b is even then\n        temp = power(a, b / 2)\n        return temp * temp\n    else\n        temp = power(a, (b - 1) / 2)\n        return a * temp * temp\n"}
{"task_id": "Mbpp/93", "completion": ""}
{"task_id": "Mbpp/93", "completion": "function power(a, b)\n    if b is 0 then\n        return 1\n    else\n        result = 1\n        for i from 1 to b do\n            result = result * a\n        return result\n"}
{"task_id": "Mbpp/93", "completion": "\nfunction power(a, b):\n    if b is 0:\n        return 1\n    elif b is 1:\n        return a\n    else:\n        if b mod 2 is 0:\n            half_power = power(a, b/2)\n            return half_power * half_power\n        else:\n            half_power = power(a, (b-1)/2)\n            return a * half_power * half_powe"}
{"task_id": "Mbpp/94", "completion": "input_list = [(x[1], x[0]) for x in test_list]\nmin_second_value = min(input_list)\nresult = [x[1] for x in input_list if x[0] == min_second_value][0]\n"}
{"task_id": "Mbpp/94", "completion": "function index_minimum(list_of_tuples):\n    return min(list_of_tuples, key=itemgetter(1))[0]\n"}
{"task_id": "Mbpp/94", "completion": "function return_min_second_value(list_of_tuples)\n    min_second_value = list_of_tuples[0][1]\n    result = list_of_tuples[0][0]\n\n    for pair in list_of_tuples:\n        if pair[1] < min_second_value:\n            min_second_value = pair[1]\n            result = pair[0]\n\n    return resul"}
{"task_id": "Mbpp/94", "completion": "function min_second_value(lst)\n    return next(x[0] for x in sorted(lst, key=itemgetter(1)))[0]\n"}
{"task_id": "Mbpp/94", "completion": "\nfunction min_value_index(lst):\n    return min(lst, key=itemgetter(1))[0]\n"}
{"task_id": "Mbpp/94", "completion": "function index_minimum(test_list):\n    min_tuple = min(test_list, key=itemgetter(1))\n    return min_tuple[0]\n"}
{"task_id": "Mbpp/94", "completion": "min_tuple = min(test_list, key=itemgetter(1))\nreturn next(item[0] for item in test_list if item == min_tuple)\n"}
{"task_id": "Mbpp/94", "completion": "\nfunction find_smallest_second_value(input_list):\n    return min(input_list, key=itemgetter(1))[0]\n"}
{"task_id": "Mbpp/94", "completion": "minimum = min(test_list, key=itemgetter(1))\nreturn minimum[0]\n"}
{"task_id": "Mbpp/94", "completion": "min_tuple = min(test_list, key=itemgetter(1))\nreturn min_tuple[0]\n"}
{"task_id": "Mbpp/95", "completion": ""}
{"task_id": "Mbpp/95", "completion": ""}
{"task_id": "Mbpp/95", "completion": ""}
{"task_id": "Mbpp/95", "completion": ""}
{"task_id": "Mbpp/95", "completion": "function Find_Min_Length(lst)\n    min_length = INF\n    for each list in lst\n        if length of current list < min_length\n            min_length = length of current list\n    return min_lengt"}
{"task_id": "Mbpp/95", "completion": ""}
{"task_id": "Mbpp/95", "completion": ""}
{"task_id": "Mbpp/95", "completion": ""}
{"task_id": "Mbpp/95", "completion": ""}
{"task_id": "Mbpp/95", "completion": ""}
{"task_id": "Mbpp/96", "completion": "\nfunction divisor(n)\n    count = 0\n    i = 1\n    while i <= sqrt(n)\n        if n mod i is 0\n            j = n div i\n            if i equals j then\n                count = count + 1\n            else\n                count = count + 2\n            end if\n        end if\n        i = i + 1\n    end while\n    return coun"}
{"task_id": "Mbpp/96", "completion": ""}
{"task_id": "Mbpp/96", "completion": "\nfunction divisor(n):\n    count = 0\n    for i from 1 to sqrt(n):\n        if n % i is 0:\n            count = count + 2\n        if i * i is n:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/96", "completion": "\nfunction divisor(n):\n    count = 0\n    for i from 1 to sqrt(n)\n        if n mod i is 0 then\n            if i * i is n then\n                count = count + 1\n            else\n                count = count + 2\n        end if\n    end for\n    return coun"}
{"task_id": "Mbpp/96", "completion": "function divisor(n)\n    count := 0\n    i := 1\n    while i <= n\n        if n mod i = 0 then\n            count := count + 1\n        end if\n        i := i + 1\n    end while\n    return coun"}
{"task_id": "Mbpp/96", "completion": "function divisor(n)\n    count := 0\n    i := 1\n    while i <= sqrt(n)\n        if n mod i is equal to 0\n            count := count + 2\n        i := i + 1\n    return count\n"}
{"task_id": "Mbpp/96", "completion": ""}
{"task_id": "Mbpp/96", "completion": "function divisor(n)\n    count = 0\n    i = 1\n    while i <= sqrt(n)\n        if n % i == 0\n            if i * i == n\n                count = count + 1\n            else\n                count = count + 2\n            i = i + 1\n        else\n            i = i + 1\n    return count\n"}
{"task_id": "Mbpp/96", "completion": "\nfunction divisor(n):\n    count = 0\n    for i from 1 to sqrt(n)\n        if n mod i is 0\n            count = count + 2\n    if sqrt(n) * sqrt(n) == n\n        count = count + 1\n    return count\n"}
{"task_id": "Mbpp/96", "completion": "function divisor(n)\n    count = 0\n    for i from 1 to sqrt(n)\n        if n mod i is 0\n            count = count + 2\n        if n mod i equals i\n            count = count + 1\n    return coun"}
{"task_id": "Mbpp/97", "completion": "\nfunction frequency_lists(list1):\n    frequency = {}\n    for lst in list1:\n        for item in lst:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequenc"}
{"task_id": "Mbpp/97", "completion": "\nfunction frequency_lists(list1):\n    flat_list = []\n    for sublist in list1:\n        flat_list.extend(sublist)\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dic"}
{"task_id": "Mbpp/97", "completion": "\nfunction frequency_lists(list1):\n    result = {}\n    for sub_list in list1:\n        for item in sub_list:\n            if item not in result:\n                result[item] = 0\n            result[item] += 1\n    return result\n"}
{"task_id": "Mbpp/97", "completion": "function frequency_lists(list1):\n    result = {}\n    for i in list1:\n        for j in i:\n            if j in result:\n                result[j] += 1\n            else:\n                result[j] = 1\n    return resul"}
{"task_id": "Mbpp/97", "completion": "data = []\nfor sub_list in list1:\n    data += sub_list\nfreq = {}\nfor item in data:\n    if item in freq:\n        freq[item] += 1\n    else:\n        freq[item] = 1\nreturn freq\n"}
{"task_id": "Mbpp/97", "completion": "function frequency_lists(list1):\n    result = {}\n    for sublist in list1:\n        for num in sublist:\n            if num in result:\n                result[num] += 1\n            else:\n                result[num] = 1\n    return result\n"}
{"task_id": "Mbpp/97", "completion": "function frequency_lists(list1):\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequenc"}
{"task_id": "Mbpp/97", "completion": "frequency = {}\nfor inner_list in list1:\n    for item in inner_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\nreturn frequenc"}
{"task_id": "Mbpp/97", "completion": "function frequency_lists(list1)\n    frequency = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency:\n                frequency[element] += 1\n            else:\n                frequency[element] = 1\n    return frequenc"}
{"task_id": "Mbpp/97", "completion": "data = []\nfor lst in list1:\n    data.extend(lst)\n\nfrequency_dict = {}\nfor item in data:\n    if item in frequency_dict:\n        frequency_dict[item] += 1\n    else:\n        frequency_dict[item] = 1\nreturn frequency_dict\n"}
{"task_id": "Mbpp/98", "completion": "\nfunction multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers"}
{"task_id": "Mbpp/98", "completion": "\nfunction multiply_num(numbers):\n    product = 1\n    for number in numbers:\n        product = product * number\n    return product / len(numbers"}
{"task_id": "Mbpp/98", "completion": ""}
{"task_id": "Mbpp/98", "completion": "function multiply_num(numbers)\n    product = 1\n    for each num in numbers:\n        product = product * num\n    return product / len(numbers"}
{"task_id": "Mbpp/98", "completion": ""}
{"task_id": "Mbpp/98", "completion": ""}
{"task_id": "Mbpp/98", "completion": ""}
{"task_id": "Mbpp/98", "completion": ""}
{"task_id": "Mbpp/98", "completion": "function multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers"}
{"task_id": "Mbpp/98", "completion": ""}
{"task_id": "Mbpp/99", "completion": "\nfunction decimal_to_binary(n):\n    binary_string = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n = n // 2\n    return binary_string\n"}
{"task_id": "Mbpp/99", "completion": "procedure decimal_to_binary(n)\n    while n > 1\n        remainder = n mod 2\n        n = n div 2\n    end while\n    return n if n = 1 else '1'\n"}
{"task_id": "Mbpp/99", "completion": "function decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        if remainder == 1:\n            binary = '1' + binary\n        else:\n            binary = '0' + binary\n        n = n // 2\n    return binar"}
{"task_id": "Mbpp/99", "completion": "function decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        result = ''\n        while n > 0:\n            remainder = n % 2\n            n = n // 2\n            result = str(remainder) + result\n        return resul"}
{"task_id": "Mbpp/99", "completion": "function decimal_to_binary(n)\n    binary = \"\"\n    while n > 0:\n        remainder = n mod 2\n        if remainder == 1:\n            binary = \"1\" + binary\n        else:\n            binary = \"0\" + binary\n        n = n div 2\n    return binar"}
{"task_id": "Mbpp/99", "completion": "\nfunction decimal_to_binary(n)\n    if n <= 0:\n        return '0'\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n"}
{"task_id": "Mbpp/99", "completion": "function decimal_to_binary(n):\n    if n <= 0:\n        return \"0\"\n    else:\n        return bin(n)[2:"}
{"task_id": "Mbpp/99", "completion": "function decimal_to_binary(n)\n    if n <= 0\n        return ''\n    else\n        remainder = n mod 2\n        result = decimal_to_binary(n div 2)\n        if remainder == 1\n            return '1' + result\n        else\n            return '0' + result\n"}
{"task_id": "Mbpp/99", "completion": "function decimal_to_binary(n):\n    if n <= 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"}
{"task_id": "Mbpp/99", "completion": "function decimal_to_binary(n)\n    if n <= 0:\n        return '0'\n    else:\n        remainder = n mod 2\n        if remainder == 1:\n            result = '1'\n        else:\n            result = '0'\n        quotient = n div 2\n        if quotient > 0:\n            result = decimal_to_binary(quotient) + result\n        return result\n"}
{"task_id": "Mbpp/100", "completion": "function next_smallest_palindrome(num):\n    i = num + 1\n    while True:\n        if is_palindrome(i):\n            return i\n        i += 1\n\nfunction is_palindrome(n):\n    s = tostring(n)\n    for i from 0 to floor(len(s) / 2):\n        if s[i] != s[len(s) - 1 - i]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/100", "completion": "\nfunction next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"}
{"task_id": "Mbpp/100", "completion": "\nfunction next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\nfunction is_palindrome(n):\n    s = str(n)\n    return s == s[::-1"}
{"task_id": "Mbpp/100", "completion": "function next_smallest_palindrome(num)\n    if num < 10 then\n        return num + 2\n    end if\n\n    increment = 1\n    while true\n        new_num = num + increment\n        str_new_num = convert new_num to string\n        if str_new_num == reverse(str_new_num) then\n            return new_num\n        end if\n        increment += 1\n    end while\nend function\n"}
{"task_id": "Mbpp/100", "completion": "if num < 10:\n    return str(num + 1).replace(str(len(str(num))), '0', '9')\n\nnum_str = str(num)\nfor i in range(len(num_str)):\n    if num_str[i] != num_str[-i-1]:\n        break\nleft = num_str[:i+1]\nright = num_str[-i-1::-1]\nmid = ''\nfor j in range(i):\n    mid += str((int(left[j]) - 1) % 10 + 1)\nreturn int(left + mid + right)\n"}
{"task_id": "Mbpp/100", "completion": "function next_smallest_palindrome(num):\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"}
{"task_id": "Mbpp/100", "completion": "FUNCTION next_smallest_palindrome(num)\n    IF num IS ODD\n        num <- num + 1\n        WHILE NOT is_palindrome(num)\n            num <- num + 1\n    ELSE\n        num <- num + 1\n        WHILE NOT is_palindrome(num)\n            num <- num + 1\n    RETURN num\n"}
{"task_id": "Mbpp/100", "completion": "function nextSmallestPalindrome(num)\n    if num is even:\n        num += 1\n        while not isPalindrome(num):\n            num += 1\n    else:\n        num += 1\n        while not isPalindrome(num):\n            num += 2\n    return num\n\nfunction isPalindrome(n)\n    temp = n\n    revNum = 0\n    while temp > 0:\n        digit = temp mod 10\n        revNum = revNum * 10 + digit\n        temp = temp div 10\n    return n == revNu"}
{"task_id": "Mbpp/100", "completion": "\nfunction nextSmallestPalindrome(num):\n    num += 1\n    while not isPalindrome(num):\n        num += 1\n    return num\n\nfunction isPalindrome(n):\n    str_n = str(n)\n    left = 0\n    right = len(str_n) - 1\n    while left < right:\n        if str_n[left] != str_n[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n"}
{"task_id": "Mbpp/100", "completion": "\nfunction nextSmallestPalindrome(num):\n    if num % 11 == 0:\n        return num + 1\n    else:\n        return int(str(num + 1)[::-1] + str(num + 1)"}
{"task_id": "Mbpp/101", "completion": ""}
{"task_id": "Mbpp/101", "completion": "\nfunction kth_element(arr, k):\n    k = k - 1  // Convert to 0-indexing\n    return arr[k"}
{"task_id": "Mbpp/101", "completion": ""}
{"task_id": "Mbpp/101", "completion": "DATA kth_index = k - 1;\nDATA kth_element = 0;\n\nIF k > size of arr THEN\n    return \"Invalid k\"\nELSE\n    sort arr in ascending order;\n    FOR each element in arr\n        IF position of element is equal to kth_index THEN\n            kth_element = element;\n            BREAK;\n    END FOR;\n    RETURN kth_element"}
{"task_id": "Mbpp/101", "completion": ""}
{"task_id": "Mbpp/101", "completion": ""}
{"task_id": "Mbpp/101", "completion": "function kth_element(arr, k)\n    if k > len(arr)\n        return \"k is out of bounds\"\n    else\n        return arr[k-1]\n"}
{"task_id": "Mbpp/101", "completion": ""}
{"task_id": "Mbpp/101", "completion": "\nfunction kth_element(arr, k)\n    if k < 1 then\n        return \"Invalid input: k should be a positive integer\"\n    end\n    if k > size(arr) then\n        return \"Invalid input: k is larger than the array size\"\n    end\n    return arr[k-1]\nend\n"}
{"task_id": "Mbpp/101", "completion": "function kth_element(arr, k)\n    if k > length(arr)\n        return error \"k is larger than the array length\"\n    else\n        sort arr in ascending order\n        return arr[k-1]\n"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word)\n    result = \"\"\n    for i in range(0, len(word)):\n        if word[i] == '_':\n            result = result + word[i+1].upper()\n        else:\n            if i == 0:\n                result = result + word[i].lower()\n            else:\n                result = result + word[i].lower()\n    return result\n"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word)\n    result = \"\"\n    found_upper = false\n    for each char in word\n        if char == '_'\n            found_upper = true\n        else if found_upper\n            result += char.upper()\n            found_upper = false\n        else\n            result += char\n    return result\n"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word):\n    components = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word)\n    result = \"\"\n    is_first = True\n    for i in word.split(\"_\")\n        if not is_first\n            result = result + i.capitalize()\n        else\n            result = result + i\n        is_first = False\n    return result\n"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word):\n    words = split(word, '_')\n    result = words[0].capitalize()\n    for i in range(1, len(words)):\n        result += words[i].capitalize()\n    return resul"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word):\n    result = \"\"\n    for i in range(len(word)):\n        if word[i] == '_':\n            result += word[i+1].upper()\n        else:\n            result += word[i].lower()\n    return result\n"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word)\n    result = \"\"\n    first_word = true\n    for char in word:\n        if char == '_':\n            first_word = false\n        elif not first_word:\n            result = result + char.upper()\n        else:\n            result = result + char\n    return result\n"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word)\n    result = \"\"\n    for i in range(len(word)):\n        if word[i] == '_':\n            result += word[i+1].upper()\n        else:\n            result += word[i]\n    return result.capitalize()\n"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word):\n    result = \"\"\n    for i in range(len(word)):\n        if i > 0 and word[i] == '_':\n            result += word[i+1].upper()\n        else:\n            result += word[i]\n    return resul"}
{"task_id": "Mbpp/102", "completion": "function snake_to_camel(word):\n    words = split(word, \"_\")\n    camel = \"\"\n    for i in range(len(words)):\n        if i > 0:\n            camel = camel + capitalize(words[i])\n        else:\n            camel = camel + words[i]\n    return camel\n"}
{"task_id": "Mbpp/103", "completion": "function eulerian_num(n, m):\n    if n == 0:\n        return 1\n    else:\n        return (n * eulerian_num(n-1, m)) + (m * eulerian_num(n-1, m-1))\n"}
{"task_id": "Mbpp/103", "completion": "\nfunction eulerian_num(n, m):\n    if n == 1:\n        return 1\n    else:\n        num = 0\n        for i in range(1, n):\n            num += eulerian_num(i - 1, m) * (n - i + 1)\n        return num\n"}
{"task_id": "Mbpp/103", "completion": "function eulerian_num(n, m):\n    if n == 1:\n        return 1\n    else:\n        result = 0\n        for k from 1 to n:\n            result = result + eulerian_num(k - 1, m) * (n choose k)\n        return result\n"}
{"task_id": "Mbpp/103", "completion": "function eulerian_num(n, m)\n    if m = 0 then\n        return 1\n    else\n        sum = 0\n        for i from 0 to n - 1 do\n            sum = sum + binomial(n - 1, i) * eulerian_num(i, m - 1)\n        end for\n        return sum\n    end if\n"}
{"task_id": "Mbpp/103", "completion": "\nfunction eulerian_num(n, m):\n    if m == 1:\n        return (n + 1)! / ((n - m + 1)! * m!)\n    else:\n        return eulerian_num(n - 1, m - 1) + (n - m + 1) * eulerian_num(n - 1, m)\n"}
{"task_id": "Mbpp/103", "completion": "\nfunction eulerian_num(n, m):\n    if n == 0:\n        return 0\n    elif m == 1:\n        return 1\n    else:\n        return ((2*m - 1) * eulerian_num(n-1, m-1)) + (n * eulerian_num(n-1, m))\n"}
{"task_id": "Mbpp/103", "completion": "function eulerian_num(n, m)\n    if m > n\n        return 0\n    else\n        k = 1\n        total = 0\n        for i from 2 to n - m + 1\n            total += k * (n - i + 1) choose i - 1\n            k = k * (i + m - 1) / i\n        return total\n"}
{"task_id": "Mbpp/103", "completion": "function eulerian_num(n, m)\n    if n == 0\n        return 0\n    else if m == 0\n        return 1\n    else\n        return eulerian_num(n-1, m-1) + (n-1) * eulerian_num(n-1, m)\n    end\n"}
{"task_id": "Mbpp/103", "completion": "function eulerian_num(n, m)\n    total := 0\n    for i from 1 to n\n        total := total + (n choose i) * (m - 1 choose i - 1)\n    return total\n"}
{"task_id": "Mbpp/103", "completion": "function eulerian_num(n, m):\n    if n == 1:\n        return m\n    elif n == 2:\n        return (m * (m - 1))\n    else:\n        return ((n - 1) * eulerian_num(n - 1, m)) + (eulerian_num(n - 1, m - 1) * eulerian_num(n - 1, m))\n"}
{"task_id": "Mbpp/104", "completion": "procedure sort_sublists(input_list)\n    foreach sublist in input_list\n        sort(sublist)\n    return input_list\n"}
{"task_id": "Mbpp/104", "completion": "function sort_sublists(input_list):\n    return [[sublist.sort(),) for sublist in input_list]\n"}
{"task_id": "Mbpp/104", "completion": "\nfor each sublist in input_list:\n    sublist.sort()\n"}
{"task_id": "Mbpp/104", "completion": "function sort_sublists(input_list):\n    result = []\n    for sublist in input_list:\n        result.append(sorted(sublist))\n    return result\n"}
{"task_id": "Mbpp/104", "completion": "\nfunction sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"}
{"task_id": "Mbpp/104", "completion": "function sort_sublists(input_list):\n    output_list = []\n    for sublist in input_list:\n        output_list.append(sorted(sublist))\n    return output_lis"}
{"task_id": "Mbpp/104", "completion": "algorithm\n  input: list of lists of strings, input_list\n  output: list of lists of strings\n  result = []\n  for each sublist in input_list:\n    sort(sublist)  // sort the sublist in-place\n    result.append(sublist)\n  return result\n"}
{"task_id": "Mbpp/104", "completion": "procedure sort_sublists(input_list)\n    for each sublist in input_list do\n        sort sublist in ascending order\n        output = new empty list\n        for each element in sorted sublist do\n            add element to output\n        end for\n        output = output\n    end for\n    return output\n"}
{"task_id": "Mbpp/104", "completion": "function sort_sublists(input_list)\n    result = []\n    for sublist in input_list:\n        result.append(sorted(sublist))\n    return result\n"}
{"task_id": "Mbpp/104", "completion": ""}
{"task_id": "Mbpp/105", "completion": ""}
{"task_id": "Mbpp/105", "completion": "data = input_list\ncount = 0\nfor item in data:\n    if item == True:\n        count = count + 1\nreturn coun"}
{"task_id": "Mbpp/105", "completion": ""}
{"task_id": "Mbpp/105", "completion": ""}
{"task_id": "Mbpp/105", "completion": ""}
{"task_id": "Mbpp/105", "completion": "function count(lst)\n    count := 0\n    for each element in lst\n        if element is True\n            count := count + 1\n    return count\n"}
{"task_id": "Mbpp/105", "completion": ""}
{"task_id": "Mbpp/105", "completion": "function count(lst):\n    count = 0\n    for element in lst:\n        if element == True:\n            count = count + 1\n    return coun"}
{"task_id": "Mbpp/105", "completion": ""}
{"task_id": "Mbpp/105", "completion": ""}
{"task_id": "Mbpp/106", "completion": "function add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list"}
{"task_id": "Mbpp/106", "completion": "data = test_tup\nfor item in test_list:\n    data = (data + (item,))\n"}
{"task_id": "Mbpp/106", "completion": "function add_lists(test_list, test_tup):\n    result = list(test_tup)\n    result.extend(test_list)\n    return tuple(result"}
{"task_id": "Mbpp/106", "completion": "function add_lists(test_list, test_tup):\n    new_tuple = test_tup + tuple(test_list)\n    return new_tuple\n"}
{"task_id": "Mbpp/106", "completion": "function add_lists(test_list, test_tup):\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n"}
{"task_id": "Mbpp/106", "completion": "DATA new_tuple\n    = tuple(test_tup) + tuple(test_list)\nOUTPUT new_tuple\n"}
{"task_id": "Mbpp/106", "completion": "function add_lists(test_list, test_tup):\n    temp = list(test_tup)\n    temp.extend(test_list)\n    return tuple(temp"}
{"task_id": "Mbpp/106", "completion": "\nfunction add_lists(test_list, test_tup):\n    new_tup = list(test_tup)\n    for item in test_list:\n        new_tup.append(item)\n    return tuple(new_tup"}
{"task_id": "Mbpp/106", "completion": "FUNCTION add_lists(test_list, test_tup)\n    result = test_tup\n    FOR each element IN test_list\n        result = (result + (element,))\n    RETURN result\n"}
{"task_id": "Mbpp/106", "completion": "function add_lists(test_list, test_tup):\n    new_tuple = test_tup\n    for i in test_list:\n        new_tuple += (i,)\n    return new_tuple\n"}
{"task_id": "Mbpp/108", "completion": "function merge_sorted_list(list1, list2, list3):\n    result = []\n    while len(list1) > 0 and len(list2) > 0 and len(list3) > 0:\n        if list1[0] < list2[0]:\n            result.append(list1.pop(0))\n        elif list1[0] > list2[0]:\n            result.append(list2.pop(0))\n        else:\n            result.append(list1.pop(0))\n            if len(list1) == 0:\n                break\n            elif list1[0] < list3[0]:\n                result.append(list1.pop(0))\n            else:\n                result.append(list3.pop(0))\n        while len(list1) > 0 and list1[0] <= result[-1]:\n            result.append(list1.pop(0))\n        while len(list2) > 0 and list2[0] <= result[-1]:\n            result.append(list2.pop(0))\n        while len(list3) > 0 and list3[0] <= result[-1]:\n            result.append(list3.pop(0))\n    result.extend(list1)\n    result.extend(list2)\n    result.extend(list3)\n    return resul"}
{"task_id": "Mbpp/108", "completion": "heap = []\nheapq.heapify(heap)\nheapq.heappush(heap, (num1[0], 0, num1))\nheapq.heappush(heap, (num2[0], 1, num2))\nheapq.heappush(heap, (num3[0], 2, num3))\n\nresult = []\nwhile heap:\n    val, idx, lst = heapq.heappop(heap)\n    result.append(val)\n    if idx < len(lst) - 1:\n        heapq.heappush(heap, (lst[idx + 1], idx, lst))\n\nreturn resul"}
{"task_id": "Mbpp/108", "completion": "function merge_sorted_list(num1, num2, num3)\n    # Create a heap from the input lists\n    heap = []\n    heapq.heappush(heap, (num1[0], 0, num1))\n    heapq.heappush(heap, (num2[0], 0, num2))\n    heapq.heappush(heap, (num3[0], 0, num3))\n\n    result = []\n    while heap:\n        # Get the smallest element from the heap\n        val, i, lst = heapq.heappop(heap)\n\n        # Add the smallest element to the result\n        result.append(val)\n\n        # If there are more elements in the list, add the next one to the heap\n        if i + 1 < len(lst):\n            heapq.heappush(heap, (lst[i+1], i+1, lst))\n\n    return result\n"}
{"task_id": "Mbpp/108", "completion": "heap = []\nheapq.heappush(heap, (num1[0], 0, num1))\nheapq.heappush(heap, (num2[0], 1, num2))\nheapq.heappush(heap, (num3[0], 2, num3))\n\nresult = []\nwhile heap:\n    val, index, lst = heapq.heappop(heap)\n    result.append(val)\n    if len(lst) > index + 1:\n        heapq.heappush(heap, (lst[index+1], index+1, lst))\nreturn result\n"}
{"task_id": "Mbpp/108", "completion": "\nfunction merge_sorted_list(list1, list2, list3):\n    heap = []\n    for lst in [list1, list2, list3]:\n        if lst:\n            heapq.heappush(heap, (lst[0], lst))\n    result = []\n    while heap:\n        val, lst = heapq.heappop(heap)\n        result.append(val)\n        if len(lst) > 1:\n            heapq.heappush(heap, (lst[1], lst[1:]))\n    return resul"}
{"task_id": "Mbpp/108", "completion": "heap = []\nheapq.heappush(heap, (num1[0], 0))\nheapq.heappush(heap, (num2[0], 1))\nheapq.heappush(heap, (num3[0], 2))\n\nresult = []\nwhile heap:\n    val, idx = heapq.heappop(heap)\n    result.append(val)\n    if idx == 0 and len(num1) > 1:\n        heapq.heappush(heap, (num1[1], 0))\n        num1 = num1[1:]\n    elif idx == 1 and len(num2) > 1:\n        heapq.heappush(heap, (num2[1], 1))\n        num2 = num2[1:]\n    elif idx == 2 and len(num3) > 1:\n        heapq.heappush(heap, (num3[1], 2))\n        num3 = num3[1:]\nreturn resul"}
{"task_id": "Mbpp/108", "completion": "function merge_sorted_list(list1, list2, list3):\n    merged = []\n    heap = []\n    \n    # Push the first element of each list onto the heap\n    heapq.heappush(heap, (list1[0], 0, 'list1'))\n    heapq.heappush(heap, (list2[0], 0, 'list2'))\n    heapq.heappush(heap, (list3[0], 0, 'list3'))\n    \n    while len(heap) > 0:\n        val, index, source = heapq.heappop(heap)\n        \n        # Add the smallest element to the result list\n        merged.append(val)\n        \n        # If there are more elements in the current list, push the next one onto the heap\n        if index + 1 < len(source):\n            if source == 'list1':\n                heapq.heappush(heap, (list1[index + 1], index + 1, 'list1'))\n            elif source == 'list2':\n                heapq.heappush(heap, (list2[index + 1], index + 1, 'list2'))\n            elif source == 'list3':\n                heapq.heappush(heap, (list3[index + 1], index + 1, 'list3'))\n    \n    return merge"}
{"task_id": "Mbpp/108", "completion": "function merge_sorted_lists(list1, list2, list3):\n    return sorted(heapq.merge(list1, list2, list3))\n"}
{"task_id": "Mbpp/108", "completion": "function merge_sorted_lists(list1, list2, list3)\n    result = []\n    heap = []\n\n    # Add elements from all lists to the heap\n    for element in list1 + list2 + list3:\n        heapq.heappush(heap, element)\n\n    # Pop elements from the heap and add to the result list\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n\n    return result\n"}
{"task_id": "Mbpp/108", "completion": "merge_sorted_list = []\nheapq.merge([x for x in num1], [x for x in num2], [x for x in num3])\nfor i in heapq.merge([x for x in num1], [x for x in num2], [x for x in num3]):\n    merge_sorted_list.append(i)\nreturn merge_sorted_lis"}
{"task_id": "Mbpp/109", "completion": ""}
{"task_id": "Mbpp/109", "completion": ""}
{"task_id": "Mbpp/109", "completion": "function odd_Equivalent(s, n):\n    count_odd = 0\n    for i in range(n):\n        s = rotate_string(s)\n        for char in s:\n            if int(char) % 2 != 0:\n                count_odd += 1\n    return count_odd\n\nfunction rotate_string(s):\n    if len(s) == 0:\n        return \"\"\n    else:\n        return s[1:] + s[0]\n"}
{"task_id": "Mbpp/109", "completion": "function odd_Equivalent(s, n):\n    result = 0\n    binary = int(s, 2)\n    for i in range(n):\n        binary = binary << 1\n        if binary % 2 != 0:\n            result += 1\n    return resul"}
{"task_id": "Mbpp/109", "completion": "function odd_Equivalent(s, n):\n    result = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        count = 0\n        for c in s:\n            if c == '1':\n                count += 1\n        if count % 2 != 0:\n            result += 1\n    return resul"}
{"task_id": "Mbpp/109", "completion": "function oddEquivalent(s, n):\n    countOdd = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        oddCount = 0\n        for char in s:\n            if char == '1':\n                oddCount += 1\n        if oddCount % 2 != 0:\n            countOdd += 1\n    return countOd"}
{"task_id": "Mbpp/109", "completion": "function odd_Equivalent(s, n):\n    odd_count = 0\n    while n > 0:\n        if s[0] == '1':\n            s = s[1:] + s[0]\n        n -= 1\n    for char in s:\n        if char == '1':\n            odd_count += 1\n    return odd_count\n"}
{"task_id": "Mbpp/109", "completion": ""}
{"task_id": "Mbpp/109", "completion": "\nfunction odd_Equivalent(s, n):\n    num_odd = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s) % 2 != 0:\n            num_odd += 1\n    return num_odd\n"}
{"task_id": "Mbpp/109", "completion": ""}
{"task_id": "Mbpp/111", "completion": "\nfunction common_in_nested_lists(nestedlist)\n    result = []\n    for innerlist in nestedlist:\n        if not result:\n            result = set(innerlist)\n        else:\n            result = result.intersection(set(innerlist))\n    return list(result"}
{"task_id": "Mbpp/111", "completion": "\nfunction common_in_nested_lists(nestedlist):\n    flat_list = []\n    for sublist in nestedlist:\n        flat_list.extend(sublist)\n    return set(flat_list).intersection(*[set(sublist) for sublist in nestedlist]"}
{"task_id": "Mbpp/111", "completion": "function common_in_nested_lists(nestedlist):\n    flat_list = []\n    for sublist in nestedlist:\n        flat_list.extend(sublist)\n    common_elements = set(flat_list)\n    return common_elements\n"}
{"task_id": "Mbpp/111", "completion": "function common_in_nested_lists(nestedlist):\n    flat_list = []\n    for sublist in nestedlist:\n        for item in sublist:\n            flat_list.append(item)\n    return set([i for i in set(flat_list) if flat_list.count(i) > 1]"}
{"task_id": "Mbpp/111", "completion": "function common_in_nested_lists(nestedlist)\n    result = []\n    seen = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in seen:\n                seen[element] += 1\n            else:\n                seen[element] = 1\n    result = [element for element in seen if seen[element] > 1]\n    return set(result"}
{"task_id": "Mbpp/111", "completion": "function common_in_nested_lists(nestedlist):\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    common = set(flat_list[0])\n    for item in flat_list[1:]:\n        common = common.intersection(set(item))\n    return list(common"}
{"task_id": "Mbpp/111", "completion": "function common_in_nested_lists(nested_list):\n    flatten_list = []\n    for sub_list in nested_list:\n        flatten_list.extend(sub_list)\n    unique_elements = set(flatten_list)\n    common_elements = set()\n    for element in unique_elements:\n        if all(element in sub_list for sub_list in nested_list):\n            common_elements.add(element)\n    return common_element"}
{"task_id": "Mbpp/111", "completion": "data = []\nfor nested_list in nestedlist:\n    data.extend(nested_list)\ncommon_elements = set(data)\nfor nested_list in nestedlist:\n    common_elements &= set(nested_list)\nreturn list(common_elements"}
{"task_id": "Mbpp/111", "completion": "function common_in_nested_lists(nestedlist):\n    flat_list = []\n    for sublist in nestedlist:\n        flat_list.extend(sublist)\n    return set(flat_list).intersection(*map(set, nestedlist)"}
{"task_id": "Mbpp/111", "completion": "\nfunction common_in_nested_lists(nestedlist)\n    flatten_list = []\n    for list in nestedlist:\n        for element in list:\n            flatten_list.append(element)\n    return set(flatten_list).intersection(set(flatten_list))\n"}
{"task_id": "Mbpp/113", "completion": ""}
{"task_id": "Mbpp/113", "completion": ""}
{"task_id": "Mbpp/113", "completion": ""}
{"task_id": "Mbpp/113", "completion": ""}
{"task_id": "Mbpp/113", "completion": ""}
{"task_id": "Mbpp/113", "completion": "\nfunction check_integer(text):\n  if text.length == 0:\n    return False\n  for i in range(0, text.length):\n    if not (text[i] >= '0' and text[i] <= '9'):\n      return False\n  return True\n"}
{"task_id": "Mbpp/113", "completion": "function check_integer(text)\n    is_integer = FALSE\n    if length(text) > 0 then\n        if text[1] == \"-\" or text[1] == \"+\" then\n            start = 2\n        else\n            start = 1\n        end if\n        for i from start to length(text)\n            if not (text[i] >= \"0\" and text[i] <= \"9\") then\n                is_integer = FALSE\n                exit\n            end if\n        end for\n        is_integer = TRUE\n    else\n        is_integer = FALSE\n    end if\n    return is_integer\n"}
{"task_id": "Mbpp/113", "completion": "function check_integer(text)\n    if text is empty then\n        return false\n    end if\n    for i from 0 to length of text - 1 do\n        if text[i] is not a digit then\n            return false\n        end if\n    end for\n    return true\n"}
{"task_id": "Mbpp/113", "completion": ""}
{"task_id": "Mbpp/113", "completion": ""}
{"task_id": "Mbpp/115", "completion": "function empty_dit(list1)\n    if is_list_empty(list1):\n        return True\n    else:\n        for dictionary in list1:\n            if not is_empty_dict(dictionary):\n                return False\n        return True\n\nfunction is_list_empty(lst):\n    return len(lst) == 0\n\nfunction is_empty_dict(dictionary):\n    return len(dictionary) == "}
{"task_id": "Mbpp/115", "completion": "\ndefine function empty_dit(list1)\n    for each dictionary in list1\n        if dictionary is not empty\n            return False\n    return True\nend function\n"}
{"task_id": "Mbpp/115", "completion": ""}
{"task_id": "Mbpp/115", "completion": ""}
{"task_id": "Mbpp/115", "completion": "\nfunction empty_dit(list1):\n    for dict in list1:\n        if len(dict) != 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/115", "completion": "\nfunction empty_dit(list1):\n  for dictionary in list1:\n    if len(dictionary) != 0:\n      return False\n  return Tru"}
{"task_id": "Mbpp/115", "completion": "function result = empty_dit(list1)\n    for dictionary in list1:\n        if len(dictionary) > 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/115", "completion": ""}
{"task_id": "Mbpp/115", "completion": ""}
{"task_id": "Mbpp/115", "completion": ""}
{"task_id": "Mbpp/116", "completion": "function tuple_to_int(nums)\n    result = 0\n    power = 0\n    for num in reversed(nums):\n        result += num * (10 ** power)\n        power += 1\n    return resul"}
{"task_id": "Mbpp/116", "completion": "\nfunction tuple_to_int(t)\n    result = 0\n    multiplier = 1\n    for num in reverse(t):\n        result = result + num * multiplier\n        multiplier = multiplier * 10\n    return result\n"}
{"task_id": "Mbpp/116", "completion": "\nfunction tuple_to_int(nums)\n    result = 0\n    power = 0\n    for num in reverse(nums):\n        result += num * 10^power\n        power += 1\n    return result\n"}
{"task_id": "Mbpp/116", "completion": ""}
{"task_id": "Mbpp/116", "completion": "function tuple_to_int(nums):\n    result = 0\n    num_length = len(nums)\n    for i in range(num_length):\n        result = (result * 10) + nums[i]\n    return resul"}
{"task_id": "Mbpp/116", "completion": "function tuple_to_int(nums)\n    result = 0\n    power_of_10 = 1\n    for num in reversed(nums):\n        result += num * power_of_10\n        power_of_10 *= 10\n    return resul"}
{"task_id": "Mbpp/116", "completion": "function tuple_to_int(nums):\n    result = 0\n    for i in range(len(nums)):\n        result = result * 10 + nums[i]\n    return resul"}
{"task_id": "Mbpp/116", "completion": ""}
{"task_id": "Mbpp/116", "completion": "function tuple_to_int(nums)\n    result = 0\n    multiplier = 1\n    for num in reversed(nums):\n        result += num * multiplier\n        multiplier *= 10\n    return resul"}
{"task_id": "Mbpp/116", "completion": "function tuple_to_int(nums)\n    result = 0\n    power_of_10 = 1\n    for num in reverse(nums):\n        result += num * power_of_10\n        power_of_10 *= 10\n    return result\n"}
{"task_id": "Mbpp/117", "completion": "function list_to_float(test_list):\n    result = []\n    for element in test_list:\n        temp = []\n        for item in element:\n            if '.' not in item:\n                temp.append(float(item))\n            else:\n                temp.append(float(item))\n        result.append(tuple(temp))\n    return resul"}
{"task_id": "Mbpp/117", "completion": "procedure list_to_float(test_list)\n    for each sublist in test_list do\n        for each element in sublist do\n            if isConvertibleToFloat(element) then\n                replace element with float(element)\n            end if\n        end for\n    end for\n    return test_list\nend procedure\n"}
{"task_id": "Mbpp/117", "completion": "for i in range(len(test_list)):\n    for j in range(len(test_list[i])):\n        if '.' in test_list[i][j] or 'e' in test_list[i][j].lower() or 'E' in test_list[i][j].lower():\n            test_list[i][j] = float(test_list[i][j])\n"}
{"task_id": "Mbpp/117", "completion": "function list_to_float(test_list):\n    new_list = []\n    for pair in test_list:\n        new_pair = ()\n        for element in pair:\n            if '.' in element:\n                new_pair += (float(element),)\n            else:\n                new_pair += (float(float(element)),)\n        new_list.append(new_pair)\n    return new_lis"}
{"task_id": "Mbpp/117", "completion": "\nfunction list_to_float(test_list):\n    result = []\n    for inner_list in test_list:\n        new_list = []\n        for item in inner_list:\n            if '.' in str(item):\n                new_list.append(float(item))\n            else:\n                new_list.append(float(item))\n        result.append(tuple(new_list))\n    return resul"}
{"task_id": "Mbpp/117", "completion": "function list_to_float(test_list):\n    result = []\n    for element in test_list:\n        new_element = []\n        for value in element:\n            if '.' in value:\n                new_element.append(float(value))\n            else:\n                new_element.append(float(value))\n        result.append(tuple(new_element))\n    return result\n"}
{"task_id": "Mbpp/117", "completion": "function list_to_float(test_list)\n    new_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            if '.' in element or element.isdigit():\n                new_sublist.append(float(element))\n            else:\n                new_sublist.append(element)\n        new_list.append(tuple(new_sublist))\n    return new_list\n"}
{"task_id": "Mbpp/117", "completion": "function list_to_float(test_list)\n    new_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            try:\n                new_sublist.append(float(element))\n            except ValueError:\n                new_sublist.append(float(element))\n        new_list.append(tuple(new_sublist))\n    return new_list\n"}
{"task_id": "Mbpp/117", "completion": "function list_to_float(test_list):\n    result = []\n    for inner_list in test_list:\n        new_list = []\n        for element in inner_list:\n            if isinstance(element, str):\n                new_list.append(float(element))\n            else:\n                new_list.append(element)\n        result.append(tuple(new_list))\n    return resul"}
{"task_id": "Mbpp/117", "completion": "\nfunction list_to_float(test_list):\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for element in sublist:\n            if \".\" in element:\n                new_sublist.append(float(element))\n            else:\n                new_sublist.append(float(element))\n        result.append(tuple(new_sublist))\n    return result\n"}
{"task_id": "Mbpp/118", "completion": "\nfunction string_to_list(string)\n    result = []\n    current_word = \"\"\n    for char in string:\n        if char == \" \":\n            result.append(current_word)\n            current_word = \"\"\n        else:\n            current_word = current_word + char\n    result.append(current_word)\n    return result\n"}
{"task_id": "Mbpp/118", "completion": "function string_to_list(string):\n    result = []\n    index = 0\n    while index < len(string):\n        word = \"\"\n        while index < len(string) and string[index] != ' ':\n            word = word + string[index]\n            index = index + 1\n        if word != \"\":\n            result.append(word)\n        index = index + 1\n    return resul"}
{"task_id": "Mbpp/118", "completion": "\nfunction string_to_list(input_string)\n    output_list = []\n    current_word = \"\"\n    for char in input_string:\n        if char == \" \":\n            output_list.append(current_word)\n            current_word = \"\"\n        else:\n            current_word += char\n    output_list.append(current_word)\n    return output_list\n"}
{"task_id": "Mbpp/118", "completion": "\nfunction string_to_list(string)\n    result = []\n    current_word = \"\"\n    for char in string:\n        if char == \" \":\n            if not current_word == \"\":\n                result.append(current_word)\n                current_word = \"\"\n        else:\n            current_word = current_word + char\n    if not current_word == \"\":\n        result.append(current_word)\n    return result\n"}
{"task_id": "Mbpp/118", "completion": "\nfunction string_to_list(string)\n    list := []\n    current_word := \"\"\n    for each character in string\n        if character == \" \"\n            if not current_word equals \"\"\n                list.append(current_word)\n                current_word := \"\"\n        else\n            current_word := current_word + character\n    if not current_word equals \"\"\n        list.append(current_word)\n    return lis"}
{"task_id": "Mbpp/118", "completion": "function string_to_list(input_string)\n    output = []\n    current_word = \"\"\n    for character in input_string\n        if character == \" \"\n            output.append(current_word)\n            current_word = \"\"\n        else\n            current_word = current_word + character\n    output.append(current_word)\n    return outpu"}
{"task_id": "Mbpp/118", "completion": "\nfunction string_to_list(input_string):\n    result = []\n    current_word = \"\"\n    for char in input_string:\n        if char == \" \":\n            if current_word != \"\":\n                result.append(current_word)\n                current_word = \"\"\n        else:\n            current_word += char\n    if current_word != \"\":\n        result.append(current_word)\n    return result\n"}
{"task_id": "Mbpp/118", "completion": "function string_to_list(string)\n    result = []\n    i = 0\n    while i < len(string)\n        if string[i] == ' '\n            result.append(string.substring(i+1, i+2))\n            i = i + 1\n        else\n            j = i\n            while j < len(string) and string[j] != ' '\n                j = j + 1\n            result.append(string.substring(i, j))\n            i = j\n    if i < len(string)\n        result.append(string.substring(i, string.length))\n    return resul"}
{"task_id": "Mbpp/118", "completion": "\nfunction string_to_list(string)\n    result = []\n    for each character in string:\n        if character is a space then\n            add an empty string to the result\n        else\n            append the current character to the last string in the result\n    return result\n"}
{"task_id": "Mbpp/118", "completion": "function string_to_list(input_string):\n    output = []\n    current_word = \"\"\n    for char in input_string:\n        if char == \" \":\n            output.append(current_word)\n            current_word = \"\"\n        else:\n            current_word += char\n    output.append(current_word)\n    return outpu"}
{"task_id": "Mbpp/119", "completion": ""}
{"task_id": "Mbpp/119", "completion": "function search(arr)\n    left = 0\n    right = length(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) / 2\n        \n        if mid % 2 == 1:\n            mid = mid - 1\n        \n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid - 1\n            \n    return arr[left"}
{"task_id": "Mbpp/119", "completion": "\nALGORITHM\n    Initialize result = None\n    Iterate over arr from left to right\n        If current element is different from previous element\n            Update result as current element\n    Return resul"}
{"task_id": "Mbpp/119", "completion": "ALGORITHM\nInput: arr (sorted array)\nOutput: Element that appears only once\n\nINDEX = 0\nLAST_seen = -1\nfor i from 0 to length(arr)-1:\n    if arr[i] != arr[LAST_seen]:\n        LAST_seen = i\n    else:\n        INDEX = i + 1\nreturn arr[INDEX"}
{"task_id": "Mbpp/119", "completion": ""}
{"task_id": "Mbpp/119", "completion": ""}
{"task_id": "Mbpp/119", "completion": "\ndef search(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] != arr[i + 1]:\n            return arr[i]\n    return arr[-1]\n"}
{"task_id": "Mbpp/119", "completion": "arr = input(\"Enter the sorted array\")\ni = 0\nwhile i < len(arr):\n    if i+1 < len(arr) and arr[i] == arr[i+1]:\n        i += 2\n    else:\n        return arr[i]\n"}
{"task_id": "Mbpp/119", "completion": ""}
{"task_id": "Mbpp/119", "completion": ""}
{"task_id": "Mbpp/120", "completion": "function max_product_tuple(list1):\n    max_product = -float('inf')\n    for pair in list1:\n        num1, num2 = pair\n        product = abs(num1 * num2)\n        if product > max_product:\n            max_product = product\n    return max_product\n"}
{"task_id": "Mbpp/120", "completion": "function max_product_tuple(list1)\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) + abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_produc"}
{"task_id": "Mbpp/120", "completion": "function max_product_tuple(list1)\n    max_product = 0\n    for each tuple in list1:\n        num1 = abs(tuple[0])\n        num2 = abs(tuple[1])\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    return max_produc"}
{"task_id": "Mbpp/120", "completion": "function max_product_tuple(list1)\n    max_product = -inf\n    for i from 0 to length(list1) - 1:\n        for j from i + 1 to length(list1):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_produc"}
{"task_id": "Mbpp/120", "completion": "function max_product_tuple(list1):\n    max_product = -float('inf')\n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n"}
{"task_id": "Mbpp/120", "completion": "\ndata = []\nfor i in range(len(list1)):\n    for j in range(i+1, len(list1)):\n        data.append(abs(list1[i][0]*list1[j][0]))\n        data.append(abs(list1[i][1]*list1[j][1]))\n        data.append(abs(list1[i][0]*list1[j][1]))\n        data.append(abs(list1[i][1]*list1[j][0]))\nreturn max(data)\n"}
{"task_id": "Mbpp/120", "completion": "\nfunction max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) + abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_produc"}
{"task_id": "Mbpp/120", "completion": "function max_product_tuple(list1):\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) + abs(list1[i][1] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"}
{"task_id": "Mbpp/120", "completion": ""}
{"task_id": "Mbpp/120", "completion": "DATA max_product = -INF\nFOR each tuple in list1:\n    FOR each pair of numbers in the tuple:\n        product = abs(number1 * number2)\n        IF product > max_product:\n            max_product = product\nRETURN max_produc"}
{"task_id": "Mbpp/123", "completion": "function amicable_numbers_sum(limit)\n    sum = 0\n    for i from 1 to limit\n        sum += div_sum(i)\n    return sum - limit\n"}
{"task_id": "Mbpp/123", "completion": "function amicable_numbers_sum(limit)\n    total = 0\n    for i in range(2, limit + 1)\n        sum1 = 0\n        for j in range(2, i + 1)\n            if i % j == 0\n                sum1 += j\n        sum2 = div_sum(sum1)\n        if sum1 == i and sum2 == i\n            total += i\n    return tota"}
{"task_id": "Mbpp/123", "completion": "function amicable_numbers_sum(limit):\n    total_sum = 0\n    for i in range(2, limit + 1):\n        a = div_sum(i)\n        b = div_sum(a)\n        if i != a and i == b:\n            total_sum += i\n    return total_sum\n"}
{"task_id": "Mbpp/123", "completion": "function amicable_numbers_sum(limit)\n    total_sum = 0\n    for num in range(1, limit + 1)\n        sum_of_divisors = div_sum(num)\n        if sum_of_divisors > num and div_sum(sum_of_divisors) == num\n            total_sum += num + sum_of_divisors\n        end if\n    end for\n    return total_sum\n"}
{"task_id": "Mbpp/123", "completion": "\nfunction amicable_numbers_sum(limit):\n    sum = 0\n    for i from 1 to limit:\n        i_sum = div_sum(i)\n        j = i + 1\n        while j <= limit:\n            if i_sum == j and j != i:\n                sum += i + j\n                break\n            j += 1\n    return su"}
{"task_id": "Mbpp/123", "completion": "function amicable_numbers_sum(n):\n    total_sum = 0\n    for i in range(2, n+1):\n        if i == div_sum(i) and i != div_sum(div_sum(i)):\n            total_sum += i\n    return total_sum\n"}
{"task_id": "Mbpp/123", "completion": "function amicable_numbers_sum(limit)\n    sum = 0\n    for i from 1 to limit\n        if i < 10000 then\n            let sum_of_divisors = div_sum(i)\n            if sum_of_divisors > i and div_sum(sum_of_divisors) == i\n                sum = sum + i + sum_of_divisors\n        end if\n    end for\n    return sum\n"}
{"task_id": "Mbpp/123", "completion": "function sum_amicable_numbers(n)\n    total_sum = 0\n    for i from 1 to n\n        if i < n\n            if div_sum(i) == n and i != div_sum(n)\n                total_sum += i + div_sum(i)\n        end if\n    end for\n    return total_sum\n"}
{"task_id": "Mbpp/123", "completion": "function amicable_numbers_sum(limit)\n    total = 0\n    for i from 1 to limit\n        if i < 2 then\n            continue\n        sum_of_divisors = div_sum(i)\n        if sum_of_divisors > i and div_sum(sum_of_divisors) == i\n            total = total + i + sum_of_divisors\n        end if\n    end for\n    return tota"}
{"task_id": "Mbpp/123", "completion": "function amicable_numbers_sum(n):\n    sum_of_amicable = 0\n    for i from 1 to n:\n        sum1 = div_sum(i)\n        sum2 = div_sum(sum1)\n        if sum1 == i and sum2 == i:\n            continue\n        if i == sum2:\n            sum_of_amicable += i\n    return sum_of_amicabl"}
{"task_id": "Mbpp/124", "completion": "\nfunction angle_complex(a, b):\n    import cmath\n    return cmath.phase(complex(a, b))\n"}
{"task_id": "Mbpp/124", "completion": ""}
{"task_id": "Mbpp/124", "completion": "\nfunction angle_complex(a, b):\n    return cmath.phase(complex(a, b))\n"}
{"task_id": "Mbpp/124", "completion": "\nfunction angle_complex(a, b)\n    return cmath.atan2(b, a)\n"}
{"task_id": "Mbpp/124", "completion": "\nfunction angle_complex(a, b):\n    return cmath.phase(complex(a, b))\n"}
{"task_id": "Mbpp/124", "completion": ""}
{"task_id": "Mbpp/124", "completion": ""}
{"task_id": "Mbpp/124", "completion": "\nfunction angle_complex(a, b):\n    return cmath.phase(complex(a, b))\n"}
{"task_id": "Mbpp/124", "completion": "\nfunction angle_complex(a, b)\n    theta = arctan(b/a)\n    if a < 0 and b >= 0 then\n        theta = pi - theta\n    elif a < 0 and b < 0 then\n        theta = -pi - theta\n    elif a >= 0 and b < 0 then\n        theta = -theta\n    return theta\n"}
{"task_id": "Mbpp/124", "completion": ""}
{"task_id": "Mbpp/125", "completion": "\nfunction max_diff = find_length(s)\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    start = 0\n    \n    for end in range(len(s)):\n        if s[end] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        while count_0 > count_1:\n            if s[start] == '0':\n                count_0 -= 1\n            else:\n                count_1 -= 1\n            start += 1\n        \n        max_diff = max(max_diff, count_1 - count_0)\n    \n    return max_diff\n"}
{"task_id": "Mbpp/125", "completion": "max_diff = 0\ncount_0 = count_1 = 0\nfor i in range(len(string)):\n    if string[i] == '0':\n        count_0 += 1\n    else:\n        count_1 += 1\n    max_diff = max(max_diff, abs(count_0 - count_1))\n    if string[i] == '0':\n        count_0 -= 1\n        count_1 += 1\n    else:\n        count_0 += 1\n        count_1 -= 1\nreturn max_dif"}
{"task_id": "Mbpp/125", "completion": "MAX_INT = float('inf')\nmax_diff = 0\n\nzero_count = 0\none_count = 0\n\nfor char in string:\n    if char == '0':\n        zero_count += 1\n    else:\n        one_count += 1\n        \n    diff = abs(zero_count - one_count)\n    \n    if diff > max_diff:\n        max_diff = diff\n        \nreturn max_dif"}
{"task_id": "Mbpp/125", "completion": "function find_length(s):\n    max_diff = 0\n    zeros = 0\n    ones = 0\n    \n    for i in range(len(s)):\n        if s[i] == \"0\":\n            zeros += 1\n        else:\n            ones += 1\n        \n        diff = abs(zeros - ones)\n        max_diff = max(max_diff, diff)\n        \n        if i < len(s) - 1:\n            if s[i+1] == \"0\":\n                zeros -= 1\n            else:\n                ones -= 1\n    \n    return max_dif"}
{"task_id": "Mbpp/125", "completion": "\nfunction find_length(s):\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    max_zero_count = 0\n    max_one_count = 0\n    \n    for i in range(len(s)):\n        if s[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        \n        diff = abs(zero_count - one_count)\n        \n        if diff > max_diff:\n            max_diff = diff\n            max_zero_count = zero_count\n            max_one_count = one_count\n        \n        if zero_count > zero_count - len(s) - one_count + 1:\n            break\n    \n    return max_diff\n"}
{"task_id": "Mbpp/125", "completion": ""}
{"task_id": "Mbpp/125", "completion": "function find_length(binary_string):\n    max_diff = 0\n    current_zero_count = 0\n    current_one_count = 0\n    for char in binary_string:\n        if char == \"0\":\n            current_zero_count += 1\n            current_one_count = 0\n        else:\n            current_one_count += 1\n            current_zero_count = 0\n        max_diff = max(max_diff, abs(current_zero_count - current_one_count))\n    return max_dif"}
{"task_id": "Mbpp/125", "completion": "function find_length(s):\n    max_diff = 0\n    current_zero = 0\n    current_one = 0\n    max_zero = 0\n    max_one = 0\n    for c in s:\n        if c == '0':\n            current_zero += 1\n            max_zero = max(max_zero, current_zero)\n            current_one = 0\n        else:\n            current_one += 1\n            max_one = max(max_one, current_one)\n            current_zero = 0\n        max_diff = max(max_diff, abs(max_zero - max_one))\n    return max_dif"}
{"task_id": "Mbpp/125", "completion": "function find_length(s):\n    max_diff = 0\n    max_zeroes = 0\n    max_ones = 0\n    current_zeroes = 0\n    current_ones = 0\n    \n    for char in s:\n        if char == '0':\n            current_zeroes += 1\n            current_ones = 0\n        else:\n            current_ones += 1\n            current_zeroes = 0\n        \n        diff = abs(current_zeroes - current_ones)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n"}
{"task_id": "Mbpp/125", "completion": "function find_length(s):\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    max_zero = 0\n    max_one = 0\n\n    for char in s:\n        if char == '0':\n            zero_count += 1\n            max_zero = max(max_zero, zero_count)\n            one_count = 0\n        else:\n            one_count += 1\n            max_one = max(max_one, one_count)\n            zero_count = 0\n\n    return max(abs(max_zero - max_one), abs(zero_count - one_count)"}
{"task_id": "Mbpp/126", "completion": "function sum(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors"}
{"task_id": "Mbpp/126", "completion": "function sum(a, b)\n    divisor_sum = 0\n    for i from 1 to min(a, b)\n        if a mod i is 0 and b mod i is 0\n            divisor_sum = divisor_sum + i\n    return divisor_su"}
{"task_id": "Mbpp/126", "completion": "function sumCommonDivisors(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors"}
{"task_id": "Mbpp/126", "completion": "function sum(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors"}
{"task_id": "Mbpp/126", "completion": "function find_divisors(a, b):\n    divisor_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n    return divisor_su"}
{"task_id": "Mbpp/126", "completion": "\nfunction sum_divisors(a, b)\n    total_sum = 0\n    for i from 1 to min(a, b)\n        if a mod i is 0 and b mod i is 0\n            total_sum = total_sum + i\n    return total_sum\n"}
{"task_id": "Mbpp/126", "completion": "\nfunction find_common_divisors(a, b):\n    divisors_a = []\n    divisors_b = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0:\n            divisors_a.append(i)\n        if b % i == 0:\n            divisors_b.append(i)\n    return sum(set(divisors_a) & set(divisors_b)"}
{"task_id": "Mbpp/126", "completion": ""}
{"task_id": "Mbpp/126", "completion": "function sum(a, b)\n    sum = 0\n    i = 1\n    while i <= min(a, b)\n        if a % i == 0 and b % i == 0\n            sum += i\n        end if\n        i += 1\n    end while\n    return sum\n"}
{"task_id": "Mbpp/126", "completion": "\nfunction sum(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors"}
{"task_id": "Mbpp/127", "completion": "function multiply_int(x, y)\n    if y == 0 then\n        return 0\n    else if x == 0 then\n        return 0\n    else\n        result = 0\n        while y > 0 do\n            if y mod 2 == 1 then\n                result = result + x\n            x = x * 2\n            y = y / 2\n        return result\n"}
{"task_id": "Mbpp/127", "completion": "\nfunction multiply_int(x, y)\n    result = 0\n    for i from 0 to y-1\n        result = result + x\n    return result\n"}
{"task_id": "Mbpp/127", "completion": "function multiply_int(x, y)\n    return x * "}
{"task_id": "Mbpp/127", "completion": "function multiply_int(x, y)\n    result = 0\n    for i from 0 to y-1\n        result = result + x\n    return result\n"}
{"task_id": "Mbpp/127", "completion": "function multiply_int(x, y)\n    product = 0\n    for i from 0 to y-1\n        product = product + x\n    return product\n"}
{"task_id": "Mbpp/127", "completion": "\nfunction multiply_int(x, y)\n    result = 0\n    for i from 1 to y\n        result = result + x\n    return result\n"}
{"task_id": "Mbpp/127", "completion": "procedure multiply_int(x, y)\n    result = 0\n    for i from 1 to y do\n        result = result + x\n    return result\n"}
{"task_id": "Mbpp/127", "completion": "function multiply_int(x, y)\n    product = 0\n    while y > 0\n        if (y mod 2) == 1\n            product = product + x\n        x = x * 2\n        y = y / 2\n    return produc"}
{"task_id": "Mbpp/127", "completion": ""}
{"task_id": "Mbpp/127", "completion": "function multiply_int(x, y)\n    result = 0\n    for i from 0 to y-1\n        result = result + x\n    return result\n"}
{"task_id": "Mbpp/128", "completion": ""}
{"task_id": "Mbpp/128", "completion": ""}
{"task_id": "Mbpp/128", "completion": "function long_words(n, s):\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return resul"}
{"task_id": "Mbpp/128", "completion": "function long_words(n,s)\n    result = []\n    for each word in s.split():\n        if len(word) > n:\n            result.append(word)\n    return result\n"}
{"task_id": "Mbpp/128", "completion": "\nfunction long_words(n, s):\n    result = []\n    words = s.split()\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return resul"}
{"task_id": "Mbpp/128", "completion": ""}
{"task_id": "Mbpp/128", "completion": ""}
{"task_id": "Mbpp/128", "completion": ""}
{"task_id": "Mbpp/128", "completion": "function long_words(n, s)\n    result = []\n    words = s.split(\" \")\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"}
{"task_id": "Mbpp/128", "completion": "\nfunction long_words(n, words)\n    result = []\n    for word in words:\n        if length(word) > n:\n            result.append(word)\n    return result\n"}
{"task_id": "Mbpp/129", "completion": "\nfunction is_magic_square(matrix):\n    # Get the size of the matrix\n    n = len(matrix)\n    \n    # Calculate the sum of each row and column\n    row_sums = []\n    col_sums = []\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += matrix[i][j]\n            col_sum += matrix[j][i]\n        row_sums.append(row_sum)\n        col_sums.append(col_sum)\n    \n    # Check if all rows and columns have the same sum\n    target_sum = row_sums[0]\n    if not all(row_sum == target_sum for row_sum in row_sums) or not all(col_sum == target_sum for col_sum in col_sums):\n        return False\n    \n    # Check if the sum of the main diagonal and anti-diagonal is equal to the target sum\n    main_diagonal_sum = 0\n    anti_diagonal_sum = 0\n    for i in range(n):\n        main_diagonal_sum += matrix[i][i]\n        anti_diagonal_sum += matrix[i][n - i - 1]\n    if main_diagonal_sum != target_sum or anti_diagonal_sum != target_sum:\n        return False\n    \n    return Tru"}
{"task_id": "Mbpp/129", "completion": "function magic_square_test(my_matrix):\n    n = size of my_matrix\n    sum_row = 0\n    sum_col = 0\n    sum_primary_diagonal = 0\n    sum_secondary_diagonal = 0\n    \n    for i from 1 to n:\n        for j from 1 to n:\n            element = my_matrix[i][j]\n            sum_row += element\n            if i == j then sum_col += element\n            if i + j == n + 1 then sum_secondary_diagonal += element\n            if i - j + 1 == n + 1 then sum_primary_diagonal += element\n            \n    if sum_row != (n * (n^2 + 1) / 2) or sum_col != (n * (n^2 + 1) / 2) or sum_primary_diagonal != (n * (n^2 + 1) / 2) or sum_secondary_diagonal != (n * (n^2 + 1) / 2) then return false\n    return tru"}
{"task_id": "Mbpp/129", "completion": "\nfunction is_magic_square(my_matrix):\n    n = len(my_matrix)\n    sum_row = 0\n    sum_col = 0\n    sum_left_diagonal = 0\n    sum_right_diagonal = 0\n    \n    for i in range(n):\n        for j in range(n):\n            sum_row += my_matrix[i][j]\n            sum_col += my_matrix[j][i]\n        \n        if i < n - 1:\n            sum_left_diagonal += my_matrix[i][i]\n        if i > 0:\n            sum_right_diagonal += my_matrix[i][n-i-1]\n    \n    if sum_row != (n * (n * n + 1) // 2):\n        return False\n    if sum_col != (n * (n * n + 1) // 2):\n        return False\n    if sum_left_diagonal != (n * (n * n + 1) // 2):\n        return False\n    if sum_right_diagonal != (n * (n * n + 1) // 2):\n        return False\n    \n    return Tru"}
{"task_id": "Mbpp/129", "completion": "\nfunction magic_square_test(my_matrix):\n    sum_first_row = sum(my_matrix[0])\n    for i in range(1, len(my_matrix)):\n        if sum(my_matrix[i]) != sum_first_row:\n            return False\n    for j in range(len(my_matrix[0])):\n        row_sum = 0\n        for i in range(len(my_matrix)):\n            row_sum += my_matrix[i][j]\n        if row_sum != sum_first_row:\n            return False\n    diagonal1_sum = 0\n    diagonal2_sum = 0\n    for i in range(len(my_matrix)):\n        diagonal1_sum += my_matrix[i][i]\n        diagonal2_sum += my_matrix[i][len(my_matrix) - i - 1]\n    if diagonal1_sum != sum_first_row or diagonal2_sum != sum_first_row:\n        return False\n    return Tru"}
{"task_id": "Mbpp/129", "completion": "data = my_matrix\nn = len(data)\nif n != len(data[0]):\n    return False\nsum_row = sum(data[i]) for i in range(n)\nif sum_row != n * (n * n + 1) / 2:\n    return False\nsum_col = sum([data[i][j] for j in range(n) for i in range(n)])\nif sum_col != n * (n * n + 1) / 2:\n    return False\nsum_main_diagonal = sum(data[i][i] for i in range(n))\nif sum_main_diagonal != n * (n * n + 1) / 2:\n    return False\nsum_antidiagonal = sum(data[i][n-i-1] for i in range(n))\nif sum_antidiagonal != n * (n * n + 1) / 2:\n    return False\nreturn True\n"}
{"task_id": "Mbpp/129", "completion": "function magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n != len(my_matrix[0]):\n        return False\n    if sum(my_matrix[i]) != (n * (n * n + 1) / 2) for i in range(n)):\n        return False\n    if sum([my_matrix[i][j] for j in range(n)]) != (n * (n * n + 1) / 2) for i in range(n)):\n        return False\n    sum_row = sum([my_matrix[i][j] for j in range(n)])\n    for i in range(1, n):\n        if sum_row != sum([my_matrix[i][j] for j in range(n)]):\n            return False\n    return True\n"}
{"task_id": "Mbpp/129", "completion": "function magic_square_test(my_matrix):\n    if size(my_matrix) != 4:\n        return False\n    target_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != target_sum:\n            return False\n    for col in range(size(my_matrix)):\n        if sum([row[col] for row in my_matrix]) != target_sum:\n            return False\n    if sum([my_matrix[i][i] for i in range(size(my_matrix))]) != target_sum:\n        return False\n    if sum([my_matrix[i][size(my_matrix)-i-1] for i in range(size(my_matrix))]) != target_sum:\n        return False\n    return Tru"}
{"task_id": "Mbpp/129", "completion": "\nfunction magic_square_test(my_matrix):\n    n = len(my_matrix)\n    for i from 0 to n - 1:\n        sum_row = 0\n        sum_col = 0\n        for j from 0 to n - 1:\n            sum_row += my_matrix[i][j]\n            sum_col += my_matrix[j][i]\n        if sum_row != (n * (n * n + 1) / 2) or sum_col != (n * (n * n + 1) / 2):\n            return False\n    diagonal1 = 0\n    diagonal2 = 0\n    for i from 0 to n - 1:\n        diagonal1 += my_matrix[i][i]\n        diagonal2 += my_matrix[i][n - i - 1]\n    if diagonal1 != (n * (n * n + 1) / 2) or diagonal2 != (n * (n * n + 1) / 2):\n        return False\n    return True\n"}
{"task_id": "Mbpp/129", "completion": "function magic_square_test(matrix):\n    n = size(matrix)\n    sum_row = 0\n    sum_col = 0\n    sum_diagonal1 = 0\n    sum_diagonal2 = 0\n    \n    for i from 1 to n:\n        for j from 1 to n:\n            sum_row += matrix[i][j]\n            sum_col += matrix[j][i]\n        if sum_row != (n * (n * n + 1) / 2) or sum_col != (n * (n * n + 1) / 2):\n            return False\n        sum_row = 0\n        \n    sum_diagonal1 = 0\n    sum_diagonal2 = 0\n    for i from 1 to n:\n        sum_diagonal1 += matrix[i][i]\n        sum_diagonal2 += matrix[i][n - i + 1]\n    if sum_diagonal1 != (n * (n * n + 1) / 2) or sum_diagonal2 != (n * (n * n + 1) / 2):\n        return False\n    \n    return Tru"}
{"task_id": "Mbpp/129", "completion": ""}
{"task_id": "Mbpp/130", "completion": ""}
{"task_id": "Mbpp/130", "completion": "dataStructure frequencyMap = new HashMap<Integer, Integer>();\nfor each item in nums:\n    if frequencyMap.contains(item):\n        frequencyMap.put(item, frequencyMap.get(item) + 1)\n    else:\n        frequencyMap.put(item, 1)\n\nmaxItem = null\nmaxCount = 0\nfor each entry in frequencyMap:\n    if entry.value > maxCount:\n        maxItem = entry.key\n        maxCount = entry.value\n\nreturn maxItem\n"}
{"task_id": "Mbpp/130", "completion": "data = {}\nfor num in nums:\n    if num in data:\n        data[num] += 1\n    else:\n        data[num] = 1\nmax_freq = max(data.values())\nfor key, value in data.items():\n    if value == max_freq:\n        return ke"}
{"task_id": "Mbpp/130", "completion": ""}
{"task_id": "Mbpp/130", "completion": "function max_occurrences(nums)\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_value = max(frequency.values())\n    return [num for num, freq in frequency.items() if freq == max_value][0]\n"}
{"task_id": "Mbpp/130", "completion": "function max_occurrences(list)\n    freq = defaultdict(int)\n    for num in list:\n        freq[num] += 1\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n"}
{"task_id": "Mbpp/130", "completion": "DATA max_freq = 0\nDATA most_common_item = NONE\n\nFOR each item IN freq_dict:\n    IF freq_dict[item] > max_freq:\n        max_freq = freq_dict[item]\n        most_common_item = item\n\nRETURN most_common_item\n"}
{"task_id": "Mbpp/130", "completion": "function max_occurrences(nums):\n    frequency_dict = defaultdict(int)\n    for num in nums:\n        frequency_dict[num] += 1\n    max_frequency = max(frequency_dict.values())\n    return [num for num, freq in frequency_dict.items() if freq == max_frequency][0]\n"}
{"task_id": "Mbpp/130", "completion": "# Create an empty dictionary to store the count of each number\nfrequency = {}\n\n# Create a counter variable to keep track of the maximum occurrences\nmax_count = 0\n\n# Create a variable to store the number with the maximum occurrences\nmax_number = None\n\n# Iterate over the input list\nfor num in nums:\n    # If the number is already in the dictionary, increment its count\n    if num in frequency:\n        frequency[num] += 1\n    # Otherwise, add the number to the dictionary with a count of 1\n    else:\n        frequency[num] = 1\n\n    # Check if the current number has more occurrences than the maximum count\n    if frequency[num] > max_count:\n        # Update the maximum count and the number with the maximum count\n        max_count = frequency[num]\n        max_number = num\n\n# Return the number with the maximum occurrences\nreturn max_number\n"}
{"task_id": "Mbpp/130", "completion": "\nfunction max_occurrences(nums):\n    frequency = {}\n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    max_freq = max(frequency.values())\n    max_item = [key for key, value in frequency.items() if value == max_freq]\n    return max_item[0"}
{"task_id": "Mbpp/131", "completion": "function reverseVowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    left = 0\n    right = len(str1) - 1\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    return ''.join(str1"}
{"task_id": "Mbpp/131", "completion": "function reverseVowels(s):\n    s = list(s)\n    left = 0\n    right = len(s) - 1\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    while left < right:\n        if s[left].lower() not in vowels:\n            left += 1\n        elif s[right].lower() not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    \n    return ''.join(s"}
{"task_id": "Mbpp/131", "completion": "\ndef reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1_list = list(str1)\n    left = 0\n    right = len(str1_list) - 1\n    while left < right:\n        if str1_list[left].lower() not in vowels:\n            left += 1\n        elif str1_list[right].lower() not in vowels:\n            right -= 1\n        else:\n            str1_list[left], str1_list[right] = str1_list[right], str1_list[left]\n            left += 1\n            right -= 1\n    return ''.join(str1_list"}
{"task_id": "Mbpp/131", "completion": "function reverse_vowels(str1):\n    vowels = 'aeiou'\n    str1_list = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1_list[left] not in vowels:\n            left += 1\n        elif str1_list[right] not in vowels:\n            right -= 1\n        else:\n            str1_list[left], str1_list[right] = str1_list[right], str1_list[left]\n            left, right = left + 1, right - 1\n    return ''.join(str1_list"}
{"task_id": "Mbpp/131", "completion": "\nfunction reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    left = 0\n    right = len(str1) - 1\n    while left < right:\n        if str1_list[left] not in vowels:\n            left += 1\n        elif str1_list[right] not in vowels:\n            right -= 1\n        else:\n            str1_list[left], str1_list[right] = str1_list[right], str1_list[left]\n            left += 1\n            right -= 1\n    return \"\".join(str1_list)\n"}
{"task_id": "Mbpp/131", "completion": "\nfunction reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    \n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left, right = left + 1, right - 1\n    return ''.join(str1)\n"}
{"task_id": "Mbpp/131", "completion": "\nfunction reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str2[left] not in vowels:\n            left += 1\n        elif str2[right] not in vowels:\n            right -= 1\n        else:\n            str2[left], str2[right] = str2[right], str2[left]\n            left, right = left + 1, right - 1\n    return ''.join(str2"}
{"task_id": "Mbpp/131", "completion": "\nfunction reverse_vowels(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str_list = list(str)\n    left, right = 0, len(str) - 1\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left, right = left + 1, right - 1\n    return ''.join(str_list)\n"}
{"task_id": "Mbpp/131", "completion": "function reverse_vowels(str1):\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] not in 'aeiou' and str1[right] not in 'aeiou':\n            left += 1\n            right -= 1\n        elif str1[left] not in 'aeiou':\n            left += 1\n        elif str1[right] not in 'aeiou':\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    return ''.join(str1"}
{"task_id": "Mbpp/131", "completion": "\nfunction reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left, right = left + 1, right - 1\n    return ''.join(str1)\n"}
{"task_id": "Mbpp/132", "completion": "\nfunction tup_string(tup1):\n    result = \"\"\n    for item in tup1:\n        result += item\n    return result\n"}
{"task_id": "Mbpp/132", "completion": "function tup_string(tup1):\n    str1 = \"\"\n    for element in tup1:\n        str1 += element\n    return str1\n"}
{"task_id": "Mbpp/132", "completion": "\nfunction tup_string(tup1):\n  result = \"\"\n  for element in tup1:\n    result += element\n  return result\n"}
{"task_id": "Mbpp/132", "completion": "function tup_string(tup1):\n    result = \"\"\n    for char in tup1:\n        result += char\n    return result\n"}
{"task_id": "Mbpp/132", "completion": "function tup_string(tup1)\n    str1 = \"\"\n    for char in tup1:\n        str1 += char\n    return str1\n"}
{"task_id": "Mbpp/132", "completion": "function tup_string(tup1):\n    result = \"\"\n    for element in tup1:\n        result += element\n    return result\n"}
{"task_id": "Mbpp/132", "completion": "\nfunction tup_string(tup1):\n    result = \"\"\n    for char in tup1:\n        result += char\n    return result\n"}
{"task_id": "Mbpp/132", "completion": "\nfunction tup_string(tup1)\n    result = \"\"\n    for element in tup1:\n        result += element\n    return result\n"}
{"task_id": "Mbpp/132", "completion": "function tup_string(tup1)\n    str1 = \"\"\n    for char in tup1:\n        if char != 'e':\n            str1 += char\n    return str1\n"}
{"task_id": "Mbpp/132", "completion": "function tup_string(tup1):\n    str1 = \"\"\n    for char in tup1:\n        str1 += char\n    return str"}
{"task_id": "Mbpp/133", "completion": "\nfunction sum_negativenum(input_list)\n    total_sum = 0\n    for num in input_list:\n        if num < 0 then\n            total_sum = total_sum + num\n        end if\n    return total_sum\n"}
{"task_id": "Mbpp/133", "completion": "\nfunction sum_negativenum(nums)\n    sum = 0\n    for num in nums:\n        if num < 0 then\n            sum += num\n        end if\n    return sum\n"}
{"task_id": "Mbpp/133", "completion": "data = []\nfor each in nums:\n    if each < 0:\n        data.append(each)\nsum = 0\nwhile not is_empty(data):\n    sum = sum + first(data)\n    remove_first(data)\nreturn sum\n"}
{"task_id": "Mbpp/133", "completion": "\nfunction sum_negativenum(nums)\n    total_sum = 0\n    for each num in nums\n        if num < 0 then\n            total_sum = total_sum + num\n        end if\n    end for\n    return total_sum\n"}
{"task_id": "Mbpp/133", "completion": "FUNCTION sum_negativenum(INPUT list nums)\n    VARIABLE total := 0\n    FOR each num IN nums\n        IF num < 0\n            total := total + num\n        END IF\n    END FOR\n    RETURN total\nEND FUNCTIO"}
{"task_id": "Mbpp/133", "completion": "function sum_negativenum(input_list)\n    result = 0\n    for each num in input_list\n        if num < 0\n            result = result + num\n    return result\n"}
{"task_id": "Mbpp/133", "completion": ""}
{"task_id": "Mbpp/133", "completion": "function sum_negativenum(input_list):\n    sum = 0\n    for num in input_list:\n        if num < 0:\n            sum = sum + num\n    return sum\n"}
{"task_id": "Mbpp/133", "completion": "function sum_negativenum(nums):\n    sum = 0\n    for each num in nums:\n        if num < 0 then\n            sum = sum + num\n        end if\n    return sum\n"}
{"task_id": "Mbpp/133", "completion": "\nfunction sum_negativenum(nums):\n    sum = 0\n    for each num in nums:\n        if num < 0 then\n            sum = sum + num\n        return sum\n"}
{"task_id": "Mbpp/135", "completion": "function hexagonal_num(n):\n    total = 0\n    k = 1\n    i = 1\n    while i <= n:\n        total += k * (2*i - 1)\n        k += 1\n        i += 1\n    return total\n"}
{"task_id": "Mbpp/135", "completion": "\nfunction hexagonal_num(n):\n    return n * (2*n - 1)\n"}
{"task_id": "Mbpp/135", "completion": "function hexagonal_num(n)\n    result = 0\n    k = 1\n    i = 1\n    while i <= n:\n        result = k * (2 * i - 1)\n        k += 2\n        i += 1\n    return resul"}
{"task_id": "Mbpp/135", "completion": "\nfunction hexagonal_num(n):\n    return sum(i*(i+1) for i in range(1, n+1)) * 2 - n * (n+1)\n"}
{"task_id": "Mbpp/135", "completion": "function hexagonal_num(n)\n    total = 0\n    i = 1\n    while i <= n\n        hex_num = (i * (2*i - 1))\n        total = total + hex_num\n        i = i + 1\n    return tota"}
{"task_id": "Mbpp/135", "completion": "function hexagonal_num(n)\n    result = 0\n    i = 1\n    while i <= n\n        result = result + i * (2*i - 1)\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/135", "completion": "function hexagonal_num(n)\n    total = 0\n    num = 1\n    i = 1\n    while i <= n:\n        total += num\n        num = num + 2 * i - 1\n        i = i + 1\n    return tota"}
{"task_id": "Mbpp/135", "completion": "function hexagonal_num(n)\n    result = 0\n    k = 1\n    while k <= n\n        result = result + k * (2 * k - 1)\n        k = k + 1\n    return result\n"}
{"task_id": "Mbpp/135", "completion": "function hexagonal_num(n)\n    sum = 0\n    k = 1\n    i = 1\n    while i <= n:\n        hexagon = k * (2*k - 1)\n        sum = sum + hexagon\n        k = k + 1\n        i = i + 1\n    return su"}
{"task_id": "Mbpp/135", "completion": "function hexagonal_num(n):\n    result = 0\n    k = 1\n    i = 1\n    while i <= n:\n        result += k * (2 * i - 1)\n        k += 2\n        i += 1\n    return result\n"}
{"task_id": "Mbpp/137", "completion": "\nFUNCTION zero_count(nums)\n    SUM_OF_ZEROES = 0\n    SUM_OF_NON_ZEROES = 0\n    FOR num IN nums\n        IF num == 0 THEN\n            SUM_OF_ZEROES = SUM_OF_ZEROES + 1\n        ELSE\n            SUM_OF_NON_ZEROES = SUM_OF_NON_ZEROES + 1\n    END FOR\n    RETURN SUM_OF_ZEROES / (SUM_OF_ZEROES + SUM_OF_NON_ZEROES"}
{"task_id": "Mbpp/137", "completion": "function zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count = zero_count + 1\n        else:\n            non_zero_count = non_zero_count + 1\n    if non_zero_count == 0:\n        return 0\n    return zero_count / non_zero_coun"}
{"task_id": "Mbpp/137", "completion": "input: array of integers\ncount = 0\nzero_count = 0\nfor each num in input:\n    if num == 0:\n        zero_count = zero_count + 1\n    else:\n        count = count + 1\nratio = zero_count / count\nreturn rati"}
{"task_id": "Mbpp/137", "completion": "function zero_count(nums):\n    zero_sum = 0\n    non_zero_sum = 0\n    for num in nums:\n        if num == 0:\n            zero_sum += 1\n        else:\n            non_zero_sum += 1\n    if zero_sum + non_zero_sum == 0:\n        return 0\n    else:\n        return zero_sum / non_zero_su"}
{"task_id": "Mbpp/137", "completion": "\nfunction zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / (zero_count + non_zero_count"}
{"task_id": "Mbpp/137", "completion": "function zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    return zero_count / (zero_count + non_zero_count"}
{"task_id": "Mbpp/137", "completion": "function zero_count(array)\n    count = 0\n    non_zero_count = 0\n    for num in array:\n        if num == 0:\n            count = count + 1\n        else:\n            non_zero_count = non_zero_count + 1\n    if non_zero_count == 0:\n        return float('inf')\n    return count / non_zero_coun"}
{"task_id": "Mbpp/137", "completion": "function zero_count(input_array):\n    zero_count = 0\n    non_zero_count = 0\n    for each element in input_array:\n        if element == 0:\n            zero_count = zero_count + 1\n        else:\n            non_zero_count = non_zero_count + 1\n    return zero_count / (zero_count + non_zero_count)\n"}
{"task_id": "Mbpp/137", "completion": "function zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / (zero_count + non_zero_count"}
{"task_id": "Mbpp/137", "completion": "function zero_count(nums):\n    zero_sum = 0\n    total_sum = 0\n    for num in nums:\n        if num == 0:\n            zero_sum += 1\n        total_sum += 1\n    if total_sum == 0:\n        return 0.0\n    else:\n        return zero_sum / total_su"}
{"task_id": "Mbpp/138", "completion": "function is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    else:\n        powers_of_two = []\n        while n > 0:\n            next_power_of_two = 1\n            while next_power_of_two <= n:\n                powers_of_two.append(next_power_two)\n                next_power_of_two *= 2\n        for power in powers_of_two:\n            if power * (powers_of_two.index(power) + 1) == n:\n                return True\n        return Fals"}
{"task_id": "Mbpp/138", "completion": "function is_Sum_Of_Powers_Of_Two(n)\n    if n <= 0\n        return false\n    else\n        i = 0\n        while 2 ** i <= n\n            temp = n - 2 ** i\n            if temp == 0\n                return true\n            elif temp < 0\n                return false\n            else\n                i = i + 1\n        return false\n"}
{"task_id": "Mbpp/138", "completion": "function is_Sum_Of_Powers_Of_Two(n):\n    if n < 0:\n        return False\n    powers = [2**i for i in range(int(log2(n)) + 1)]\n    for power in powers:\n        while power <= n:\n            n -= power\n            if n == 0:\n                return True\n    return Fals"}
{"task_id": "Mbpp/138", "completion": "function is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    else:\n        powers = []\n        i = 0\n        while (1 << i) <= n:\n            powers.append(1 << i)\n            i += 1\n        for i in range(len(powers)-1, -1, -1):\n            while n > 0 and n >= powers[i]:\n                n -= powers[i]\n        return n == "}
{"task_id": "Mbpp/138", "completion": "function is_Sum_Of_Powers_Of_Two(n):\n    if n < 1:\n        return False\n    i = 0\n    while 2 ** i <= n:\n        while n > 0 and (n % 2 == 0):\n            n = n / 2\n            i = i + 1\n        if n != 0:\n            return False\n        return Tru"}
{"task_id": "Mbpp/138", "completion": ""}
{"task_id": "Mbpp/138", "completion": "\nfunction is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    total = 0\n    power = 1\n    while power <= n:\n        if n - power >= 0:\n            total += power\n            n -= power\n            power *= 2\n        else:\n            return False\n    return True\n"}
{"task_id": "Mbpp/138", "completion": "\nfunction is_Sum_Of_Powers_Of_Two(n):\n    result = True\n    i = 0\n    while n > 0:\n        if n < 2 ** (i + 1):\n            break\n        if n % 2 != 0:\n            return False\n        n = n / 2\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/138", "completion": "function is_Sum_Of_Powers_Of_Two(n):\n    i = 0\n    while n > 0:\n        if (1 << i) <= n:\n            n -= 1 << i\n            print(\"Adding 2^\", i, \"to the sum\")\n        else:\n            return False\n        i += 1\n    return Tru"}
{"task_id": "Mbpp/138", "completion": "\nfunction is_Sum_Of_Powers_Of_Two(n):\n    if n <= 0:\n        return False\n    total = 0\n    power = 1\n    while power <= n:\n        if n >= power:\n            n -= power\n            total += 1\n        else:\n            return False\n        power *= 2\n    return Tru"}
{"task_id": "Mbpp/139", "completion": ""}
{"task_id": "Mbpp/139", "completion": "function circle_circumference(r)\n    result = 2 * pi * r\n    return resul"}
{"task_id": "Mbpp/139", "completion": "function circle_circumference(r)\n    return 2 * math.pi * r\n"}
{"task_id": "Mbpp/139", "completion": "function circle_circumference(r):\n    return 2 * 3.14159 * r\n"}
{"task_id": "Mbpp/139", "completion": ""}
{"task_id": "Mbpp/139", "completion": ""}
{"task_id": "Mbpp/139", "completion": "\nfunction circle_circumference(r):\n    circumference = 2 * math.pi * r\n    return circumferenc"}
{"task_id": "Mbpp/139", "completion": "function circle_circumference(r):\n    return 2 * math.pi * "}
{"task_id": "Mbpp/139", "completion": "\nfunction circle_circumference(r)\n    return 2 * pi * "}
{"task_id": "Mbpp/139", "completion": "\nfunction circle_circumference(r)\n    return 2 * 3.14159 * r\n"}
{"task_id": "Mbpp/140", "completion": "DATA new_set = {}\nFOR each LIST in test_list\n    FOR each NUMBER in LIST\n        ADD NUMBER TO new_set\nRETURN new_se"}
{"task_id": "Mbpp/140", "completion": "function extract_singly(test_list):\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return resul"}
{"task_id": "Mbpp/140", "completion": "function extract_singly(test_list)\n    flat_list = {}\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.add(num)\n    return flat_list\n"}
{"task_id": "Mbpp/140", "completion": "\nprocedure extract_singly(test_list)\n    result_set = empty set\n    for each sublist in test_list\n        for each element in sublist\n            add element to result_set\n    return result_set\n"}
{"task_id": "Mbpp/140", "completion": "function extract_singly(test_list):\n    result = set()\n    for sub_list in test_list:\n        for item in sub_list:\n            result.add(item)\n    return result\n"}
{"task_id": "Mbpp/140", "completion": "\nfunction extract_singly(test_list)\n    result = set()\n    for sublist in test_list:\n        for element in sublist:\n            result.add(element)\n    return result\n"}
{"task_id": "Mbpp/140", "completion": "data = []\nfor sublist in test_list:\n    data.extend(sublist)\nreturn set(data"}
{"task_id": "Mbpp/140", "completion": "data = []\nfor lst in test_list:\n    data.extend(lst)\nreturn set(data"}
{"task_id": "Mbpp/140", "completion": "function extract_singly(test_list):\n    result = set()\n    for sub_list in test_list:\n        for item in sub_list:\n            result.add(item)\n    return result\n"}
{"task_id": "Mbpp/140", "completion": "function extract_singly(test_list):\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result\n"}
{"task_id": "Mbpp/141", "completion": ""}
{"task_id": "Mbpp/141", "completion": "function pancake_sort(nums):\n    n = length(nums)\n    for k from n down to 1:\n        max_idx = index of maximum element in nums[0..k]\n        if max_idx != k - 1:\n            if max_idx > 0:\n                reverse nums[0..max_idx]\n            reverse nums[0..k]\n"}
{"task_id": "Mbpp/141", "completion": "function pancake_sort(arr):\n    n = length(arr)\n    for i from 1 to n:\n        max_idx = index_max(arr, i, n)\n        if max_idx != i - 1:\n            if max_idx != 0:\n                reverse(arr, 0, max_idx)\n            reverse(arr, 0, i - 1)\n    return arr\n"}
{"task_id": "Mbpp/141", "completion": "ALGORITHM\nfunction pancake_sort(A):\n    n = length of A\n\n    for i from n/2 down to 1:\n        k = index of maximum element in A[0..i]\n        if k != i:\n            flip A[0..k]\n            flip A[0..i]\n        else:\n            continue\n\n    return A\n"}
{"task_id": "Mbpp/141", "completion": "\nfunction pancake_sort(arr):\n    for i in range(len(arr) // 2, 0, -1):\n        max_idx = argmax(arr[:i+1])\n        if max_idx != i:\n            flip(arr, max_idx + 1)\n            flip(arr, i)\n        print(arr)\n    return arr\n"}
{"task_id": "Mbpp/141", "completion": ""}
{"task_id": "Mbpp/141", "completion": "\nfunction pancake_sort(nums):\n    for n in range(len(nums), 1, -1):\n        max_idx = find_max_idx(nums, 0, n-1)\n        if max_idx != n-1:\n            flip(nums, 0, max_idx)\n            flip(nums, 0, n-1)\n        else:\n            continue\n    return nums\n"}
{"task_id": "Mbpp/141", "completion": "ALGORITHM pancake_sort\n    INPUT: nums, a list of integers\n    OUTPUT: sorted_list, a sorted version of nums\n\n    REPEAT until length of nums is 1\n        MAX_VALUE = largest element in nums\n        INDEX = index of MAX_VALUE in nums\n        IF INDEX > 0\n            FLIP nums from start to INDEX\n        END IF\n        FLIP nums from start to INDEX\n        REMOVE MAX_VALUE from nums\n\n    RETURN nums\n"}
{"task_id": "Mbpp/141", "completion": "algorithm pancake_sort is\n    input: list nums of integers\n    output: sorted list\n\n    while length of nums > 1\n        find max element in nums\n        if max element is not at start of nums\n            reverse first subarray of nums to put max element at start\n            reverse second subarray of nums to put max element at its final position\n        remove last element from nums\n\n    return nums\n"}
{"task_id": "Mbpp/141", "completion": "\nALGORITHM:\n Procedure pancake_sort(input: array of integers)\n    loop until the entire array is sorted:\n        find the maximum element in the unsorted part of the array\n        reverse the subarray from the beginning to the position of the maximum element\n        if the maximum element is not at the end of the array, then flip the entire array\n        return the sorted array\n"}
{"task_id": "Mbpp/142", "completion": "function count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/142", "completion": "\nfunction count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count + 1\n    return coun"}
{"task_id": "Mbpp/142", "completion": "\nfunction count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return coun"}
{"task_id": "Mbpp/142", "completion": "for i from 0 to length(list1) - 1:\n    if list1[i] == list2[i] and list2[i] == list3[i]:\n        count = count + 1\nreturn coun"}
{"task_id": "Mbpp/142", "completion": "\nDEF count_samepair(list1, list2, list3):\n    COUNT = 0\n    FOR i FROM 0 TO LENGTH(list1) - 1:\n        IF list1[i] == list2[i] AND list1[i] == list3[i]:\n            COUNT = COUNT + 1\n    RETURN COUN"}
{"task_id": "Mbpp/142", "completion": "\nfunction result = count_samepair(list1, list2, list3)\n    count = 0\n    for i from 0 to length(list1) - 1:\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/142", "completion": "function count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/142", "completion": "\nfunction count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/142", "completion": "function count_samepair(list1, list2, list3):\n    result = 0\n    for i from 0 to length(list1)-1:\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            result = result + 1\n    return resul"}
{"task_id": "Mbpp/142", "completion": "ALGORITHM:\n\n1. Initialize count variable to 0\n2. Loop through each index i from 0 to length of list1 - 1\n3. If list1[i] is equal to list2[i] and list2[i] is equal to list3[i]\n   then increment count by 1\n4. Return coun"}
{"task_id": "Mbpp/143", "completion": ""}
{"task_id": "Mbpp/143", "completion": ""}
{"task_id": "Mbpp/143", "completion": ""}
{"task_id": "Mbpp/143", "completion": ""}
{"task_id": "Mbpp/143", "completion": ""}
{"task_id": "Mbpp/143", "completion": ""}
{"task_id": "Mbpp/143", "completion": "function find_lists(input_tuple)\n    count := 0\n    for each item in input_tuple:\n        if type(item) is list:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/143", "completion": "\ninputs = inputs[0]\ncount = 0\nfor item in inputs:\n    if isinstance(item, list):\n        count += 1\nreturn count\n"}
{"task_id": "Mbpp/143", "completion": ""}
{"task_id": "Mbpp/143", "completion": ""}
{"task_id": "Mbpp/145", "completion": "\nfunction max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"}
{"task_id": "Mbpp/145", "completion": "function max_Abs_Diff(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    return abs(max_val - min_val"}
{"task_id": "Mbpp/145", "completion": "function max_Abs_Diff(arr):\n    max_diff = 0\n    for i from 1 to length(arr)-1:\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"}
{"task_id": "Mbpp/145", "completion": "data = array\nmax_diff = 0\nfor i from 1 to length(data)\n    for j from i + 1 to length(data)\n        diff = abs(data[i] - data[j])\n        if diff > max_diff\n            max_diff = diff\nreturn max_dif"}
{"task_id": "Mbpp/145", "completion": "\nfunction max_Abs_Diff(arr):\n    max_val = arr[0]\n    min_val = arr[0]\n    max_diff = 0\n\n    for i from 0 to length of arr - 1:\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n        max_diff = max(max_diff, abs(max_val - min_val))\n\n    return max_diff\n"}
{"task_id": "Mbpp/145", "completion": "\nfunction max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "Mbpp/145", "completion": ""}
{"task_id": "Mbpp/145", "completion": "\nfunction max_Abs_Diff(arr):\n    if len(arr) < 2:\n        return 0\n    max_diff = 0\n    min_val = arr[0]\n    for val in arr:\n        if val < min_val:\n            min_val = val\n        else:\n            max_diff = max(max_diff, abs(val - min_val))\n    return max_dif"}
{"task_id": "Mbpp/145", "completion": "function max_Abs_Diff(arr)\n    max_diff = 0\n    for i from 1 to length(arr)-1\n        for j from i+1 to length(arr)\n            if abs(arr[i]-arr[j]) > max_diff\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"}
{"task_id": "Mbpp/145", "completion": "\nDATA max_diff = 0\nDATA min_element = arr[0]\nDATA max_element = arr[0]\n\nFOR each element IN arr\n    IF element < min_element\n        min_element = element\n    ELSE IF element > max_element\n        max_element = element\n\nRETURN abs(max_element - min_element)\n"}
{"task_id": "Mbpp/160", "completion": "function find_solution(a, b, n)\n    if gcd(a, b) != 1\n        return None\n    else\n        x = 1\n        y = 0\n        while (b mod a) != 0\n            remainder = b mod a\n            b = a\n            a = remainder\n            temp = y\n            y = x - (y * (b // a))\n            x = temp\n        if x >= 0 and n % a == 0\n            y = (n // a) - x\n            return (x, y)\n        else\n            y = (-1) * (n // a) - x\n            return (x, y)\n"}
{"task_id": "Mbpp/160", "completion": "function find_solution(a, b, n)\n    if gcd(a, b) != 1\n        return None\n    else\n        x0 = 1\n        y0 = 0\n        x1 = 0\n        y1 = 1\n        while n != 0\n            q = a div n\n            r = a mod n\n            a = n\n            n = r\n            x = x1 - q * x0\n            y = y1 - q * y0\n            x0 = x1\n            x1 = x\n            y0 = y1\n            y1 = y\n        return (x0, y0)\n"}
{"task_id": "Mbpp/160", "completion": "\nfunction find_solution(a, b, n):\n    if gcd(a, b) != 1:\n        return None\n    var t = 0\n    var r = n\n    while r != 0:\n        q = a mod r\n        t, a = a, r\n        r = q\n    x = n / a\n    y = t / gcd(a, b)\n    return (int(x), int(y))\n"}
{"task_id": "Mbpp/160", "completion": "\nfunction find_solution(a, b, n):\n    if gcd(a, b) != 1:\n        return None\n    t = 0\n    newt = 1\n    r = b\n    while r != 0:\n        q = a // r\n        t, newt = newt, t - q * newt\n        a, r = r, a % r\n    if t < 0:\n        t = t + b // a\n    x = t\n    y = 0\n    while x % 2 == 0:\n        x = x // 2\n        y = y + 1\n    return (x, y)\n"}
{"task_id": "Mbpp/160", "completion": "function find_solution(a, b, n)\n    if gcd(a, b) does not divide n\n        return None\n    else\n        x = n / gcd(a, b)\n        y = (a * x - n) / b\n        return (x, y)\n"}
{"task_id": "Mbpp/160", "completion": "function find_solution(a, b, n):\n    if gcd(a, b) does not divide n:\n        return None\n    else:\n        x = n mod gcd(a, b)\n        y = (n div gcd(a, b)) * (b mod gcd(a, b))\n        return (x, y)\n\nfunction gcd(m, n):\n    while n is not zero:\n        temp = m mod n\n        m = n\n        n = temp\n    return "}
{"task_id": "Mbpp/160", "completion": "function find_solution(a, b, n)\n    if gcd(a, b) does not divide n\n        return None\n    else\n        variables x and y\n        for each possible value of x from 0 to n\n            if a * x mod b is equal to n mod b\n                y is equal to (n - a * x) / b\n                return (x, y)\n"}
{"task_id": "Mbpp/160", "completion": "\nfunction find_solution(a, b, n):\n    if gcd(a, b) does not divide n:\n        return None\n    else:\n        x = n / gcd(a, b)\n        y = (n mod a) / gcd(b, n mod a)\n        return (x, y)\n\nfunction gcd(m, n):\n    while n is not zero:\n        m = n\n        n = m mod n\n    return m\n"}
{"task_id": "Mbpp/160", "completion": "function find_solution(a, b, n):\n    if gcd(a, b) does not divide n:\n        return None\n    else:\n        x := n / gcd(a, b) * b\n        y := n / gcd(a, b) * (-a)\n        return (x, y)\n"}
{"task_id": "Mbpp/160", "completion": "\nfunction find_solution(a, b, n):\n    if gcd(a, b) != 1:\n        return None\n    else:\n        x0, y0 = extended_euclidean(a, b)\n        x = int(n * x0 / b)\n        y = int(n * y0 / a)\n        return (x, y)\n\nfunction extended_euclidean(x, y):\n    if y == 0:\n        return 1, 0\n    else:\n        gcd, s, t = extended_euclidean(y, x % y)\n        return gcd, t - s * (x // y)\n"}
{"task_id": "Mbpp/161", "completion": "function remove_elements(list1, list2):\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n"}
{"task_id": "Mbpp/161", "completion": "function remove_elements(list1, list2)\n    result = []\n    for each element in list1:\n        if element is not in list2:\n            result.append(element)\n    return resul"}
{"task_id": "Mbpp/161", "completion": ""}
{"task_id": "Mbpp/161", "completion": ""}
{"task_id": "Mbpp/161", "completion": "function remove_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return resul"}
{"task_id": "Mbpp/161", "completion": "\nfunction remove_elements(list1, list2)\n    result = []\n    for each element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n"}
{"task_id": "Mbpp/161", "completion": "\nfunction remove_elements(list1, list2):\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return resul"}
{"task_id": "Mbpp/161", "completion": "function remove_elements(list1, list2):\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n"}
{"task_id": "Mbpp/161", "completion": "function remove_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n"}
{"task_id": "Mbpp/161", "completion": "\nalgorithm\n  input list1: list of integers\n  input list2: list of integers\n\n  output: list of integers\n\n  result = []\n\n  for each element in list1:\n    if element is not in list2:\n      result.append(element)\n\n  return result\n"}
{"task_id": "Mbpp/162", "completion": "function sum_series(n):\n    result = 0\n    i = 0\n    while n - 2 * i >= 0:\n        result += n - 2 * i\n        i += 1\n    return resul"}
{"task_id": "Mbpp/162", "completion": "function sum_series(n):\n    sum = 0\n    for i from 0 to n // 2:\n        sum = sum + (n - 2 * i)\n    return su"}
{"task_id": "Mbpp/162", "completion": "function sum_series(n):\n    sum = 0\n    i = 0\n    while n >= 2 * i:\n        sum = sum + (n - 2 * i)\n        i = i + 1\n    return sum\n"}
{"task_id": "Mbpp/162", "completion": "function sum_series(n)\n    result = 0\n    for i from 0 to n // 2 do\n        result = result + (n - 2 * i)\n    return resul"}
{"task_id": "Mbpp/162", "completion": "function sum_series(n):\n    result = 0\n    i = 0\n    while n - 2 * i >= 0:\n        result = result + (n - 2 * i)\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/162", "completion": "function sum_series(n):\n    sum = 0\n    i = 0\n    while i <= n / 2:\n        sum = sum + (n - 2 * i)\n        i = i + 1\n    return sum\n"}
{"task_id": "Mbpp/162", "completion": "function sum_series(n):\n    total = 0\n    for i from 0 to n // 2:\n        total = total + n - 2 * i\n    return tota"}
{"task_id": "Mbpp/162", "completion": "\nfunction sum_series(n)\n    result = 0\n    i = 0\n    while i <= n // 2:\n        result = result + (n - 2 * i)\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/162", "completion": "function sum_series(n)\n    result = 0\n    for i from 0 to n // 2\n        result += n - 2 * i\n    return result\n"}
{"task_id": "Mbpp/162", "completion": "\nfunction sum_series(n):\n    total = 0\n    i = 0\n    while 2 * i <= n:\n        total += n - 2 * i\n        i += 1\n    return total\n"}
{"task_id": "Mbpp/164", "completion": ""}
{"task_id": "Mbpp/164", "completion": "function are_equivalent(num1, num2):\n  return div_sum(num1) == div_sum(num2)\n"}
{"task_id": "Mbpp/164", "completion": ""}
{"task_id": "Mbpp/164", "completion": "function are_equivalent(num1, num2)\n    sum1 = div_sum(num1)\n    sum2 = div_sum(num2)\n    return sum1 == sum2\n"}
{"task_id": "Mbpp/164", "completion": "function are_equivalent(num1, num2):\n  div_sum1 = div_sum(num1)\n  div_sum2 = div_sum(num2)\n  return div_sum1 == div_sum2\n"}
{"task_id": "Mbpp/164", "completion": "function are_equivalent(num1, num2):\n  return div_sum(num1) == div_sum(num2)\n"}
{"task_id": "Mbpp/164", "completion": ""}
{"task_id": "Mbpp/164", "completion": "function are_equivalent(num1, num2):\n  return div_sum(num1) == div_sum(num2)\n"}
{"task_id": "Mbpp/164", "completion": ""}
{"task_id": "Mbpp/164", "completion": "function are_equivalent(num1, num2)\n  return div_sum(num1) != div_sum(num2)\n"}
{"task_id": "Mbpp/165", "completion": ""}
{"task_id": "Mbpp/165", "completion": "\nfunction count_char_position(str1):\n    count = 0\n    for i from 0 to length(str1) - 1:\n        if ord(str1[i]) >= ord('a') and ord(str1[i]) <= ord('z'):\n            count = count + 1\n    return coun"}
{"task_id": "Mbpp/165", "completion": "function count_char_position(str1):\n    count = 0\n    for i from 0 to len(str1) - 1:\n        if str1[i].lower() == chr(i + 96):\n            count += 1\n    return coun"}
{"task_id": "Mbpp/165", "completion": "function count_char_position(str1):\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i]) - 96 == i + 1:\n            count += 1\n    return coun"}
{"task_id": "Mbpp/165", "completion": "\nfunction count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if ord(str1[i]) - 96 == i + 1:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/165", "completion": "\nfunction count_char_position(str1):\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and ord(str1[i]) - 96 == i + 1:\n            count += 1\n    return coun"}
{"task_id": "Mbpp/165", "completion": "\nfunction count_char_position(str1):\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if ord('a') <= ord(str1[i]) - ord('a') < len('abcdefghijklmnopqrstuvwxyz'):\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/165", "completion": "function count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        char = str1[i]\n        if char.lower() == chr((ord(char.lower()) - 96 + i) % 26 + 96):\n            count += 1\n    return coun"}
{"task_id": "Mbpp/165", "completion": "function count_char_position(str1)\n    char_count = 0\n    for i from 0 to str1.length - 1\n        if str1[i].toLowerCase() == chr(96 + i) then\n            char_count += 1\n        end if\n    return char_count\n"}
{"task_id": "Mbpp/165", "completion": "function count_char_position(str1):\n    str1 = str1.lower()\n    count = 0\n    for i in range(97, 123):\n        char = chr(i)\n        count += str1.count(char)\n    return count\n"}
{"task_id": "Mbpp/166", "completion": ""}
{"task_id": "Mbpp/166", "completion": "function find_even_pair(A):\n    count = 0\n    for i from 0 to A.length - 1:\n        for j from i + 1 to A.length - 1:\n            if (A[i] XOR A[j]) mod 2 is 0:\n                count = count + 1\n    return coun"}
{"task_id": "Mbpp/166", "completion": "\nfunction find_even_pair(A):\n    count = 0\n    seen = set()\n    for num in A:\n        complement = num ^ (num - 1)\n        if complement in seen:\n            count += 1\n        seen.add(complement)\n    return count\n"}
{"task_id": "Mbpp/166", "completion": "function find_even_pair(A):\n    count := 0\n    for i := 0 to A.length - 1:\n        for j := i + 1 to A.length:\n            if (A[i] XOR A[j]) % 2 == 0:\n                count++\n    return count\n"}
{"task_id": "Mbpp/166", "completion": ""}
{"task_id": "Mbpp/166", "completion": ""}
{"task_id": "Mbpp/166", "completion": "function find_even_pair(A):\n    count = 0\n    for i from 0 to len(A) - 1:\n        for j from 0 to len(A) - 1:\n            if i != j:\n                if (A[i] ^ A[j]) % 2 == 0:\n                    count += 1\n    return coun"}
{"task_id": "Mbpp/166", "completion": "\nfunction find_even_pair(A):\n    count = 0\n    for i from 0 to A.length - 1:\n        for j from i + 1 to A.length - 1:\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return coun"}
{"task_id": "Mbpp/166", "completion": "function find_even_pair(A):\n    count = 0\n    for i from 0 to length(A)-1:\n        for j from i+1 to length(A)-1:\n            if (A[i] xor A[j]) % 2 == 0 then\n                count = count + 1\n    return coun"}
{"task_id": "Mbpp/166", "completion": "\nfunction find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return coun"}
{"task_id": "Mbpp/167", "completion": "function next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n"}
{"task_id": "Mbpp/167", "completion": "\nfunction next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** ceil(log2(n)"}
{"task_id": "Mbpp/167", "completion": "function next_power_of_2(n):\n    if (n <= 0):\n        return 1\n    else:\n        return 2 ** (n - 1 - (n & (n - 1)) + 1)\n"}
{"task_id": "Mbpp/167", "completion": ""}
{"task_id": "Mbpp/167", "completion": "\nfunction next_power_of_2(n)\n    if (n > 0):\n        result = 1\n        while (result <= n):\n            result = result * 2\n        return result\n    else:\n        return 1\n"}
{"task_id": "Mbpp/167", "completion": "function next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        result = 2\n        while (result <= n):\n            result *= 2\n        return resul"}
{"task_id": "Mbpp/167", "completion": ""}
{"task_id": "Mbpp/167", "completion": "function next_power_of_2(n)\n    if n == 0:\n        return 1\n    else:\n        return 2 ** ceil(log2(n + 1)"}
{"task_id": "Mbpp/167", "completion": "function next_power_of_2(n)\n    if n <= 0\n        return 1\n    else\n        return 2 ^ (ceiling(log2(n)) + 1)\n"}
{"task_id": "Mbpp/167", "completion": ""}
{"task_id": "Mbpp/168", "completion": ""}
{"task_id": "Mbpp/168", "completion": ""}
{"task_id": "Mbpp/168", "completion": ""}
{"task_id": "Mbpp/168", "completion": ""}
{"task_id": "Mbpp/168", "completion": ""}
{"task_id": "Mbpp/168", "completion": ""}
{"task_id": "Mbpp/168", "completion": ""}
{"task_id": "Mbpp/168", "completion": ""}
{"task_id": "Mbpp/168", "completion": "\nfunction frequency(list, target)\n    count = 0\n    for each element in list:\n        if element is equal to target:\n            increment count by 1\n    return count\n"}
{"task_id": "Mbpp/168", "completion": ""}
{"task_id": "Mbpp/170", "completion": "data = input_list[m]\nsum = 0\nfor i from m to n-1:\n    sum = sum + data[i]\noutput = sum\n"}
{"task_id": "Mbpp/170", "completion": "function sum_range_list(list1, m, n)\n    sum = 0\n    for i from m to n\n        sum = sum + list1[i]\n    return sum\n"}
{"task_id": "Mbpp/170", "completion": "\nfunction sum_range_list(list1, m, n):\n    sum = 0\n    for i from m to n:\n        sum = sum + list1[i]\n    return su"}
{"task_id": "Mbpp/170", "completion": "function sum_range_list(list1, m, n)\n    sum = 0\n    for i from m to n\n        sum = sum + list1[i]\n    return su"}
{"task_id": "Mbpp/170", "completion": ""}
{"task_id": "Mbpp/170", "completion": ""}
{"task_id": "Mbpp/170", "completion": ""}
{"task_id": "Mbpp/170", "completion": "function sum_range_list(list1, m, n):\n    if m > n:\n        swap(m, n)\n    total_sum = 0\n    for i from m to n:\n        total_sum = total_sum + list1[i]\n    return total_su"}
{"task_id": "Mbpp/170", "completion": "function sum_range_list(list1, m, n)\n    if m > n:\n        return \"Error: start index is greater than end index\"\n    else:\n        total = 0\n        for i from m to n\n            total = total + list1[i]\n        return total\n"}
{"task_id": "Mbpp/170", "completion": "function sum_range_list(list1, m, n):\n    total = 0\n    for i from m to n:\n        total = total + list1[i]\n    return tota"}
{"task_id": "Mbpp/171", "completion": ""}
{"task_id": "Mbpp/171", "completion": ""}
{"task_id": "Mbpp/171", "completion": "\nfunction perimeter_pentagon(a):\n    return 5 * "}
{"task_id": "Mbpp/171", "completion": "function calculate_perimeter(a)\n    return 5 * a\n"}
{"task_id": "Mbpp/171", "completion": "function perimeter_pentagon(a)\n    return a * "}
{"task_id": "Mbpp/171", "completion": "function perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimete"}
{"task_id": "Mbpp/171", "completion": "\nfunction perimeter_pentagon(a)\n    return 5 * a\n"}
{"task_id": "Mbpp/171", "completion": "\nfunction perimeter_pentagon(a):\n    return 5 * a\n"}
{"task_id": "Mbpp/171", "completion": ""}
{"task_id": "Mbpp/171", "completion": ""}
{"task_id": "Mbpp/172", "completion": "\nfunction count_occurance(s):\n    count := 0\n    i := 0\n    while i <= length(s) - 2 do  // -2 because we are looking for 'std'\n        if substring(s, i, i+3) = \"std\" then\n            count := count + 1\n        end if\n        i := i + 1\n    return count\n"}
{"task_id": "Mbpp/172", "completion": "\nfunction count_occurance(s)\n    count = 0\n    pos = 1\n    while pos <= len(s)\n        if s.substring(pos, pos + 3) == \"std\"\n            count = count + 1\n        end if\n        pos = pos + 1\n    end while\n    return count\n"}
{"task_id": "Mbpp/172", "completion": "\nfunction count_occurance(s)\n    count = 0\n    for i from 1 to length of s\n        if substring(s, i, i + 3) equals \"std\"\n            increment count\n    return count\n"}
{"task_id": "Mbpp/172", "completion": "\nfunction count_occurance(s):\n    count = 0\n    for i from 1 to length(s) - 2:\n        if s.substring(i, i + 3) equals \"std\":\n            count = count + 1\n    return coun"}
{"task_id": "Mbpp/172", "completion": "function count_occurance(s)\n    count = 0\n    i = 0\n    while i < length(s)\n        if substring(s, i, i+3) == \"std\"\n            count = count + 1\n        i = i + 1\n    return count\n"}
{"task_id": "Mbpp/172", "completion": ""}
{"task_id": "Mbpp/172", "completion": "\nfunction count_occurance(s):\n    count = 0\n    for i from 1 to length of s:\n        if substring(s, i, i+3) equals \"std\":\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/172", "completion": "\nfunction count_occurrence(s)\n    count = 0\n    index = 1\n    while index <= length(s)\n        if substring(s, index, index + 2) is \"std\"\n            count = count + 1\n        index = index + 1\n    return count\n"}
{"task_id": "Mbpp/172", "completion": "\nfunction count_occurance(s)\n    count := 0\n    for i from 1 to length(s) do\n        if substring(s, i, i+3) equals \"std\" then\n            count := count + 1\n        end if\n    end for\n    return count\nend function\n"}
{"task_id": "Mbpp/172", "completion": "function count_occurance(s)\n    count = 0\n    i = 1\n    while i <= length(s)\n        if substring(s, i, i + 3) == \"std\"\n            count = count + 1\n        end if\n        i = i + 1\n    end while\n    return count\n"}
{"task_id": "Mbpp/222", "completion": "\nfunction check_type(test_tuple):\n    type_of_first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != type_of_first_element:\n            return False\n    return True\n"}
{"task_id": "Mbpp/222", "completion": "\nfunction check_type(test_tuple):\n    type1 = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i) != type1:\n            return False\n    return Tru"}
{"task_id": "Mbpp/222", "completion": ""}
{"task_id": "Mbpp/222", "completion": ""}
{"task_id": "Mbpp/222", "completion": ""}
{"task_id": "Mbpp/222", "completion": ""}
{"task_id": "Mbpp/222", "completion": "function check_type(test_tuple):\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    return Tru"}
{"task_id": "Mbpp/222", "completion": ""}
{"task_id": "Mbpp/222", "completion": "\nfunction check_type(test_tuple):\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n"}
{"task_id": "Mbpp/222", "completion": "function check_type(test_tuple):\n    first_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    return Tru"}
{"task_id": "Mbpp/223", "completion": "\nif x != arr[0]:\n    if bisect_right(arr, x) - bisect_left(arr, x) > n/2:\n        return True\nelse:\n    count = 1\n    for i in range(1, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            break\n    return count > n/2\n"}
{"task_id": "Mbpp/223", "completion": "function is_majority(arr, n, x):\n    left := bisect_left(arr, x)\n    right := bisect_right(arr, x)\n    if right - left > n/2:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/223", "completion": "\nfunction result := 0\nleft := bisect_left(arr, x)\nright := bisect_right(arr, x)\n\nif left == right:\n    return False\nelse:\n    if (right - left) > n / 2:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/223", "completion": "\nfunction is_majority(arr, n, x):\n    if len(arr) > 0:\n        left = bisect_left(arr, x)\n        right = bisect_right(arr, x)\n        return right - left > n / 2\n    else:\n        return Fals"}
{"task_id": "Mbpp/223", "completion": "\nfunction is_majority(arr, n, x):\n    low = bisect_left(arr, x)\n    high = bisect_right(arr, x)\n    count = high - low\n    if count > n // 2:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/223", "completion": "function is_majority(arr, n, x):\n    # Find the count of element x in the given array\n    count = bisect_right(arr, x) - bisect_left(arr, x)\n    \n    # Check if the count of element x is greater than n/2\n    if count > n/2:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/223", "completion": ""}
{"task_id": "Mbpp/223", "completion": "function is_majority(arr, n, x):\n    left = bisect_left(arr, x)\n    right = bisect_right(arr, x)\n    return left + right > n / "}
{"task_id": "Mbpp/223", "completion": ""}
{"task_id": "Mbpp/223", "completion": "function is_majority(arr, n, x):\n    left = bisect_left(arr, x)\n    right = bisect_right(arr, x)\n\n    if left == right:\n        return False\n    elif right - left > n / 2:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/224", "completion": "function count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n % 2 == 1 then\n            count = count + 1\n        end if\n        n = n / 2\n    return coun"}
{"task_id": "Mbpp/224", "completion": "ALGORITHM:\n    FUNCTION count_Set_Bits(n)\n        Initialize count as 0\n        WHILE n > 0\n            IF n AND 1 is True THEN\n                count = count + 1\n            END IF\n            n = n RIGHT SHIFT 1\n        END WHILE\n        RETURN coun"}
{"task_id": "Mbpp/224", "completion": "function count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count = count + n & 1\n        n = n >> 1\n    return count\n"}
{"task_id": "Mbpp/224", "completion": "\nfunction count_set_bits(n):\n    count := 0\n    while n > 0:\n        count := count + n mod 2\n        n := n / 2\n    return count\n"}
{"task_id": "Mbpp/224", "completion": "\nfunction count_Set_Bits(n)\n    count := 0\n    while n > 0 do\n        if (n mod 2) = 1 then\n            count := count + 1\n        end if\n        n := n / 2\n    end while\n    return count\n"}
{"task_id": "Mbpp/224", "completion": "\nfunction count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count = count + n % 2\n        n = n // 2\n    return count\n"}
{"task_id": "Mbpp/224", "completion": ""}
{"task_id": "Mbpp/224", "completion": "function count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n % 2 != 0:\n            count = count + 1\n        n = n // 2\n    return coun"}
{"task_id": "Mbpp/224", "completion": ""}
{"task_id": "Mbpp/224", "completion": "function count_set_bits(n):\n    count = 0\n    while n > 0:\n        count = count + (n & 1)\n        n = n >> 1\n    return count\n"}
{"task_id": "Mbpp/226", "completion": "\nfunction odd_values_string(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n"}
{"task_id": "Mbpp/226", "completion": "\nfunction odd_values_string(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n"}
{"task_id": "Mbpp/226", "completion": "\nfunction odd_values_string(s):\n    result = \"\"\n    for i from 0 to len(s) - 1:\n        if i % 2 == 0:\n            result += s[i]\n    return resul"}
{"task_id": "Mbpp/226", "completion": "function odd_values_string(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n"}
{"task_id": "Mbpp/226", "completion": "str1 = input(\"Enter the string: \")\nresult = ''\nfor i in range(len(str1)):\n    if i % 2 == 0:\n        result += str1[i]\nprint(result"}
{"task_id": "Mbpp/226", "completion": "function odd_values_string(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return resul"}
{"task_id": "Mbpp/226", "completion": "function odd_values_string(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return resul"}
{"task_id": "Mbpp/226", "completion": "function odd_values_string(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return resul"}
{"task_id": "Mbpp/226", "completion": "function odd_values_string(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n"}
{"task_id": "Mbpp/226", "completion": "\nfunction odd_values_string(str1):\n    result = \"\"\n    for i from 0 to length(str1) - 1:\n        if i mod 2 is 0:\n            result = result + str1[i]\n    return result\n"}
{"task_id": "Mbpp/227", "completion": "if a <= b and a <= c then\n    result = a\nelse if b <= c then\n    result = b\nelse \n    result = c\nreturn resul"}
{"task_id": "Mbpp/227", "completion": "if (a <= b and a <= c):\n    return a\nelif (b <= a and b <= c):\n    return b\nelse:\n    return "}
{"task_id": "Mbpp/227", "completion": "if (a <= b and a <= c) then\n    return a\nelse if (b <= a and b <= c) then\n    return b\nelse \n    return "}
{"task_id": "Mbpp/227", "completion": "function min_of_three(a, b, c)\n    if a <= b and a <= c then\n        return a\n    elif b <= a and b <= c then\n        return b\n    else\n        return c\n"}
{"task_id": "Mbpp/227", "completion": "\nfunction min_of_three(a, b, c)\n    if a <= b and a <= c then\n        return a\n    elif b <= a and b <= c then\n        return b\n    else\n        return c\n"}
{"task_id": "Mbpp/227", "completion": "if (a <= b and a <= c) then\n    return a\nelse if (b <= a and b <= c) then\n    return b\nelse \n    return "}
{"task_id": "Mbpp/227", "completion": "if a <= b and a <= c then\n   return a\nelse if b <= c then\n   return b\nelse\n   return "}
{"task_id": "Mbpp/227", "completion": "\nfunction min_of_three(a, b, c)\n    if a <= b and a <= c then\n        return a\n    elseif b <= a and b <= c then\n        return b\n    else\n        return c\n    end if\nend function\n"}
{"task_id": "Mbpp/227", "completion": "if a <= b and a <= c then\n    return a\nelse if b <= a and b <= c then\n    return b\nelse\n    return "}
{"task_id": "Mbpp/227", "completion": "if a <= b and a <= c:\n  return a\nelif b <= a and b <= c:\n  return b\nelse:\n  return "}
{"task_id": "Mbpp/229", "completion": "function re_arrange_array(arr, n):\n    left = 0\n    right = 0\n    \n    while right < n:\n        if arr[right] < 0:\n            swap(arr, left, right)\n            left = left + 1\n        right = right + 1\n        \n    while right <= len(arr) - 1:\n        if arr[right] >= 0:\n            swap(arr, left, right)\n            left = left + 1\n        right = right + 1\n        \n    return arr\n"}
{"task_id": "Mbpp/229", "completion": "if n > len(arr):\n    n = len(arr)\nnegatives = []\npositives = []\nfor i in arr:\n    if i < 0:\n        negatives.append(i)\n    else:\n        positives.append(i)\nresult = []\nfor i in range(n):\n    if i < len(negatives):\n        result.append(negatives[i])\n    result.append(positives[i - len(negatives)])\nreturn result"}
{"task_id": "Mbpp/229", "completion": "function re_arrange_array(arr, n):\n    negative = []\n    positive = []\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    result = []\n    while len(negative) > 0 and len(positive) > 0:\n        if negative[0] <= positive[0]:\n            result.append(negative.pop(0))\n        else:\n            result.append(positive.pop(0))\n    result += negative\n    result += positive\n    return result[:n] + result[n:]\n"}
{"task_id": "Mbpp/229", "completion": "function re_arrange_array(arr, n)\n    // separate the array into two lists: one for negatives and one for positives\n    let negatives = []\n    let positives = []\n    for each element in arr\n        if element < 0\n            append element to negatives\n        else\n            append element to positives\n    \n    // concatenate the two lists\n    result = []\n    for each element in negatives\n        append element to result\n    for each element in positives\n        append element to result\n    \n    return resul"}
{"task_id": "Mbpp/229", "completion": ""}
{"task_id": "Mbpp/229", "completion": ""}
{"task_id": "Mbpp/229", "completion": "data = []\nnegatives = []\npositives = []\n\nfor i in range(min(n, len(arr))):\n    if arr[i] < 0:\n        negatives.append(arr[i])\n    else:\n        positives.append(arr[i])\n\nfor i in range(n):\n    if i < len(negatives):\n        data.append(negatives.pop(0))\n    else:\n        data.append(positives.pop(0))\n\ndata.extend(positives)\ndata.extend(negatives)\nreturn dat"}
{"task_id": "Mbpp/229", "completion": "re_arrange_array(arr, n):\n    negatives = []\n    positives = []\n    result = []\n\n    for element in arr[:n]:\n        if element < 0:\n            negatives.append(element)\n        else:\n            positives.append(element)\n\n    for element in arr[n:]:\n        if len(negatives) > 0:\n            result.append(negatives.pop(0))\n        result.append(element)\n        if len(positives) > 0:\n            result.append(positives.pop(0))\n\n    for element in negatives:\n        result.append(element)\n    for element in positives:\n        result.append(element)\n\n    return resul"}
{"task_id": "Mbpp/229", "completion": "data = []\nnegatives = []\npositives = []\n\nfor i in range(len(arr)):\n    if arr[i] < 0:\n        negatives.append(arr[i])\n    else:\n        positives.append(arr[i])\n\nfor i in range(n):\n    if i < len(negatives):\n        data.append(negatives[i])\n    else:\n        data.append(positives[i - len(negatives)])\n\nfor i in range(n, len(arr)):\n    if not data or data[-1] < 0:\n        data.append(arr[i])\n    else:\n        data.append(arr[i])\n\nreturn dat"}
{"task_id": "Mbpp/229", "completion": "\nprocedure re_arrange_array(arr, n)\n    // Separate the array into two lists, one with negative numbers and one with positive numbers\n    negative_nums = []\n    positive_nums = []\n    for each element in arr:\n        if element < 0 then\n            add element to negative_nums\n        else\n            add element to positive_nums\n\n    // Combine the lists, starting with the negative numbers\n    result = []\n    for each element in negative_nums\n        add element to result\n    for each element in positive_nums\n        add element to result\n\n    return result\n"}
{"task_id": "Mbpp/230", "completion": "function replace_blank(str1, char)\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            new_str += char\n        else:\n            new_str += str1[i]\n    return new_st"}
{"task_id": "Mbpp/230", "completion": ""}
{"task_id": "Mbpp/230", "completion": "\nfunction replace_blank(str1, char)\n    result = \"\"\n    for each char in str1:\n        if char is \" \" then\n            append char to result\n        else\n            append char to result\n    return resul"}
{"task_id": "Mbpp/230", "completion": "function replace_blank(str1, char)\n    new_str = \"\"\n    for each char in str1\n        if char == \" \"\n            new_str = new_str + char\n        else\n            new_str = new_str + char\n    return new_st"}
{"task_id": "Mbpp/230", "completion": "algorithm replace_blank(input_string, replacement_char):\n    temp = \"\"\n    for each character in input_string:\n        if character is not \" \" then\n            temp = temp + character\n        else\n            temp = temp + replacement_char\n    return temp\n"}
{"task_id": "Mbpp/230", "completion": "function replace_blank(str1, char):\n    result = \"\"\n    for each character in str1:\n        if character is a space:\n            result += char\n        else:\n            result += character\n    return resul"}
{"task_id": "Mbpp/230", "completion": "function replace_blank(str1, char):\n    tempStr = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ' ':\n            tempStr += char\n        else:\n            tempStr += str1[i]\n    return tempStr\n"}
{"task_id": "Mbpp/230", "completion": "PROCEDURE replace_blank(str1, char)\n    Initialize result\n    FOR each character c in str1\n        IF c is a space\n            Replace c with char\n        ELSE\n            Append c to result\n    RETURN result\n"}
{"task_id": "Mbpp/230", "completion": "\ninputString = str1\nchar = char\noutputString = \"\"\nfor eachChar in inputString:\n    if eachChar is ' ' then\n        outputString = outputString + char\n    else\n        outputString = outputString + eachChar\nreturn outputString\n"}
{"task_id": "Mbpp/230", "completion": ""}
{"task_id": "Mbpp/232", "completion": ""}
{"task_id": "Mbpp/232", "completion": "heap = []\nfor i in sorted(list1, reverse=True):\n    if len(heap) < n:\n        heapq.heappush(heap, i)\n    elif i > heap[0]:\n        heapq.heappop(heap)\n        heapq.heappush(heap, i)\nreturn list(heap"}
{"task_id": "Mbpp/232", "completion": "heap = []\nfor num in list1:\n    if len(heap) < n:\n        heapq.heappush(heap, num)\n    else:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\nheapq.heapify(heap)\nreturn [heapq.heappop(heap) for _ in range(len(heap))]\n"}
{"task_id": "Mbpp/232", "completion": "function larg_nnum(list1, n):\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for _ in range(n)]\n"}
{"task_id": "Mbpp/232", "completion": "function larg_nnum(list1, n):\n    return heapq.nlargest(n, list1"}
{"task_id": "Mbpp/232", "completion": "heap = []\nfor item in list1:\n    heapq.heappush(heap, -item)\nfor i in range(n):\n    heapq.heappop(heap)\nresult = [-i for i in heap]\nreturn result\n"}
{"task_id": "Mbpp/232", "completion": "function larg_nnum(list1, n)\n    n = min(n, len(list1))\n    return heapq.nlargest(n, list1)\n"}
{"task_id": "Mbpp/232", "completion": "function larg_nnum(list1, n):\n    max_heap = []\n    for num in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    result = []\n    while max_heap:\n        result.append(heapq.heappop(max_heap))\n    return result"}
{"task_id": "Mbpp/232", "completion": "\nfunction larg_nnum(list1, n):\n    max_heap = []\n    for num in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    return [heapq.heappop(max_heap) for _ in range(n)]\n"}
{"task_id": "Mbpp/232", "completion": "function largest_n_items(list, n):\n    if n > len(list):\n        return \"Error: n is larger than the length of the list\"\n    else:\n        return sorted(list, reverse=True)[:n]\n"}
{"task_id": "Mbpp/233", "completion": "ALGORITHM:\n    INPUT: radius (r), height (h) of the cylinder\n    CALCULATE: lateral surface area of the cylinder\n    \n    Calculate the circumference of the base circle using formula: C = 2 * pi * r\n    Calculate the length of the lateral side of the cylinder using formula: L = 2 * pi * r * h\n    Calculate the lateral surface area using formula: A = C * L\n    \n    OUTPUT: lateral surface area of the cylinder\n"}
{"task_id": "Mbpp/233", "completion": "ALGORITHM:\n  Function: lateralsuface_cylinder(r, h)\n    Input: r (radius), h (height) of the cylinder\n    Output: lateralsurfacearea (lateral surface area of the cylinder)\n\n  1. Calculate the circumference of the base circle using formula: C = 2\u03c0r\n  2. Calculate the lateral surface area using formula: lateral surface area = 2\u03c0rh\n  3. Return the lateral surface area\n"}
{"task_id": "Mbpp/233", "completion": "ALGORITHM:\nFUNCTION lateralsurface_cylinder(r, h):\n    PI = 3.14159\n    lateral_surface_area = 2 * PI * r * (r + h)\n    RETURN lateral_surface_are"}
{"task_id": "Mbpp/233", "completion": "FUNCTION lateralsuface_cylinder(r, h):\n    PI = 3.14159265359\n    return 2 * PI * r * (r + h"}
{"task_id": "Mbpp/233", "completion": "\nfunction lateral_surface_area(r, h):\n    perimeter_circle = 2 * 3.14 * r\n    lateral_surface_area = perimeter_circle * h\n    return lateral_surface_area\n"}
{"task_id": "Mbpp/233", "completion": ""}
{"task_id": "Mbpp/233", "completion": "function lateralsuface_cylinder(r, h):\n    perimeter = 2 * 3.14 * r\n    return perimeter * "}
{"task_id": "Mbpp/233", "completion": ""}
{"task_id": "Mbpp/233", "completion": "\nfunction lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * (r + h"}
{"task_id": "Mbpp/233", "completion": "\nfunction lateralsuface_cylinder(r, h):\n    pi = 3.14159\n    circumference = 2 * pi * r\n    lateral_surface_area = circumference * h\n    return lateral_surface_area\n"}
{"task_id": "Mbpp/234", "completion": ""}
{"task_id": "Mbpp/234", "completion": "\nfunction volume_cube(side_length)\n    return side_length * side_length * side_length\n"}
{"task_id": "Mbpp/234", "completion": "\nfunction volume_cube(l)\n    result = l * l * l\n    return resul"}
{"task_id": "Mbpp/234", "completion": "\nFUNCTION volume_cube(l)\n    RETURN l * l * l\nEND FUNCTIO"}
{"task_id": "Mbpp/234", "completion": "\nfunction volume_cube(side_length)\n    return side_length * side_length * side_lengt"}
{"task_id": "Mbpp/234", "completion": "function volume_cube(l)\n    return l*l*l\n"}
{"task_id": "Mbpp/234", "completion": ""}
{"task_id": "Mbpp/234", "completion": "\nfunction volume_cube(l):\n  return l * l * l\n"}
{"task_id": "Mbpp/234", "completion": "function volume_cube(l):\n    result = l * l * l\n    return resul"}
{"task_id": "Mbpp/234", "completion": "function volume_cube(l)\n    return l*l*l\n"}
{"task_id": "Mbpp/235", "completion": "function even_bit_set_number(n):\n    result = 0\n    for i from 0 to log2(n):\n        if (n >> i) % 2 is 1:\n            result += (1 << i)\n        if (n >> (i + 1)) % 2 is 0:\n            result += (1 << i)\n    return resul"}
{"task_id": "Mbpp/235", "completion": "\nfunction even_bit_set_number(n):\n    result = 0\n    i = 0\n    while i < 32:\n        if (n & (1 << i)) != 0 and i % 2 == 0:\n            result |= 1 << i\n        i += 1\n    return result\n"}
{"task_id": "Mbpp/235", "completion": "\nfunction even_bit_set_number(n):\n    result = 0\n    i = 0\n    while i < 32:  # assuming 32-bit integer\n        if (n & (1 << i)) != 0 and (i % 2) == 0:\n            result |= (1 << i)\n        i += 1\n    return result\n"}
{"task_id": "Mbpp/235", "completion": "function even_bit_set_number(n):\n    result = 0\n    i = 0\n    while i < 32:\n        if (n & (1 << i)) != 0:\n            if (i % 2 == 0):\n                result = result | (1 << i)\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/235", "completion": "function even_bit_set_number(n):\n    result = 0\n    i = 1\n    while i <= n:\n        if (i & 1) == 0:  # Check if the bit is even\n            result |= i\n        i <<= 1\n    return resul"}
{"task_id": "Mbpp/235", "completion": "function even_bit_set_number(n):\n    result = 0\n    i = 0\n    while i < 32:\n        if (n & (1 << i)) % 2 == 0:\n            result |= 1 << i\n        i += 1\n    return resul"}
{"task_id": "Mbpp/235", "completion": "\ninput n\nmask = 1\nresult = 0\nwhile n > 0:\n    if (n & mask) != 0:\n        result = result | mask\n    mask = mask << 1\n    n = n >> 1\nreturn result\n"}
{"task_id": "Mbpp/235", "completion": "\ninput n\ntemp = 0\nwhile n > 0:\n    bit = n % 2\n    if bit == 0: # even bit\n        temp = (temp << 1) | 1\n    else:\n        temp = temp << 1\n    n = n >> 1\nreturn temp | n\n"}
{"task_id": "Mbpp/235", "completion": "\nfunction even_bit_set_number(n):\n    result = 0\n    i = 0\n    while i < 32: \n        if (n & (1 << i)) != 0:\n            if i % 2 == 0:\n                result |= 1 << i\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/235", "completion": ""}
{"task_id": "Mbpp/237", "completion": "function check_occurrences(input_list):\n    occurrences = {}\n    for pair in input_list:\n        if pair in occurrences:\n            occurrences[pair] += 1\n        else:\n            occurrences[pair] = 1\n    return dict(Counter(occurrences))\n"}
{"task_id": "Mbpp/237", "completion": "function count_tuples(input_list):\n    # Create an empty dictionary to store the count of each tuple\n    tuple_count = {}\n\n    # Iterate over each tuple in the input list\n    for t in input_list:\n        # Convert the tuple to a hashable type (e.g., frozenset) to make it a key in the dictionary\n        key = frozenset(t)\n        if key in tuple_count:\n            # If the key already exists in the dictionary, increment its count by 1\n            tuple_count[key] += 1\n        else:\n            # If the key does not exist, add it to the dictionary with a count of 1\n            tuple_count[key] = 1\n\n    # Return the dictionary\n    return dict(tuple_count"}
{"task_id": "Mbpp/237", "completion": "function check_occurences(test_list):\n    return dict(Counter(test_list))\n"}
{"task_id": "Mbpp/237", "completion": "function check_occurences(list_of_tuples):\n    count_dict = {}\n    for pair in list_of_tuples:\n        if pair in count_dict:\n            count_dict[pair] += 1\n        else:\n            count_dict[pair] = 1\n    return count_dict\n"}
{"task_id": "Mbpp/237", "completion": "function check_occurences(input_list):\n    return dict(Counter(input_list))\n"}
{"task_id": "Mbpp/237", "completion": "data = {}\nfor pair in test_list:\n    if pair not in data:\n        data[pair] = 0\n    data[pair] += 1\nreturn dict(sorted(data.items()))\n"}
{"task_id": "Mbpp/237", "completion": "function check_occurences(input_list):\n    tuple_count = {}\n    for tup in input_list:\n        if tup in tuple_count:\n            tuple_count[tup] += 1\n        else:\n            tuple_count[tup] = 1\n    return tuple_count\n"}
{"task_id": "Mbpp/237", "completion": "function count_tuples(tuples):\n    dict = {}\n    for tuple in tuples:\n        if tuple in dict:\n            dict[tuple] += 1\n        else:\n            dict[tuple] = 1\n    return dict\n"}
{"task_id": "Mbpp/237", "completion": "function count_tuples(test_list):\n    return dict(Counter(test_list)"}
{"task_id": "Mbpp/237", "completion": "function check_occurences(input_list):\n    freq_dict = {}\n    for pair in input_list:\n        if pair in freq_dict:\n            freq_dict[pair] += 1\n        else:\n            freq_dict[pair] = 1\n    return freq_dict\n"}
{"task_id": "Mbpp/238", "completion": "function number_of_substrings(str1):\n    substrings = 0\n    length = len(str1)\n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            if str1[i:j] != \"\":\n                substrings += 1\n    return substrings\n"}
{"task_id": "Mbpp/238", "completion": "\nfunction number_of_substrings(str1):\n    n = length of str1\n    count = 0\n    for i from 0 to n - 1:\n        for j from i to n - 1:\n            if substring(str1, i, j + 1) is not empty:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/238", "completion": "function number_of_substrings(str1):\n    count = 0\n    for i from 1 to length(str1)\n        for j from i to length(str1)\n            if str1[i..j] is not empty\n                count = count + 1\n    return coun"}
{"task_id": "Mbpp/238", "completion": "\nfunction number_of_substrings(str1):\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i, len(str1)):\n            if str1[i:j+1] != \"\":\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/238", "completion": "function number_of_substrings(str):\n    n = len(str)\n    count = 0\n    for i from 1 to n:\n        for j from i to n:\n            if str[i:j+1] not equals \"\":\n                count += 1\n    return coun"}
{"task_id": "Mbpp/238", "completion": "function number_of_substrings(str1)\n    count = 0\n    for i from 0 to length of str1 - 1\n        for j from i to length of str1 - 1\n            if substring(str1, i, j + 1) is not empty\n                count = count + 1\n    return coun"}
{"task_id": "Mbpp/238", "completion": "function number_of_substrings(str1)\n    substrings = 0\n    for i from 0 to length(str1) - 1\n        for j from i to length(str1) - 1\n            if str1.substring(i, j + 1) is not empty\n                substrings = substrings + 1\n    return substring"}
{"task_id": "Mbpp/238", "completion": "function number_of_substrings(str1):\n    count = 0\n    length = len(str1)\n    for i in range(length):\n        for j in range(i, length):\n            if j - i + 1 > 0:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/238", "completion": "function number_of_substrings(str1)\n    count = 0\n    for i from 1 to length of str1\n        for j from i to length of str1\n            if substring(str1, i, j) is not empty\n                count = count + 1\n    return count\n"}
{"task_id": "Mbpp/238", "completion": "\nfunction number_of_substrings(str1):\n    total = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i:j] != '':\n                total += 1\n    return total\n"}
{"task_id": "Mbpp/239", "completion": "function get_total_number_of_sequences(m, n)\n    if n == 1:\n        return 1\n    else:\n        total = 0\n        last_element = 2\n        for i in range(1, n):\n            next_element = min(m, last_element * 2)\n            total += next_element - last_element + 1\n            last_element = next_element\n        return total + 1\n"}
{"task_id": "Mbpp/239", "completion": "\nfunction get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    else:\n        total = 0\n        for i in range(2, m):\n            total += get_total_number_of_sequences(i, n - 1)\n        return total\n"}
{"task_id": "Mbpp/239", "completion": "\nfunction get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    total = 0\n    last = 2\n    for i in range(n - 1):\n        total += 1\n        last = min(last * 2, m)\n    return total + 1\n"}
{"task_id": "Mbpp/239", "completion": "function get_total_number_of_sequences(m, n):\n    count = 1\n    for i in range(1, n):\n        count *= (m - i*2 + 1)\n    return count\n"}
{"task_id": "Mbpp/239", "completion": "function get_total_number_of_sequences(m, n)\n    let dp be an array of size n+1 filled with zeros\n    dp[0] = 1\n    \n    for i from 1 to n\n        let last_number be 1\n        let total_sequences be 0\n        for j from 2 to m\n            if j >= 2*last_number\n                total_sequences += dp[i-1]\n            last_number = j\n        dp[i] = total_sequences\n    \n    return dp[n]\n"}
{"task_id": "Mbpp/239", "completion": "function get_total_number_of_sequences(m, n):\n    total = 1\n    prev_num = m // 2\n    for i in range(n - 1):\n        total *= (m - prev_num)\n        prev_num = (prev_num + 1)\n    return total\n"}
{"task_id": "Mbpp/239", "completion": "function get_total_number_of_sequences(m, n)\n    let total = 1\n    let current = 2\n    for i from 1 to n - 1\n        let temp = 0\n        for j from current to (m / 2)\n            if j * 2 >= current\n                temp = temp + 1\n        total = total * temp\n        current = j\n    return tota"}
{"task_id": "Mbpp/239", "completion": "function get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    else:\n        total = 0\n        for i in range(2, min(m // 2 + 1, n) + 1):\n            total += get_total_number_of_sequences(m, n - 1)\n        return total\n"}
{"task_id": "Mbpp/239", "completion": ""}
{"task_id": "Mbpp/239", "completion": "\nfunction get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    else:\n        total = 0\n        last_element = 1\n        for i in range(2, n):\n            for j in range(last_element * 2, min(last_element * 2 + 1, m) + 1):\n                total += 1\n            last_element = j\n        return tota"}
{"task_id": "Mbpp/240", "completion": "function replace_list(list1, list2):\n    if length(list1) > 0:\n        list1[length(list1)-1:length(list1)] = list2\n    return list1\n"}
{"task_id": "Mbpp/240", "completion": "\nfunction replace_list(list1, list2):\n    if len(list2) > 0:\n        list1[-1:] = list2\n    return list"}
{"task_id": "Mbpp/240", "completion": "function replace_list(list1, list2):\n    list1[-1:] = list2\n    return list"}
{"task_id": "Mbpp/240", "completion": "input_list1 = input_list1[:-1] + list2\n"}
{"task_id": "Mbpp/240", "completion": "input list1 = [1, 3, 5, 7, 9, 10]\ninput list2 = [2, 4, 6, 8]\n\nlength_of_list1 = length of list1\nlength_of_list2 = length of list2\n\nif length_of_list2 > length_of_list1:\n    list1[length_of_list1] = list2[0:length_of_list2]\n\nelse:\n    list1[length_of_list1:length_of_list1+length_of_list2] = list2\n"}
{"task_id": "Mbpp/240", "completion": "function replace_list(list1, list2):\n    if len(list2) > 0:\n        list1[-1:] = list2\n    return list1\n"}
{"task_id": "Mbpp/240", "completion": "\nFunction replace_list(list1, list2):\n    length1 = length of list1\n    if length1 > 0:\n        list1[length1-1] = list2\n    return list1\n"}
{"task_id": "Mbpp/240", "completion": "function replace_list(list1, list2):\n    if len(list2) > 0:\n        list1[-1:] = list2\n    return list1\n"}
{"task_id": "Mbpp/240", "completion": "input list1 = [1, 3, 5, 7, 9, 10]\ninput list2 = [2, 4, 6, 8]\n\nlist1_length = length of list1\nlast_index = list1_length - 1\n\nfor i from list1_length - 1 downto 0 do\n    list1[i + len(list2)] = list1[i]\ndone\n\nfor i from 0 to length of list2 do\n    list1[i] = list2[i]\ndone\n\noutput list1 = [1, 3, 5, 7, 9, 2, 4, 6, 8]\n"}
{"task_id": "Mbpp/240", "completion": "input list1\ninput list2\nif length(list1) > 0 and length(list2) > 0\n    last_index = length(list1) - 1\n    list1[last_index..length(list1)] = list2\noutput list1\n"}
{"task_id": "Mbpp/242", "completion": "\nfunction count_charac(str1)\n    total_chars = 0\n    for each char in str1\n        total_chars = total_chars + 1\n    return total_chars\n"}
{"task_id": "Mbpp/242", "completion": "function count_charac(str1)\n    count = 0\n    for each char in str1\n        count = count + 1\n    return count\n"}
{"task_id": "Mbpp/242", "completion": "\nfunction count_charac(str1)\n    count = 0\n    for i from 0 to length(str1) - 1\n        count = count + length(substring(str1, i, i + 1))\n    return count\n"}
{"task_id": "Mbpp/242", "completion": "FUNCTION count_charac(str1)\n    DECLARE total_count AS INTEGER\n    SET total_count TO 0\n    FOR each character in str1\n        ADD 1 TO total_count\n    RETURN total_count\nEND FUNCTIO"}
{"task_id": "Mbpp/242", "completion": "function count_charac(str1)\n    total_count = 0\n    for each char in str1:\n        total_count = total_count + 1\n    return total_coun"}
{"task_id": "Mbpp/242", "completion": "function count_charac(str1)\n    result = 0\n    for each char in str1\n        result = result + 1\n    return resul"}
{"task_id": "Mbpp/242", "completion": "function count_charac(str1)\n    count = 0\n    for char in str1:\n        count = count + 1\n    return count\n"}
{"task_id": "Mbpp/242", "completion": "function count_charac(str1)\n    count = 0\n    for each char in str1\n        count = count + 1\n    return count\n"}
{"task_id": "Mbpp/242", "completion": "\nfunction count_charac(str1)\n    count = 0\n    for each char in str1\n        count = count + 1\n    return count\n"}
{"task_id": "Mbpp/242", "completion": "function count_charac(str1)\n    count = 0\n    for each char in str1:\n        count = count + 1\n    return count\n"}
{"task_id": "Mbpp/244", "completion": "\nfunction next_Perfect_Square(N):\n    i = int(math.sqrt(N)) + 1\n    while True:\n        perfect_square = i * i\n        if perfect_square > N:\n            return perfect_square\n        i += 1\n"}
{"task_id": "Mbpp/244", "completion": ""}
{"task_id": "Mbpp/244", "completion": "\nfunction next_Perfect_Square(N)\n    num = 0\n    while True:\n        square = math.pow(num, 2)\n        if square > N:\n            return square\n        num += 1\n"}
{"task_id": "Mbpp/244", "completion": "\nfunction next_Perfect_Square(N)\n    i = sqrt(N)\n    while true\n        if i * i == N then\n            return i * i + 1\n        else if i * i > N then\n            return i * i\n        end if\n        i = i + 1\n    end while\nend function\n"}
{"task_id": "Mbpp/244", "completion": "\nfunction nextPerfectSquare(N):\n    i = 1\n    while True:\n        square = i * i\n        if square > N:\n            return square\n        i += 1\n"}
{"task_id": "Mbpp/244", "completion": ""}
{"task_id": "Mbpp/244", "completion": "function next_Perfect_Square(N)\n    i = 1\n    while True:\n        square = i * i\n        if square > N:\n            return square\n        i = i + "}
{"task_id": "Mbpp/244", "completion": ""}
{"task_id": "Mbpp/244", "completion": "\nfunction next_Perfect_Square(N):\n    i = 1\n    while True:\n        if math.sqrt(i) % 1 == 0:\n            if i > N:\n                return i\n        i += 1\n"}
{"task_id": "Mbpp/244", "completion": ""}
{"task_id": "Mbpp/245", "completion": "function max_sum(arr):\n    n = length of arr\n    dp = new array of size n\n    dp[0] = arr[0]\n    for i from 1 to n-1:\n        dp[i] = max(dp[i-1], arr[i])\n    max_left = dp[n-1]\n    dp = new array of size n\n    dp[n-1] = arr[n-1]\n    for i from n-2 to 0:\n        dp[i] = max(dp[i+1], arr[i])\n    max_right = dp[0]\n    return max_left + max_right - arr[n-1"}
{"task_id": "Mbpp/245", "completion": "\nfunction max_sum(array):\n    n = size of array\n    max_sum = 0\n    for i from 0 to n-1:\n        for j from i+1 to n-1:\n            up = down = 0\n            k = i\n            while k <= j:\n                up += array[k]\n                k += 1\n            k = j\n            while k >= i:\n                down += array[k]\n                k -= 1\n            if up + down > max_sum:\n                max_sum = up + down\n    return max_sum\n"}
{"task_id": "Mbpp/245", "completion": "function max_sum(arr):\n    n = length(arr)\n    up = [1] * n\n    down = [1] * n\n    \n    for i from 2 to n:\n        for j from 0 to i - 1:\n            up[i] = max(up[i], up[j] + arr[i])\n        for j from i to 1:\n            down[i] = max(down[i], down[j - 1] + arr[i])\n    \n    return max(sum(arr) - (max(up) + max(down)))\n"}
{"task_id": "Mbpp/245", "completion": "\nfunction max_sum(arr):\n    n = length(arr)\n    increasing_sum = 0\n    decreasing_sum = 0\n    max_sum = 0\n    prev = -inf\n\n    for i from 1 to n:\n        if arr[i] > prev:\n            increasing_sum += arr[i]\n        else:\n            decreasing_sum = increasing_sum + arr[i]\n            increasing_sum = 0\n\n        if decreasing_sum > max_sum:\n            max_sum = decreasing_sum\n\n        prev = arr[i]\n\n    return max_sum + increasing_sum\n"}
{"task_id": "Mbpp/245", "completion": ""}
{"task_id": "Mbpp/245", "completion": "function max_sum(arr):\n    n = length(arr)\n    max_sum = [0] * (n + 1)\n    min_sum = [0] * (n + 1)\n\n    max_sum[0] = min_sum[0] = 0\n\n    for i from 1 to n:\n        max_sum[i] = max(max_sum[i-1], arr[i-1])\n        min_sum[i] = min(min_sum[i-1], arr[i-1])\n\n    total = 0\n    i = j = n\n    while i > 0 and j >= 0:\n        if max_sum[i] > min_sum[j]:\n            total += max_sum[i]\n            i -= 1\n        else:\n            total += min_sum[j]\n            j -= 1\n\n    return tota"}
{"task_id": "Mbpp/245", "completion": "input_array <- the array\nn <- length of input_array\nmax_sum <- 0\nmax_ending_here <- 0\nmax_ending_before <- 0\n\nfor i from 0 to n-2:\n    max_ending_here <- max_ending_here + input_array[i]\n    if max_ending_here < 0:\n        max_ending_here <- 0\n    else:\n        max_ending_before <- max(max_ending_before, max_ending_here)\n    max_sum <- max(max_sum, max_ending_before + input_array[n-1])\nreturn max_sum\n"}
{"task_id": "Mbpp/245", "completion": "\nfunction maxSum(array):\n    n = length of array\n    max_ending_here = 0\n    max_so_far = 0\n    i = 1\n    while (i < n):\n        if (array[i-1] <= array[i]):\n            max_ending_here = max_ending_here + array[i]\n        else:\n            max_so_far = max(max_so_far, max_ending_here)\n            max_ending_here = array[i]\n        i = i + 1\n    max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far + max_ending_here - max(arr)\n"}
{"task_id": "Mbpp/245", "completion": "function max_sum(array):\n    n = length of array\n    dp = array(0 to n+1)\n    dp[0] = 0\n    max_sum = 0\n    for i from 1 to n:\n        dp[i] = array[i-1]\n        for j from 1 to i:\n            dp[i] = max(dp[i], dp[j-1] + array[i-1])\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n"}
{"task_id": "Mbpp/245", "completion": "function maxSum(arr):\n    n = size of arr\n    maxIncreasingSum = -inf\n    maxDecreasingSum = -inf\n    maxSum = -inf\n    \n    for i from 0 to n-1:\n        increasingSum = 0\n        decreasingSum = 0\n        for j from i to n-1:\n            if arr[j] > arr[j+1]:\n                increasingSum += arr[j]\n            else:\n                decreasingSum += arr[j]\n            if increasingSum > maxIncreasingSum:\n                maxIncreasingSum = increasingSum\n            if decreasingSum > maxDecreasingSum:\n                maxDecreasingSum = decreasingSum\n        if maxIncreasingSum + maxDecreasingSum > maxSum:\n            maxSum = maxIncreasingSum + maxDecreasingSum\n    \n    return maxSum\n"}
{"task_id": "Mbpp/247", "completion": "\nfunction lps(str1)\n    n = length(str1)\n    L = array(n, array(n, -1))\n\n    for i from 0 to n-1\n        L[i][i] = 1\n\n    for cl from 2 to n\n        for i from 0 to n-cl\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2\n                L[i][j] = 2\n            elif str1[i] == str1[j]\n                L[i][j] = L[i+1][j-1] + 2\n            else\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n\n    return L[0][n-1"}
{"task_id": "Mbpp/247", "completion": "\nfunction longest_palindromic_subsequence(str1):\n    n = length of str1\n    L = create an array of size n x n and initialize it with zeros\n    for i from 0 to n - 1:\n        L[i][i] = 1\n    for cl in range 2 to n:\n        for i from 0 to n - cl:\n            j = i + cl\n            if str1[i] == str1[j]:\n                L[i][j] = 2 + L[i+1][j-1]\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]\n"}
{"task_id": "Mbpp/247", "completion": "function lps(str1):\n    m = len(str1)\n    dp = [[0 for x in range(m)]for x in range(m)]\n    for i in range(m):\n        dp[i][i] = 1\n    L = 2\n    while L <= m:\n        for i in range(0, m-L+1):\n            j = i + L - 1\n            if str1[i] == str1[j]:\n                if L == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        L = L + 1\n    return dp[0][m-1]\n"}
{"task_id": "Mbpp/247", "completion": ""}
{"task_id": "Mbpp/247", "completion": "\nfunction lps(str1):\n    n = length of str1\n    m = create a 2D array of size (n+1) x (n+1) filled with zeros\n    for i from 0 to n\n        m[i][0] = 0\n        m[0][i] = 0\n    for i from 1 to n\n        for j from 1 to n\n            if str1[i-1] == str1[n-j]\n                m[i][j] = m[i-1][j-1] + 2\n            else\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[n][n]\n"}
{"task_id": "Mbpp/247", "completion": "function lps(str1):\n    n = length of str1\n    L = create an array of size (n, n) and initialize it as an identity matrix\n    for i from 0 to n-1\n        for j from 0 to i\n            if str1[i] == str1[n-j-1]\n                L[i+1][n-j-1] = L[i][n-j-2] + 2\n            else\n                L[i+1][n-j-1] = max(L[i][n-j-1], L[i+1][n-j])\n    return L[n-1][0]\n"}
{"task_id": "Mbpp/247", "completion": "function lps(str1):\n    n = length of str1\n    m = create a table to store lengths of LPS of substrings\n    create a table of size (n*n)\n    for i from 0 to n-1:\n        m[i][i] = 1\n    for cl from 2 to n:\n        for i from 0 to n-cl:\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                m[i][j] = 2\n            elif str1[i] == str1[j]:\n                m[i][j] = m[i+1][j-1] + 2\n            else:\n                m[i][j] = max(m[i+1][j], m[i][j-1])\n    return m[0][n-1"}
{"task_id": "Mbpp/247", "completion": "function lps(str1):\n    n = length of str1\n    m = create a table with (n+1) rows and (n+1) columns\n    for i from 0 to n:\n        set m[i][0] = 0 and m[0][i] = 0\n    for i from 1 to n:\n        for j from 1 to n:\n            if str1[i-1] == str1[n-j]:\n                m[i][j] = m[i-1][j-1] + 2\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    len_lps = m[n][n]\n    return len_lps\n"}
{"task_id": "Mbpp/247", "completion": "\nfunction lps(str1)\n    m = length(str1)\n    L = array(m, m)\n    for i from 0 to m - 1\n        L[i][i] = 1\n    for i from 1 to m - 1\n        for j from 0 to i - 1\n            if str1[j] == str1[i]\n                L[j][i] = L[j - 1][i - 1] + 2\n            else\n                L[j][i] = max(L[j - 1][i], L[j][i - 1])\n    return L[m - 1][m - 1]\n"}
{"task_id": "Mbpp/247", "completion": "function lps(str1):\n    n = length of str1\n    m = create a table of size (n x n) and fill all values as false\n    for i = 0 to n-1\n        m[i][i] = true\n    for length = 2 to n\n        for start = 0 to n-length\n            end = start + length - 1\n            if str1[start] == str1[end]\n                if length == 2\n                    m[start][end] = true\n                else\n                    m[start][end] = m[start+1][end-1]\n            else\n                m[start][end] = false\n    result = 0\n    for i = 0 to n-1\n        for j = 0 to n-1\n            if m[i][j] is true\n                result = max(result, j-i+1)\n    return resul"}
{"task_id": "Mbpp/249", "completion": ""}
{"task_id": "Mbpp/249", "completion": "\nfunction intersection_array(array_nums1, array_nums2):\n    set1 = {}\n    result = []\n    for num in array_nums1:\n        if num in set1:\n            set1[num] += 1\n        else:\n            set1[num] = 1\n    for num in array_nums2:\n        if num in set1 and set1[num] > 0:\n            result.append(num)\n            set1[num] -= 1\n    return resul"}
{"task_id": "Mbpp/249", "completion": "function intersection_array(array_nums1, array_nums2)\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n"}
{"task_id": "Mbpp/249", "completion": "\nALGORITHM:\n\nFUNCTION intersection_array(array_nums1, array_nums2)\n    SET result = []\n    FOR each num in array_nums1\n        IF num is in array_nums2\n            ADD num to result\n    RETURN resul"}
{"task_id": "Mbpp/249", "completion": ""}
{"task_id": "Mbpp/249", "completion": "\nfunction intersection_array(array_nums1, array_nums2):\n    set1 = {}\n    set2 = {}\n    \n    for num in array_nums1:\n        if num in set1:\n            set1[num] += 1\n        else:\n            set1[num] = 1\n            \n    for num in array_nums2:\n        if num in set2:\n            set2[num] += 1\n        else:\n            set2[num] = 1\n            \n    result = []\n    for key in set1:\n        if key in set2 and set1[key] > 0 and set2[key] > 0:\n            result.append(key)\n            \n    return result\n"}
{"task_id": "Mbpp/249", "completion": "\nfunction intersection_array(array_nums1, array_nums2)\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return resul"}
{"task_id": "Mbpp/249", "completion": "\nFUNCTION intersection_array(array_nums1, array_nums2)\n    SET intersection = []\n    FOR each num IN array_nums1\n        IF num is in array_nums2 AND num is not in intersection\n            ADD num TO intersection\n    RETURN intersection\nEND FUNCTIO"}
{"task_id": "Mbpp/249", "completion": "\nfunction intersection_array(array_nums1, array_nums2):\n    set1 = {}  // create an empty dictionary\n    for num in array_nums1:\n        if num not in set1:\n            set1[num] = True  // mark as present\n    result = []\n    for num in array_nums2:\n        if num in set1:\n            result.append(num)  // add to result\n            delete set1[num]  // remove from set\n    return resul"}
{"task_id": "Mbpp/249", "completion": "\nfunction intersection_array(array_nums1,array_nums2)\n    result = []\n    for each num in array_nums1:\n        if num is in array_nums2 and num not in result:\n            result.append(num)\n    return result\n"}
{"task_id": "Mbpp/250", "completion": "data = tup\ncount = 0\nfor item in data:\n    if item == x:\n        count += 1\nreturn count\n"}
{"task_id": "Mbpp/250", "completion": "function count_X(tup, x):\n    count = 0\n    for each item in tup:\n        if item == x:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/250", "completion": ""}
{"task_id": "Mbpp/250", "completion": "function count_X(tup, x):\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/250", "completion": ""}
{"task_id": "Mbpp/250", "completion": ""}
{"task_id": "Mbpp/250", "completion": "\nfunction count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/250", "completion": "function count_X(tup, x)\n    count = 0\n    for each e in tup\n        if e is equal to x then\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/250", "completion": ""}
{"task_id": "Mbpp/250", "completion": "function count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/251", "completion": "function insert_element(list1, element)\n    new_list = []\n    for item in list1:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list\n"}
{"task_id": "Mbpp/251", "completion": "function insert_element(list1, element):\n    new_list = []\n    for i in range(len(list1) + 1):\n        new_list.append(element)\n        if i < len(list1):\n            new_list.append(list1[i])\n    return new_list\n"}
{"task_id": "Mbpp/251", "completion": "function insert_element(list1, element)\n    new_list = []\n    for i in range(0, len(list1))\n        new_list.append(element)\n        new_list.append(list1[i])\n    return new_list\n"}
{"task_id": "Mbpp/251", "completion": "\nfunction insert_element(list1, element):\n    result = []\n    for i in range(len(list1)):\n        result.append(element)\n        result.append(list1[i])\n    return resul"}
{"task_id": "Mbpp/251", "completion": "function insert_element(list1, element)\n    result = []\n    for i in range(len(list1) + 1):\n        if i == 0:\n            result.append(element)\n        result.append(list1[i - 1])\n    return resul"}
{"task_id": "Mbpp/251", "completion": "\nfunction insert_element(list1, element)\n    new_list = []\n    for i in range(len(list1) + 1):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list1[i-1])\n    return new_list\n"}
{"task_id": "Mbpp/251", "completion": "function insert_element(list1, element):\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return resul"}
{"task_id": "Mbpp/251", "completion": "function insert_element(list1, element):\n    result = []\n    for i in range(len(list1)):\n        result.append(element)\n        result.append(list1[i])\n    return result\n"}
{"task_id": "Mbpp/251", "completion": "function insert_element(list1, element)\n    result = []\n    for i in range(len(list1) + 1):\n        if i == 0:\n            result.append(element)\n        result.append(list1[i-1])\n    return resul"}
{"task_id": "Mbpp/251", "completion": ""}
{"task_id": "Mbpp/252", "completion": "function convert(numbers):\n    magnitude = abs(numbers)\n    phase = cmath.phase(numbers)\n    return (magnitude, phase"}
{"task_id": "Mbpp/252", "completion": ""}
{"task_id": "Mbpp/252", "completion": "function convert(numbers):\n    r = abs(numbers)\n    theta = atan2(numbers.imag, numbers.real)\n    return (r, theta)\n"}
{"task_id": "Mbpp/252", "completion": "function convert(numbers):\n    if type(numbers) is not list:\n        numbers = [numbers]\n    result = []\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        result.append((magnitude, angle))\n    return resul"}
{"task_id": "Mbpp/252", "completion": "\nfunction convert(numbers):\n    if type(numbers) is not list:\n        numbers = [numbers]\n    result = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        result.append((r, theta))\n    return result\n"}
{"task_id": "Mbpp/252", "completion": "\nfunction convert(complex_number):\n    # convert the complex number to polar coordinates\n    magnitude = abs(complex_number)\n    angle = cmath.phase(complex_number)\n\n    return (magnitude, angle"}
{"task_id": "Mbpp/252", "completion": ""}
{"task_id": "Mbpp/252", "completion": "function convert(numbers):\n    if type(numbers) is list:\n        result = []\n        for num in numbers:\n            real_part = num.real\n            imaginary_part = num.imag\n            r = (real_part ** 2 + imaginary_part ** 2) ** 0.5\n            theta = cmath.atan2(imaginary_part, real_part)\n            result.append((r, theta))\n        return result\n    else:\n        real_part = numbers.real\n        imaginary_part = numbers.imag\n        r = (real_part ** 2 + imaginary_part ** 2) ** 0.5\n        theta = cmath.atan2(imaginary_part, real_part)\n        return (r, theta"}
{"task_id": "Mbpp/252", "completion": "function convert(numbers):\n    result = []\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        result.append((magnitude, angle))\n    return result\n"}
{"task_id": "Mbpp/252", "completion": ""}
{"task_id": "Mbpp/253", "completion": ""}
{"task_id": "Mbpp/253", "completion": ""}
{"task_id": "Mbpp/253", "completion": "\nfunction count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) is int:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/253", "completion": "\nfunction count_integer(list1):\n    integer_count = 0\n    for element in list1:\n        if type(element) is int:\n            integer_count += 1\n    return integer_coun"}
{"task_id": "Mbpp/253", "completion": ""}
{"task_id": "Mbpp/253", "completion": "\nfunction count_integer(list1):\n    count = 0\n    for each_item in list1:\n        if type(each_item) is int:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/253", "completion": "\nfunction count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) is int:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/253", "completion": ""}
{"task_id": "Mbpp/253", "completion": ""}
{"task_id": "Mbpp/253", "completion": "function count_integer(list1)\n    count = 0\n    for each element in list1:\n        if type(element) is int:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/255", "completion": "function combinations_colors(l, n):\n    result = []\n    for r in combinations_with_replacement(l, n):\n        result.append(tuple(r))\n    return resul"}
{"task_id": "Mbpp/255", "completion": "\nfunction combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n"}
{"task_id": "Mbpp/255", "completion": "\nfunction combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n)"}
{"task_id": "Mbpp/255", "completion": "function combinations_colors(l, n)\n    return list(combinations_with_replacement(l, n))\n"}
{"task_id": "Mbpp/255", "completion": "\nfunction combinations_colors(list l, int n):\n    return list(combinations_with_replacement(l, n))\n"}
{"task_id": "Mbpp/255", "completion": "\nfunction combinations_colors(list l, integer n):\n    result = []\n    for combination in itertools.combinations_with_replacement(l, n):\n        result.append(tuple(combination))\n    return resul"}
{"task_id": "Mbpp/255", "completion": "\nfunction combinations_colors(l, n):\n    result = []\n    for r in combinations_with_replacement(l, n):\n        result.append(tuple(r))\n    return resul"}
{"task_id": "Mbpp/255", "completion": ""}
{"task_id": "Mbpp/255", "completion": "function combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n)"}
{"task_id": "Mbpp/255", "completion": "\nfunction combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n"}
{"task_id": "Mbpp/256", "completion": "function count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = []\n    for i from 2 to n-1:\n        isPrime = True\n        for j from 2 to sqrt(i):\n            if i mod j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n    return len(primes"}
{"task_id": "Mbpp/256", "completion": "function count_primes(n):\n    if n < 2:\n        return 0\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes"}
{"task_id": "Mbpp/256", "completion": "\nfunction count_Primes_nums(n):\n    if n < 2:\n        return 0\n    \n    primes = []\n    for i from 2 to n - 1:\n        isPrime = True\n        for j from 2 to sqrt(i):\n            if i mod j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n    return len(primes)\n"}
{"task_id": "Mbpp/256", "completion": "function count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes += 1\n    return primes\n"}
{"task_id": "Mbpp/256", "completion": "function count_Primes_nums(n):\n    count = 0\n    is_prime = True\n    i = 2\n    while i < n:\n        is_prime = True\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                is_prime = False\n                break\n            j += 1\n        if is_prime:\n            count += 1\n        i += 1\n    return coun"}
{"task_id": "Mbpp/256", "completion": "function count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return coun"}
{"task_id": "Mbpp/256", "completion": "\nfunction count_Primes_nums(n):\n    if n <= 1:\n        return 0\n    primes = []\n    for i from 2 to n-1:\n        is_prime = True\n        for j from 2 to sqrt(i):\n            if i mod j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes"}
{"task_id": "Mbpp/256", "completion": "function count_Primes_nums(n):\n    primes = []\n    for i from 2 to n-1:\n        is_prime = True\n        for j from 2 to sqrt(i):\n            if i mod j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes"}
{"task_id": "Mbpp/256", "completion": "function countPrimes(n):\n    if n < 2:\n        return 0\n    primes = []\n    for i from 2 to n-1:\n        isPrime = True\n        for j from 2 to sqrt(i):\n            if i mod j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n    return len(primes"}
{"task_id": "Mbpp/256", "completion": "function count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i from 2 to sqrt(num):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    for i from 2 to n - 1:\n        if is_prime(i):\n            count += 1\n    return coun"}
{"task_id": "Mbpp/257", "completion": "function swap_numbers(a, b)\n    return (b, a)\n"}
{"task_id": "Mbpp/257", "completion": ""}
{"task_id": "Mbpp/257", "completion": "function swap_numbers(a, b)\n    return (b, a"}
{"task_id": "Mbpp/257", "completion": "function swap_numbers(a, b)\n    return (b, a"}
{"task_id": "Mbpp/257", "completion": "function swap_numbers(a, b)\n    return (b, a"}
{"task_id": "Mbpp/257", "completion": "\nfunction swap_numbers(a, b):\n    return (b, a"}
{"task_id": "Mbpp/257", "completion": "function swap_numbers(a, b)\n    return (b, a"}
{"task_id": "Mbpp/257", "completion": "function result = swap_numbers(a, b)\n    return (b, a"}
{"task_id": "Mbpp/257", "completion": "function swap_numbers(a, b):\n    return (b, a"}
{"task_id": "Mbpp/257", "completion": "function swap_numbers(a, b):\n  temp = a\n  a = b\n  b = temp\n  return (b, a"}
{"task_id": "Mbpp/259", "completion": "\nfunction maximize_elements(test_tup1, test_tup2):\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i][0] <= test_tup2[i][0]:\n            result = result + ((test_tup1[i][0], max(test_tup1[i][1], test_tup2[i][1])),)\n        else:\n            result = result + ((max(test_tup1[i][0], test_tup2[i][0]), test_tup2[i][1]),)\n    return result + test_tup1[min(len(test_tup1), len(test_tup2)):][:]\n"}
{"task_id": "Mbpp/259", "completion": "function maximize_elements(test_tup1, test_tup2):\n    result = []\n    i = j = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i][1] > test_tup2[j][1]:\n            result.append(test_tup1[i])\n            i += 1\n        elif test_tup2[j][1] > test_tup1[i][1]:\n            result.append(test_tup2[j])\n            j += 1\n        else:\n            if test_tup1[i][0] < test_tup2[j][0]:\n                result.append(test_tup1[i])\n                i += 1\n            else:\n                result.append(test_tup2[j])\n                j += 1\n    result.extend(test_tup1[i:])\n    result.extend(test_tup2[j:])\n    return resul"}
{"task_id": "Mbpp/259", "completion": "maximized = []\ni = 0\nwhile i < len(test_tup1):\n    if test_tup2[i][0] > test_tup1[i][0]:\n        maximized.append(test_tup2[i])\n    else:\n        maximized.append(test_tup1[i])\n    i = i + 1\nreturn tuple(maximized"}
{"task_id": "Mbpp/259", "completion": "\nfunction maximize_elements(tup1, tup2):\n    result = []\n    i, j = 0, 0\n    while i < len(tup1) and j < len(tup2):\n        if tup1[i][1] > tup2[j][1]:\n            result.append(tup1[i])\n            i += 1\n        elif tup2[j][1] > tup1[i][1]:\n            result.append(tup2[j])\n            j += 1\n        else:\n            if tup1[i][0] < tup2[j][0]:\n                result.append(tup1[i])\n                i += 1\n            else:\n                result.append(tup2[j])\n                j += 1\n    result.extend(tup1[i:])\n    result.extend(tup2[j:])\n    return resul"}
{"task_id": "Mbpp/259", "completion": "function result = maximize_elements(tup1, tup2)\n    result = []\n    for i from 0 to min(len(tup1), len(tup2)) - 1:\n        if tup1[i][1] > tup2[i][1]:\n            result.append(tup1[i])\n        else:\n            result.append(tup2[i])\n    if len(tup1) > len(tup2):\n        result.extend(tup1[len(tup2):])\n    elif len(tup2) > len(tup1):\n        result.extend(tup2[len(tup1):])\n    return result\n"}
{"task_id": "Mbpp/259", "completion": "function maximize_elements(test_tup1, test_tup2)\n    max_tup = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i][0] < test_tup2[i][0]:\n            max_tup.append(test_tup2[i])\n        else:\n            max_tup.append(test_tup1[i])\n    if len(test_tup1) > len(test_tup2):\n        max_tup.extend(test_tup1[len(test_tup2):])\n    elif len(test_tup2) > len(test_tup1):\n        max_tup.extend(test_tup2[len(test_tup1):])\n    return tuple(max_tup"}
{"task_id": "Mbpp/259", "completion": "function maximize_elements(test_tup1, test_tup2):\n    result = []\n    i = j = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i][1] > test_tup2[j][1]:\n            result.append(test_tup1[i])\n            i += 1\n        elif test_tup2[j][1] > test_tup1[i][1]:\n            result.append(test_tup2[j])\n            j += 1\n        else:\n            if test_tup1[i][0] < test_tup2[j][0]:\n                result.append(test_tup1[i])\n                i += 1\n            else:\n                result.append(test_tup2[j])\n                j += 1\n    result.extend(test_tup1[i:])\n    result.extend(test_tup2[j:])\n    return resul"}
{"task_id": "Mbpp/259", "completion": "function maximize_elements(test_tup1, test_tup2)\n    result = []\n    i = 0\n    j = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i][1] > test_tup2[j][1]:\n            result.append(test_tup1[i])\n            i += 1\n        elif test_tup2[j][1] > test_tup1[i][1]:\n            result.append(test_tup2[j])\n            j += 1\n        else:\n            if test_tup1[i][0] < test_tup2[j][0]:\n                result.append(test_tup1[i])\n                i += 1\n            else:\n                result.append(test_tup2[j])\n                j += 1\n    result.extend(test_tup1[i:])\n    result.extend(test_tup2[j:])\n    return resul"}
{"task_id": "Mbpp/259", "completion": "function maximize_elements(tup1, tup2):\n    result = ()\n    i, j = 0, 0\n    while i < len(tup1) and j < len(tup2):\n        if tup1[i][0] > tup2[j][0]:\n            result += tup1[i],\n            i += 1\n        elif tup2[j][0] > tup1[i][0]:\n            result += tup2[j],\n            j += 1\n        else:\n            if tup1[i][1] > tup2[j][1]:\n                result += tup1[i],\n                i += 1\n            else:\n                result += tup2[j],\n                j += 1\n    while i < len(tup1):\n        result += tup1[i],\n        i += 1\n    while j < len(tup2):\n        result += tup2[j],\n        j += 1\n    return resul"}
{"task_id": "Mbpp/259", "completion": "\nfunction result = maximize_elements(tup1, tup2)\n    max_tup = ()\n    for i from 0 to length(tup1) - 1:\n        if tup2[i][0] > tup1[i][0]:\n            max_tup = max_tup + (tup2[i],)\n        else:\n            max_tup = max_tup + (max_element(tup1[i], tup2[i]),)\n    return max_tup\n\nfunction max_element(tup1, tup2):\n    if tup1[1] > tup2[1]:\n        return tup1\n    else:\n        return tup"}
{"task_id": "Mbpp/260", "completion": "function newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i from 2 to sqrt(num):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += "}
{"task_id": "Mbpp/260", "completion": "function newman_prime(n)\n    count = 0\n    p = 2\n    while true\n        if is_prime(p)\n            count = count + 1\n            if count == n\n                return p\n        p = p + 1\n\nfunction is_prime(x)\n    if x < 2\n        return false\n    for i from 2 to sqrt(x)\n        if x mod i == 0\n            return false\n    return true\n"}
{"task_id": "Mbpp/260", "completion": "function newman_prime(n):\n    p = 2\n    primes = []\n    while len(primes) < n:\n        is_prime = True\n        for i from 2 to sqrt(p):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p = p + 1\n    return primes[-1"}
{"task_id": "Mbpp/260", "completion": "function newman_prime(n):\n    primes = []\n    p = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(p ** 0.5) + 1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n    return primes[-1"}
{"task_id": "Mbpp/260", "completion": "function newman_prime(n)\n    if n <= 0 then\n        return \"Input must be a positive integer\"\n    end if\n    i = 2\n    count = 0\n    while true do\n        if is_prime(i) then\n            count += 1\n            if count == n then\n                return i\n            end if\n        end if\n        i += 1\n    end while\nend function\n\nfunction is_prime(num)\n    if num <= 1 then\n        return false\n    end if\n    for i from 2 to sqrt(num) do\n        if num mod i == 0 then\n            return false\n        end if\n    end for\n    return true\nend functio"}
{"task_id": "Mbpp/260", "completion": ""}
{"task_id": "Mbpp/260", "completion": "function newman_prime(n):\n    i = 2\n    primes = []\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes[-1]\n\nfunction is_prime(k):\n    if k <= 1:\n        return False\n    for i from 2 to sqrt(k):\n        if k % i == 0:\n            return False\n    return Tru"}
{"task_id": "Mbpp/260", "completion": "function newman_prime(n)\n    result = 2\n    i = 3\n    while true\n        is_prime = true\n        for j = 2 to sqrt(i)\n            if i mod j == 0 then\n                is_prime = false\n                break\n        if is_prime then\n            if n == 1 then\n                return result\n            result = i\n            n -= 1\n        i += 2\n    end while\nend function\n"}
{"task_id": "Mbpp/260", "completion": "\nfunction newman_prime(n)\n    p = 2\n    i = 1\n    count = 0\n    while true\n        if is_prime(p)\n            count += 1\n            if count == n\n                return p\n        end\n        p = p + 1\n    end\n\nfunction is_prime(m)\n    if m <= 1\n        return false\n    for i from 2 to sqrt(m)\n        if m mod i == 0\n            return false\n        end\n    end\n    return true\nend\n"}
{"task_id": "Mbpp/260", "completion": "\nfunction newman_prime(n):\n    prime_number = 2\n    prime_count = 1\n\n    while prime_count < n:\n        is_prime = True\n        for i from 2 to sqrt(prime_number):\n            if prime_number mod i equals 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_count = prime_count + 1\n        prime_number = prime_number + 1\n\n    return prime_number - "}
{"task_id": "Mbpp/261", "completion": "FUNCTION division_elements(test_tup1, test_tup2)\n    IF length(test_tup1) != length(test_tup2)\n        RETURN \"Error: Tuples must be of the same length\"\n    ELSE\n        result = ()\n        FOR i FROM 0 TO length(test_tup1)-1\n            IF test_tup2[i] != 0\n                result = result + (test_tup1[i]/test_tup2[i], )\n            ELSE\n                return \"Error: Division by zero\"\n        END FOR\n        RETURN result\nEND FUNCTIO"}
{"task_id": "Mbpp/261", "completion": "\nfunction division_elements(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] != 0:\n            result += (test_tup1[i] / test_tup2[i],)\n        else:\n            result += (float('inf'),)\n    return result\n"}
{"task_id": "Mbpp/261", "completion": "\nfunction division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must have the same length\"\n    else:\n        result = ()\n        for i in range(len(test_tup1)):\n            if test_tup2[i] != 0:\n                result += (test_tup1[i] // test_tup2[i],)\n            else:\n                result += (\"Error: Division by zero\",)\n        return resul"}
{"task_id": "Mbpp/261", "completion": "function division_elements(test_tup1, test_tup2):\n    output = ()\n    i = 0\n    while i < len(test_tup1):\n        if test_tup2[i] != 0:\n            output += (test_tup1[i] / test_tup2[i],)\n        else:\n            output += (\"undefined\",)\n        i += 1\n    return outpu"}
{"task_id": "Mbpp/261", "completion": "\nfunction division_elements(test_tup1, test_tup2):\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup2[i] != 0:\n            result += (test_tup1[i] / test_tup2[i],)\n        else:\n            result += (\"undefined\",)\n    return result"}
{"task_id": "Mbpp/261", "completion": "\nfunction division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] != 0:\n            result.append(test_tup1[i] / test_tup2[i])\n        else:\n            result.append(float('inf'))\n            \n    return tuple(result"}
{"task_id": "Mbpp/261", "completion": "function division_elements(test_tup1, test_tup2)\n    result = ()\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result += (test_tup1[i]/test_tup2[i],)\n    return result\n"}
{"task_id": "Mbpp/261", "completion": "function division_elements(test_tup1, test_tup2)\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] != 0:\n            result = result + (test_tup1[i]/test_tup2[i],)\n        else:\n            result = result + (\"error\",)\n    return result\n"}
{"task_id": "Mbpp/261", "completion": "function division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Both tuples must have the same length\"\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            return \"Error: Division by zero is not allowed\"\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result"}
{"task_id": "Mbpp/261", "completion": "function division_elements(test_tup1, test_tup2):\n    result = ()\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] != 0:\n                result += (test_tup1[i] / test_tup2[i],)\n            else:\n                return \"Error: Division by zero is not allowed.\"\n    return resul"}
{"task_id": "Mbpp/262", "completion": "function split_two_parts(list1, L):\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])\n"}
{"task_id": "Mbpp/262", "completion": "function result = split_two_parts(list1, L)\n    if L > length(list1) then\n        result = ([list1[1..L]], list1[L+1..length(list1)])\n    else\n        result = (list1[1..L], [])\n    end\n"}
{"task_id": "Mbpp/262", "completion": "function split_two_parts(list1, L)\n    if L > length(list1)\n        return error \"L should not be greater than the length of the list\"\n    end\n    result = []\n    result.append(list1[0..L-1])\n    result.append(list1[L..-1])\n    return tuple(result"}
{"task_id": "Mbpp/262", "completion": "function split_two_parts(list1, L)\n    if L > length(list1):\n        return \"Error: L cannot be larger than the length of the list\"\n    else:\n        part1 = []\n        part2 = []\n        for i in range(L):\n            part1.append(list1[i])\n        for i in range(L, length(list1)):\n            part2.append(list1[i])\n        return (part1, part2"}
{"task_id": "Mbpp/262", "completion": "function split_two_parts(list1, L):\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:]"}
{"task_id": "Mbpp/262", "completion": "\nfunction split_two_parts(list1, L):\n    if length(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[0:L], list1[L:length(list1)]"}
{"task_id": "Mbpp/262", "completion": "function split_two_parts(list1, L):\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[0:L], list1[L:])\n"}
{"task_id": "Mbpp/262", "completion": "\nfunction split_two_parts(list1, L):\n    if L > len(list1):\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:]"}
{"task_id": "Mbpp/262", "completion": "function result = split_two_parts(input_list, L)\n    if L > len(input_list):\n        return (input_list, [])\n    else:\n        return (input_list[:L], input_list[L:])\n"}
{"task_id": "Mbpp/262", "completion": "if L > len(list1):\n    return (list1, [])\nelse:\n    return (list1[:L], list1[L:]"}
{"task_id": "Mbpp/264", "completion": "algorithm:\n  input: h_age (human age)\n  output: d_age (dog age)\n\n  if h_age <= 1 then\n    d_age = h_age * 15\n  else\n    d_age = 15 + (h_age - 1) * 9\n  end if\n\n  return d_ag"}
{"task_id": "Mbpp/264", "completion": "function dog_age(h_age)\n    if h_age <= 1\n        return h_age * 15\n    else\n        return 15 + (h_age - 1) * 9\n"}
{"task_id": "Mbpp/264", "completion": "if h_age <= 1:\n    dog_years = h_age * 15\nelse:\n    dog_years = 15 + (h_age - 1) * 9\nreturn dog_year"}
{"task_id": "Mbpp/264", "completion": "function dog_age(h_age)\n  if h_age <= 1 then\n    return h_age * 15\n  else\n    return 15 + (h_age - 1) * 9\n"}
{"task_id": "Mbpp/264", "completion": "function dog_age(h_age):\n    if h_age <= 1:\n        return h_age * 15\n    elif h_age >= 2 and h_age <= 10:\n        return 90 + (h_age - 2) * 4\n    else:\n        return 24 + (h_age - 10) * "}
{"task_id": "Mbpp/264", "completion": "FUNCTION dog_age(h_age)\n    IF h_age <= 1 THEN\n        RETURN 15\n    ELSE\n        RETURN 15 + ((h_age - 1) * 4)\n    END IF\n"}
{"task_id": "Mbpp/264", "completion": "function dog_age(h_age)\n    if h_age <= 2 then\n        return h_age * 15\n    else\n        return 22 + (h_age - 2) * 4\n"}
{"task_id": "Mbpp/264", "completion": "input h_age\nif h_age < 1 then\n    output 15\nelse\n    years_in_human=0\n    while h_age > 0 do\n        if h_age >= 1 then\n            years_in_human = years_in_human + 13\n            h_age = h_age - 1\n        else\n            years_in_human = years_in_human + 1\n            h_age = h_age\n        end if\n    end while\n    output years_in_human\n"}
{"task_id": "Mbpp/264", "completion": "function dog_age(h_age):\n    if h_age < 0:\n        return \"Invalid age\"\n    elif h_age <= 1:\n        return h_age * 15\n    else:\n        return (h_age - 1) * 15 + 1"}
{"task_id": "Mbpp/264", "completion": "\nfunction dog_age(h_age)\n    if h_age <= 0\n        return \"Invalid human age\"\n    else if h_age <= 1\n        return 15\n    else\n        return 15 + (h_age - 1) * "}
{"task_id": "Mbpp/265", "completion": "function list_split(S, n):\n    result = []\n    temp = []\n    for i in range(0, len(S), n):\n        temp.append(S[i])\n        if (i + n) > len(S):\n            result.append(temp)\n            break\n        elif i == len(S) - 1:\n            result.append(temp)\n        else:\n            result.append(temp)\n            temp = []\n    return resul"}
{"task_id": "Mbpp/265", "completion": ""}
{"task_id": "Mbpp/265", "completion": "function list_split(S, n):\n    result = []\n    temp = []\n    for i in range(0, len(S), n):\n        temp.append(S[i])\n        if (i + 1) % n == 0:\n            result.append(temp)\n            temp = []\n    if temp:\n        result.append(temp)\n    return resul"}
{"task_id": "Mbpp/265", "completion": ""}
{"task_id": "Mbpp/265", "completion": ""}
{"task_id": "Mbpp/265", "completion": ""}
{"task_id": "Mbpp/265", "completion": "function list_split(S, n):\n    result = []\n    temp = []\n    for i in range(0, len(S), n):\n        temp.append(S[i])\n        if (i + n >= len(S)):\n            result.append(temp)\n            temp = []\n    if (temp != []):\n        result.append(temp)\n    return resul"}
{"task_id": "Mbpp/265", "completion": "result = []\nfor i in range(0, len(S), step):\n    result.append(S[i:i + step])\nreturn resul"}
{"task_id": "Mbpp/265", "completion": "\nfunction list_split(S, n):\n    result = []\n    temp = []\n    for i in range(0, len(S), n):\n        temp.append(S[i])\n        if (i + n) > len(S):\n            result.append(temp)\n            break\n        if (i + 1) % n == 0:\n            result.append(temp)\n            temp = []\n    return resul"}
{"task_id": "Mbpp/265", "completion": "procedure list_split(S, step)\n    result = []\n    temp_list = []\n    for i from 0 to size(S) - 1\n        temp_list.append(S[i])\n        if i % step == step - 1\n            result.append(temp_list)\n            temp_list = []\n    if temp_list not empty\n        result.append(temp_list)\n    return resul"}
{"task_id": "Mbpp/266", "completion": "function lateralsurface_cube(l)\n    return 4 * l * l\n"}
{"task_id": "Mbpp/266", "completion": ""}
{"task_id": "Mbpp/266", "completion": ""}
{"task_id": "Mbpp/266", "completion": "\nfunction lateralsurface_cube(l)\n    return 4 * l^2\n"}
{"task_id": "Mbpp/266", "completion": "`function lateralsurface_cube(l)\n  return 4 * l^2`\n"}
{"task_id": "Mbpp/266", "completion": "proc lateralsurface_cube(l: int)\n  return 4 * l^2\n"}
{"task_id": "Mbpp/266", "completion": "function lateralsurface_cube(l)\n    area_per_face = 2 * l * l\n    return 4 * area_per_fac"}
{"task_id": "Mbpp/266", "completion": "function lateralsurface_cube(l):\n    result = 4 * l^2\n    return resul"}
{"task_id": "Mbpp/266", "completion": "function lateralsurface_cube(l)\n    area_of_face = 4 * l * l\n    return area_of_face\n"}
{"task_id": "Mbpp/266", "completion": ""}
{"task_id": "Mbpp/267", "completion": "function square_sum(n)\n    sum = 0\n    for i from 1 to n * 2 by 2\n        sum = sum + i^2\n    return sum\n"}
{"task_id": "Mbpp/267", "completion": "function square_Sum(n):\n    sum = 0\n    for i from 1 to n * 2 by 2:\n        sum = sum + i ** 2\n    return sum\n"}
{"task_id": "Mbpp/267", "completion": ""}
{"task_id": "Mbpp/267", "completion": "function square_Sum(n):\n    sum = 0\n    i = 1\n    while i <= 2*n - 1:\n        if i mod 2 != 0:\n            sum = sum + i^2\n        i = i + 1\n    return sum\n"}
{"task_id": "Mbpp/267", "completion": "function squareSum(n):\n    sum = 0\n    for i from 1 to n with step 2:\n        sum = sum + i * i\n    return su"}
{"task_id": "Mbpp/267", "completion": "function square_Sum(n)\n    sum = 0\n    for i from 1 to n * 2\n        if i mod 2 != 0\n            sum = sum + i^2\n    return sum\n"}
{"task_id": "Mbpp/267", "completion": ""}
{"task_id": "Mbpp/267", "completion": "data: odd_numbers = []\nfor i from 1 to n by 2 do\n    append i squared to odd_numbers\nsum = 0\nfor each number in odd_numbers do\n    add number to sum\nreturn su"}
{"task_id": "Mbpp/267", "completion": "function square_Sum(n):\n    sum = 0\n    for i from 1 to n:\n        if i mod 2 is not 0 then\n            sum = sum + i * i\n    return su"}
{"task_id": "Mbpp/267", "completion": "function square_Sum(n):\n    sum = 0\n    i = 1\n    while i <= 2*n - 1:\n        if i mod 2 != 0:\n            sum = sum + i^2\n        i = i + 1\n    return sum\n"}
{"task_id": "Mbpp/268", "completion": ""}
{"task_id": "Mbpp/268", "completion": "\nfunction find_star_num(n):\n    sum = 0\n    k = 1\n    i = 1\n    while True:\n        for j in range(1, i + 1):\n            if (i + 1) / j is int((i + 1) / j):\n                sum += i + 1\n        if sum >= n:\n            return k * (2 * n - 1)\n        i += 1\n        k += 1\n"}
{"task_id": "Mbpp/268", "completion": "function find_star_num(n)\n    i = 1\n    star_num = 0\n    while true\n        if is_prime(i)\n            star_num += 1\n            if star_num == n\n                return i\n        i += 1\n\nfunction is_prime(k)\n    if k < 2\n        return false\n    for i from 2 to sqrt(k)\n        if k mod i is 0\n            return false\n    return tru"}
{"task_id": "Mbpp/268", "completion": "function find_star_num(n):\n    i = 1\n    count = 0\n    num = 0\n    while True:\n        num += i\n        i += 1\n        if num < 2:\n            continue\n        if num % 2 == 0 or num % 3 == 0 or num % 5 == 0:\n            count -= 1\n        else:\n            count += 1\n        if count == n:\n            return num\n"}
{"task_id": "Mbpp/268", "completion": "\nfunction find_star_num(n):\n    result = 0\n    i = 1\n    while true:\n        sum = 0\n        for j from 1 to i:\n            if is_prime(j):\n                sum += j\n        if sum == i:\n            result += 1\n        if result == n:\n            return i\n        i += 1\n    end while\nend functio"}
{"task_id": "Mbpp/268", "completion": "function find_star_num(n):\n    count = 0\n    num = 1\n    while True:\n        if num < 2:\n            continue\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                break\n        else:\n            count += 1\n        if count == n:\n            return num\n        num += "}
{"task_id": "Mbpp/268", "completion": "function find_star_num(n):\n    i = 1\n    star_num = 0\n    k = 0\n    while True:\n        if i % 2 == 0:\n            k += 1\n            if k == n:\n                return star_num + i\n        else:\n            star_num += i\n        i += "}
{"task_id": "Mbpp/268", "completion": "function find_star_num(n)\n    result := 0\n    i := 1\n    while true\n        total_sum := 0\n        k := 1\n        while k <= i\n            total_sum += k\n            k += 1\n        if total_sum > n\n            return result + 1\n        else\n            i += 1\n            result += 1\n    end while\n"}
{"task_id": "Mbpp/268", "completion": "function find_star_num(n):\n    k = 1\n    result = 0\n    i = 1\n    while True:\n        sum_of_divisors = sum(i * (k // i) for i in range(1, k + 1))\n        if sum_of_divisors == 2 * k:\n            result += 1\n            if result == n:\n                return k\n        k += "}
{"task_id": "Mbpp/268", "completion": "\nfunction find_star_num(n)\n    m = 1\n    k = 1\n    result = 0\n    while true\n        result = result + m * k\n        if k > n\n            return result\n        m = m + 1\n        k = k + 1\n    end while\nend function\n"}
{"task_id": "Mbpp/269", "completion": "function ascii_value(k):\n    return ord(k"}
{"task_id": "Mbpp/269", "completion": "\nFUNCTION ascii_value(k)\n    RETURN ORD(k)\nEND FUNCTIO"}
{"task_id": "Mbpp/269", "completion": ""}
{"task_id": "Mbpp/269", "completion": "\ninput_str = input(\"Enter a character: \")\nchar = input_str.strip()\nif len(char) > 0:\n    result = ord(char)\nelse:\n    result = \"Invalid input\"\nprint(result"}
{"task_id": "Mbpp/269", "completion": "function ascii_value(k):\n    return ord(k"}
{"task_id": "Mbpp/269", "completion": "function ascii_value(k)\n  return ord(k)\n"}
{"task_id": "Mbpp/269", "completion": "\nfunction ascii_value(k)\n    return ord(k)\n"}
{"task_id": "Mbpp/269", "completion": "\nfunction ascii_value(k):\n    return ord(k)\n"}
{"task_id": "Mbpp/269", "completion": "\ninput = read a character k\noutput = ASCII value of k\nif k is uppercase letter then\n    output = 65 + (k - 'A')\nelse if k is lowercase letter then\n    output = 97 + (k - 'a')\nelse\n    output = ASCII value of k\nprint outpu"}
{"task_id": "Mbpp/269", "completion": "function ascii_value(k):\n    return ord(k"}
{"task_id": "Mbpp/270", "completion": ""}
{"task_id": "Mbpp/270", "completion": "\ninput: arr = list of numbers\nsum = 0\ni = 0\nwhile i < len(arr):\n    if i % 2 == 0 and arr[i] % 2 == 0:\n        sum += arr[i]\n    i += 1\nreturn sum\n"}
{"task_id": "Mbpp/270", "completion": "\nfunction sum_even_and_even_index(input_list):\n    total_sum = 0\n    for i in range(0, len(input_list), 2):\n        if input_list[i] % 2 == 0:\n            total_sum += input_list[i]\n    return total_su"}
{"task_id": "Mbpp/270", "completion": "data = input_arr\nsum_even_at_even_positions = 0\nindex = 0\nwhile index < len(data):\n    if index % 2 == 0 and data[index] % 2 == 0:\n        sum_even_at_even_positions += data[index]\n    index = index + 1\nreturn sum_even_at_even_positions\n"}
{"task_id": "Mbpp/270", "completion": "\nfunction sum_even_and_even_index(arr):\n    sum = 0\n    i = 0\n    while i < length of arr:\n        if i is even and arr[i] is even:\n            sum = sum + arr[i]\n        i = i + 1\n    return sum\n"}
{"task_id": "Mbpp/270", "completion": "\nfunction sum_even_and_even_index(arr):\n    sum = 0\n    for i from 0 to length(arr) - 1:\n        if i is even and arr[i] is even:\n            sum = sum + arr[i]\n    return su"}
{"task_id": "Mbpp/270", "completion": "function sum_even_and_even_index(arr):\n    sum = 0\n    for i from 0 to length(arr) - 1:\n        if (i mod 2) == 0 and (arr[i] mod 2) == 0:\n            sum = sum + arr[i]\n    return su"}
{"task_id": "Mbpp/270", "completion": "function sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    return su"}
{"task_id": "Mbpp/270", "completion": ""}
{"task_id": "Mbpp/270", "completion": "function sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    return sum\n"}
{"task_id": "Mbpp/271", "completion": "function even_Power_Sum(n)\n    sum = 0\n    num = 2\n    i = 1\n    while i <= n:\n        if num is even\n            sum = sum + pow(num, 5)\n        num = num + 2\n        i = i + 1\n    return su"}
{"task_id": "Mbpp/271", "completion": "function even_Power_Sum(n):\n    total = 0\n    i = 2\n    while i <= n * 2:\n        total += i ** 5\n        i += 2\n    return tota"}
{"task_id": "Mbpp/271", "completion": "function even_Power_Sum(n)\n    sum = 0\n    num = 2\n    i = 1\n    while i <= n:\n        sum = sum + pow(num, 5)\n        num = num + 2\n        i = i + 1\n    return su"}
{"task_id": "Mbpp/271", "completion": "\nfunction even_Power_Sum(n):\n    total = 0\n    i = 2\n    while i <= n * 2:\n        if i % 2 == 0:\n            total += i ** 5\n        i += 1\n    return tota"}
{"task_id": "Mbpp/271", "completion": "function even_Power_Sum(n)\n    total_sum = 0\n    for i from 2 to n\n        if i mod 2 equals 0 then\n            total_sum = total_sum + i ^ 5\n    return total_sum\n"}
{"task_id": "Mbpp/271", "completion": "function even_Power_Sum(n)\n    sum = 0\n    i = 2\n    while i <= n * 2:\n        sum = sum + i ^ 5\n        i = i + 2\n    return su"}
{"task_id": "Mbpp/271", "completion": "function even_Power_Sum(n):\n    sum = 0\n    i = 2\n    while i <= n * 2:\n        if i % 2 == 0 then\n            sum = sum + i^5\n        end if\n        i = i + 1\n    return su"}
{"task_id": "Mbpp/271", "completion": "\nfunction even_Power_Sum(n):\n    sum = 0\n    i = 2\n    while i <= n:\n        sum = sum + (i ^ 5)\n        i = i + 2\n    return sum\n"}
{"task_id": "Mbpp/271", "completion": "\nfunction even_Power_Sum(n):\n    sum = 0\n    i = 2\n    while i <= n:\n        sum = sum + (i ^ 5)\n        i = i + 2\n    return sum\n"}
{"task_id": "Mbpp/271", "completion": "function even_Power_Sum(n)\n    total = 0\n    i = 2\n    while i <= 2*n\n        if i is even\n            total = total + i^5\n        i = i + 1\n    return tota"}
{"task_id": "Mbpp/272", "completion": "function rear_extract(input_list):\n    result = []\n    for pair in input_list:\n        result.append(pair[2])\n    return result\n"}
{"task_id": "Mbpp/272", "completion": "function rear_extract(list_of_tuples):\n    result = []\n    for t in list_of_tuples:\n        result.append(t[-1])\n    return result\n"}
{"task_id": "Mbpp/272", "completion": "function rear_extract(input_list):\n    result = []\n    for tuple in input_list:\n        result.append(tuple[2])\n    return result\n"}
{"task_id": "Mbpp/272", "completion": "\nfunction rear_extract(input_list):\n    result = []\n    for each_tuple in input_list:\n        result.append(last(element))\n    return resul"}
{"task_id": "Mbpp/272", "completion": "function rear_extract(list_of_tuples):\n    result = []\n    for tuple in list_of_tuples:\n        result.append(tuple[-1])\n    return resul"}
{"task_id": "Mbpp/272", "completion": "function rear_extract(test_list):\n    return [item[2] for item in test_list]\n"}
{"task_id": "Mbpp/272", "completion": "\nfunction rear_extract(test_list):\n    result = []\n    for tuple_element in test_list:\n        result.append(tuple_element[2])\n    return resul"}
{"task_id": "Mbpp/272", "completion": "function rear_extract(list):\n    result = []\n    for each_tuple in list:\n        result.append(each_tuple[-1])\n    return result\n"}
{"task_id": "Mbpp/272", "completion": "function rear_extract(input_list):\n    result = []\n    for tuple in input_list:\n        result.append(tuple[2])\n    return resul"}
{"task_id": "Mbpp/272", "completion": "function rear_extract(input_list):\n    result = []\n    for tuple_element in input_list:\n        result.append(tuple_element[2])\n    return resul"}
{"task_id": "Mbpp/273", "completion": "\nfunction substract_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of the same length\"\n    else:\n        result = ()\n        for i in range(len(test_tup1)):\n            result = result + (test_tup1[i] - test_tup2[i],)\n        return result\n"}
{"task_id": "Mbpp/273", "completion": "function substract_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples have different lengths\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n"}
{"task_id": "Mbpp/273", "completion": "input_tuple1 = test_tup1\ninput_tuple2 = test_tup2\noutput_tuple = ()\n\nfor i in range(len(input_tuple1)):\n    output_tuple += (input_tuple1[i] - input_tuple2[i],)\n\nreturn output_tupl"}
{"task_id": "Mbpp/273", "completion": "DEF function substract_elements(test_tup1, test_tup2)\n    result = ()\n    FOR i FROM 0 TO len(test_tup1) - 1\n        result = (result + (test_tup1[i] - test_tup2[i],))\n    RETURN resul"}
{"task_id": "Mbpp/273", "completion": ""}
{"task_id": "Mbpp/273", "completion": "function substract_elements(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] - test_tup2[i],)\n    return resul"}
{"task_id": "Mbpp/273", "completion": "function substract_elements(test_tup1, test_tup2):\n    result = ()\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples are not of the same length\"\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] - test_tup2[i],)\n    return result\n"}
{"task_id": "Mbpp/273", "completion": "function substract_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples have different lengths\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n"}
{"task_id": "Mbpp/273", "completion": "function result = substract_elements(tup1, tup2):\n    result = ()\n    for i in range(min(len(tup1), len(tup2))):\n        result = result + (tup1[i] - tup2[i],)\n    return result + tup1[len(tup2):]\n"}
{"task_id": "Mbpp/273", "completion": "function substract_elements(test_tup1, test_tup2):\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] - test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        result += (test_tup1[len(test_tup2):])\n    elif len(test_tup2) > len(test_tup1):\n        result += (test_tup2[len(test_tup1):])\n    return result\n"}
{"task_id": "Mbpp/274", "completion": "function even_binomial_Coeff_Sum(n)\n    sum = 0\n    for i from 0 to n-1\n        if i mod 2 == 0\n            sum = sum + math.comb(n, i)\n    return sum\n"}
{"task_id": "Mbpp/274", "completion": ""}
{"task_id": "Mbpp/274", "completion": "function even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i from 0 to n:\n        if i mod 2 == 0:\n            sum = sum + math.comb(n, i)\n    return sum\n"}
{"task_id": "Mbpp/274", "completion": ""}
{"task_id": "Mbpp/274", "completion": "function even_binomial_Coeff_Sum(n)\n    result = 0\n    for k from 0 to n\n        if k mod 2 == 0\n            result += math.comb(n, k)\n    return resul"}
{"task_id": "Mbpp/274", "completion": "function even_binomial_Coeff_Sum(n):\n    result = 0\n    for k from 0 to n:\n        if k mod 2 == 0:\n            result += math.comb(n, k)\n    return resul"}
{"task_id": "Mbpp/274", "completion": "\nfunction even_binomial_Coeff_Sum(n):\n    total = 0\n    for k from 0 to n:\n        if k is even:\n            total = total + comb(n, k)\n    return total\n"}
{"task_id": "Mbpp/274", "completion": "\nfunction even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for i from 0 to n - 1:\n        coefficient = math.comb(n, i)\n        if i is even:\n            total_sum += coefficient\n    return total_sum\n"}
{"task_id": "Mbpp/274", "completion": ""}
{"task_id": "Mbpp/274", "completion": "function even_binomial_coeff_sum(n):\n    total = 0\n    for k from 0 to n:\n        binomial_coeff = math.comb(n, k)\n        if k % 2 == 0:\n            total += binomial_coeff\n    return tota"}
{"task_id": "Mbpp/276", "completion": "function volume_cylinder(radius, height):\n    pi = 3.14159\n    return pi * (radius ** 2) * heigh"}
{"task_id": "Mbpp/276", "completion": "function volume_cylinder(r, h):\n    pi = 3.14159\n    return pi * r^2 * h\n"}
{"task_id": "Mbpp/276", "completion": ""}
{"task_id": "Mbpp/276", "completion": "function volume_cylinder(r, h):\n    pi = 3.14159\n    return pi * r^2 * "}
{"task_id": "Mbpp/276", "completion": "function volume_cylinder(radius, height)\n    pi = 3.14159\n    return pi * (radius^2) * heigh"}
{"task_id": "Mbpp/276", "completion": "\nfunction volume_cylinder(radius, height)\n    pi = 3.14159\n    return pi * radius**2 * heigh"}
{"task_id": "Mbpp/276", "completion": "function volume_cylinder(radius, height):\n    PI = 3.14159\n    return PI * (radius ** 2) * heigh"}
{"task_id": "Mbpp/276", "completion": "FUNCTION volume_cylinder(radius, height)\n    PI = 3.14159265359\n    volume = PI * (radius ** 2) * height\n    RETURN volume\n"}
{"task_id": "Mbpp/276", "completion": ""}
{"task_id": "Mbpp/276", "completion": ""}
{"task_id": "Mbpp/277", "completion": "function dict_filter(dict1, n)\n    result = {}\n    for key, value in items(dict1):\n        if value >= n:\n            result[key] = value\n    return result\n"}
{"task_id": "Mbpp/277", "completion": "`dict = {}\nfor key, value in dict1.items():\n    if value >= n:\n        dict[key] = value\nreturn dict"}
{"task_id": "Mbpp/277", "completion": "\nfunction dict_filter(dict1, n)\n    result = {}\n    for key, value in dict1.items():\n        if value >= n:\n            result[key] = value\n    return result\n"}
{"task_id": "Mbpp/277", "completion": "\nfunction dict_filter(dict1, n)\n    result = {}\n    for key, value in dict1.items():\n        if value >= n:\n            result[key] = value\n    return result\n"}
{"task_id": "Mbpp/277", "completion": "function dict_filter(dict1, n)\n    result = {}\n    for key, value in items(dict1):\n        if value >= n:\n            result[key] = value\n    return result\n"}
{"task_id": "Mbpp/277", "completion": "function dict_filter(dict1, n):\n    result = {}\n    for key, value in dict1.items():\n        if value >= n:\n            result[key] = value\n    return result\n"}
{"task_id": "Mbpp/277", "completion": "function dict_filter(dict1, n):\n    result = {}\n    for key, value in dict1.items():\n        if value >= n:\n            result[key] = value\n    return result\n"}
{"task_id": "Mbpp/277", "completion": "\nfunction dict_filter(dict1, n):\n    result = {}\n    for key, value in items(dict1):\n        if value >= n:\n            add key, value to result\n    return result\n"}
{"task_id": "Mbpp/277", "completion": "\nfunction dict_filter(dict1, n)\n    output = {}\n    for each key-value pair in dict1:\n        if value >= n:\n            output.add(key-value pair)\n    return output\n"}
{"task_id": "Mbpp/277", "completion": "function dict_filter(dict1, n)\n    result = {}\n    for key, value in dict1.items():\n        if value >= n:\n            result[key] = value\n    return result\n"}
{"task_id": "Mbpp/278", "completion": "function count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if type(i) == int:\n            count += 1\n        elif type(i) == tuple:\n            break\n    return coun"}
{"task_id": "Mbpp/278", "completion": "\nfunction count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if type(element) == tuple:\n            break\n        count += 1\n    return coun"}
{"task_id": "Mbpp/278", "completion": "\ndefine function count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            break\n        else:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/278", "completion": "\nfunction count_first_elements(test_tup)\n    count := 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            break\n        else:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/278", "completion": ""}
{"task_id": "Mbpp/278", "completion": "function count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return coun"}
{"task_id": "Mbpp/278", "completion": "\nfunction count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if type(element) != tuple:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "Mbpp/278", "completion": "function count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            break\n        else:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/278", "completion": "\nfunction count_first_elements(test_tup):\n    count = 0\n    i = 0\n    while i < len(test_tup):\n        if isinstance(test_tup[i], tuple):\n            break\n        count += 1\n        i += 1\n    return count\n"}
{"task_id": "Mbpp/278", "completion": "function count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return coun"}
{"task_id": "Mbpp/279", "completion": "\nFUNCTION is_num_decagonal(n)\n    x = (9*n^2 - n)/2\n    RETURN x\nEND FUNCTIO"}
{"task_id": "Mbpp/279", "completion": "function is_num_decagonal(n):\n    k = (3 * n^2 - n) / 2\n    return k * (k + 1)\n"}
{"task_id": "Mbpp/279", "completion": "function is_num_decagonal(n):\n    k = 0\n    sum = 0\n    while sum < n:\n        k += 1\n        sum = k * (3 * k - 1)\n    return sum\n"}
{"task_id": "Mbpp/279", "completion": "function is_num_decagonal(n):\n    return (9*n^2 - n)/"}
{"task_id": "Mbpp/279", "completion": "\nfunction is_num_decagonal(n):\n    return (9*n^2 - 9*n + 1)/"}
{"task_id": "Mbpp/279", "completion": "function is_num_decagonal(n):\n    if n <= 0:\n        return 0\n    else:\n        return n*(3*n - 1)\n"}
{"task_id": "Mbpp/279", "completion": "\nfunction is_num_decagonal(n):\n    k = 1\n    total = 0\n    while total < n:\n        num_points = (k * 8) + 4\n        total += num_points\n        k += 1\n    return num_points - 4\n"}
{"task_id": "Mbpp/279", "completion": "\nfunction is_num_decagonal(n):\n    if n <= 0:\n        return -1\n    else:\n        total_sum = 0\n        for i in range(1, n + 1):\n            total_sum += i\n        return 10 * total_sum - 5 * (n + 1)\n"}
{"task_id": "Mbpp/279", "completion": "\nfunction decagonal_number(n):\n    return (9 * n^2 - 5*n)\n"}
{"task_id": "Mbpp/279", "completion": "function find_nth_decagonal_number(n):\n    return (9*n^2-9*n+1)/2\n"}
{"task_id": "Mbpp/280", "completion": "function sequential_search(dlist, item):\n    i = 0\n    found = False\n    while i < len(dlist) and not found:\n        if dlist[i] == item:\n            found = True\n        else:\n            i = i + 1\n    if found:\n        return (True, i)\n    else:\n        return (False, -1"}
{"task_id": "Mbpp/280", "completion": ""}
{"task_id": "Mbpp/280", "completion": "function sequential_search(dlist, item):\n    i = 0\n    while i < len(dlist):\n        if dlist[i] == item:\n            return (True, i)\n        i = i + 1\n    return (False, -1"}
{"task_id": "Mbpp/280", "completion": "inputArray = dlist\nitemToFind = item\nfound = False\nindex = -1\n\nfor i in range(0, len(inputArray)):\n    if inputArray[i] == itemToFind:\n        found = True\n        index = i\n        break\n\nreturn (found, index"}
{"task_id": "Mbpp/280", "completion": "result = (False, -1)\nfor i in range(len(dlist)):\n    if dlist[i] == item:\n        result = (True, i)\n        break\nreturn resul"}
{"task_id": "Mbpp/280", "completion": "function sequential_search(dlist, item):\n    i = 0\n    while i < len(dlist):\n        if dlist[i] == item:\n            return (True, i)\n        i = i + 1\n    return (False, -1"}
{"task_id": "Mbpp/280", "completion": "function sequential_search(dlist, item):\n    for i from 0 to length(dlist) - 1:\n        if dlist[i] is equal to item:\n            return (True, i)\n    return (False, -1"}
{"task_id": "Mbpp/280", "completion": "begin\n    i = 0\n    found = False\n    pos = -1\n    while i < len(dlist) and not found:\n        if dlist[i] == item:\n            found = True\n            pos = i\n        i = i + 1\n    return (found, pos)\n"}
{"task_id": "Mbpp/280", "completion": "ALGORITHM:\n    SET found to FALSE\n    SET position to -1\n    FOR each element e in dlist\n        IF element e equals to item\n            SET found to TRUE\n            SET position to the current index of e\n        END IF\n    END FOR\n    RETURN (found, position"}
{"task_id": "Mbpp/280", "completion": "function sequential_search(dlist, item):\n    for i from 0 to length(dlist) - 1\n        if dlist[i] equals item\n            return (True, i)\n    return (False, -1"}
{"task_id": "Mbpp/281", "completion": ""}
{"task_id": "Mbpp/281", "completion": "function all_unique(test_list):\n  set_test_list = set(test_list)\n  return len(set_test_list) == len(test_list"}
{"task_id": "Mbpp/281", "completion": ""}
{"task_id": "Mbpp/281", "completion": "\nFUNCTION all_unique(test_list)\n    IF test_list.length = 0 THEN\n        RETURN TRUE\n    END IF\n    SET seen := NULL\n    FOR each element IN test_list\n        IF element IN seen THEN\n            RETURN FALSE\n        END IF\n        ADD element TO seen\n    END FOR\n    RETURN TRUE\nEND FUNCTIO"}
{"task_id": "Mbpp/281", "completion": ""}
{"task_id": "Mbpp/281", "completion": "function all_unique(input_list):\n    seen = {}\n    for item in input_list:\n        if item in seen:\n            return False\n        seen[item] = True\n    return True\n"}
{"task_id": "Mbpp/281", "completion": "function all_unique(test_list):\n    temp_set = {}\n    for element in test_list:\n        if element in temp_set:\n            return False\n        else:\n            temp_set[element] = 1\n    return Tru"}
{"task_id": "Mbpp/281", "completion": ""}
{"task_id": "Mbpp/281", "completion": ""}
{"task_id": "Mbpp/281", "completion": ""}
{"task_id": "Mbpp/282", "completion": "\nfunction sub_list(nums1, nums2):\n    result = []\n    length = len(nums1)\n    if length != len(nums2):\n        return \"Lists must have same length\"\n    for i in range(length):\n        result.append(nums1[i] - nums2[i])\n    return result\n"}
{"task_id": "Mbpp/282", "completion": "function sub_list(nums1, nums2):\n    result = []\n    for i from 0 to length(nums1)-1:\n        result.append(nums1[i] - nums2[i])\n    return resul"}
{"task_id": "Mbpp/282", "completion": "function sub_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"}
{"task_id": "Mbpp/282", "completion": "function sub_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        return \"Lists must be of the same length\"\n    result = []\n    for i from 0 to len(nums1)-1:\n        result.append(nums1[i] - nums2[i])\n    return resul"}
{"task_id": "Mbpp/282", "completion": "function sub_list(nums1, nums2):\n    result = []\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result\n    else:\n        return \"Lists must be of equal length\"\n"}
{"task_id": "Mbpp/282", "completion": "function sub_list(nums1, nums2)\n    result = []\n    for i from 0 to length(nums1) - 1\n        result.append(nums1[i] - nums2[i])\n    return result\n"}
{"task_id": "Mbpp/282", "completion": ""}
{"task_id": "Mbpp/282", "completion": "function sub_list(nums1, nums2):\n    result = []\n    i = 0\n    while i < len(nums1) and i < len(nums2):\n        result.append(nums1[i] - nums2[i])\n        i = i + 1\n    if i < len(nums1):\n        result.extend(nums1[i:])\n    elif i < len(nums2):\n        result.extend([-x for x in nums2[i:]])\n    return resul"}
{"task_id": "Mbpp/282", "completion": "function sub_list(nums1, nums2):\n    result = []\n    for i in range(min(len(nums1), len(nums2))):\n        result.append(nums1[i] - nums2[i])\n    if len(nums1) > len(nums2):\n        result.extend(nums1[len(nums2):])\n    elif len(nums2) > len(nums1):\n        result.extend(nums2[len(nums1):])\n    return result\n"}
{"task_id": "Mbpp/282", "completion": "if length of nums1 is less than length of nums2:\n    return error\nelse:\n    result = new list\n    for i from 0 to length of nums1-1:\n        append nums1[i]-nums2[i] to result\n    return resul"}
{"task_id": "Mbpp/283", "completion": ""}
{"task_id": "Mbpp/283", "completion": ""}
{"task_id": "Mbpp/283", "completion": "function validate(n):\n    digit_count = {}\n    while n > 0:\n        digit = n % 10\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n        n = int(n / 10)\n    for digit, count in digit_count.items():\n        if count > digit:\n            return False\n    return Tru"}
{"task_id": "Mbpp/283", "completion": ""}
{"task_id": "Mbpp/283", "completion": "function validate(n):\n    n_str = str(n)\n    for i in range(10):\n        count = 0\n        for char in n_str:\n            if int(char) == i:\n                count += 1\n        if count > i:\n            return False\n    return Tru"}
{"task_id": "Mbpp/283", "completion": "function validate(n):\n    n_str = str(n)\n    for i in range(10):\n        if n_str.count(str(i)) > i:\n            return False\n    return True\n"}
{"task_id": "Mbpp/283", "completion": "function validate(n):\n    n_str = str(n)\n    for digit in set(n_str):\n        if int(digit) > 0:\n            if n_str.count(digit) > int(digit):\n                return False\n    return True\n"}
{"task_id": "Mbpp/283", "completion": ""}
{"task_id": "Mbpp/283", "completion": "function validate(n):\n    n = str(n)\n    for digit in set(n):\n        if int(digit) > (n.count(digit)):\n            return False\n    return Tru"}
{"task_id": "Mbpp/283", "completion": "function validate(n):\n    n_str = str(n)\n    for digit in set(n_str):\n        if int(digit) > 0 and n_str.count(digit) > int(digit):\n            return False\n    return Tru"}
{"task_id": "Mbpp/284", "completion": ""}
{"task_id": "Mbpp/284", "completion": "\nFUNCTION check_element(list1, element)\n    FOR each item IN list1\n        IF item != element\n            RETURN FALSE\n    END FOR\n    RETURN TRUE\nEND FUNCTIO"}
{"task_id": "Mbpp/284", "completion": "algorithm check_element(list1, element)\n    if is_empty(list1) then\n        return TRUE\n    else\n        if first_element(list1) == element then\n            return check_element(rest(list1), element)\n        else\n            return FALSE\n"}
{"task_id": "Mbpp/284", "completion": ""}
{"task_id": "Mbpp/284", "completion": ""}
{"task_id": "Mbpp/284", "completion": ""}
{"task_id": "Mbpp/284", "completion": ""}
{"task_id": "Mbpp/284", "completion": ""}
{"task_id": "Mbpp/284", "completion": ""}
{"task_id": "Mbpp/284", "completion": ""}
{"task_id": "Mbpp/285", "completion": "function text_match_two_three(text):\n    pattern = \"a{1}b{2,3}\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/285", "completion": ""}
{"task_id": "Mbpp/285", "completion": "function text_match_two_three(text):\n    pattern = \"a(b{2,3})\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/285", "completion": "function text_match_two_three(text):\n    pattern = r\"ab{2,3}\"\n    return bool(re.search(pattern, text)"}
{"task_id": "Mbpp/285", "completion": "function text_match_two_three(text):\n  pattern = \"a(b{2,3})\"\n  return bool(re.search(pattern, text)"}
{"task_id": "Mbpp/285", "completion": ""}
{"task_id": "Mbpp/285", "completion": "function text_match_two_three(text)\n    pattern = \"ab{2,3}\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/285", "completion": "\nfunction text_match_two_three(text):\n    return re.match('ab{2,3}', text) is not Non"}
{"task_id": "Mbpp/285", "completion": "\nfunction text_match_two_three(text):\n    if re.match(\"ab{2,3}\", text):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/285", "completion": ""}
{"task_id": "Mbpp/286", "completion": ""}
{"task_id": "Mbpp/286", "completion": "\ninput array: a\nnumber of repetitions: n\nk\nmax_sum = -inf\nfor i from 0 to length(a) do\n    sum = 0\n    for j from i to i+k-1 do\n        sum = sum + a[j mod n]\n    if sum > max_sum then\n        max_sum = sum\n    end if\nend for\nreturn max_su"}
{"task_id": "Mbpp/286", "completion": "function max_sub_array_sum_repeated(a, n, k)\n    repeated_array = []\n    for i from 0 to k-1\n        repeated_array.extend(a)\n    max_sum = float('-inf')\n    current_sum = 0\n    for i from 0 to len(repeated_array)-1\n        current_sum = current_sum + repeated_array[i]\n        if current_sum > max_sum\n            max_sum = current_sum\n        if current_sum < 0\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "Mbpp/286", "completion": "ALGORITHM:\nfunction max_sub_array_sum_repeated(a[], n, k)\n    arr := []\n    for i from 1 to k do\n        arr := arr + a\n    max_sum := -inf\n    for i from 0 to length(arr) - n do\n        sum := 0\n        for j from i to i + n - 1 do\n            sum := sum + arr[j]\n        if sum > max_sum then\n            max_sum := sum\n    return max_sum\n"}
{"task_id": "Mbpp/286", "completion": "\nfunction max_sub_array_sum_repeated(a, n, k)\n    arr = [] \n    for i from 0 to n-1 \n        for j from 0 to k-1 \n            arr = arr + [a[i]] \n    max_sum = 0 \n    current_sum = 0 \n    start = 0 \n    end = 0 \n    for i from 0 to length(arr)-1 \n        if current_sum <= 0 \n            current_sum = arr[i] \n            start = i \n        else \n            current_sum = current_sum + arr[i] \n        if current_sum > max_sum \n            max_sum = current_sum \n            end = i \n    return max_sum \n"}
{"task_id": "Mbpp/286", "completion": "function max_sub_array_sum_repeated(a, n, k):\n    total_length = n * k\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i from 0 to total_length - 1:\n        current_sum += a[i % n]\n        max_sum = max(max_sum, current_sum)\n        \n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum\n"}
{"task_id": "Mbpp/286", "completion": "function max_sub_array_sum_repeated(a, n, k):\n    # repeat the array k times to form new array b\n    b = concatenate(a, a, ..., a) for k times\n    \n    # initialize maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i from 1 to n * k:\n        # add the current element to the current sum\n        current_sum = current_sum + b[i]\n        \n        # update maximum sum if current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # reset current sum if it becomes negative\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_su"}
{"task_id": "Mbpp/286", "completion": "function max_sub_array_sum_repeated(array, k, n):\n    array = array * k\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(len(array)):\n        current_sum = current_sum + array[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_su"}
{"task_id": "Mbpp/286", "completion": "function max_sub_array_sum_repeated(a[], n, k)\n    total_length = n * k\n    max_sum = -INF\n    current_sum = 0\n    \n    for i from 0 to total_length - 1\n        current_sum = current_sum + a[i % n]\n        \n        if current_sum > max_sum\n            max_sum = current_sum\n            \n        if current_sum < 0\n            current_sum = 0\n        \n    return max_sum\n"}
{"task_id": "Mbpp/286", "completion": "\nfunction max_sub_array_sum_repeated(a[], n, k)\n    # Create an array to store the cumulative sum\n    cum_sum = [0]\n    cum_sum += [cum_sum[i-1] + a[i] for i in range(1, n+1)]\n\n    # Calculate the maximum sum for each subarray\n    max_sum = float('-inf')\n    for i in range(n-k+1):\n        temp_sum = cum_sum[i+k] - cum_sum[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n    return max_sum * k\n"}
{"task_id": "Mbpp/287", "completion": "function square_Sum(n)\n    total = 0\n    for i from 2 to 2*n step 2\n        total = total + i^2\n    return total\n"}
{"task_id": "Mbpp/287", "completion": "FUNCTION square_Sum(n)\n    SUM = 0\n    i = 2\n    WHILE i <= 2 * n\n        SUM = SUM + i^2\n        i = i + 2\n    RETURN SU"}
{"task_id": "Mbpp/287", "completion": "function square_Sum(n):\n    sum = 0\n    for i from 2 to n * 2 step 2:\n        sum = sum + i^2\n    return su"}
{"task_id": "Mbpp/287", "completion": "\nsum = 0\ni = 2\nwhile i <= 2*n:\n    sum = sum + (i)^2\n    i = i + 2\nreturn su"}
{"task_id": "Mbpp/287", "completion": ""}
{"task_id": "Mbpp/287", "completion": ""}
{"task_id": "Mbpp/287", "completion": "\nfunction square_Sum(n):\n    total_sum = 0\n    for i from 0 to n-1 by 2:\n        total_sum = total_sum + i^2\n    return total_sum\n"}
{"task_id": "Mbpp/287", "completion": "function square_sum(n):\n    total_sum = 0\n    i = 2\n    while i <= 2*n:\n        if i % 2 == 0 then\n            total_sum = total_sum + i * i\n        i = i + 1\n    return total_su"}
{"task_id": "Mbpp/287", "completion": "function squareSum(n):\n    total_sum = 0\n    for i from 2 to 2*n:\n        if i mod 2 equals 0 then\n            total_sum = total_sum + i * i\n        end if\n    return total_su"}
{"task_id": "Mbpp/287", "completion": "function square_sum(n):\n    result = 0\n    for i from 2 to 2 * n:\n        if i is even:\n            result += i * i\n    return result\n"}
{"task_id": "Mbpp/290", "completion": "function max_length(list1):\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_len, max_lis"}
{"task_id": "Mbpp/290", "completion": "\nfunction max_length(list1):\n    max_len = 0\n    max_list = []\n    for each_list in list1:\n        if len(each_list) > max_len:\n            max_len = len(each_list)\n            max_list = each_list\n    return max_len, max_list\n"}
{"task_id": "Mbpp/290", "completion": "function max_length(list1):\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return (max_len, max_list"}
{"task_id": "Mbpp/290", "completion": "function max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_len, max_lis"}
{"task_id": "Mbpp/290", "completion": "\nfunction max_length(list1):\n    max_len = 0\n    max_list = []\n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_list = sub_list\n    return (max_len, max_list)\n"}
{"task_id": "Mbpp/290", "completion": ""}
{"task_id": "Mbpp/290", "completion": ""}
{"task_id": "Mbpp/290", "completion": "function max_length(list1):\n    max_len = 0\n    max_sublist = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_sublist = sublist\n    return (max_len, max_sublist"}
{"task_id": "Mbpp/290", "completion": "function max_length(list1):\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return (max_len, max_lst"}
{"task_id": "Mbpp/290", "completion": "function max_length(list1):\n    max_len = 0\n    max_list = None\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_len, max_list\n"}
{"task_id": "Mbpp/292", "completion": "\nfunction find(n, m):\n    if m == 0:\n        error \"division by zero\"\n    else:\n        quotient = int(n / m)\n        return quotient\n"}
{"task_id": "Mbpp/292", "completion": ""}
{"task_id": "Mbpp/292", "completion": ""}
{"task_id": "Mbpp/292", "completion": "function find(n, m)\n    if m == 0:\n        return \"Error: Division by zero\"\n    else:\n        result = floor(n / m)\n        return resul"}
{"task_id": "Mbpp/292", "completion": ""}
{"task_id": "Mbpp/292", "completion": "\ninput n, m\nquotient = 0\nwhile n >= m do\n    n = n - m\n    quotient = quotient + 1\nend while\nreturn floor(quotient)\n"}
{"task_id": "Mbpp/292", "completion": "\nfunction find(n, m):\n    if m == 0:\n        return \"Error: Division by zero is not allowed\"\n    else:\n        quotient = floor(n / m)\n        return quotien"}
{"task_id": "Mbpp/292", "completion": "\nfunction find(n, m)\n    if m is zero\n        return \"Error: division by zero\"\n    else\n        quotient <- integer division of n by m\n        return quotient\n"}
{"task_id": "Mbpp/292", "completion": "function find(n, m)\n    if m == 0 then\n        return \"division by zero\"\n    else\n        quotient = floor(n / m)\n        return quotient\n"}
{"task_id": "Mbpp/292", "completion": ""}
{"task_id": "Mbpp/293", "completion": "function otherside_rightangle(w,h)\n    return sqrt(w*w + h*h)\n"}
{"task_id": "Mbpp/293", "completion": "\nfunction otherside_rightangle(w, h)\n    c = sqrt(w^2 + h^2)\n    return c\n"}
{"task_id": "Mbpp/293", "completion": ""}
{"task_id": "Mbpp/293", "completion": "\nfunction otherside_rightangle(w, h)\n    c = sqrt(w^2 + h^2)\n    return c\n"}
{"task_id": "Mbpp/293", "completion": "function otherside_rightangle(w,h)\n    return sqrt(w**2 + h**2)\n"}
{"task_id": "Mbpp/293", "completion": ""}
{"task_id": "Mbpp/293", "completion": "\nfunction otherside_rightangle(w, h)\n    c = sqrt(w*w + h*h)\n    return round(c, 6)\n"}
{"task_id": "Mbpp/293", "completion": "function otherside_rightangle(w, h)\n    c = sqrt(w^2 + h^2)\n    return c\n"}
{"task_id": "Mbpp/293", "completion": ""}
{"task_id": "Mbpp/293", "completion": "\nfunction otherside_rightangle(w, h):\n    hypotenuse = sqrt(w^2 + h^2)\n    return round(hypotenuse, 10"}
{"task_id": "Mbpp/294", "completion": "\nmax_val = None\nfor item in listval:\n    if (isinstance(item, int) and (max_val is None or item > max_val)):\n        max_val = item\nreturn max_va"}
{"task_id": "Mbpp/294", "completion": "function max_val(listval):\n    max_num = float('-inf')\n    for item in listval:\n        if type(item) == int or type(item) == float:\n            if item > max_num:\n                max_num = item\n    return max_num\n"}
{"task_id": "Mbpp/294", "completion": "max_val = None\nfor element in listval:\n    if type(element) == int:\n        if max_val is None or element > max_val:\n            max_val = element\nreturn max_va"}
{"task_id": "Mbpp/294", "completion": "function max_val(listval)\n    max_val = None\n    for each item in listval:\n        if isinstance(item, int) and (max_val is None or item > max_val):\n            max_val = item\n    return max_val\n"}
{"task_id": "Mbpp/294", "completion": "data = listval\nmax = float('-inf')\nfor item in data:\n    if isinstance(item, int) or isinstance(item, float):\n        if item > max:\n            max = item\nreturn ma"}
{"task_id": "Mbpp/294", "completion": "\nfunction max_val(listval):\n    max_num = None\n    for item in listval:\n        if isinstance(item, int) and (max_num is None or item > max_num):\n            max_num = item\n    return max_num\n"}
{"task_id": "Mbpp/294", "completion": "function max_val(listval):\n    max_val = listval[0]\n    for each item in listval:\n        if type(item) is int and item > max_val:\n            max_val = item\n    return max_va"}
{"task_id": "Mbpp/294", "completion": "\nmax_val=listval[0]\nfor i in listval:\n    if(type(i) is int and i>max_val):\n        max_val=i\nreturn max_val\n"}
{"task_id": "Mbpp/294", "completion": "data_type = type(listval[0])\nmax_value = float('-inf')\nfor element in listval:\n    if isinstance(element, data_type):\n        if element > max_value:\n            max_value = element\nreturn max_valu"}
{"task_id": "Mbpp/294", "completion": "function max_val(listval)\n    max_num = -inf\n    for each element in listval:\n        if type(element) is int:\n            if element > max_num:\n                max_num = element\n    return max_num\n"}
{"task_id": "Mbpp/295", "completion": "function sum_div(number):\n    divisor_sum = 0\n    for i from 1 to number:\n        if number mod i equals 0 then\n            add i to divisor_sum\n        end if\n    return divisor_sum + 1\n"}
{"task_id": "Mbpp/295", "completion": "function sum_div(number):\n    sum = 0\n    for i from 1 to number:\n        if number mod i equals 0:\n            sum = sum + i\n    return sum\n"}
{"task_id": "Mbpp/295", "completion": "function sum_div(number)\n    sum = 0\n    i = 1\n    while i <= number / 2\n        if number % i == 0\n            sum = sum + i\n        end if\n        i = i + 1\n    end while\n    return sum + number\n"}
{"task_id": "Mbpp/295", "completion": "\nfunction sum_div(number):\n    total = 0\n    for i from 1 to number - 1:\n        if number mod i == 0:\n            total = total + i\n    return tota"}
{"task_id": "Mbpp/295", "completion": "function sum_div(number):\n    sum = 0\n    for i from 1 to number - 1:\n        if number mod i == 0:\n            sum = sum + i\n    return su"}
{"task_id": "Mbpp/295", "completion": "\nfunction sum_div(number):\n    sum = 0\n    for i from 1 to number do\n        if number mod i is equal to 0 then\n            sum = sum + i\n        end if\n    return sum - number\n"}
{"task_id": "Mbpp/295", "completion": "function sum_div(n):\n    sum = 0\n    for i from 1 to sqrt(n)\n        if n mod i is 0\n            sum = sum + i + n / i\n        end if\n    end for\n    return sum - n\n"}
{"task_id": "Mbpp/295", "completion": "\nfunction sum_div(number)\n    result = 0\n    for i from 1 to number\n        if number mod i is 0\n            result = result + i\n    return result\n"}
{"task_id": "Mbpp/295", "completion": "function sum_div(n)\n    total = 0\n    for i from 1 to n-1\n        if n mod i == 0 then\n            total = total + i\n        end if\n    return tota"}
{"task_id": "Mbpp/295", "completion": "function sum_div(number)\n    sum = 0\n    for i from 1 to number - 1\n        if number mod i == 0\n            sum = sum + i\n        end if\n    end for\n    return sum\n"}
{"task_id": "Mbpp/296", "completion": "\nfunction get_Inv_Count(arr):\n    if size of arr is 1:\n        return 0\n    else:\n        mid = floor(size of arr / 2)\n        left_arr = first half of arr\n        right_arr = second half of arr\n        left_count = get_Inv_Count(left_arr)\n        right_count = get_Inv_Count(right_arr)\n        merged_count = merge_and_count_inversions(left_arr, right_arr)\n        return left_count + right_count + merged_count\n\nfunction merge_and_count_inversions(left_arr, right_arr):\n    result = new array\n    i = index of left_arr\n    j = index of right_arr\n    inversion_count = 0\n    while i is not end of left_arr and j is not end of right_arr:\n        if element at index i in left_arr is smaller than element at index j in right_arr:\n            result = append element at index i from left_arr\n            i = increment i\n        else:\n            result = append element at index j from right_arr\n            j = increment j\n            inversion_count = increment inversion_count by number of elements that were in left_arr but greater than the current element in right_arr\n    result = extend with remaining elements from left_arr and right_arr\n    return result and inversion_count\n\nprint get_Inv_Count([1,20,6,4,5]"}
{"task_id": "Mbpp/296", "completion": "\nProcedure get_Inv_Count(arr):\n    n = length(arr)\n    inv_count = 0\n    for i from 1 to n:\n        for j from i+1 to n:\n            if arr[i] < arr[j]:\n                inv_count = inv_count + 1\n    return inv_count\n"}
{"task_id": "Mbpp/296", "completion": "function get_Inv_Count(arr):\n    if len(arr) <= 1:\n        return 0\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left_count = get_Inv_Count(left)\n    right_count = get_Inv_Count(right)\n    cross_count = merge_and_count(left, right)\n    return left_count + right_count + cross_count\n\nfunction merge_and_count(left, right):\n    result = []\n    i = j = 0\n    inv_count = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return inv_coun"}
{"task_id": "Mbpp/296", "completion": ""}
{"task_id": "Mbpp/296", "completion": "function get_Inv_Count(arr):\n    if len(arr) <= 1:\n        return 0\n    mid = len(arr) // 2\n    left = arr[0:mid]\n    right = arr[mid:]\n    left_count = get_Inv_Count(left)\n    right_count = get_Inv_Count(right)\n    merged_count = merge_and_count(left, right)\n    return left_count + right_count + merged_count\n\nfunction merge_and_count(left, right):\n    result = []\n    i = j = 0\n    inv_count = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return inv_coun"}
{"task_id": "Mbpp/296", "completion": ""}
{"task_id": "Mbpp/296", "completion": ""}
{"task_id": "Mbpp/296", "completion": ""}
{"task_id": "Mbpp/296", "completion": ""}
{"task_id": "Mbpp/296", "completion": "\nfunction get_Inv_Count(arr):\n    if size of arr is less than 2:\n        return 0\n    mid = floor(size of arr / 2)\n    left = first half of arr\n    right = second half of arr\n    left_count = get_Inv_Count(left)\n    right_count = get_Inv_Count(right)\n    cross_count = count_inversions(arr, left, right)\n    return left_count + right_count + cross_count\n\nfunction count_inversions(arr, left, right):\n    inv_count = 0\n    i = index of left in arr\n    j = index of right in arr\n    temp = new array of size equal to size of arr\n    k = index of temp\n    while i < size of left and j < size of right:\n        if element at i in left is less than element at j in right:\n            temp[k] = element at i in left\n            i = i + 1\n        else:\n            temp[k] = element at j in right\n            j = j + 1\n            inv_count = inv_count + size of left - i\n        k = k + 1\n    while i < size of left:\n        temp[k] = element at i in left\n        i = i + 1\n        k = k + 1\n    while j < size of right:\n        temp[k] = element at j in right\n        j = j + 1\n        k = k + 1\n    copy temp back to arr\n    return inv_count\n"}
{"task_id": "Mbpp/297", "completion": "function flatten_list(list1):\n    result = []\n    for element in list1:\n        if type(element) == list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return resul"}
{"task_id": "Mbpp/297", "completion": "function flatten_list(list1):\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return resul"}
{"task_id": "Mbpp/297", "completion": "\nfunction flatten_list(list1):\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return resul"}
{"task_id": "Mbpp/297", "completion": "\nfunction flatten_list(list1)\n    result = []\n    for element in list1:\n        if is_list(element):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\n"}
{"task_id": "Mbpp/297", "completion": "function flatten_list(list1):\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return resul"}
{"task_id": "Mbpp/297", "completion": "function flatten_list(list1)\n    result = []\n    for element in list1:\n        if type(element) is list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\n"}
{"task_id": "Mbpp/297", "completion": "function flatten_list(list1):\n    result = []\n    for element in list1:\n        if type(element) is list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return resul"}
{"task_id": "Mbpp/297", "completion": ""}
{"task_id": "Mbpp/297", "completion": "function flatten_list(list1):\n    result = []\n    for element in list1:\n        if type(element) is list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\n"}
{"task_id": "Mbpp/297", "completion": "\nfunction flatten_list(list1)\n    result = []\n    stack = [list1]\n    \n    while not empty stack:\n        current_list = pop stack\n        for item in current_list:\n            if is list(item):\n                push(stack, item)\n            else:\n                push(result, item)\n    \n    return result\n"}
{"task_id": "Mbpp/299", "completion": ""}
{"task_id": "Mbpp/299", "completion": "function max_aggregate(stdata):\n    aggregated_data = defaultdict(int)\n    for student, score in stdata:\n        aggregated_data[student] += score\n    return max(aggregated_data.items(), key=lambda x: x[1]"}
{"task_id": "Mbpp/299", "completion": "function max_aggregate(stdata):\n    dict = defaultdict(int)\n    for student, score in stdata:\n        dict[student] += score\n    return max(dict.items(), key=lambda x: x[1]"}
{"task_id": "Mbpp/299", "completion": "\nfunction max_aggregate(stdata):\n    aggregate = defaultdict(int)\n    for student, score in stdata:\n        aggregate[student] += score\n    return max(aggregate.items(), key=lambda x: x[1])\n"}
{"task_id": "Mbpp/299", "completion": "function max_aggregate(stdata):\n    aggregate = defaultdict(int)\n    max_student = None\n    max_agg = 0\n    for student, score in stdata:\n        aggregate[student] += score\n        if aggregate[student] > max_agg:\n            max_agg = aggregate[student]\n            max_student = student\n    return (max_student, max_agg"}
{"task_id": "Mbpp/299", "completion": "\nfunction max_aggregate(stdata):\n    aggregate = defaultdict(int)\n    max_key = None\n    max_value = 0\n    for key, value in stdata:\n        aggregate[key] += value\n        if aggregate[key] > max_value:\n            max_value = aggregate[key]\n            max_key = key\n    return (max_key, max_value"}
{"task_id": "Mbpp/299", "completion": "function max_aggregate(stdata)\n    aggregate = defaultdict(int)\n    max_person, max_score = None, 0\n    for person, score in stdata:\n        aggregate[person] += score\n        if aggregate[person] > max_score:\n            max_person, max_score = person, aggregate[person]\n    return max_person, max_score\n"}
{"task_id": "Mbpp/299", "completion": "data = defaultdict(dict)\nfor student, score in stdata:\n    if student not in data:\n        data[student] = 0\n    data[student] += score\nmax_student = max(data, key=data.get)\nreturn max_student, data[max_student]\n"}
{"task_id": "Mbpp/299", "completion": "max_agg = defaultdict(int)\nfor name, value in stdata:\n    max_agg[name] += value\nreturn max((name, value) for name, value in max_agg.items() if value == max(max_agg.values())"}
{"task_id": "Mbpp/299", "completion": "function max_aggregate(stdata):\n    aggregate = defaultdict(int)\n    max_name = None\n    max_total = 0\n    for name, score in stdata:\n        aggregate[name] += score\n        if aggregate[name] > max_total:\n            max_name = name\n            max_total = aggregate[name]\n    return (max_name, max_total"}
{"task_id": "Mbpp/300", "completion": "function count_binary_seq(n):\n    total = 0\n    for i in range(2^n):\n        bin_i = bin(i)[2:].zfill(2*n)\n        if sum(int(digit) for digit in bin_i[:n]) == sum(int(digit) for digit in bin_i[n:]):\n            total += 1\n    return total\n"}
{"task_id": "Mbpp/300", "completion": "function count_binary_seq(n):\n    if n == 1:\n        return 2.0\n    else:\n        prev_count = count_binary_seq(n-1)\n        return 2*prev_count + 1\n"}
{"task_id": "Mbpp/300", "completion": "\nfunction count_binary_seq(n):\n    if n == 1:\n        return 2\n    else:\n        return (1 << n) * 2 ^ (count_binary_seq(n - 1))\n"}
{"task_id": "Mbpp/300", "completion": "function count_binary_seq(n):\n    total = 0\n    for i in range(2^n):\n        bin_i = bin(i)[2:].zfill(2*n)\n        if sum(int(digit) for digit in bin_i[:n]) == sum(int(digit) for digit in bin_i[n:]):\n            total += 1\n    return total\n"}
{"task_id": "Mbpp/300", "completion": "function count_binary_seq(n):\n    total_count = 0\n    for i in range(1 << n):\n        bin_str = bin(i)[2:].zfill(n)\n        if sum(int(digit) for digit in bin_str[:n]) == sum(int(digit) for digit in bin_str[n:]):\n            total_count += 1\n    return total_count\n"}
{"task_id": "Mbpp/300", "completion": "function count_binary_seq(n):\n    total = 0\n    for i from 0 to 2^n - 1:\n        bin_str = bin(i)[2:].zfill(2*n)\n        first_half_sum = sum(1 for c in bin_str[:n] if c == '1')\n        second_half_sum = sum(1 for c in bin_str[n:] if c == '1')\n        if first_half_sum == second_half_sum:\n            total += 1\n    return total\n"}
{"task_id": "Mbpp/300", "completion": "function count_binary_seq(n):\n    if n == 1:\n        return 2\n    else:\n        total = 0\n        for i in range(2**(n-1)):\n            total += count_binary_seq(n-1)\n        return total\n"}
{"task_id": "Mbpp/300", "completion": "\nfunction count_binary_seq(n):\n    total = 0\n    for i in range(2^n):\n        bin_str = bin(i)[2:].zfill(2*n)\n        if sum(int(digit) for digit in bin_str[:n]) == sum(int(digit) for digit in bin_str[n:]):\n            total += 1\n    return total\n"}
{"task_id": "Mbpp/300", "completion": "function count_binary_seq(n):\n    if n <= 0:\n        return 0\n    else:\n        total_count = 1\n        for i in range(n):\n            total_count *= 2\n        return total_count / (1 << n)\n"}
{"task_id": "Mbpp/300", "completion": "\nfunction count_binary_seq(n):\n    if n == 0:\n        return 1\n    else:\n        half_n = n // 2\n        same_sum_seq_count = 1 + 2 * count_binary_seq(half_n)\n        different_sum_seq_count = count_binary_seq(half_n) + count_binary_seq(half_n - 1)\n        return same_sum_seq_count + different_sum_seq_count\n"}
{"task_id": "Mbpp/301", "completion": ""}
{"task_id": "Mbpp/301", "completion": ""}
{"task_id": "Mbpp/301", "completion": "\nfunction dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(x) for x in d.values())\n    else:\n        return "}
{"task_id": "Mbpp/301", "completion": ""}
{"task_id": "Mbpp/301", "completion": "\nfunction dict_depth(d):\n    if type(d) is dict:\n        max_depth = 0\n        for k, v in d.items():\n            max_depth = max(max_depth, 1 + dict_depth(v))\n        return max_depth\n    else:\n        return "}
{"task_id": "Mbpp/301", "completion": "\nfunction dict_depth(d):\n    max_depth = 0\n    current_depth = 0\n    stack = [(d, current_depth)]\n    while len(stack) > 0:\n        current_dict, current_depth = stack.pop()\n        if isinstance(current_dict, dict):\n            for key in current_dict:\n                stack.append((current_dict[key], current_depth + 1))\n            max_depth = max(max_depth, current_depth + 1)\n    return max_depth\n"}
{"task_id": "Mbpp/301", "completion": "function dict_depth(d):\n    if type(d) is not dict:\n        return 1\n    else:\n        max_depth = 0\n        for k, v in d.items():\n            max_depth = max(max_depth, 1 + dict_depth_aux(v))\n        return max_depth\n"}
{"task_id": "Mbpp/301", "completion": "\nfunction dict_depth(d):\n    if type(d) == dict:\n        return 1 + max(dict_depth(x) for x in d.values())\n    else:\n        return "}
{"task_id": "Mbpp/301", "completion": ""}
{"task_id": "Mbpp/301", "completion": ""}
{"task_id": "Mbpp/305", "completion": "function start_withp(words)\n    result = []\n    for word in words:\n        if re.match(\"^[Pp].*\", word):\n            result.append(word.split()[0])\n    return tuple(result)\n"}
{"task_id": "Mbpp/305", "completion": ""}
{"task_id": "Mbpp/305", "completion": "function start_withp(words):\n    result = []\n    for word in words:\n        if re.match(\"p\\.?\", word):\n            result.append(word.split()[0])\n    return tuple(result)\n"}
{"task_id": "Mbpp/305", "completion": "function start_withp(words):\n    p_words = []\n    for word in words:\n        if re.match('^[pP][^ ]*', word):\n            p_words.append(word.split()[0])\n    return tuple(sorted(p_words))\n"}
{"task_id": "Mbpp/305", "completion": "function start_with_p(words)\n    p_words = []\n    for word in words:\n        if re.match(\"^[Pp].*\", word):\n            p_words.append(word.split()[0])\n    return tuple(p_words[:2])\n"}
{"task_id": "Mbpp/305", "completion": "function start_withp(words):\n    result = []\n    for word in words:\n        if re.match('^p.*', word):\n            result.append(word.split()[0])\n    return tuple(result[:2]"}
{"task_id": "Mbpp/305", "completion": "function start_withp(words):\n    result = []\n    for word in words:\n        if re.match('^[Pp]', word):\n            result.append(word.split()[0])\n    return tuple(result"}
{"task_id": "Mbpp/305", "completion": "function start_withp(words)\n    result = []\n    for word in words:\n        if re.match('^[pP]', word):\n            result.append(word.split()[0])\n    return tuple(result)\n"}
{"task_id": "Mbpp/305", "completion": "function start_withp(words):\n    result = []\n    for word in words:\n        if re.match('^[Pp]', word):\n            result.append(word.split()[0])\n    return tuple(result)\n"}
{"task_id": "Mbpp/305", "completion": "function start_with_p(words)\n    p_words = []\n    for word in words:\n        if re.match('^[pP].*', word):\n            p_words.append(word.split()[0])\n    return tuple(sorted(set(p_words)))\n"}
{"task_id": "Mbpp/306", "completion": "\nbegin\n    let max_sum = 0\n    let current_sum = 0\n    let prev_num = -float('inf')\n\n    for i from 0 to n-1:\n        if a[i] > prev_num:\n            current_sum += a[i]\n            prev_num = a[i]\n            if i == index:\n                break\n        else:\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n            prev_num = a[i]\n\n    current_sum = 0\n    prev_num = -float('inf')\n    for i from index+1 to n-1:\n        if i == k:\n            current_sum += a[i]\n        elif a[i] > prev_num:\n            current_sum += a[i]\n            prev_num = a[i]\n\n    return max(max_sum, current_sum)\n"}
{"task_id": "Mbpp/306", "completion": "function max_sum_increasing_subseq(a, n, i, k):\n    max_sum = 0\n    temp_sum = 0\n    prev_num = a[i]\n    \n    for j from i + 1 to k:\n        if a[j] > prev_num:\n            temp_sum += a[j]\n            prev_num = a[j]\n        else:\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n            temp_sum = 0\n            prev_num = a[j]\n    if temp_sum > max_sum:\n        max_sum = temp_sum\n    return max_sum + a[i]\n"}
{"task_id": "Mbpp/306", "completion": "function max_sum_increasing_subseq(a, n, i, k):\n    dp = [0] * n\n    dp[0] = a[0]\n    for j from 1 to n-1:\n        dp[j] = a[j]\n    for j from i+1 to k:\n        for l from i to j:\n            dp[j] = max(dp[j], dp[l] + a[j])\n    return dp[k]\n"}
{"task_id": "Mbpp/306", "completion": "function max_sum_increasing_subseq(a, n, index, k):\n    max_sum = 0\n    i = 0\n    while i < index:\n        if a[i] <= a[index]:\n            max_sum += a[i]\n        i += 1\n    j = index + 1\n    while j < k:\n        if a[j] > a[index]:\n            max_sum += a[j]\n        j += 1\n    return max_su"}
{"task_id": "Mbpp/306", "completion": "function max_sum_increasing_subseq(a, n, i, k)\n    max_sum = 0\n    max_sum_so_far = 0\n    prev_num = None\n    for j in range(i + 1, min(k, n))\n        if a[j] > prev_num:\n            temp_sum = a[j]\n            if prev_num is not None:\n                temp_sum += a[prev_num]\n            max_sum_so_far = max(max_sum_so_far, temp_sum)\n            max_sum = max(max_sum, temp_sum - a[j])\n            prev_num = j\n        else:\n            prev_num = None\n    return max_sum_so_far + a[k]\n"}
{"task_id": "Mbpp/306", "completion": "begin\n    let max_sum = 0\n    let current_sum = 0\n    let prev_num = -1\n\n    for i from 0 to index:\n        if a[i] < a[k]:\n            if a[i] > prev_num:\n                current_sum += a[i]\n                prev_num = a[i]\n            else:\n                if current_sum + a[i] > max_sum:\n                    max_sum = current_sum + a[i]\n                current_sum = a[i]\n        else:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            current_sum = 0\n            prev_num = -1\n\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    return max_sum\n"}
{"task_id": "Mbpp/306", "completion": "function max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    prev_num = None\n\n    for i from 0 to index:\n        if a[i] < a[index]:\n            current_sum += a[i]\n        else:\n            if prev_num is not None and a[i] > prev_num:\n                current_sum += a[i]\n            else:\n                current_sum = a[i]\n                prev_num = a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    current_sum = 0\n    prev_num = None\n\n    for i from index + 1 to k:\n        if a[i] > prev_num:\n            current_sum += a[i]\n        else:\n            current_sum = a[i]\n            prev_num = a[i]\n        if current_sum + max_sum > max_sum:\n            max_sum = current_sum + max_sum\n\n    return max_su"}
{"task_id": "Mbpp/306", "completion": "\ndata = [1]\nmax_sum = 0\ncurrent_sum = 0\nprevious_num = None\n\nfor i in range(index + 1):\n    if previous_num is not None and a[i] <= previous_num:\n        current_sum = 0\n    data.append(a[i])\n    previous_num = a[i]\n    current_sum += a[i]\n\nif k > index:\n    current_sum += a[k]\n    for j in range(k + 1, n):\n        if a[j] > a[k]:\n            current_sum += a[j]\n            break\n\nreturn max(max_sum, current_sum)\n"}
{"task_id": "Mbpp/306", "completion": "function max_sum_increasing_subseq(a, n, i, k):\n    max_sum = 0\n    current_sum = 0\n    prev_num = -1\n    for j from i to k:\n        if a[j] > prev_num:\n            current_sum += a[j]\n            prev_num = a[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n        else:\n            current_sum = a[j]\n            prev_num = a[j]\n    return max_sum + a[k]\n"}
{"task_id": "Mbpp/306", "completion": "\nfunction max_sum_increasing_subseq(a, n, index, k):\n    max_sum = -inf\n    temp_sum = 0\n    prev_num = a[0]\n    \n    for i from 0 to index:\n        if a[i] < prev_num:\n            temp_sum += a[i]\n        else:\n            temp_sum = a[i]\n        prev_num = a[i]\n        \n    max_sum = max(max_sum, temp_sum)\n    \n    for i from index + 1 to k:\n        if a[i] > a[index]:\n            temp_sum += a[i]\n        else:\n            temp_sum = a[i]\n        max_sum = max(max_sum, temp_sum)\n    \n    return max_sum\n"}
{"task_id": "Mbpp/308", "completion": "\nfunction large_product(nums1, nums2, N):\n    # sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    result = []\n    for i in range(N):\n        result.append(nums1[i] * nums2[i])\n\n    return result\n"}
{"task_id": "Mbpp/308", "completion": "function large_product(nums1, nums2, N):\n    product_list = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = nums1[i] * nums2[j]\n            product_list.append(product)\n    product_list.sort()\n    return product_list[-N:"}
{"task_id": "Mbpp/308", "completion": "function large_product(nums1, nums2, N):\n    # Combine the two lists into a list of pairs\n    pairs = [(num1, num2) for num1 in nums1 for num2 in nums2]\n    \n    # Sort the pairs by product in descending order\n    pairs.sort(key=lambda x: x[0]*x[1], reverse=True)\n    \n    # Return the first N elements of the sorted list\n    return [pair[0]*pair[1] for pair in pairs[:N]"}
{"task_id": "Mbpp/308", "completion": "function large_product(nums1, nums2, N)\n    sort desc nums1\n    sort desc nums2\n    result = []\n    for i from 0 to N-1\n        product = nums1[i] * nums2[i]\n        result.append(product)\n    return result\n"}
{"task_id": "Mbpp/308", "completion": ""}
{"task_id": "Mbpp/308", "completion": "\nfunction large_product(nums1, nums2, N):\n    # Combine elements from both lists into one list of pairs\n    pairs = [[num1, num2] for num1 in nums1 for num2 in nums2]\n\n    # Sort the list of pairs based on the product in descending order\n    pairs.sort(key=lambda x: x[0]*x[1], reverse=True)\n\n    # Return the specified number of largest products\n    return [pair[0]*pair[1] for pair in pairs[:N]]\n"}
{"task_id": "Mbpp/308", "completion": "\nfunction large_product(nums1, nums2, N)\n    sort(nums1 in descending order)\n    sort(nums2 in descending order)\n    result = []\n    for i from 0 to N-1\n        append product of nums1[i] and nums2[i] to result\n    return resul"}
{"task_id": "Mbpp/308", "completion": "function large_product(nums1, nums2, N):\n    product_list = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product_list.append(num1 * num2)\n    return sorted(product_list, reverse=True)[:N"}
{"task_id": "Mbpp/308", "completion": "\nfunction large_product(nums1, nums2, N):\n    # combine two lists into pairs\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append([num1, num2])\n\n    # sort the pairs by their product in descending order\n    pairs.sort(key=lambda x: x[0]*x[1], reverse=True)\n\n    # return the N largest products\n    return [pair[0]*pair[1] for pair in pairs[:N]]\n"}
{"task_id": "Mbpp/308", "completion": "function large_product(nums1, nums2, N):\n    sorted_nums1 = sort(nums1, desc=True)\n    sorted_nums2 = sort(nums2, desc=True)\n    result = []\n    for i in range(N):\n        result.append(sorted_nums1[i] * sorted_nums2[i])\n    return resul"}
{"task_id": "Mbpp/309", "completion": "if a > b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/309", "completion": "\nif a > b then\n   return a\nelse\n   return b\n"}
{"task_id": "Mbpp/309", "completion": "if a > b:\n    return a\nelse:\n    return "}
{"task_id": "Mbpp/309", "completion": "if a >= b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/309", "completion": "if a > b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/309", "completion": "if a >= b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/309", "completion": "\nIF a > b THEN\n   result = a\nELSE\n   result = b\nENDIF\nRETURN result\n"}
{"task_id": "Mbpp/309", "completion": "if a > b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/309", "completion": "if a >= b:\n    return a\nelse:\n    return "}
{"task_id": "Mbpp/309", "completion": "\nif a > b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/310", "completion": "function string_to_tuple(str1)\n    result = ()\n    for char in str1\n        result = (result + (char,))\n    return resul"}
{"task_id": "Mbpp/310", "completion": "\nfunction string_to_tuple(str1)\n    tuple1 = ()\n    for each char in str1:\n        tuple1 = tuple1 + (char,)\n    return tuple1\n"}
{"task_id": "Mbpp/310", "completion": "\nfunction string_to_tuple(str1)\n    tuple1 = []\n    for char in str1:\n        tuple1.append(char)\n    return tuple(tuple1"}
{"task_id": "Mbpp/310", "completion": "function string_to_tuple(str1):\n    result = ()\n    i = 0\n    while i < len(str1):\n        result = result + (str1[i],)\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/310", "completion": "\nfunction string_to_tuple(str1):\n    result = ()\n    for char in str1:\n        result = result + (char,)\n    return result\n"}
{"task_id": "Mbpp/310", "completion": ""}
{"task_id": "Mbpp/310", "completion": "function string_to_tuple(str1)\n    result = ()\n    for char in str1:\n        result = result + (char,)\n    return result\n"}
{"task_id": "Mbpp/310", "completion": "\nfunction string_to_tuple(str1)\n    result = ()\n    for char in str1:\n        result = (result + (char,))\n    return result\n"}
{"task_id": "Mbpp/310", "completion": "function string_to_tuple(str1)\n    tuple1 = ()\n    for char in str1:\n        tuple1 += (char,)\n    return tuple1\n"}
{"task_id": "Mbpp/310", "completion": "function string_to_tuple(str1):\n    result = ()\n    for char in str1:\n        result = result + (char,)\n    return result\n"}
{"task_id": "Mbpp/311", "completion": "\nfunction set_left_most_unset_bit(n):\n    i = 0\n    while (n & (1 << i)) > 0:\n        i += 1\n    n |= 1 << i\n    return n\n"}
{"task_id": "Mbpp/311", "completion": "function set_left_most_unset_bit(n)\n    while n < 2 ** (n.bit_length() - 1):\n        n = n + 1\n    return n\n"}
{"task_id": "Mbpp/311", "completion": "\nfunction set_left_most_unset_bit(n):\n    i = 0\n    while n & (1 << i) == 0:\n        i = i + 1\n    return n | (1 << i)\n"}
{"task_id": "Mbpp/311", "completion": "input_num = n\nwhile (1 << (n.bit_length() - 1)) & input_num != 0:\n    n += 1\nreturn "}
{"task_id": "Mbpp/311", "completion": "function set_left_most_unset_bit(n)\n    while n & n + 1 != n\n        n = n ^ (n + 1)\n    return n + 1\n"}
{"task_id": "Mbpp/311", "completion": "function set_left_most_unset_bit(n):\n    while n & (n - 1) != 0:\n        n -= 1\n    return n + "}
{"task_id": "Mbpp/311", "completion": "function set_left_most_unset_bit(n):\n    # convert integer to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # find the index of the first '0'\n    index = next(i for i, bit in enumerate(reversed(binary)) if bit == '0')\n    \n    # add 1 to the index because we want the leftmost unset bit, not the rightmost\n    index += 1\n    \n    # convert the binary string back to an integer and add the value at the calculated index\n    return int('1' + '0' * (len(binary) - 1 - index) + '1' + '0' * index, 2)\n"}
{"task_id": "Mbpp/311", "completion": "input_num = n\nif input_num == 0:\n    return 1\nelse:\n    while (input_num & -input_num) != input_num:\n        input_num = input_num ^ (input_num & -input_num)\n    return input_num + "}
{"task_id": "Mbpp/311", "completion": "input = n\nwhile (n & -n) != 0:\n    n = n + 1\noutput = n\n"}
{"task_id": "Mbpp/311", "completion": "input_num = n\nmask = -1\nwhile (input_num & mask) != 0:\n    mask = mask >> 1\nif mask == 0:\n    return n\nreturn n | mas"}
{"task_id": "Mbpp/312", "completion": ""}
{"task_id": "Mbpp/312", "completion": ""}
{"task_id": "Mbpp/312", "completion": ""}
{"task_id": "Mbpp/312", "completion": "\nfunction volume_cone(r, h)\n    pi = 3.14159265359\n    return (1/3) * pi * r^2 * h\n"}
{"task_id": "Mbpp/312", "completion": "\nfunction volume_cone(r, h):\n    pi = 3.14159265359\n    return (1/3) * pi * r^2 * "}
{"task_id": "Mbpp/312", "completion": ""}
{"task_id": "Mbpp/312", "completion": "\nfunction volume_cone(r,h):\n    pi = 3.14159\n    volume = (1/3) * pi * r^2 * h\n    return volum"}
{"task_id": "Mbpp/312", "completion": "`function volume_cone(r,h):\n    pi = 3.14159\n    volume = (1/3) * pi * r^2 * h\n    return volume"}
{"task_id": "Mbpp/312", "completion": "\nfunction volume_cone(r, h):\n    pi = 3.14159\n    volume = (1/3) * pi * r^2 * h\n    return volume\n"}
{"task_id": "Mbpp/312", "completion": ""}
{"task_id": "Mbpp/388", "completion": ""}
{"task_id": "Mbpp/388", "completion": "function highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        if (1 << i) > n:\n            return (1 << (i - 1))\n        i = i + 1\n"}
{"task_id": "Mbpp/388", "completion": "function highest_power_of_2(n)\n    i = 1\n    while i <= n\n        if i * 2 > n\n            return i - 1\n        i = i * 2\n    end while\nend functio"}
{"task_id": "Mbpp/388", "completion": "\nfunction highest_Power_of_2(n)\n    i = 1\n    while (i * 2 <= n)\n        i = i * 2\n    return i - 1\n"}
{"task_id": "Mbpp/388", "completion": "input: n\nwhile n > 1:\n    n = n / 2\nresult = n\nreturn result\n"}
{"task_id": "Mbpp/388", "completion": "function highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i = i * 2\n    return i / "}
{"task_id": "Mbpp/388", "completion": "highest_power = 1\nwhile highest_power * 2 <= n:\n    highest_power *= 2\nreturn highest_powe"}
{"task_id": "Mbpp/388", "completion": "\nfunction highest_Power_of_2(n):\n    i = 1\n    while (i * 2 <= n):\n        i = i * 2\n    return i / "}
{"task_id": "Mbpp/388", "completion": "function highest_Power_of_2(n)\n    power := 1\n    while power <= n\n        if power * 2 > n\n            return power\n        power *= 2\n    end while\nend function\n"}
{"task_id": "Mbpp/388", "completion": "function highest_Power_of_2(n)\n    i = 1\n    while i <= n\n        if (n / i) * i == i\n            return i\n        i = i * 2\n    end while\nend functio"}
{"task_id": "Mbpp/389", "completion": "function find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        p = 2\n        q = 1\n        for i from 3 to n:\n            temp = p + q\n            p = q\n            q = temp\n        return "}
{"task_id": "Mbpp/389", "completion": "function find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "Mbpp/389", "completion": "function find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "Mbpp/389", "completion": "function find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return "}
{"task_id": "Mbpp/389", "completion": "function find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return "}
{"task_id": "Mbpp/389", "completion": "function find_lucas(n)\n    if n == 1 then\n        return 2\n    elif n == 2 then\n        return 1\n    else\n        a, b = 2, 1\n        for i from 3 to n\n            temp = a + b\n            a = b\n            b = temp\n        end if\n        return b\n"}
{"task_id": "Mbpp/389", "completion": "function find_lucas(n)\n    if n == 1 then\n        return 2\n    elif n == 2 then\n        return 1\n    else\n        a, b = 2, 1\n        for i from 3 to n\n            a, b = b, a + b\n        return b\n"}
{"task_id": "Mbpp/389", "completion": "function find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return "}
{"task_id": "Mbpp/389", "completion": "\nfunction find_lucas(n)\n    if n == 1 then\n        return 2\n    elif n == 2 then\n        return 1\n    else\n        a, b = 2, 1\n        for i from 3 to n\n            c = a + b\n            a, b = b, c\n        return c\n    end if\nend functio"}
{"task_id": "Mbpp/389", "completion": "function find_lucas(n):\n    if n <= 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        a, b = 2, 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return "}
{"task_id": "Mbpp/390", "completion": "\nfunction add_string(list_, string):\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return resul"}
{"task_id": "Mbpp/390", "completion": "function add_string(list_, string):\n    result = []\n    for i, item in enumerate(list_):\n        new_string = string.replace('{0}', str(item))\n        result.append(new_string)\n    return resul"}
{"task_id": "Mbpp/390", "completion": "function add_string(list_, string):\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result\n"}
{"task_id": "Mbpp/390", "completion": "function add_string(list_, string):\n    result = []\n    for i, element in enumerate(list_):\n        new_str = string.replace('{0}', str(element))\n        result.append(new_str)\n    return resul"}
{"task_id": "Mbpp/390", "completion": ""}
{"task_id": "Mbpp/390", "completion": "function add_string(list_, string):\n    result = []\n    for element in list_:\n        formatted_string = string.replace('{0}', str(element))\n        result.append(formatted_string)\n    return resul"}
{"task_id": "Mbpp/390", "completion": "function add_string(list_, string):\n    result = []\n    for i in range(0, len(list_)):\n        result.append(string.format(list_[i]))\n    return result\n"}
{"task_id": "Mbpp/390", "completion": "\nfunction add_string(list_, string)\n    result = []\n    for each element in list_\n        formatted_string = string.replace('{0}', str(element))\n        result.append(formatted_string)\n    return result\n"}
{"task_id": "Mbpp/390", "completion": "function add_string(list_, string):\n    result = []\n    for i in range(len(list_)):\n        formatted_string = string.format(str(list_[i]))\n        result.append(formatted_string)\n    return resul"}
{"task_id": "Mbpp/390", "completion": "FUNCTION add_string(list_, string)\n    result = EMPTY LIST\n    FOR each item IN list_\n        result ADD string.replace('{0}', str(item))\n    RETURN resul"}
{"task_id": "Mbpp/391", "completion": "function convert_list_dictionary(l1, l2, l3)\n    result = []\n    for i in range(len(l1)):\n        dict1 = {}\n        dict1[l1[i]] = {l2[i]: l3[i]}\n        result.append(dict1)\n    return result\n"}
{"task_id": "Mbpp/391", "completion": "data = []\nfor i in range(min(len(l1), len(l2), len(l3))):\n    data.append({l1[i]: {l2[i]: l3[i]}})\nreturn data\n"}
{"task_id": "Mbpp/391", "completion": "function convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        d = {}\n        d[l1[i]] = {l2[i]: l3[i]}\n        result.append(d)\n    return resul"}
{"task_id": "Mbpp/391", "completion": "\nfunction convert_list_dictionary(l1, l2, l3)\n    result = []\n    for i in range(0, len(l1)):\n        dict1 = {l1[i]: {}}\n        dict1[l1[i]][l2[i]] = l3[i]\n        result.append(dict1)\n    return resul"}
{"task_id": "Mbpp/391", "completion": ""}
{"task_id": "Mbpp/391", "completion": "function convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        dictionary = {}\n        dictionary[l1[i]] = {l2[i]: l3[i]}\n        result.append(dictionary)\n    return result\n"}
{"task_id": "Mbpp/391", "completion": "function convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        temp_dict = {}\n        temp_dict[l1[i]] = {l2[i]: l3[i]}\n        result.append(temp_dict)\n    return resul"}
{"task_id": "Mbpp/391", "completion": "function convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        temp_dict = {}\n        temp_dict[l1[i]] = {l2[i]: l3[i]}\n        result.append(temp_dict)\n    return result\n"}
{"task_id": "Mbpp/391", "completion": ""}
{"task_id": "Mbpp/391", "completion": "function convert_list_dictionary(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        temp_dict = {}\n        temp_dict[l1[i]] = {l2[i]: l3[i]}\n        result.append(temp_dict)\n    return result\n"}
{"task_id": "Mbpp/392", "completion": "\nfunction get_max_sum(n):\n    if n <= 10:\n        return n\n    else:\n        min_sum = float('inf')\n        for i in range(2, n+1):\n            temp_sum = 0\n            for j in range(i, 0, -1):\n                if n % j == 0:\n                    temp_sum += get_max_sum(n // j)\n                    break\n            temp_sum += n\n            min_sum = min(min_sum, temp_sum)\n        return min_sum\n"}
{"task_id": "Mbpp/392", "completion": "function get_max_sum(n):\n    if n <= 2:\n        return n\n    else:\n        values = [0] * (n + 1)\n        values[1] = 1\n        values[2] = 2\n        for i in range(3, n + 1):\n            values[i] = max(values[i-1], max((values[j] for j in [(i//k for k in [2,3,4,5] if i % k == 0)]), default=1))\n        return values[n]\n"}
{"task_id": "Mbpp/392", "completion": "function get_max_sum(n):\n    if n <= 1:\n        return n\n    max_sum = 0\n    for i in range(2, n + 1):\n        if i % 2 == 0 and i % 3 == 0 and i % 4 == 0 and i % 5 == 0:\n            sum_val = get_max_sum(i / 2) + get_max_sum(i / 3) + get_max_sum(i / 4) + get_max_sum(i / 5)\n        elif i % 2 == 0 or i % 3 == 0 or i % 4 == 0 or i % 5 == 0:\n            sum_val = get_max_sum(i / 2) + get_max_sum(i / 3) + get_max_sum(i / 4)\n        else:\n            sum_val = get_max_sum(i - 1)\n        if sum_val > max_sum:\n            max_sum = sum_val\n    return max_su"}
{"task_id": "Mbpp/392", "completion": ""}
{"task_id": "Mbpp/392", "completion": "function get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        max_sum = 0\n        for i in range(2, 6):\n            if n % i == 0:\n                recursive_sum = get_max_sum(n // i)\n                max_sum = max(max_sum, recursive_sum + n)\n        return max_sum\n"}
{"task_id": "Mbpp/392", "completion": "function get_max_sum(n)\n    if n <= 1:\n        return n\n    else:\n        max_sum = float('-inf')\n        for i in range(2, min(5, n+1)):\n            for j in range(i, n//i+1):\n                max_sum = max(max_sum, get_max_sum(j) * i)\n        return max_sum\n"}
{"task_id": "Mbpp/392", "completion": "\nfunction get_max_sum(n)\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    for i from 2 to n\n        dp[i] = n\n        for j from 2 to 5\n            if j <= i\n                dp[i] = max(dp[i], dp[i // j] + n)\n    return dp[n]\n"}
{"task_id": "Mbpp/392", "completion": "\nfunction get_max_sum(n):\n    memo = [0] * (n + 1)\n    memo[0] = 0\n    for i in range(1, n + 1):\n        if i <= 4:\n            memo[i] = i\n        else:\n            max_sum = 0\n            for j in [2, 3, 4]:\n                if i % j == 0:\n                    max_sum = max(max_sum, memo[int(i / j)] + i)\n            memo[i] = max(max_sum, i)\n    return memo[n]\n"}
{"task_id": "Mbpp/392", "completion": "function get_max_sum(n)\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    for i from 1 to n\n        dp[i] = n\n        for j from 2 to 5\n            if j * i <= n\n                dp[i] = max(dp[i], get_max_sum(i / j) + dp[i - i / j])\n        return dp[n]\n"}
{"task_id": "Mbpp/392", "completion": "function get_max_sum(n):\n    if n <= 15:\n        return n\n    else:\n        min_value = float('inf')\n        for i in range(2, 6):\n            if i * (i+1) > n:\n                break\n            value = get_max_sum(int(n / i)) + n\n            min_value = min(min_value, value)\n        return min_valu"}
{"task_id": "Mbpp/394", "completion": "\nfunction check_distinct(test_tup):\n    seen = {}\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen[element] = True\n    return True\n"}
{"task_id": "Mbpp/394", "completion": ""}
{"task_id": "Mbpp/394", "completion": "function check_distinct(test_tup):\n    seen = {}\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen[item] = True\n    return True\n"}
{"task_id": "Mbpp/394", "completion": "function check_distinct(test_tup):\n    seen = set()\n    for element in test_tup:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True\n"}
{"task_id": "Mbpp/394", "completion": "\nfunction check_distinct(test_tup):\n    if len(test_tup) != len(set(test_tup)):\n        return False\n    else:\n        return True\n"}
{"task_id": "Mbpp/394", "completion": "\nFunction check_distinct(test_tup):\n    distinct_set = {}\n    for element in test_tup:\n        if element in distinct_set:\n            return False\n        else:\n            distinct_set.add(element)\n    return True\n"}
{"task_id": "Mbpp/394", "completion": ""}
{"task_id": "Mbpp/394", "completion": "DATA distinct_count = 0\nDATA seen = {}\nFOR each element IN test_tup\n    IF element NOT IN seen\n        ADD element TO seen\n        INCREMENT distinct_count BY 1\n    ELSE\n        RETURN FALSE\nRETURN TRUE\n"}
{"task_id": "Mbpp/394", "completion": "\nfunction check_distinct(test_tup):\n    if len(test_tup) != len(set(test_tup)):\n        return False\n    else:\n        return Tru"}
{"task_id": "Mbpp/394", "completion": "function check_distinct(test_tup):\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True\n"}
{"task_id": "Mbpp/395", "completion": "function first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for i in range(len(str1)):\n        if char_count[str1[i]] == 1:\n            return str1[i]\n\n    return Non"}
{"task_id": "Mbpp/395", "completion": "function find_first_non_repeating_character(str1):\n    char_frequency = {}\n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    for i in range(len(str1)):\n        if char_frequency[str1[i]] == 1:\n            return str1[i]\n    return None\n"}
{"task_id": "Mbpp/395", "completion": ""}
{"task_id": "Mbpp/395", "completion": "\nfunction first_non_repeating_character(str1):\n    char_count = {}\n    for each character in str1:\n        if character in char_count:\n            char_count[character] += 1\n        else:\n            char_count[character] = 1\n    for each character in str1:\n        if char_count[character] == 1:\n            return character\n    return Non"}
{"task_id": "Mbpp/395", "completion": "function first_non_repeating_character(str1):\n    char_frequency = {}\n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n\n    for char in str1:\n        if char_frequency[char] == 1:\n            return char\n\n    return Non"}
{"task_id": "Mbpp/395", "completion": "\nfunction first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"}
{"task_id": "Mbpp/395", "completion": ""}
{"task_id": "Mbpp/395", "completion": "\nfunction firstNonRepeatingCharacter(str1):\n    char_frequency = {}\n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    for i in range(len(str1)):\n        if char_frequency[str1[i]] == 1:\n            return str1[i]\n    return None\n"}
{"task_id": "Mbpp/395", "completion": "function first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return Non"}
{"task_id": "Mbpp/395", "completion": "\nfunction findFirstNonRepeatingCharacter(s):\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    \n    for char in s:\n        if frequency[char] == 1:\n            return char\n    \n    return None\n"}
{"task_id": "Mbpp/396", "completion": "\nfunction check_char(string)\n    char = string[0]\n    if string[len(string) - 1] == char then\n        return \"Valid\"\n    else\n        return \"Not valid\"\n"}
{"task_id": "Mbpp/396", "completion": "\nfunction check_char(input_string)\n    if len(input_string) < 1:\n        return \"Invalid\"\n    elif input_string[0] == input_string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid"}
{"task_id": "Mbpp/396", "completion": "\nfunction check_char(string)\n    if leftmost_char(string) == rightmost_char(string)\n        return \"Valid\"\n    else\n        return \"Invalid\"\n    end if\nend function\n\nfunction leftmost_char(str)\n    return str[0]\nend function\n\nfunction rightmost_char(str)\n    return str[-1]\nend functio"}
{"task_id": "Mbpp/396", "completion": "function check_char(string):\n  if string[0] == string[-1]:\n    return \"Valid\"\n  else:\n    return \"Invalid"}
{"task_id": "Mbpp/396", "completion": ""}
{"task_id": "Mbpp/396", "completion": "\nfunction check_char(string):\n    if string[0] == string[-1]:\n        return \"Valid\"\n    else:\n        return \"Not Valid\"\n"}
{"task_id": "Mbpp/396", "completion": "function check_char(input_string):\n    if len(input_string) < 1:\n        return \"Invalid input\"\n    if input_string[0] == input_string[-1]:\n        return \"Valid\"\n    else:\n        return \"Invalid"}
{"task_id": "Mbpp/396", "completion": ""}
{"task_id": "Mbpp/396", "completion": "\nfunction check_char(string):\n    if len(string) > 0:\n        first_char = string[0]\n        last_char = string[-1]\n        if first_char == last_char:\n            return \"Valid\"\n        else:\n            return \"Invalid\"\n    else:\n        return \"Invalid"}
{"task_id": "Mbpp/396", "completion": ""}
{"task_id": "Mbpp/397", "completion": "if a <= b <= c:\n    if c - b > b - a:\n        return b\n    else:\n        return (b + a) / 2.0\nelif b <= c <= a:\n    if a - c > c - b:\n        return c\n    else:\n        return (c + b) / 2.0\nelse:\n    if a - b > b - c:\n        return b\n    else:\n        return (a + c) / 2."}
{"task_id": "Mbpp/397", "completion": "IF a <= b <= c OR c <= b <= a THEN\n    IF b <= (a+c)/2 THEN\n        RETURN b\n    ELSE\n        RETURN (a+c)/2\n    END IF\nELSE IF a <= c <= b THEN\n    IF a <= (c+b)/2 THEN\n        RETURN a\n    ELSE\n        RETURN (c+b)/2\n    END IF\nELSE\n    IF c <= (a+b)/2 THEN\n        RETURN c\n    ELSE\n        RETURN (a+b)/2\n    END IF\nEND IF\n"}
{"task_id": "Mbpp/397", "completion": ""}
{"task_id": "Mbpp/397", "completion": "function median_numbers(a, b, c):\n    if a <= b <= c or c <= b <= a:\n        return b\n    elif b <= a <= c or c <= a <= b:\n        return a\n    else:\n        return c\n"}
{"task_id": "Mbpp/397", "completion": "ALGORITHM median_numbers(a, b, c)\n   IF a <= b <= c THEN\n      RETURN b\n   ELSE IF a <= c <= b THEN\n      RETURN c\n   ELSE IF c <= a <= b THEN\n      RETURN a\n   ELSE IF b <= a <= c THEN\n      RETURN a\n   ELSE IF b <= c <= a THEN\n      RETURN b\n   ELSE \n      RETURN c\n"}
{"task_id": "Mbpp/397", "completion": ""}
{"task_id": "Mbpp/397", "completion": "FUNCTION median_numbers(a, b, c)\n    sort a, b, c in ascending order\n    IF a <= b <= c OR c <= b <= a\n        THEN return b\n    ELSE IF a <= c <= b\n        THEN return (a + b) / 2.0\n    ELSE\n        return (b + c) / 2.0\n"}
{"task_id": "Mbpp/397", "completion": "input1 = a\ninput2 = b\ninput3 = c\n\nsorted_input = sort(input1, input2, input3)\n\nif (input1 == sorted_input[1]) then\n    return input1\nelse if (input2 == sorted_input[1]) then\n    return input2\nelse\n    return input3\n"}
{"task_id": "Mbpp/397", "completion": "\nFUNCTION median_numbers(a, b, c)\n    IF a <= b AND b <= c THEN\n        RETURN (b)\n    ELSE IF a <= c AND c <= b THEN\n        RETURN (c)\n    ELSE\n        RETURN (b)\nEND FUNCTION\n"}
{"task_id": "Mbpp/397", "completion": "function median_numbers(a, b, c)\n    sort a, b, c\n    if a <= b and b <= c then\n        return (b)\n    elif a <= c and c <= b then\n        return (c)\n    else\n        return (b)\n"}
{"task_id": "Mbpp/398", "completion": "function sum_of_digits(nums):\n    sum_total = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum_total += digit_sum\n    return sum_tota"}
{"task_id": "Mbpp/398", "completion": "function sum_of_digits(nums):\n  result = 0\n  for num in nums:\n    temp = num\n    while temp > 0:\n      digit = temp mod 10\n      result = result + digit\n      temp = temp floor div 10\n  return result\n"}
{"task_id": "Mbpp/398", "completion": "function sum_of_digits(nums):\n    sum = 0\n    for num in nums:\n        temp_sum = 0\n        while num > 0:\n            digit = num % 10\n            temp_sum = temp_sum + digit\n            num = int(num / 10)\n        sum = sum + temp_sum\n    return sum\n"}
{"task_id": "Mbpp/398", "completion": "function sum_of_digits(list_of_numbers)\n    result = 0\n    for each num in list_of_numbers\n        sum_of_num = 0\n        while num > 0\n            remainder = num mod 10\n            sum_of_num = sum_of_num + remainder\n            num = num div 10\n        result = result + sum_of_num\n    return resul"}
{"task_id": "Mbpp/398", "completion": "function sum_of_digits(nums):\n    result = 0\n    for num in nums:\n        while num > 0:\n            digit = num mod 10\n            result = result + digit\n            num = num // 10\n    return resul"}
{"task_id": "Mbpp/398", "completion": "function sum_of_digits(nums)\n    sum=0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp = temp + (num % 10)\n            num = int(num / 10)\n        sum = sum + temp\n    return sum\n"}
{"task_id": "Mbpp/398", "completion": "\nfunction sum_of_digits(nums):\n    result = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num = num // 10\n        result += digit_sum\n    return result\n"}
{"task_id": "Mbpp/398", "completion": "\nfunction sum_of_digits(nums)\n    result = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            digit = num mod 10\n            temp = temp + digit\n            num = num / 10\n        result = result + temp\n    return resul"}
{"task_id": "Mbpp/398", "completion": "\nfunction sum_of_digits(nums)\n    sum_total = 0\n    for num in nums\n        digit_sum = 0\n        while num > 0\n            digit_sum = digit_sum + (num % 10)\n            num = num / 10\n        sum_total = sum_total + digit_sum\n    return sum_total\n"}
{"task_id": "Mbpp/398", "completion": "function sum_of_digits(nums)\n    for each num in nums\n        sum = 0\n        while num > 0\n            digit = num mod 10\n            sum = sum + digit\n            num = num div 10\n        output sum\n    end for\n"}
{"task_id": "Mbpp/400", "completion": "\nfunction extract_freq(test_list):\n    freq = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in freq:\n            freq[sorted_item] += 1\n        else:\n            freq[sorted_item] = 1\n    return len(freq"}
{"task_id": "Mbpp/400", "completion": "`function extract_freq(test_list)\n    frequency_dict = {}\n    for tuple in test_list:\n        if tuple in frequency_dict:\n            frequency_dict[tuple] += 1\n        else:\n            frequency_dict[tuple] = 1\n    return len(frequency_dict)"}
{"task_id": "Mbpp/400", "completion": "function extract_freq(list)\n    seen = {}\n    unique_count = 0\n    for tuple in list:\n        if tuple in seen:\n            seen[tuple] += 1\n        else:\n            seen[tuple] = 1\n            unique_count += 1\n    return unique_count\n"}
{"task_id": "Mbpp/400", "completion": "\nfunction extract_freq(test_list):\n    frequency = {}\n    for tuple in test_list:\n        if tuple in frequency:\n            frequency[tuple] += 1\n        else:\n            frequency[tuple] = 1\n    return len(frequency"}
{"task_id": "Mbpp/400", "completion": "function extract_freq(test_list):\n    seen = set()\n    freq = set()\n    for item in test_list:\n        if str(item) not in seen:\n            seen.add(str(item))\n            freq.add(1)\n        else:\n            i = freq[list(freq).index(str(item))]\n            i += 1\n            freq.remove(str(item))\n            freq.add(str(item))\n    return len(freq"}
{"task_id": "Mbpp/400", "completion": "function extract_freq(test_list):\n    freq_map = {}\n    for tuple in test_list:\n        if tuple not in freq_map:\n            freq_map[tuple] = 0\n        freq_map[tuple] += 1\n    return len(freq_map"}
{"task_id": "Mbpp/400", "completion": "function extract_freq(test_list):\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    return len(unique_tuples"}
{"task_id": "Mbpp/400", "completion": "function extract_freq(input_list):\n    freq_dict = {}\n    for tuple in input_list:\n        if tuple in freq_dict:\n            freq_dict[tuple] += 1\n        else:\n            freq_dict[tuple] = 1\n    return len(freq_dict"}
{"task_id": "Mbpp/400", "completion": "function extract_freq(input_list):\n    seen = set()\n    count = 0\n    for t in input_list:\n        t_sorted = tuple(sorted(t))\n        if t_sorted not in seen:\n            seen.add(t_sorted)\n            count += 1\n    return coun"}
{"task_id": "Mbpp/400", "completion": "function extract_freq(input_list):\n    tuple_set = set()\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            tuple_to_check = tuple(sorted([input_list[i][0], input_list[i][1]]))\n            tuple_to_check2 = tuple(sorted([input_list[j][0], input_list[j][1]]))\n            if tuple_to_check == tuple_to_check2:\n                break\n        else:\n            tuple_set.add(tuple_to_check)\n    return len(tuple_set"}
{"task_id": "Mbpp/404", "completion": "if a <= b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/404", "completion": "if a <= b then\n    return a\nelse\n    return "}
{"task_id": "Mbpp/404", "completion": "if a <= b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/404", "completion": "IF a <= b THEN\n    RETURN a\nELSE\n    RETURN b\nENDI"}
{"task_id": "Mbpp/404", "completion": "if a <= b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/404", "completion": "if a <= b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/404", "completion": "if a <= b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/404", "completion": "if a <= b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/404", "completion": "if a <= b then\n    return a\nelse\n    return b\n"}
{"task_id": "Mbpp/404", "completion": "if a <= b:\n  result = a\nelse:\n  result = b\nreturn resul"}
{"task_id": "Mbpp/405", "completion": "\nfunction check_tuplex(tuplex, element)\n    for each item in tuplex:\n        if item == element:\n            return True\n    return False\n"}
{"task_id": "Mbpp/405", "completion": ""}
{"task_id": "Mbpp/405", "completion": "\nif element in tuplex:\n    return True\nelse:\n    return Fals"}
{"task_id": "Mbpp/405", "completion": ""}
{"task_id": "Mbpp/405", "completion": "if element in tuplex:\n    return True\nelse:\n    return False\n"}
{"task_id": "Mbpp/405", "completion": "\nfunction check_tuplex(tuplex, element)\n    for each item in tuplex:\n        if item == element:\n            return true\n    return false\n"}
{"task_id": "Mbpp/405", "completion": "if element in tuplex:\n    return True\nelse:\n    return Fals"}
{"task_id": "Mbpp/405", "completion": "if element in tuplex:\n    return True\nelse:\n    return Fals"}
{"task_id": "Mbpp/405", "completion": "\nfunction check_tuplex(tuplex, element)\n    for each item in tuplex:\n        if item == element:\n            return True\n    return False\n"}
{"task_id": "Mbpp/405", "completion": "\nif (tuplex) contains element then\n    return True\nelse\n    return False\n"}
{"task_id": "Mbpp/406", "completion": ""}
{"task_id": "Mbpp/406", "completion": "function find_Parity(x)\n    if x mod 2 equals 0 then\n        return False\n    else\n        return True\n"}
{"task_id": "Mbpp/406", "completion": ""}
{"task_id": "Mbpp/406", "completion": ""}
{"task_id": "Mbpp/406", "completion": ""}
{"task_id": "Mbpp/406", "completion": ""}
{"task_id": "Mbpp/406", "completion": "\nfunction find_Parity(x):\n    if x mod 2 = 0:\n        return False\n    else:\n        return True\n"}
{"task_id": "Mbpp/406", "completion": "\nfunction find_Parity(x)\n    if x mod 2 equals 0 then\n        return False\n    else\n        return True\n"}
{"task_id": "Mbpp/406", "completion": ""}
{"task_id": "Mbpp/406", "completion": "\nfunction find_Parity(x)\n    if (x mod 2) is 0 then\n        return False\n    else\n        return True\nend functio"}
{"task_id": "Mbpp/407", "completion": "function rearrange_bigger(n):\n    n_str = str(n)\n    n_str_sorted = sorted(n_str, reverse=True)\n    for i in range(len(n_str)):\n        if n_str[i] < n_str_sorted[0]:\n            return int(''.join(n_str_sorted) + ''.join(n_str[i+1:]))\n    return -1\n"}
{"task_id": "Mbpp/407", "completion": "function rearrange_bigger(n):\n    n = str(n)\n    n_list = list(n)\n    max_idx = 0\n    for i in range(len(n_list)):\n        if int(n_list[i]) > int(n_list[max_idx]):\n            max_idx = i\n    temp = n_list[0]\n    n_list[0] = n_list[max_idx]\n    n_list[max_idx] = temp\n    return int(''.join(n_list)"}
{"task_id": "Mbpp/407", "completion": "function rearrange_bigger(n):\n    n_str = str(n)\n    n_str_list = list(n_str)\n    max_idx = 0\n    max_digit = int(n_str[0])\n    for i in range(len(n_str)):\n        if int(n_str[i]) > max_digit:\n            max_idx = i\n            max_digit = int(n_str[i])\n    if max_idx != 0:\n        n_str_list[0], n_str_list[max_idx] = n_str_list[max_idx], n_str_list[0]\n    return int(''.join(n_str_list)"}
{"task_id": "Mbpp/407", "completion": "function rearrange_bigger(n):\n    digits = []\n    temp = n\n    while temp > 0:\n        digits.append(temp % 10)\n        temp = int(temp / 10)\n    digits.sort(reverse=True)\n    for i in range(len(digits)):\n        if digits[i] < digits[i-1]:\n            min_index = i\n            for j in range(i+1, len(digits)):\n                if digits[j] < digits[min_index]:\n                    min_index = j\n            digits[i], digits[min_index] = digits[min_index], digits[i]\n            break\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n    return resul"}
{"task_id": "Mbpp/407", "completion": "function rearrange_bigger(n):\n    n_str = str(n)\n    n_str_len = len(n_str)\n    max_num = int(''.join(sorted(n_str, reverse=True)))\n    if n == max_num:\n        return -1\n    for i in range(n_str_len):\n        for j in range(i+1, n_str_len):\n            temp = list(n_str)\n            temp[i], temp[j] = temp[j], temp[i]\n            temp_str = ''.join(temp)\n            if int(temp_str) > n and int(temp_str) < max_num:\n                return int(temp_str)\n    return -"}
{"task_id": "Mbpp/407", "completion": "function rearrange_bigger(n):\n    str_n = str(n)\n    if len(set(str_n)) == 1:\n        return -1\n    max_digit = max(int(digit) for digit in str_n)\n    index_max_digit = str_n.index(str(max_digit))\n    for i in range(len(str_n)):\n        if str_n[i] != str(max_digit) and str_n[i] > str_max_digit:\n            temp = list(str_n)\n            temp[index_max_digit], temp[i] = temp[i], temp[index_max_digit]\n            return int(\"\".join(temp))\n    temp = list(str_n)\n    temp[index_max_digit], temp[0] = temp[0], temp[index_max_digit]\n    return int(\"\".join(temp)"}
{"task_id": "Mbpp/407", "completion": "function rearrange_bigger(n):\n    str_n = str(n)\n    sorted_str_n = sorted(str_n, reverse=True)\n    for i in range(len(sorted_str_n)):\n        if sorted_str_n[i] < str_n[0]:\n            return int(''.join(sorted_str_n[:i] + [str_n[0]] + sorted_str_n[i:]))\n    return "}
{"task_id": "Mbpp/407", "completion": "function rearrange_bigger(n):\n    str_n = convert n to string\n    digits = sort the characters of str_n in descending order\n    if first digit of str_n is greater than the second digit:\n        return the sorted digits\n    else:\n        return -1\n"}
{"task_id": "Mbpp/407", "completion": "\nfunction rearrange_bigger(n):\n    n = str(n)\n    n = sorted(n, reverse=True)\n    for i in range(len(n)-1):\n        if n[i] < n[i+1]:\n            break\n    else:\n        return -1\n    k = n.index(str(i+1))\n    n[k], n[-1] = n[-1], n[k]\n    return int(''.join(n)"}
{"task_id": "Mbpp/407", "completion": "\nfunction rearrange_bigger(n):\n    num_str = str(n)\n    num_list = list(num_str)\n    max_num = 0\n    for i in range(len(num_list)-1):\n        if num_list[i] < num_list[i+1]:\n            return int(''.join(sorted(num_list, reverse=True)))\n    for i in range(len(num_list)-1):\n        if num_list[i] < num_list[i+1]:\n            min_num = float('inf')\n            for j in range(i+1, len(num_list)):\n                if num_list[j] > num_list[i] and num_list[j] < min_num:\n                    min_num = num_list[j]\n            temp = num_list[i]\n            num_list[i] = min_num\n            num_list[num_list.index(temp)] = temp\n            return int(''.join(num_list))\n    return "}
{"task_id": "Mbpp/409", "completion": "function min_product_tuple(list1):\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n"}
{"task_id": "Mbpp/409", "completion": "function min_product_tuple(list1):\n    min_product = float('inf')\n    for tuple1 in list1:\n        for tuple2 in list1:\n            if tuple1 != tuple2:\n                product = tuple1[0] * tuple2[0]\n                if product < min_product:\n                    min_product = product\n    return min_product\n"}
{"task_id": "Mbpp/409", "completion": "function min_product_tuple(list1):\n    min_product = float('inf')\n    for t in list1:\n        for pair in [(t[0], x) for x in list1 if x != t]:\n            product = t[1] * pair[1]\n            if product < min_product:\n                min_product = product\n    return min_produc"}
{"task_id": "Mbpp/409", "completion": "\nfunction min_product_tuple(list1):\n    min_product = float('inf')\n    for tuple1 in list1:\n        for tuple2 in list1:\n            if tuple1 != tuple2:\n                product = tuple1[0] * tuple2[0]\n                min_product = min(min_product, product)\n    return min_product\n"}
{"task_id": "Mbpp/409", "completion": "function min_product_tuple(list1)\n    min_product = INF\n    for each tuple t in list1:\n        if t[0]*t[1] < min_product:\n            min_product = t[0]*t[1]\n    return min_product\n"}
{"task_id": "Mbpp/409", "completion": "function min_product_tuple(list1):\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n"}
{"task_id": "Mbpp/409", "completion": "function min_product_tuple(list1):\n    min_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_produc"}
{"task_id": "Mbpp/409", "completion": "MIN_PRODUCT = float('inf')\nresult = []\nfor i in range(len(list1)):\n    for j in range(i+1, len(list1)):\n        product = list1[i][0]*list1[j][1]\n        if product < MIN_PRODUCT:\n            MIN_PRODUCT = product\n            result = [(list1[i], list1[j])]\n        elif product == MIN_PRODUCT:\n            result.append((list1[i], list1[j]))\nreturn min(result[0][0]*result[0][1], result[0][1]*result[0][0]"}
{"task_id": "Mbpp/409", "completion": "function min_product_tuple(list1)\n    minimum_product = float('inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < minimum_product:\n            minimum_product = product\n    return minimum_produc"}
{"task_id": "Mbpp/409", "completion": "function min_product_tuple(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"}
{"task_id": "Mbpp/410", "completion": "data_type = type(listval[0])\nmin_val = float('inf')\nfor item in listval:\n    if type(item) == data_type:\n        if item < min_val:\n            min_val = item\nreturn min_val\n"}
{"task_id": "Mbpp/410", "completion": "\nfunction min_val(listval):\n    min_val = float('inf')\n    for item in listval:\n        if isinstance(item, int) and item < min_val:\n            min_val = item\n    return min_val\n"}
{"task_id": "Mbpp/410", "completion": "\nfunction min_val(listval)\n    smallest = listval[0]\n    for each item in listval:\n        if type(item) is int:\n            if item < smallest:\n                smallest = item\n    return smallest\n"}
{"task_id": "Mbpp/410", "completion": "function min_val(listval):\n    result = float('inf')  // Initialize with positive infinity\n    for each item in listval:\n        if type(item) is int and item < result:\n            result = item\n    return resul"}
{"task_id": "Mbpp/410", "completion": "\nfunction min_val(listval)\n    min_val = float('inf')\n    for each item in listval:\n        if type(item) is int:\n            if item < min_val:\n                min_val = item\n    return min_val\n"}
{"task_id": "Mbpp/410", "completion": "function min_val(listval)\n    min_val = listval[0]\n    for element in listval:\n        if isinstance(element, (int)):\n            if element < min_val:\n                min_val = element\n    return min_val\n"}
{"task_id": "Mbpp/410", "completion": ""}
{"task_id": "Mbpp/410", "completion": "function min_val(listval):\n    min_value = float('inf')\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if item < min_value:\n                min_value = item\n    return min_value\n"}
{"task_id": "Mbpp/410", "completion": ""}
{"task_id": "Mbpp/410", "completion": "data = listval\nmin_num = float('inf')\nfor item in data:\n    if isinstance(item, int):\n        if item < min_num:\n            min_num = item\nreturn min_num\n"}
{"task_id": "Mbpp/412", "completion": ""}
{"task_id": "Mbpp/412", "completion": "function remove_odd(input_list):\n    result = []\n    for each in input_list:\n        if each mod 2 == 0 then\n            result.append each\n    return resul"}
{"task_id": "Mbpp/412", "completion": "function remove_odd(l):\n  result = []\n  for each item in l:\n    if item is even:\n      result.add(item)\n  return result\n"}
{"task_id": "Mbpp/412", "completion": "\nfunction remove_odd(input_list)\n    result = []\n    for each item in input_list:\n        if (item mod 2) == 0 then\n            append item to result\n    return result\n"}
{"task_id": "Mbpp/412", "completion": ""}
{"task_id": "Mbpp/412", "completion": "function remove_odd(input_list):\n    result = []\n    for each_number in input_list:\n        if each_number % 2 == 0:\n            result.append(each_number)\n    return result\n"}
{"task_id": "Mbpp/412", "completion": "function remove_odd(list l)\n    new_list = []\n    for each element in l\n        if element is even\n            append element to new_list\n    return new_list\n"}
{"task_id": "Mbpp/412", "completion": ""}
{"task_id": "Mbpp/412", "completion": ""}
{"task_id": "Mbpp/412", "completion": "FUNCTION remove_odd(l)\n    result = []\n    FOR each element IN l\n        IF element IS EVEN THEN\n            result APPEND element\n    RETURN resul"}
{"task_id": "Mbpp/413", "completion": "function extract_nth_element(list1, n)\n    result = []\n    for i in range(0, len(list1)):\n        result.append(list1[i][0])\n    return result\n"}
{"task_id": "Mbpp/413", "completion": "function extract_nth_element(list1, n):\n    result = []\n    for i in range(len(list1)):\n        if i == n:\n            result.append(list1[i])\n    return resul"}
{"task_id": "Mbpp/413", "completion": "\nfunction extract_nth_element(list1, n)\n    result = []\n    for i from 0 to len(list1)-1\n        result.append(list1[i])\n    return resul"}
{"task_id": "Mbpp/413", "completion": "\nfunction extract_nth_element(list1, n):\n    return [x[0] for x in list1]\n"}
{"task_id": "Mbpp/413", "completion": "\nfunction extract_nth_element(list1, n):\n    result = []\n    for i in range(len(list1)):\n        if i == n:\n            result.append(list1[i])\n    return resul"}
{"task_id": "Mbpp/413", "completion": "function extract_nth_element(list1, n)\n    result = []\n    for i from 0 to length(list1) - 1\n        append(list1[i], result)\n    return result\n"}
{"task_id": "Mbpp/413", "completion": "\nfunction extract_nth_element(list1, n):\n    return [tup[0] for tup in list1 if n == 0]\n"}
{"task_id": "Mbpp/413", "completion": "\nfunction extract_nth_element(list1, n):\n    return [x[0] for i, x in enumerate(list1) if i == n]\n"}
{"task_id": "Mbpp/413", "completion": "\nfunction extract_nth_element(list1, n)\n    if n < 0 or n >= length(list1)\n        return \"Invalid input\"\n    result = []\n    for i from 0 to n\n        result.append(list1[i][0])\n    return result\n"}
{"task_id": "Mbpp/413", "completion": "function extract_nth_element(list1, n):\n    return [t[0] for t in list1]\n"}
{"task_id": "Mbpp/414", "completion": "\nfunction overlapping(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1 & set2) > 0\n"}
{"task_id": "Mbpp/414", "completion": ""}
{"task_id": "Mbpp/414", "completion": ""}
{"task_id": "Mbpp/414", "completion": ""}
{"task_id": "Mbpp/414", "completion": "function overlap(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/414", "completion": "function overlapping(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return Fals"}
{"task_id": "Mbpp/414", "completion": "function overlapping(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1 & set2:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/414", "completion": "function overlapping(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/414", "completion": ""}
{"task_id": "Mbpp/414", "completion": ""}
{"task_id": "Mbpp/415", "completion": "\nfunction max_Product(arr)\n    max1 = -inf\n    max2 = -inf\n    for i from 0 to length(arr)-1\n        if arr[i] > max1\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2 and arr[i] != max1\n            max2 = arr[i]\n    return (max1, max2)\n"}
{"task_id": "Mbpp/415", "completion": ""}
{"task_id": "Mbpp/415", "completion": "\nfunction max_Product(arr):\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num != max1:\n            max2 = num\n    return (max1, max2"}
{"task_id": "Mbpp/415", "completion": "\nfunction max_Product(arr):\n    if len(arr) <= 1:\n        return None\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1*max2, max1*min1) if max1*max2 > max1*min1 else (max1*min1, max1*max2"}
{"task_id": "Mbpp/415", "completion": ""}
{"task_id": "Mbpp/415", "completion": "\nfunction max_product(arr):\n    n = length of arr\n    max1 = negative_infinity\n    max2 = negative_infinity\n    min1 = positive_infinity\n    min2 = positive_infinity\n    \n    for each element x in arr:\n        if x > max1:\n            max2 = max1\n            max1 = x\n        elif x > max2:\n            max2 = x\n            \n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n        \n    return max1 * max2\n"}
{"task_id": "Mbpp/415", "completion": "function max_Product(arr):\n    max1 = 0\n    max2 = 0\n    for each num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2 and num != max1:\n            max2 = num\n    return (max1, max2"}
{"task_id": "Mbpp/415", "completion": "function max_Product(arr)\n    max1 = -inf\n    max2 = -inf\n    min1 = inf\n    min2 = inf\n    \n    for num in arr:\n        if num > max1:\n            max1 = num\n        elif num > max2 and num < max1:\n            max2 = num\n        \n        if num < min1:\n            min1 = num\n        elif num < min2 and num > min1:\n            min2 = num\n    \n    return (max1*max2, max1*min2"}
{"task_id": "Mbpp/415", "completion": ""}
{"task_id": "Mbpp/415", "completion": "function max_Product(arr):\n    if length(arr) < 2:\n        return None\n    max1 = min1 = result = arr[0]\n    for i from 2 to length(arr)-1:\n        if arr[i] > max1:\n            max1 = arr[i]\n        elif arr[i] < min1:\n            min1 = arr[i]\n        product = max1 * min1\n        if product > result:\n            result = product\n    return resul"}
{"task_id": "Mbpp/418", "completion": ""}
{"task_id": "Mbpp/418", "completion": ""}
{"task_id": "Mbpp/418", "completion": "function Find_Max(lst):\n    max_element = None\n    max_length = 0\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_elemen"}
{"task_id": "Mbpp/418", "completion": ""}
{"task_id": "Mbpp/418", "completion": "\nFUNCTION Find_Max(lst)\n    max_len = 0\n    max_element = NONE\n    FOR each element IN lst\n        IF length(element) > max_len\n            max_len = length(element)\n            max_element = element\n    RETURN max_element\nEND FUNCTIO"}
{"task_id": "Mbpp/418", "completion": ""}
{"task_id": "Mbpp/418", "completion": ""}
{"task_id": "Mbpp/418", "completion": "function Find_Max(lst)\n    max_element = lst[0]\n    max_length = len(max_element)\n    \n    for each item in lst:\n        if len(item) > max_length:\n            max_element = item\n            max_length = len(item)\n            \n    return max_element\n"}
{"task_id": "Mbpp/418", "completion": "function Find_Max(lst):\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element\n"}
{"task_id": "Mbpp/418", "completion": "\nfunction Find_Max(lst)\n    max_element = None\n    max_length = 0\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_elemen"}
{"task_id": "Mbpp/419", "completion": "data = input_list\nresult = 0\nfor num in data:\n    result += round(num)\nprint(result * len(data)"}
{"task_id": "Mbpp/419", "completion": "function round_and_sum(list1)\n    total = 0\n    for each number in list1:\n        total = total + round(number)\n    return total * len(list1"}
{"task_id": "Mbpp/419", "completion": "function round_and_sum(list1):\n    sum = 0\n    for num in list1:\n        sum += round(num)\n    return sum * len(list1)\n"}
{"task_id": "Mbpp/419", "completion": "function round_and_sum(list1):\n    sum = 0\n    for num in list1:\n        sum += round(num)\n    return sum * len(list1"}
{"task_id": "Mbpp/419", "completion": "\nfunction round_and_sum(list1):\n    sum = 0\n    for each num in list1:\n        sum = sum + round(num)\n    return sum * len(list1)\n"}
{"task_id": "Mbpp/419", "completion": "function round_and_sum(list1)\n    sum = 0\n    for each num in list1:\n        sum = sum + round(num, 2)\n    return sum * len(list1)\n"}
{"task_id": "Mbpp/419", "completion": "function round_and_sum(list1):\n    sum = 0\n    for each num in list1:\n        sum = sum + round(num)\n    return sum * length(list1"}
{"task_id": "Mbpp/419", "completion": "function round_and_sum(list1):\n    sum = 0\n    for each num in list1:\n        sum = sum + round(num)\n    return sum * len(list1"}
{"task_id": "Mbpp/419", "completion": "algorithm roundAndSum(inputList):\n    sum = 0\n    for num in inputList:\n        sum = sum + round(num)\n    return sum * len(inputList"}
{"task_id": "Mbpp/419", "completion": "function round_and_sum(list1):\n    sum = 0\n    for num in list1:\n        sum = sum + round(num)\n    return sum * len(list1)\n"}
{"task_id": "Mbpp/420", "completion": "function cube_sum(n)\n    sum = 0\n    i = 2\n    while i <= 2 * n:\n        sum = sum + i^3\n        i = i + 2\n    return sum\n"}
{"task_id": "Mbpp/420", "completion": "function cube_sum(n)\n    sum = 0\n    i = 2\n    while i <= 2 * n:\n        sum = sum + i * i * i\n        i = i + 2\n    return sum\n"}
{"task_id": "Mbpp/420", "completion": "\nfunction cubeSum(n):\n    sum = 0\n    for i from 2 to 2n by 2:\n        sum = sum + i^3\n    return sum\n"}
{"task_id": "Mbpp/420", "completion": "\nfunction cube_sum(n):\n    sum = 0\n    for i from 2 to n*2 step 2:\n        sum = sum + i^3\n    return sum\n"}
{"task_id": "Mbpp/420", "completion": ""}
{"task_id": "Mbpp/420", "completion": ""}
{"task_id": "Mbpp/420", "completion": ""}
{"task_id": "Mbpp/420", "completion": "\nfunction cubeSum(n)\n    sum = 0\n    for i from 2 to 2*n by 2\n        sum = sum + i^3\n    return sum\n"}
{"task_id": "Mbpp/420", "completion": ""}
{"task_id": "Mbpp/420", "completion": "function cube_Sum(n):\n    result = 0\n    for i from 2 to 2 * n by 2:\n        result = result + i ^ 3\n    return resul"}
{"task_id": "Mbpp/421", "completion": "function concatenate_tuple(test_tup)\n    result = \"\"\n    for item in test_tup:\n        if type(item) == str:\n            result = result + item + \"-\"\n        else:\n            result = result + str(item) + \"-\"\n    return result[:-1"}
{"task_id": "Mbpp/421", "completion": "data = \"\"\nfor i in test_tup:\n    data += str(i) + \"-\"\nreturn data[:-1"}
{"task_id": "Mbpp/421", "completion": "function concatenate_tuple(test_tup):\n    result = \"\"\n    for item in test_tup:\n        if type(item) != str:\n            item = str(item)\n        result += str(item) + \"-\"\n    return result[:-1]\n"}
{"task_id": "Mbpp/421", "completion": "\nfunction concatenate_tuple(test_tup):\n    result = \"\"\n    for elem in test_tup:\n        if type(elem) != str:\n            elem = str(elem)\n        result += elem + \"-\"\n    return result[:-1"}
{"task_id": "Mbpp/421", "completion": "function concatenate_tuple(test_tup):\n    result = \"\"\n    for element in test_tup:\n        if type(element) is str:\n            result += element + \"-\"\n        else:\n            result += str(element) + \"-\"\n    return result[:-1"}
{"task_id": "Mbpp/421", "completion": "data <- input tuple\nresult <- \"\"\nfor each item in data:\n    if item is not string:\n        item = str(item)\n    result <- result + item + delimiter\nreturn resul"}
{"task_id": "Mbpp/421", "completion": "\nfunction concatenate_tuple(test_tup)\n    result = \"\"\n    for item in test_tup:\n        if isinstance(item, str):\n            result += item + \"-\"\n        else:\n            result += str(item) + \"-\"\n    return result[:-1]\n"}
{"task_id": "Mbpp/421", "completion": "\nfunction concatenate_tuple(test_tup):\n    result = \"\"\n    for i in test_tup:\n        if isinstance(i, str):\n            result += i + \"-\"\n        else:\n            result += str(i) + \"-\"\n    return result[:-1"}
{"task_id": "Mbpp/421", "completion": "\nfunction concatenate_tuple(test_tup):\n    result = \"\"\n    for element in test_tup:\n        if isinstance(element, str):\n            result += element + \"-\"\n        else:\n            result += str(element) + \"-\"\n    return result[:-1"}
{"task_id": "Mbpp/421", "completion": "function concatenate_tuple(test_tup):\n    result = \"\"\n    for element in test_tup:\n        if type(element) == str:\n            result += element + \"-\"\n        else:\n            result += str(element) + \"-\"\n    return result[:-1]\n"}
{"task_id": "Mbpp/422", "completion": "function find_Average_Of_Cube(n)\n    sum = 0\n    for i from 1 to n\n        sum = sum + i^3\n    return sum / "}
{"task_id": "Mbpp/422", "completion": "function find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i from 1 to n:\n        sum_of_cubes = sum_of_cubes + i^3\n    return sum_of_cubes / "}
{"task_id": "Mbpp/422", "completion": ""}
{"task_id": "Mbpp/422", "completion": ""}
{"task_id": "Mbpp/422", "completion": "function find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i from 1 to n:\n        sum_of_cubes = sum_of_cubes + i^3\n    return sum_of_cubes / "}
{"task_id": "Mbpp/422", "completion": "sum = 0\nfor i from 1 to n:\n    sum = sum + i^3\naverage = sum / n\nreturn averag"}
{"task_id": "Mbpp/422", "completion": "\nfunction find_Average_Of_Cube(n)\n    sum_of_cubes = 0\n    for i from 1 to n\n        sum_of_cubes = sum_of_cubes + i^3\n    average = sum_of_cubes / n\n    return average\n"}
{"task_id": "Mbpp/422", "completion": ""}
{"task_id": "Mbpp/422", "completion": "\nalgorithm find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i from 1 to n:\n        sum_of_cubes = sum_of_cubes + i^3\n    return sum_of_cubes / n\n"}
{"task_id": "Mbpp/422", "completion": "function find_Average_Of_Cube(n):\n    sum = 0\n    for i from 1 to n:\n        sum = sum + i^3\n    return sum / "}
{"task_id": "Mbpp/424", "completion": "function extract_rear(test_tuple):\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return resul"}
{"task_id": "Mbpp/424", "completion": "\nfunction extract_rear(test_tuple):\n    result = []\n    for str in test_tuple:\n        result.append(str[-1])\n    return result\n"}
{"task_id": "Mbpp/424", "completion": "\nfunction extract_rear(test_tuple):\n    result = []\n    for word in test_tuple:\n        result.append(word[-1])\n    return result\n"}
{"task_id": "Mbpp/424", "completion": "function extract_rear(test_tuple):\n    result = []\n    for word in test_tuple:\n        result.append(word[-1])\n    return resul"}
{"task_id": "Mbpp/424", "completion": "function extract_rear(test_tuple):\n    result = []\n    for word in test_tuple:\n        if len(word) > 0:\n            result.append(word[-1])\n    return result\n"}
{"task_id": "Mbpp/424", "completion": "function extract_rear(test_tuple):\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return resul"}
{"task_id": "Mbpp/424", "completion": "input_tuple = test_tuple\nresult = []\nfor word in input_tuple:\n    result.append(word[-1])\nreturn resul"}
{"task_id": "Mbpp/424", "completion": "`function extract_rear(test_tuple):\n    result = []\n    for word in test_tuple:\n        result.append(word[-1])\n    return result"}
{"task_id": "Mbpp/424", "completion": "function extract_rear(test_tuple):\n    result = []\n    for str in test_tuple:\n        result.append(str[-1])\n    return result\n"}
{"task_id": "Mbpp/424", "completion": "function extract_rear(test_tuple):\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return resul"}
{"task_id": "Mbpp/425", "completion": "function count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/425", "completion": "\nProcedure: count_element_in_list(list1, x)\n    Initialize count = 0\n    For each sublist in list1:\n        If x is in the current sublist then\n            Increment count by 1\n    Return count\n"}
{"task_id": "Mbpp/425", "completion": "function count_element_in_list(list1, x)\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/425", "completion": "\nfunction count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/425", "completion": ""}
{"task_id": "Mbpp/425", "completion": "\nfunction count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/425", "completion": "\nfunction count_element_in_list(list1, x):\n    count := 0\n    for each sublist in list1:\n        if x is in sublist:\n            count := count + 1\n    return count\n"}
{"task_id": "Mbpp/425", "completion": ""}
{"task_id": "Mbpp/425", "completion": "function count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/425", "completion": ""}
{"task_id": "Mbpp/426", "completion": "FUNCTION filter_oddnumbers(INPUT: LIST OF INTEGER)\n    OUTPUT: LIST OF INTEGER\n        NEW_LIST = []\n        FOR each NUMBER in INPUT:\n            IF (NUMBER MOD 2) == 1 THEN\n                APPEND NUMBER TO NEW_LIST\n            END IF\n        RETURN NEW_LIST\n"}
{"task_id": "Mbpp/426", "completion": "\nfunction filter_oddnumbers(nums):\n  result = []\n  for num in nums:\n    if num mod 2 != 0 then\n      result.add(num)\n  return result\n"}
{"task_id": "Mbpp/426", "completion": "\nprocedure filter_oddnumbers(nums)\n    result = []\n    for each num in nums\n        if (num mod 2) != 0 then\n            add num to result\n    return result\n"}
{"task_id": "Mbpp/426", "completion": "function filter_oddnumbers(nums):\n    result = []\n    for num in nums:\n        if (num mod 2) != 0 then\n            result.append(num)\n        end if\n    return result\n"}
{"task_id": "Mbpp/426", "completion": "for each num in input list\n    if num mod 2 is 0 then skip this iteration\n    else output num\n"}
{"task_id": "Mbpp/426", "completion": "function filter_oddnumbers(nums)\n    result = []\n    for num in nums:\n        if num mod 2 != 0 then\n            append num to result\n        end if\n    return result\n"}
{"task_id": "Mbpp/426", "completion": "ALGORITHM:\n    FUNCTION filter_oddnumbers(nums)\n        result = []\n        FOR each num IN nums\n            IF num MOD 2 \u2260 0 THEN\n                result = result + [num]\n        RETURN result\n    END FUNCTIO"}
{"task_id": "Mbpp/426", "completion": "function filter_oddnumbers(input_list):\n    result = []\n    for num in input_list:\n        if num mod 2 != 0 then\n            result.append(num)\n        end if\n    return result\n"}
{"task_id": "Mbpp/426", "completion": "function filter_oddnumbers(nums)\n    result = []\n    for num in nums\n        if num mod 2 != 0 then\n            result.append(num)\n        end if\n    return result\n"}
{"task_id": "Mbpp/426", "completion": "\nfunction filter_oddnumbers(nums)\n    result = []\n    for each num in nums:\n        if num mod 2 != 0 then\n            add num to result\n        end if\n    return result\n"}
{"task_id": "Mbpp/427", "completion": "start\n    input = dt\n    output = input[-4] + \"-\" + input[5:7] + \"-\" + input[:4]\n    output\n"}
{"task_id": "Mbpp/427", "completion": "input_date = input(\"Enter date in yyyy-mm-dd format: \")\ndate_parts = input_date.split(\"-\")\noutput_date = date_parts[2] + \"-\" + date_parts[1] + \"-\" + date_parts[0]\nprint(output_date"}
{"task_id": "Mbpp/427", "completion": "function change_date_format(dt):\n    date_parts = dt.split('-')\n    return f\"{date_parts[2]}-{date_parts[1]}-{date_parts[0]}\"\n"}
{"task_id": "Mbpp/427", "completion": "function change_date_format(dt):\n    dt = dt.split('-')\n    return f'{dt[2]}-{dt[1]}-{dt[0]}"}
{"task_id": "Mbpp/427", "completion": "\nfunction change_date_format(dt)\n    split_dt = split(dt, '-')\n    return split_dt[2] + '-' + split_dt[1] + '-' + split_dt[0]\n"}
{"task_id": "Mbpp/427", "completion": "function change_date_format(dt)\n    dt = re.sub('-mm', '-dd', dt)\n    dt = re.sub('-dd', '-mm', dt)\n    return dt\n"}
{"task_id": "Mbpp/427", "completion": "\ndata = input()\ndate = data.split('-')\nreturn f\"{date[2]}-{date[1]}-{date[0]}"}
{"task_id": "Mbpp/427", "completion": "\nfunction change_date_format(dt)\n    # Use regular expression to split the input string into three parts: day, month and year\n    day, month, year = re.split('-', dt)\n    # Return the formatted date as a string\n    return f\"{day}-{month}-{year}\"\n"}
{"task_id": "Mbpp/427", "completion": "function change_date_format(dt):\n    dt = dt.split(\"-\")\n    return f\"{dt[2]}-{dt[1]}-{dt[0]}"}
{"task_id": "Mbpp/427", "completion": "FUNCTION change_date_format(dt)\n    split_dt = SPLIT(dt, '-')\n    return STRJOIN(2, split_dt[2], split_dt[1], split_dt[0]"}
{"task_id": "Mbpp/428", "completion": "function shell_sort(my_list):\n    n = length of my_list\n    gap = n / 2\n    while gap > 0:\n        for i from gap to n - 1:\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = temp\n        gap = floor(gap / 2)\n    return my_lis"}
{"task_id": "Mbpp/428", "completion": "ALGORITHM:\n  INPUT: my_list (an array of integers)\n  OUTPUT: a sorted array of integers\n\n  begin\n    n <- length of my_list\n    gap <- n / 2\n\n    while gap > 0 do\n      for i <- 0 to n - gap do\n        j <- i + gap\n        while j < n do\n          if my_list[i] > my_list[j] then\n            swap my_list[i] and my_list[j]\n          j <- j + 1\n        end\n      gap <- gap / 2\n\n    return my_list\n  end\n"}
{"task_id": "Mbpp/428", "completion": "\nfunction shell_sort(my_list):\n    n = length(my_list)\n    gap = n / 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = temp\n        gap = int(gap / 2.0)\n    return my_lis"}
{"task_id": "Mbpp/428", "completion": "ALGORITHM shell_sort:\n    DEFINED FUNCTION shell_sort(my_list):\n        n = LENGTH OF my_list\n        gap = n / 2\n        \n        REPEAT UNTIL gap > 1:\n            FOR i = gap TO 0 STEP -gap:\n                key = i + gap\n                WHILE key < n AND my_list[key] < my_list[key - gap]:\n                    temp = my_list[key]\n                    my_list[key] = my_list[key - gap]\n                    my_list[key - gap] = temp\n                    key = key - gap\n            gap = FLOOR(gap / 2)\n        \n        RETURN my_lis"}
{"task_id": "Mbpp/428", "completion": "\nfunction shell_sort(A)\n    n = length(A)\n    gap = n / 2\n    while gap > 0\n        for i = gap to n-1\n            temp = A[i]\n            j = i\n            while j >= gap and A[j - gap] > temp\n                A[j] = A[j - gap]\n                j = j - gap\n            A[j] = temp\n        gap = gap / 2\n    return A\n"}
{"task_id": "Mbpp/428", "completion": " procedure shell_sort(arr):\n    n = length(arr)\n    gap = n / 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j = j - gap\n            arr[j] = temp\n        gap = int(gap / 2.0)\n    return ar"}
{"task_id": "Mbpp/428", "completion": "function shell_sort(A):\n    n = length(A)\n    gap = n / 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = A[i]\n            j = i\n            while j >= gap and A[j - gap] > temp:\n                A[j] = A[j - gap]\n                j = j - gap\n            A[j] = temp\n        gap = int(gap / 2)\n    return "}
{"task_id": "Mbpp/428", "completion": "procedure shell_sort(A)\n    n = length(A)\n    gap = n / 2\n    while gap > 0\n        for i = gap to n-1\n            temp = A[i]\n            j = i\n            while j >= gap and A[j - gap] > temp\n                A[j] = A[j - gap]\n                j = j - gap\n            A[j] = temp\n        gap = gap / 2\n    return A\n"}
{"task_id": "Mbpp/428", "completion": "\nProcedure shell_sort(my_list)\n    gap = length(my_list) / 2\n    While gap > 0\n        For i = gap to length(my_list)\n            key = my_list[i]\n            j = i\n            While j >= gap and my_list[j - gap] > key\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = key\n        gap = floor(gap / 2)\n    Return my_lis"}
{"task_id": "Mbpp/428", "completion": "\nfunction shell_sort(my_list):\n    n = length of my_list\n    gap = n / 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = temp\n        gap = int(gap / 2)\n\n    return my_list\n"}
{"task_id": "Mbpp/429", "completion": "result = ()\nfor i in range(len(test_tup1)):\n    if test_tup1[i] & test_tup2[i]:\n        result += (1,)\n    else:\n        result += (0,)\nreturn result\n"}
{"task_id": "Mbpp/429", "completion": "DATA a = lengths of test_tup1 and test_tup2\nFOR i FROM 0 TO a-1\n   IF test_tup1[i] AND test_tup2[i]\n       PRINT i\n"}
{"task_id": "Mbpp/429", "completion": "\nfunction and_tuples(test_tup1, test_tup2):\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] and test_tup2[i]:\n            result += (1,)\n        else:\n            result += (0,)\n    if len(test_tup1) > len(test_tup2):\n        result += tuple([0] * (len(test_tup1) - len(test_tup2)))\n    elif len(test_tup2) > len(test_tup1):\n        result += tuple([0] * (len(test_tup2) - len(test_tup1)))\n    return resul"}
{"task_id": "Mbpp/429", "completion": "\nfunction and_tuples(test_tup1, test_tup2):\n    result = ()\n    i = 0\n    while i < len(test_tup1):\n        if test_tup1[i] & test_tup2[i] != 0:\n            result += (i,)\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/429", "completion": "\nfunction and_tuples(t1, t2)\n    result = ()\n    i = 0\n    while i < len(t1)\n        if t1[i] > t2[i]\n            result = result + (0,)\n        else\n            result = result + (1,)\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/429", "completion": "\nfunction and_tuples(test_tup1, test_tup2):\n    result = []\n    i = 0\n    while i < len(test_tup1):\n        if test_tup1[i] == test_tup2[i]:\n            result.append(i)\n        i += 1\n    return tuple(result"}
{"task_id": "Mbpp/429", "completion": "function and_tuples(test_tup1, test_tup2):\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] & test_tup2[i]:\n            result += (1,)\n        else:\n            result += (0,)\n    return result\n"}
{"task_id": "Mbpp/429", "completion": ""}
{"task_id": "Mbpp/429", "completion": "FUNCTION and_tuples(test_tup1, test_tup2)\n    result = ()\n    i = 0\n    WHILE i < len(test_tup1):\n        IF test_tup1[i] AND test_tup2[i]:\n            result = result + (i,)\n        i = i + 1\n    RETURN resul"}
{"task_id": "Mbpp/429", "completion": "algorithm \n    input: test_tup1, test_tup2\n    output: result_tuple\n    \n    initialize result_tuple as empty tuple\n    initialize i as 0\n    while i is less than length of test_tup1:\n        if element at index i in test_tup1 and element at index i in test_tup2 then\n            append 0 to result_tuple\n        else:\n            append 1 to result_tuple\n        increment i by 1\n    return result_tuple\n"}
{"task_id": "Mbpp/430", "completion": ""}
{"task_id": "Mbpp/430", "completion": "function parabola_directrix(a, b, c)\n    return -c / (4 * a)\n"}
{"task_id": "Mbpp/430", "completion": "function parabola_directrix(a, b, c)\n    result = (-a) / (4 * c)\n    return result + b\n"}
{"task_id": "Mbpp/430", "completion": "function parabola_directrix(a, b, c):\n    return -a/b\n"}
{"task_id": "Mbpp/430", "completion": "ALGORITHM: \n  Input: a, b, c (coefficients of the quadratic equation ax^2 + bx + c)\n  Output: the y-coordinate of the directrix\n\n  if a > 0 then\n    return -c / (2 * a)\n  else\n    return None\n"}
{"task_id": "Mbpp/430", "completion": "function parabola_directrix(a, b, c)\n    return (-b)**2 / (4*a)\n"}
{"task_id": "Mbpp/430", "completion": "function parabola_directrix(a, b, c)\n    directrix = (-b)/(4*a)\n    return directrix**2 + 4*a*c\n"}
{"task_id": "Mbpp/430", "completion": "function parabola_directrix(a, b, c):\n    h = -b / (2 * a)\n    k = c - a * h ** 2\n    p = 4 * a * c - b ** 2\n    return p/a"}
{"task_id": "Mbpp/430", "completion": "function parabola_directrix(a, b, c)\n    directrix_distance = -a / 4\n    return directrix_distance ** 2 + b ** 2 / (4 * a) - c\n"}
{"task_id": "Mbpp/430", "completion": "\nprocedure parabola_directrix(a, b, c)\n    result = (-a) / (4 * c)\n    return result * b^2 + 4 * a * c\nend procedure\n"}
{"task_id": "Mbpp/431", "completion": "function common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/431", "completion": "\nfunction common_element(list1, list2)\n    for each item in list1\n        if item is in list2\n            return true\n    return false\n"}
{"task_id": "Mbpp/431", "completion": "algorithm CommonElement(list1, list2)\n    result = false\n    for each element in list1\n        if element is in list2\n            result = true\n            exit loop\n    return result\n"}
{"task_id": "Mbpp/431", "completion": "function has_common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/431", "completion": "ALGORITHM:\n    SET commonFound = FALSE\n\n    FOR each item IN list1\n        IF item is also IN list2\n            SET commonFound = TRUE\n            BREAK loop\n\n    RETURN commonFoun"}
{"task_id": "Mbpp/431", "completion": "\nfunction common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"}
{"task_id": "Mbpp/431", "completion": "\nfunction common_element(list1, list2):\n    for each item in list1:\n        if item is in list2:\n            return true\n    return false\n"}
{"task_id": "Mbpp/431", "completion": "\nfunction has_common_element(list1, list2)\n    for each element in list1\n        if element is in list2\n            return true\n    return false\n"}
{"task_id": "Mbpp/431", "completion": ""}
{"task_id": "Mbpp/431", "completion": "algorithm:\n    input: two lists of integers, list1 and list2\n    output: boolean value indicating whether list1 and list2 share at least one common element\n\n    for each element e in list1\n        if e is in list2 then\n            return True\n    return Fals"}
{"task_id": "Mbpp/432", "completion": "\nfunction median_trapezium(base1,base2,height)\n    area = 0.5 * (base1 + base2) * height\n    perimeter = base1 + base2 + sqrt((base2 - base1)^2 + height^2)\n    return (perimeter + area) / "}
{"task_id": "Mbpp/432", "completion": "function median_trapezium(base1, base2, height):\n    area = (base1 + base2) * 0.5 * height\n    perimeter = base1 + base2 + 2 * sqrt((base2 - base1)**2 + height**2)\n    median_length = (base1 + base2) / 2\n    return median_lengt"}
{"task_id": "Mbpp/432", "completion": "function median_trapezium(base1, base2, height)\n    area = 0.5 * (base1 + base2) * height\n    perimeter = base1 + base2 + height\n    semi_perimeter = perimeter / 2\n    s = sqrt(semi_perimeter * (semi_perimeter - base1) * (semi_perimeter - base2))\n    return s\n"}
{"task_id": "Mbpp/432", "completion": "function median_trapezium(base1, base2, height)\n    area = (base1 + base2) * height / 2\n    perimeter = base1 + base2 + sqrt((base1 - base2) ** 2 + (height ** 2))\n    median_length = (perimeter + area) / 3\n    return median_lengt"}
{"task_id": "Mbpp/432", "completion": "\nfunction median_trapezium(base1,base2,height):\n    area = 0.5 * (base1 + base2) * height\n    return (base1 + base2)\n"}
{"task_id": "Mbpp/432", "completion": "\nfunction median_trapezium(base1, base2, height)\n    area = (base1 + base2) * 0.5 * height\n    return (base1 + base2) / 2\n"}
{"task_id": "Mbpp/432", "completion": "function median_trapezium(base1, base2, height):\n    area = 0.5 * (base1 + base2) * height\n    perimeter = base1 + base2 + sqrt((base2 - base1)**2)\n    return (perimeter + area) / "}
{"task_id": "Mbpp/432", "completion": "\nfunction median_trapezium(base1, base2, height)\n    area = 0.5 * (base1 + base2) * height\n    return area\n"}
{"task_id": "Mbpp/432", "completion": "function median_trapezium(base1, base2, height):\n    area = (base1 + base2) * height / 2\n    perimeter = base1 + base2 + height\n    semiPerimeter = perimeter / 2\n    s = sqrt(semiPerimeter * (semiPerimeter - base1) * (semiPerimeter - base2) * (semiPerimeter - height))\n    return (base1 + base2) / "}
{"task_id": "Mbpp/432", "completion": "function median_trapezium(base1, base2, height):\n    area = (base1 + base2) * height / 2\n    median = (base1 + base2) / 2\n    return median\n"}
{"task_id": "Mbpp/433", "completion": "function check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"}
{"task_id": "Mbpp/433", "completion": ""}
{"task_id": "Mbpp/433", "completion": ""}
{"task_id": "Mbpp/433", "completion": "\nfunction check_greater(arr, number)\n    for each element in arr:\n        if element > number:\n            return False\n    return True\n"}
{"task_id": "Mbpp/433", "completion": "function check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return False\n    return True\n"}
{"task_id": "Mbpp/433", "completion": "\nfunction check_greater(arr, number):\n    for each element in arr:\n        if element > number:\n            return False\n    return True\n"}
{"task_id": "Mbpp/433", "completion": "algorithm check_greater(arr, num)\n    result = false\n    for each element e in arr\n        if e > num then\n            result = true\n            break\n    return not resul"}
{"task_id": "Mbpp/433", "completion": "algorithm check_greater(arr, number):\n   result := false\n   for each element in arr:\n      if element > number then\n         return false\n   return true\n"}
{"task_id": "Mbpp/433", "completion": ""}
{"task_id": "Mbpp/433", "completion": "\nfunction check_greater(arr, number):\n    for each element in arr:\n        if element > number:\n            return false\n    return true\n"}
{"task_id": "Mbpp/435", "completion": ""}
{"task_id": "Mbpp/435", "completion": "\nfunction last_Digit(n)\n    return n mod 10\nend function\n"}
{"task_id": "Mbpp/435", "completion": ""}
{"task_id": "Mbpp/435", "completion": "function last_Digit(n)\n    return n mod 1"}
{"task_id": "Mbpp/435", "completion": ""}
{"task_id": "Mbpp/435", "completion": "function last_Digit(n)\n    return n mod 1"}
{"task_id": "Mbpp/435", "completion": "function last_Digit(n)\n    return n mod 1"}
{"task_id": "Mbpp/435", "completion": "function last_Digit(n):\n  integer n\n  return n mod 1"}
{"task_id": "Mbpp/435", "completion": ""}
{"task_id": "Mbpp/435", "completion": ""}
{"task_id": "Mbpp/436", "completion": ""}
{"task_id": "Mbpp/436", "completion": ""}
{"task_id": "Mbpp/436", "completion": ""}
{"task_id": "Mbpp/436", "completion": ""}
{"task_id": "Mbpp/436", "completion": ""}
{"task_id": "Mbpp/436", "completion": ""}
{"task_id": "Mbpp/436", "completion": ""}
{"task_id": "Mbpp/436", "completion": ""}
{"task_id": "Mbpp/436", "completion": ""}
{"task_id": "Mbpp/436", "completion": "function neg_nos(list1):\n  result = []\n  for each number in list1:\n    if number < 0 then\n      result.append(number)\n    end if\n  return result\n"}
{"task_id": "Mbpp/437", "completion": ""}
{"task_id": "Mbpp/437", "completion": "\nfunction remove_odd(str1)\n    result = \"\"\n    for i from 0 to length of str1 - 1\n        if ascii value of char at position i of str1 mod 2 is 0 then\n            add char at position i of str1 to result\n        end if\n    end for\n    return result\n"}
{"task_id": "Mbpp/437", "completion": "\nfunction remove_odd(str1):\n    result = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            result += char\n    return result\n"}
{"task_id": "Mbpp/437", "completion": "function remove_odd(str1)\n    result = \"\"\n    for each char in str1\n        if index of char modulo 2 is 0 then\n            result = result + char\n    return result\n"}
{"task_id": "Mbpp/437", "completion": "function remove_odd(str1)\n    result = \"\"\n    for each char in str1\n        if char.mod(2) == 0 then\n            result += char\n        end if\n    end for\n    return resul"}
{"task_id": "Mbpp/437", "completion": "function remove_odd(str1):\n  result = \"\"\n  for i in range(0, len(str1)):\n    if (str1[i] % 2 == 0):\n      result += str1[i]\n  return resul"}
{"task_id": "Mbpp/437", "completion": "function remove_odd(str1):\n    result = \"\"\n    for i from 0 to str1.length-1:\n        if (str1[i] mod 2 == 0):\n            result += str1[i]\n    return result\n"}
{"task_id": "Mbpp/437", "completion": "function remove_odd(str1)\n    result = \"\"\n    for i from 0 to length of str1 - 1\n        if index of str1 at i modulo 2 == 0 then\n            append character at i of str1 to result\n        end if\n    return result\n"}
{"task_id": "Mbpp/437", "completion": "function remove_odd(str1)\n    result = \"\"\n    for i from 0 to length(str1) - 1\n        if (ord(str1[i]) mod 2 == 0) then\n            result = result + str1[i]\n    return result\n"}
{"task_id": "Mbpp/437", "completion": "function remove_odd(str1):\n    result = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            result += char\n    return resul"}
{"task_id": "Mbpp/438", "completion": "function count_bidirectional(test_list):\n    seen = set()\n    bidirectional_count = 0\n    for pair in test_list:\n        pair_tuple = tuple(sorted(pair))\n        if pair_tuple in seen:\n            bidirectional_count += 1\n        else:\n            seen.add(pair_tuple)\n    return bidirectional_count\n"}
{"task_id": "Mbpp/438", "completion": "function count_bidirectional(test_list):\n    count = 0\n    set1 = set()\n    set2 = set()\n    for pair in test_list:\n        if pair[0] in set1 and pair[1] in set2:\n            count += 1\n        else:\n            set1.add(pair[0])\n            set2.add(pair[1])\n    return coun"}
{"task_id": "Mbpp/438", "completion": "\nfunction count_bidirectional(test_list):\n    set_a = set()\n    count = 0\n    for pair in test_list:\n        if pair[0] in set_a and (pair[0], pair[1]) in set_a:\n            count += 1\n        set_a.add(pair)\n    return count\n"}
{"task_id": "Mbpp/438", "completion": "\nfunction count_bidirectional(test_list):\n    bidirectional_pairs = set()\n    for pair in test_list:\n        if (pair[1], pair[0]) in test_list:\n            bidirectional_pairs.add(pair)\n    return len(bidirectional_pairs"}
{"task_id": "Mbpp/438", "completion": "function count_bidirectional(test_list):\n    count = 0\n    seen = set()\n    for pair in test_list:\n        pair_tuple = tuple(sorted(pair))\n        if pair_tuple in seen:\n            count += 1\n        else:\n            seen.add(pair_tuple)\n    return count - (len(seen) - len(set(x for x in seen if len(list(x)) > 1))"}
{"task_id": "Mbpp/438", "completion": "function count_bidirectional(test_list):\n    seen = set()\n    count = 0\n    for pair in test_list:\n        if pair in seen:\n            count += 1\n        seen.add(tuple(sorted(pair)))\n    return count - "}
{"task_id": "Mbpp/438", "completion": "function count_bidirectional(test_list):\n    set1 = set()\n    bidirectional_count = 0\n    for pair in test_list:\n        set1.add(tuple(sorted(pair)))\n    for pair in set1:\n        if test_list.count(pair) > 1:\n            bidirectional_count += 1\n    return bidirectional_coun"}
{"task_id": "Mbpp/438", "completion": "function count_bidirectional(test_list):\n    seen = set()\n    bidirectional_pairs = 0\n    for pair in test_list:\n        pair_tuple = tuple(sorted(pair))\n        if pair_tuple in seen:\n            bidirectional_pairs += 1\n        seen.add(pair_tuple)\n    return bidirectional_pairs\n"}
{"task_id": "Mbpp/438", "completion": "\nfunction count_bidirectional(test_list):\n    count = 0\n    seen = set()\n    for pair in test_list:\n        if pair[1], pair[0] in seen:\n            count += 1\n        seen.add(pair)\n    return count\n"}
{"task_id": "Mbpp/438", "completion": "function count_bidirectional(test_list):\n    count = 0\n    visited = {}\n    for pair in test_list:\n        if pair[0] not in visited:\n            visited[pair[0]] = []\n        if pair[1] not in visited:\n            visited[pair[1]] = []\n        visited[pair[0]].append(pair[1])\n        visited[pair[1]].append(pair[0])\n    for key in visited:\n        if len(visited[key]) > 1:\n            count += 1\n    return count // 2\n"}
{"task_id": "Mbpp/439", "completion": ""}
{"task_id": "Mbpp/439", "completion": "function multiple_to_single(L):\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n"}
{"task_id": "Mbpp/439", "completion": "\nfunction multiple_to_single(L)\n    result = 0\n    power_of_10 = 1\n    for num in L:\n        result += num * power_of_10\n        power_of_10 *= 100\n    return result\n"}
{"task_id": "Mbpp/439", "completion": "function multiple_to_single(L):\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n"}
{"task_id": "Mbpp/439", "completion": "function multiple_to_single(L):\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return resul"}
{"task_id": "Mbpp/439", "completion": "\nfunction multiple_to_single(L)\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n"}
{"task_id": "Mbpp/439", "completion": "\nfunction multiple_to_single(L)\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return resul"}
{"task_id": "Mbpp/439", "completion": ""}
{"task_id": "Mbpp/439", "completion": "function multiple_to_single(L)\n    result := 0\n    for each element e in L\n        result := result * 10 + e\n    return result\n"}
{"task_id": "Mbpp/439", "completion": "result = 0\nfor num in L:\n    result = result * 10 + num\nreturn result\n"}
{"task_id": "Mbpp/440", "completion": "\nfunction find_adverb_position(text):\n    import re\n    adverbs = re.findall(r'\\b(adv|ly)\\b', text.lower())\n    return (adverbs[0].index('ly') if 'ly' in adverbs else None, len(re.split(r'\\W+', text)[:adverbs[0].index('ly')+1].replace('ly', '')) - 1 if 'ly' in adverbs else None, adverbs[0] if adverbs else None"}
{"task_id": "Mbpp/440", "completion": "\nfunction find_adverb_position(text):\n    pattern = r'\\b(rarely|quickly|loudly|happily|wisely|slowly|calmly|fast|silently|patiently|loud|deeply|hard|soft|gently|strongly|weakly|lightly)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end() - 1, match.group())\n    else:\n        return None\n"}
{"task_id": "Mbpp/440", "completion": "\nfunction find_adverb_position(text):\n    pattern = r'\\b(adv|RB)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end(), match.group())\n    else:\n        return (-1, -1, ''"}
{"task_id": "Mbpp/440", "completion": "\nfunction find_adverb_position(text)\n    matches = regex_match_all(r'\\b(adv|ly)\\b', text, flags='i')\n    if not matches:\n        return (-1, -1, '')\n    else:\n        return (matches.start(0), matches.end(0)-1, matches.group(0))\n"}
{"task_id": "Mbpp/440", "completion": "\nfunction find_adverb_position(text):\n    adverbs = []\n    positions = []\n    for match in re.finditer(r'\\b(adv|RB)\\b', text):\n        adverbs.append(match.group())\n        positions.append(match.start())\n    return (positions[0], positions[-1], adverbs[0])\n"}
{"task_id": "Mbpp/440", "completion": "\nfunction find_adverb_position(text):\n    adverbs = re.findall(r'\\b(adv|ly)\\b', text)\n    if len(adverbs) > 0:\n        return (text.find(adverbs[0]), len(text)-len(adverbs[0])-1, adverbs[0])\n    else:\n        return Non"}
{"task_id": "Mbpp/440", "completion": "function find_adverb_position(text):\n    adverbs = re.findall(r'rb', text.lower())\n    if len(adverbs) > 0:\n        return (text.lower().find(adverbs[0]), text.lower().find(adverbs[0]) + len(adverbs[0]), adverbs[0])\n    else:\n        return (-1, -1, '')\n"}
{"task_id": "Mbpp/440", "completion": ""}
{"task_id": "Mbpp/440", "completion": "function find_adverb_position(text):\n    pattern = r'\\b(adv|ly)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.start(), match.end() - 1, match.group())\n    else:\n        return (-1, -1, ''"}
{"task_id": "Mbpp/440", "completion": "function find_adverb_position(text):\n    result = []\n    words = text.split()\n    for i, word in enumerate(words):\n        if re.match(r\"^(really|very|extremely|somewhat|too|so|too|very|extremely|almost|nearly|hardly|scarcely|barely)$\", word):\n            result.append((i, len(word), word))\n            break\n    return tuple(result)\n"}
{"task_id": "Mbpp/441", "completion": ""}
{"task_id": "Mbpp/441", "completion": "function surface_area_of_cube(l)\n    return 6 * l^2\n"}
{"task_id": "Mbpp/441", "completion": ""}
{"task_id": "Mbpp/441", "completion": "\nfunction surface_area_of_cube(size)\n    return 6 * size * size\nend function\n"}
{"task_id": "Mbpp/441", "completion": "\nfunction surfacearea_cube(l):\n    SA = 6 * l^2\n    return S"}
{"task_id": "Mbpp/441", "completion": "\nfunction surfacearea_cube(l)\n    area = 6 * l^2\n    return area\n"}
{"task_id": "Mbpp/441", "completion": "\nfunction surface_area_of_cube(size)\n    return 6 * size * size\nend functio"}
{"task_id": "Mbpp/441", "completion": "\nfunction surfacearea_cube(l)\n    return 6 * l * l\n"}
{"task_id": "Mbpp/441", "completion": "function surfacearea_cube(l):\n    area_per_side = 6 * l**2\n    return area_per_side\n"}
{"task_id": "Mbpp/441", "completion": "function surfacearea_cube(l)\n    return 6 * l * l\n"}
{"task_id": "Mbpp/442", "completion": ""}
{"task_id": "Mbpp/442", "completion": "function positive_count(nums)\n    count := 0\n    total := 0\n    for each num in nums do\n        if num > 0 then\n            count := count + 1\n        end if\n        total := total + 1\n    end for\n    return count / total\n"}
{"task_id": "Mbpp/442", "completion": ""}
{"task_id": "Mbpp/442", "completion": "function positive_count(nums)\n    count = 0\n    total = 0\n    for each num in nums\n        if num > 0\n            count = count + 1\n        total = total + 1\n    return count / total\n"}
{"task_id": "Mbpp/442", "completion": "function positive_count(nums)\n    positive_sum = 0\n    total_sum = 0\n    \n    for each num in nums:\n        if num > 0 then\n            positive_sum += 1\n        total_sum += 1\n    \n    return positive_sum / total_sum\n"}
{"task_id": "Mbpp/442", "completion": ""}
{"task_id": "Mbpp/442", "completion": "function positive_count(array):\n    count = 0\n    total = 0\n    for each number in array:\n        if number > 0:\n            count = count + 1\n        total = total + 1\n    return count / tota"}
{"task_id": "Mbpp/442", "completion": ""}
{"task_id": "Mbpp/442", "completion": "function positive_count(nums):\n    count = 0\n    total = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n        total += 1\n    return count / tota"}
{"task_id": "Mbpp/442", "completion": "function positive_count(nums):\n    count_positive = 0\n    count_total = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n        count_total += 1\n    return count_positive / count_tota"}
{"task_id": "Mbpp/445", "completion": "function index_multiplication(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(tuple(x*y for x,y in zip(test_tup1[i], test_tup2[i])))\n    return resul"}
{"task_id": "Mbpp/445", "completion": "function index_multiplication(test_tup1, test_tup2)\n    result = ()\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of same length\")\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1])\n    return result\n"}
{"task_id": "Mbpp/445", "completion": "function index_multiplication(test_tup1, test_tup2):\n    result = ()\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        result += (tup1[0] * tup2[0], tup1[1] * tup2[1])\n    return result\n"}
{"task_id": "Mbpp/445", "completion": "function result = index_multiplication(test_tup1, test_tup2)\n    n = min(len(test_tup1), len(test_tup2))\n    result = ()\n    for i in range(n):\n        result += ((test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1]),)\n    return result + ((test_tup1[i][0] * test_tup2[i][0],) if i < len(test_tup1) else (),) + ((test_tup1[i][1] * test_tup2[i][1],) if i+1 < len(test_tup2) else ())\n"}
{"task_id": "Mbpp/445", "completion": ""}
{"task_id": "Mbpp/445", "completion": "\nfunction index_multiplication(tup1, tup2):\n    result = ()\n    for i in range(0, len(tup1)):\n        result += (tup1[i][0] * tup2[i][0], tup1[i][1] * tup2[i][1])\n    return resul"}
{"task_id": "Mbpp/445", "completion": "function result = index_multiplication(t1, t2):\n    if len(t1) != len(t2):\n        return \"Error: Tuples must have the same length\"\n    result = ()\n    for i in range(len(t1)):\n        result += (t1[i][0] * t2[i][0], t1[i][1] * t2[i][1])\n    return resul"}
{"task_id": "Mbpp/445", "completion": "# Function to multiply two tuples element-wise\nfunction index_multiplication(test_tup1, test_tup2):\n    result = ()\n    length = min(len(test_tup1), len(test_tup2))\n    for i in range(length):\n        result += (test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1]),\n    if len(test_tup1) > length:\n        result += test_tup1[length:][0]\n    if len(test_tup2) > length:\n        result += test_tup2[length:]\n    return resul"}
{"task_id": "Mbpp/445", "completion": "\nfunction index_multiplication(test_tup1, test_tup2):\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1])\n    return result\n"}
{"task_id": "Mbpp/445", "completion": "function index_multiplication(test_tup1, test_tup2):\n    result = ()\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of the same length\"\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1])\n    return resul"}
{"task_id": "Mbpp/446", "completion": "\nt = tuple(tup)\nc = Counter(t for t in t if t in lst)\nreturn sum(c.values()"}
{"task_id": "Mbpp/446", "completion": "\ndata = {}\nfor i in lst:\n    data[i] = tup.count(i)\nreturn data\n"}
{"task_id": "Mbpp/446", "completion": "` \ncount_map = Counter(tup)\nresult = [count_map[element] for element in lst if element in count_map]\n'"}
{"task_id": "Mbpp/446", "completion": "\nfunction count_Occurrence(tup, lst):\n    return sum([tup.count(i) for i in lst])\n"}
{"task_id": "Mbpp/446", "completion": ""}
{"task_id": "Mbpp/446", "completion": "\nfunction count_occurrence(tup, lst):\n    occurrence = {}\n    for element in lst:\n        occurrence[element] = tup.count(element)\n    return occurrenc"}
{"task_id": "Mbpp/446", "completion": ""}
{"task_id": "Mbpp/446", "completion": "function count_Occurrence(tup, lst):\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict\n"}
{"task_id": "Mbpp/446", "completion": ""}
{"task_id": "Mbpp/446", "completion": ""}
{"task_id": "Mbpp/447", "completion": "\nfunction cube_nums(nums)\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return resul"}
{"task_id": "Mbpp/447", "completion": "\nfunction cube_nums(nums)\n    result = []\n    for num in nums:\n        result.append(num * num * num)\n    return result\n"}
{"task_id": "Mbpp/447", "completion": "function cube_nums(nums)\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"}
{"task_id": "Mbpp/447", "completion": "function cube_nums(input_list)\n    output = []\n    for each_num in input_list\n        output.append(each_num^3)\n    return outpu"}
{"task_id": "Mbpp/447", "completion": "\nfunction cube_nums(input_list):\n    output_list = []\n    for each_num in input_list:\n        output_list.append(each_num ** 3)\n    return output_lis"}
{"task_id": "Mbpp/447", "completion": "\ninput_list = []\nfor num in nums:\n    input_list.append(num ** 3)\nreturn input_list\n"}
{"task_id": "Mbpp/447", "completion": "function cube_nums(nums):\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"}
{"task_id": "Mbpp/447", "completion": "\nfunction cube_nums(input_list):\n    output_list = []\n    for each_num in input_list:\n        output_list.append(each_num * each_num * each_num)\n    return output_list\n"}
{"task_id": "Mbpp/447", "completion": "function cube_nums(list input_list)\n    result = new list\n    for each num in input_list\n        result.append(num * num * num)\n    return result\n"}
{"task_id": "Mbpp/447", "completion": ""}
{"task_id": "Mbpp/448", "completion": "\nfunction cal_sum(n):\n    a, b = 3, 2\n    total = 2\n    while a <= n:\n        total += a\n        a, b = b, a + b\n    return tota"}
{"task_id": "Mbpp/448", "completion": "function cal_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        a, b = 3, 5\n        sum_perrin = 3 + 5\n        for _ in range(2, n):\n            a, b = b, a + b\n            sum_perrin += b\n        return sum_perrin\n"}
{"task_id": "Mbpp/448", "completion": "\nfunction cal_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b = 0, 2\n        total = 0\n        for i in range(3, n+1):\n            total += a\n            a, b = b, 3*b - a\n        return tota"}
{"task_id": "Mbpp/448", "completion": "\nfunction cal_sum(n)\n    if n <= 3:\n        return 2\n    elif n == 4:\n        return 5\n    else:\n        a, b, c = 2, 3, 5\n        sum = 7\n        for i in range(4, n):\n            a, b, c = b, c, a + b\n            sum += c\n        return su"}
{"task_id": "Mbpp/448", "completion": "\nfunction cal_sum(n):\n    a, b = 3, 2\n    sum = 0\n    while a <= n:\n        if a <= n:\n            sum += a\n        a, b = b, a + b\n    return su"}
{"task_id": "Mbpp/448", "completion": "\nfunction cal_sum(n):\n    a, b = 3, 2\n    total_sum = 0\n    for _ in range(n):\n        total_sum += a\n        a, b = b, a + b\n    return total_sum\n"}
{"task_id": "Mbpp/448", "completion": "function cal_sum(n):\n    a, b = 3, 2\n    total = 0\n    while a <= n:\n        total += a\n        a, b = b, a + b\n    return tota"}
{"task_id": "Mbpp/448", "completion": "function cal_sum(n):\n    a, b = 3, 2\n    total = 3\n    for i in range(2, n):\n        a, b = b, a + b\n        if i % 2 == 1:\n            total += a\n    return tota"}
{"task_id": "Mbpp/448", "completion": "function cal_sum(n)\n    perrin = [3, 2]\n    sum = 3\n    for i from 2 to n\n        next_perrin = perrin[0] + perrin[1]\n        perrin = [perrin[1], next_perrin]\n        if i >= 2\n            sum = sum + next_perrin\n    return su"}
{"task_id": "Mbpp/448", "completion": "function cal_sum(n):\n    a, b = 3, 2\n    sum = 2\n    while a <= n:\n        if a <= n:\n            sum += a\n        a, b = b, a + b\n    return sum\n"}
{"task_id": "Mbpp/450", "completion": "\nfunction extract_string(list_of_strings, size):\n    result = []\n    for i in range(0, len(list_of_strings)):\n        if len(list_of_strings[i]) >= size:\n            result.append(list_of_strings[i])\n    return result\n"}
{"task_id": "Mbpp/450", "completion": "function extract_string(str_list, n)\n    result = []\n    i = 0\n    while i < len(str_list) and len(result) < n:\n        if len(str_list[i]) > 0:\n            result.append(str_list[i])\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/450", "completion": "function extract_string(str1, l):\n    result = []\n    for s in str1:\n        if len(s) >= l:\n            result.append(s)\n    return result"}
{"task_id": "Mbpp/450", "completion": "function extract_string(str1, l)\n    result = []\n    i = 0\n    while i < len(str1):\n        if len(str1[i]) == l:\n            result.append(str1[i])\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/450", "completion": "function extract_string(str1, l):\n    result = []\n    for i in range(0, len(str1)):\n        if len(str1[i]) >= l:\n            result.append(str1[i])\n    return result"}
{"task_id": "Mbpp/450", "completion": "\nfunction extract_string(list_of_strings, size)\n    result = []\n    for each_string in list_of_strings:\n        if len(each_string) >= size:\n            result.append(each_string)\n    return result\n"}
{"task_id": "Mbpp/450", "completion": "\nfunction extract_string(str_list, size):\n    result = []\n    for str in str_list:\n        if len(str) >= size:\n            result.append(str)\n    return result[0:size]\n"}
{"task_id": "Mbpp/450", "completion": ""}
{"task_id": "Mbpp/450", "completion": "\nfunction extract_string(str_list, n)\n    result = []\n    i = 0\n    while i < len(str_list)\n        if len(str_list[i]) >= n\n            result.append(str_list[i])\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/450", "completion": ""}
{"task_id": "Mbpp/451", "completion": "\nfunction remove_whitespaces(text)\n    result = \"\"\n    for each char in text:\n        if not (char == \" \" or char == \"\\t\" or char == \"\\n\"):\n            result = result + char\n    return result\n"}
{"task_id": "Mbpp/451", "completion": "function remove_whitespaces(text1)\n    return re.sub(r'\\s+', '', text1"}
{"task_id": "Mbpp/451", "completion": "\nfunction remove_whitespaces(text)\n    output = \"\"\n    for each character in text:\n        if character != \" \" then\n            output += character\n    return output\n"}
{"task_id": "Mbpp/451", "completion": "function remove_whitespaces(text):\n    return text.replace(\" \", \"\")\n"}
{"task_id": "Mbpp/451", "completion": "\nfunction remove_whitespaces(text)\n    result = \"\"\n    i = 0\n    while i < len(text)\n        if text[i] != \" \"\n            result = result + text[i]\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/451", "completion": "function remove_whitespaces(text)\n    return re.sub('\\\\s+', '', text"}
{"task_id": "Mbpp/451", "completion": "function remove_whitespaces(text)\n    return text.replace(\" \", \"\")\n"}
{"task_id": "Mbpp/451", "completion": "function remove_whitespaces(input_string):\n    return re.sub(r'\\s+', '', input_string"}
{"task_id": "Mbpp/451", "completion": "\nfunction remove_whitespaces(text)\n    return text.replace(\" \", \"\")\n"}
{"task_id": "Mbpp/451", "completion": "function remove_whitespaces(text)\n    result = \"\"\n    for char in text:\n        if not is_whitespace(char):\n            result = result + char\n    return result\n\nfunction is_whitespace(char)\n    if char == \" \" or char == \"\\n\" or char == \"\\t\" or char == \"\\r\":\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/453", "completion": "function sumofFactors(n)\n    total = 0\n    for i from 1 to sqrt(n) inclusive\n        if n mod i is 0 then\n            if i mod 2 is 0 then\n                total = total + i\n            end if\n        end if\n    end for\n    return total + n\nend function\n"}
{"task_id": "Mbpp/453", "completion": "function sum_of_factors(n)\n    sum = 0\n    i = 1\n    while i <= sqrt(n)\n        if n % i == 0\n            if i % 2 == 0\n                sum = sum + i\n            j = n // i\n            while j > i\n                sum = sum + j\n                j = j - 1\n        i = i + 1\n    return su"}
{"task_id": "Mbpp/453", "completion": "function sum_of_factors(n):\n    sum = 0\n    for i from 1 to n:\n        if n mod i is 0 and i mod 2 is 0 then\n            sum = sum + i\n    return sum\n"}
{"task_id": "Mbpp/453", "completion": "function sumOfEvenFactors(n):\n    sum = 0\n    for i from 1 to n:\n        if n mod i is 0 and i mod 2 is 0 then\n            sum = sum + i\n        end if\n    return su"}
{"task_id": "Mbpp/453", "completion": ""}
{"task_id": "Mbpp/453", "completion": "function sumOfEvenFactors(n):\n    sum = 0\n    for i from 1 to sqrt(n):\n        if n mod i is 0 and i mod 2 is 0:\n            sum = sum + i\n    return sum\n"}
{"task_id": "Mbpp/453", "completion": "function sumOfEvenFactors(n):\n    sum = 0\n    for i from 1 to sqrt(n):\n        if n % i is 0 and i mod 2 is 0:\n            sum = sum + i\n        if i * i != n and n % i is 0:\n            sum = sum + n / i\n    return su"}
{"task_id": "Mbpp/453", "completion": "\nfunction sumofFactors(n):\n    sum = 0\n    for i from 1 to sqrt(n)\n        if n mod i is equal to 0 then\n            if i mod 2 is equal to 0 then\n                sum = sum + i\n            end if\n        end if\n    return sum\n"}
{"task_id": "Mbpp/453", "completion": "\nfunction sumOfFactors(n):\n    sum = 0\n    for i from 1 to sqrt(n) inclusive:\n        if n mod i is 0 then\n            if i is even then\n                sum = sum + i\n            else\n                j = n / i\n                if j is not i then\n                    sum = sum + i + j\n            end if\n        end if\n    end for\n    return sum\n"}
{"task_id": "Mbpp/453", "completion": "function sum_of_factors(n)\n    sum = 0\n    for i from 1 to n\n        if n mod i equals 0\n            if i mod 2 equals 0 then\n                sum = sum + i\n            end if\n        end if\n    end for\n    return sum\n"}
{"task_id": "Mbpp/454", "completion": "\nfunction text_match_wordz(text):\n    return re.search(r'\\b\\w*z\\b', text) is not None\n"}
{"task_id": "Mbpp/454", "completion": "function text_match_wordz(text):\n    if re.search(r'\\bz\\b', text) is not None:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/454", "completion": "\nfunction text_match_wordz(text):\n    if re.search(r'\\b\\w*z\\b', text):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/454", "completion": "\nfunction text_match_wordz(text):\n    if re.search(r'\\b\\w*z\\b', text) != None:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/454", "completion": "\nfunction text_match_wordz(text):\n    return bool(re.search(r'\\bz\\b', text)"}
{"task_id": "Mbpp/454", "completion": ""}
{"task_id": "Mbpp/454", "completion": "\nfunction text_match_wordz(text)\n    pattern = re.compile(r'\\b\\w*z\\b')\n    if pattern.search(text):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/454", "completion": "\nfunction text_match_wordz(text):\n    return bool(re.search(r'\\bz\\b', text)"}
{"task_id": "Mbpp/454", "completion": "function text_match_wordz(text):\n  return re.search(r'\\bw*\\bz\\b', text) is not None\n"}
{"task_id": "Mbpp/454", "completion": "function text_match_wordz(text):\n    return bool(re.search(r'\\bz\\b', text))\n"}
{"task_id": "Mbpp/455", "completion": ""}
{"task_id": "Mbpp/455", "completion": ""}
{"task_id": "Mbpp/455", "completion": ""}
{"task_id": "Mbpp/455", "completion": "\nfunction check_monthnumb_number(monthnum2)\n    if (monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12) then\n        return False\n    else if (monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11) then\n        return True\n    else if (monthnum2 == 2) then\n        if (is_leap_year()) then\n            return True\n        else\n            return False\n    end if\nend function\n"}
{"task_id": "Mbpp/455", "completion": "if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12 then\n    return True\nelse if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11 then\n    return False\nelse\n    return monthnum2 == 2 and is_leap_year() \n"}
{"task_id": "Mbpp/455", "completion": ""}
{"task_id": "Mbpp/455", "completion": ""}
{"task_id": "Mbpp/455", "completion": "if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n    return True\nelse:\n    return Fals"}
{"task_id": "Mbpp/455", "completion": "function check_monthnumb_number(monthnum)\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12 then\n        return True\n    else\n        return False\n"}
{"task_id": "Mbpp/455", "completion": ""}
{"task_id": "Mbpp/456", "completion": "\nfunction reverse_string_list(stringlist):\n    result = []\n    for str in stringlist:\n        result.append(str[::-1])\n    return resul"}
{"task_id": "Mbpp/456", "completion": "function reverse_string_list(string_list)\n    reversed_list = []\n    for str in string_list:\n        reversed_str = \"\"\n        for i in range(len(str) - 1, -1, -1):\n            reversed_str += str[i]\n        reversed_list.append(reversed_str)\n    return reversed_list\n"}
{"task_id": "Mbpp/456", "completion": "input_list = stringlist\noutput_list = []\nfor str_val in input_list:\n    output_list.append(str_val[::-1])\nreturn output_lis"}
{"task_id": "Mbpp/456", "completion": "\nfunction reverse_string_list(input_list):\n    output_list = []\n    for string in input_list:\n        reversed_string = \"\"\n        for char in string:\n            reversed_string = char + reversed_string\n        output_list.append(reversed_string)\n    return output_lis"}
{"task_id": "Mbpp/456", "completion": "\nfunction reverse_string_list(stringlist):\n    result = []\n    for each string in stringlist:\n        reversed_string = \"\"\n        for char in string:\n            reversed_string = char + reversed_string\n        result.append(reversed_string)\n    return result\n"}
{"task_id": "Mbpp/456", "completion": "function reverse_string_list(stringlist)\n    result = []\n    for each string in stringlist:\n        reversed_string = \"\"\n        for char in string:\n            reversed_string = char + reversed_string\n        result.append(reversed_string)\n    return result\n"}
{"task_id": "Mbpp/456", "completion": "\ninput_list = stringlist\noutput_list = []\nfor string in input_list:\n    output_list.append(string[::-1])\nreturn output_lis"}
{"task_id": "Mbpp/456", "completion": "\nfunction reverse_string_list(stringlist)\n    result = []\n    for each string in stringlist\n        temp = \"\"\n        for char in string\n            temp = char + temp\n        result.append(temp)\n    return result\n"}
{"task_id": "Mbpp/456", "completion": "function reverse_string_list(stringlist):\n    result = []\n    for str in stringlist:\n        result.append(str[::-1])\n    return resul"}
{"task_id": "Mbpp/456", "completion": "\nfunction reverse_string_list(stringlist)\n    result = []\n    for each string in stringlist:\n        reversed_string = \"\"\n        for i from length(string) - 1 down to 0:\n            reversed_string = reversed_string + substring(string, i, i + 1)\n        result.append(reversed_string)\n    return result\n"}
{"task_id": "Mbpp/457", "completion": "\nfunction Find_Min(lst)\n    min_length = infinity\n    result = null\n    for each sublist in lst\n        if length(sublist) < min_length\n            min_length = length(sublist)\n            result = sublist\n    return result\n"}
{"task_id": "Mbpp/457", "completion": ""}
{"task_id": "Mbpp/457", "completion": "\nfunction Find_Min(lst):\n    min_length = 10000\n    result = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            result = sublist\n    return resul"}
{"task_id": "Mbpp/457", "completion": ""}
{"task_id": "Mbpp/457", "completion": "function Find_Min(list_of_lists)\n    min_length = infinity\n    min_list = None\n    \n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_list = lst\n            \n    return min_list\n"}
{"task_id": "Mbpp/457", "completion": "MIN_LENGTH = float('inf')\nMIN_SUBLIST = []\n\nfor sublst in lst:\n    if len(sublst) < MIN_LENGTH:\n        MIN_LENGTH = len(sublst)\n        MIN_SUBLIST = sublst\n\nreturn MIN_SUBLIST\n"}
{"task_id": "Mbpp/457", "completion": "FUNCTION Find_Min(lst)\n    MIN_SIZE = 99999\n    MIN_SUBLIST = []\n    FOR each in lst:\n        IF SIZEOF(each) < MIN_SIZE:\n            MIN_SIZE = SIZEOF(each)\n            MIN_SUBLIST = each\n    RETURN MIN_SUBLIST\n"}
{"task_id": "Mbpp/457", "completion": "\nfunction Find_Min(lst)\n    min_len = 0\n    min_list = []\n    for each_list in lst:\n        if len(each_list) < min_len or min_len == 0:\n            min_len = len(each_list)\n            min_list = each_list\n    return min_lis"}
{"task_id": "Mbpp/457", "completion": ""}
{"task_id": "Mbpp/457", "completion": ""}
{"task_id": "Mbpp/458", "completion": "function rectangle_area(l, b)\n    return l * b\n"}
{"task_id": "Mbpp/458", "completion": "\nfunction rectangle_area(length, breadth)\n    result = length * breadth\n    return resul"}
{"task_id": "Mbpp/458", "completion": "function rectangle_area(l, b)\n    return l * b\n"}
{"task_id": "Mbpp/458", "completion": ""}
{"task_id": "Mbpp/458", "completion": "function rectangle_area(l,b)\n    return l * b\n"}
{"task_id": "Mbpp/458", "completion": "function rectangle_area(l, b)\n    return l * "}
{"task_id": "Mbpp/458", "completion": "function rectangle_area(l,b)\n    area = l * b\n    return are"}
{"task_id": "Mbpp/458", "completion": ""}
{"task_id": "Mbpp/458", "completion": "function rectangle_area(l,b)\n    return l * "}
{"task_id": "Mbpp/458", "completion": "\nfunction rectangle_area(l, b):\n  return l * "}
{"task_id": "Mbpp/459", "completion": "\nfunction remove_uppercase(str1)\n    result = \"\"\n    i = 0\n    while i < len(str1)\n        if str1[i].islower()\n            result = result + str1[i]\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/459", "completion": "function remove_uppercase(str1):\n    result = \"\"\n    i = 0\n    while i < len(str1):\n        if str1[i].islower():\n            result += str1[i]\n        elif str1[i] == ' ':\n            result += str1[i]\n        else:\n            i += 1\n        i += 1\n    return resul"}
{"task_id": "Mbpp/459", "completion": "function remove_uppercase(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i].islower():\n            result += str1[i]\n        elif str1[i] == ' ':\n            result += str1[i]\n    return result\n"}
{"task_id": "Mbpp/459", "completion": ""}
{"task_id": "Mbpp/459", "completion": "\nfunction remove_uppercase(str1):\n    result = \"\"\n    i = 0\n    while i < len(str1):\n        if str1[i].islower():\n            result += str1[i]\n        else:\n            j = i + 1\n            while j < len(str1) and not str1[j].islower():\n                j += 1\n            i = j\n        i += 1\n    return resul"}
{"task_id": "Mbpp/459", "completion": "function remove_uppercase(str1)\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i].islower():\n            new_str += str1[i]\n    return new_str\n"}
{"task_id": "Mbpp/459", "completion": "function remove_uppercase(str1)\n    result = \"\"\n    i = 0\n    while i < len(str1)\n        if str1[i] is lowercase\n            result += str1[i]\n        else\n            j = i + 1\n            while j < len(str1) and not str1[j] is lowercase\n                j = j + 1\n            i = j\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/459", "completion": "function remove_uppercase(str1)\n    result = \"\"\n    i = 0\n    while i < length(str1)\n        if str1[i] >= 'A' and str1[i] <= 'Z'\n            i = i + 1\n        else\n            result = result + str1[i]\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/459", "completion": "function remove_uppercase(str1):\n    result = ''\n    i = 0\n    while i < len(str1):\n        if str1[i].islower():\n            result += str1[i]\n        elif str1[i].isupper():\n            j = i + 1\n            while j < len(str1) and str1[j].isupper():\n                j += 1\n            i = j\n        i += 1\n    return result\n"}
{"task_id": "Mbpp/459", "completion": "function remove_uppercase(str1):\n    result = \"\"\n    i = 0\n    while i < len(str1):\n        if str1[i].islower():\n            result += str1[i]\n        elif str1[i].isupper():\n            j = i + 1\n            while j < len(str1) and str1[j].isupper():\n                j += 1\n            i = j\n        i += 1\n    return result\n"}
{"task_id": "Mbpp/460", "completion": "\nfunction Extract(lst):\n    return [sublist[0] for sublist in lst]\n"}
{"task_id": "Mbpp/460", "completion": ""}
{"task_id": "Mbpp/460", "completion": ""}
{"task_id": "Mbpp/460", "completion": ""}
{"task_id": "Mbpp/460", "completion": ""}
{"task_id": "Mbpp/460", "completion": "\nfunction Extract(lst):\n    return [sublist[0] for sublist in lst]\n"}
{"task_id": "Mbpp/460", "completion": ""}
{"task_id": "Mbpp/460", "completion": "function Extract(lst)\n    result = []\n    for sub_list in lst:\n        if len(sub_list) > 0:\n            result.append(sub_list[0])\n    return resul"}
{"task_id": "Mbpp/460", "completion": ""}
{"task_id": "Mbpp/460", "completion": "function Extract(lst)\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n"}
{"task_id": "Mbpp/461", "completion": "function upper_ctr(str1):\n    count = 0\n    for char in str1:\n        if char.isupper():\n            count = count + 1\n    return coun"}
{"task_id": "Mbpp/461", "completion": "\nfunction upper_ctr(str1):\n    count = 0\n    for char in str1:\n        if char.isupper():\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/461", "completion": "function upper_ctr(str)\n    count := 0\n    for each char in str\n        if char is upper case then\n            count := count + 1\n    return count\n"}
{"task_id": "Mbpp/461", "completion": "function upper_ctr(str1):\n    counter = 0\n    for char in str1:\n        if char.isupper():\n            counter += 1\n    return counte"}
{"task_id": "Mbpp/461", "completion": "function upper_ctr(str1)\n    count := 0\n    for each character c in str1\n        if c is uppercase then\n            count := count + 1\n    return count\n"}
{"task_id": "Mbpp/461", "completion": "\nfunction upper_ctr(str1):\n    count = 0\n    for char in str1:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/461", "completion": "function upper_ctr(input_string)\n    count := 0\n    for each character in input_string:\n        if character is uppercase then\n            increment count\n    return count\n"}
{"task_id": "Mbpp/461", "completion": ""}
{"task_id": "Mbpp/461", "completion": "\nfunction upper_ctr(str1)\n    sum = 0\n    for i from 0 to str1.length - 1\n        if str1[i] is uppercase\n            sum = sum + 1\n    return sum\n"}
{"task_id": "Mbpp/461", "completion": ""}
{"task_id": "Mbpp/462", "completion": "function combinations_list(list1):\n    result = [[]]\n    for item in list1:\n        temp = []\n        for combination in result:\n            temp.append(combination + [item])\n        result = temp\n    return resul"}
{"task_id": "Mbpp/462", "completion": "function combinations_list(list1):\n    result = [[]]\n    for item in list1:\n        temp = []\n        for combination in result:\n            temp.append(combination + [item])\n        result += temp\n    return resul"}
{"task_id": "Mbpp/462", "completion": ""}
{"task_id": "Mbpp/462", "completion": "function combinations_list(list):\n    if len(list) == 0:\n        return [[]]\n    else:\n        result = []\n        first_element = list[0]\n        rest_list = list[1:]\n        for combination in combinations_list(rest_list):\n            result.append(combination)\n            result.append([first_element] + combination)\n        return resul"}
{"task_id": "Mbpp/462", "completion": "\nfunction combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    else:\n        result = []\n        first = list1[0]\n        rest = list1[1:]\n        for p in combinations_list(rest):\n            result.append(p)\n            result.append([first] + p)\n        return result\n"}
{"task_id": "Mbpp/462", "completion": "\nfunction combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    else:\n        result = []\n        first_element = list1[0]\n        rest_elements = list1[1:]\n        for combination in combinations_list(rest_elements):\n            result.append([first_element] + combination)\n            result.append(combination)\n        return resul"}
{"task_id": "Mbpp/462", "completion": "\nfunction combinations_list(list1)\n    combinations = []\n    for i in range(len(list1) + 1):\n        for subset in get_subsets(list1, i):\n            combinations.append(subset)\n    return combinations\n\nfunction get_subsets(list1, k)\n    if k == 0:\n        yield []\n    else:\n        for i in range(len(list1)):\n            element = list1[i]\n            remaining = list1[i + 1:]\n            for subset in get_subsets(remaining, k - 1):\n                yield [element] + subse"}
{"task_id": "Mbpp/462", "completion": "function combinations_list(list1):\n    result = []\n    if len(list1) == 0:\n        result.append([])\n    else:\n        first_element = list1[0]\n        rest_list = list1[1:]\n        for combination in combinations_list(rest_list):\n            result.append([first_element])\n            result.append(combination)\n            for i in range(len(combination)):\n                result.append(combination[:i] + [first_element] + combination[i:])\n    return result\n"}
{"task_id": "Mbpp/462", "completion": "function combinations_list(input_list):\n    if len(input_list) == 0:\n        return [[]]\n    result = []\n    for i, item in enumerate(input_list):\n        other_combinations = combinations_list(input_list[:i] + input_list[i+1:])\n        for c in other_combinations:\n            result.append([item] + c)\n        result.extend(other_combinations)\n    return resul"}
{"task_id": "Mbpp/462", "completion": "function combinations_list(list1):\n    result = [[]]\n    for element in list1:\n        temp = []\n        for combination in result:\n            temp.append(combination + [element])\n        result = temp\n    return result\n"}
{"task_id": "Mbpp/463", "completion": "function max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i from 2 to length of arr:\n        if arr[i] < 0 then\n            swap max_product and min_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return resul"}
{"task_id": "Mbpp/463", "completion": "function max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i from 2 to len(arr):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n"}
{"task_id": "Mbpp/463", "completion": "function max_subarray_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    max_product = min_product = result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result\n"}
{"task_id": "Mbpp/463", "completion": "MAX_VALUE = 2147483647\nMIN_VALUE = -2147483648\nmax_product = MIN_VALUE\ncurrent_product = 1\n\nfor num in arr:\n    if num < 0:\n        current_product *= -1\n    current_product *= num\n    max_product = max(max_product, abs(current_product))\n\nreturn max_product if current_product > 0 else -max_produc"}
{"task_id": "Mbpp/463", "completion": "function max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    result = arr[0]\n    \n    for i from 2 to length(arr):\n        if arr[i] < 0:\n            temp = max_ending_here\n            max_ending_here = min_ending_here\n            min_ending_here = temp\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        result = max(result, max_ending_here)\n    return resul"}
{"task_id": "Mbpp/463", "completion": ""}
{"task_id": "Mbpp/463", "completion": "function max_subarray_product(arr):\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i from 2 to length of arr:\n        if arr[i] < 0 then\n            swap max_ending_here and min_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_fa"}
{"task_id": "Mbpp/463", "completion": "function max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return resul"}
{"task_id": "Mbpp/463", "completion": "function max_subarray_product(arr):\n    if len(arr) <= 1:\n        return arr[0] if arr else 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return resul"}
{"task_id": "Mbpp/463", "completion": "`function max_subarray_product(arr):\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    result = arr[0]\n\n    for i from 1 to length(arr) - 1:\n        if arr[i] < 0 then\n            swap max_so_far and min_so_far\n        max_so_far = max(arr[i], max_so_far * arr[i])\n        min_so_far = min(arr[i], min_so_far * arr[i])\n        result = max(result, max_so_far)\n\n    return result"}
{"task_id": "Mbpp/465", "completion": "\nfunction drop_empty(dict1)\n    new_dict = {}\n    for key, value in dict1.items():\n        if value is not None:\n            new_dict[key] = value\n    return new_dict\n"}
{"task_id": "Mbpp/465", "completion": "function drop_empty(dict1)\n    new_dict = {}\n    for key, value in dict1.items():\n        if value is not None:\n            new_dict[key] = value\n    return new_dict\n"}
{"task_id": "Mbpp/465", "completion": "function drop_empty(dict1)\n    dict2 = {}\n    for key, value in dict1.items():\n        if value is not None:\n            dict2[key] = value\n    return dict2\n"}
{"task_id": "Mbpp/465", "completion": "function drop_empty(dict1):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value is not None:\n            new_dict[key] = value\n    return new_dict\n"}
{"task_id": "Mbpp/465", "completion": "input_dict = dict1\noutput_dict = {}\nfor key, value in input_dict.items():\n    if value is not None:\n        output_dict[key] = value\nreturn output_dic"}
{"task_id": "Mbpp/465", "completion": "function drop_empty(dict1)\n    result = {}\n    for key, value in dict1.items():\n        if value is not None:\n            result[key] = value\n    return result\n"}
{"task_id": "Mbpp/465", "completion": "function drop_empty(dict1):\n    result = {}\n    for key, value in dict1.items():\n        if value is not None:\n            result[key] = value\n    return resul"}
{"task_id": "Mbpp/465", "completion": ""}
{"task_id": "Mbpp/465", "completion": "function drop_empty(dict1):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value is not None:\n            new_dict[key] = value\n    return new_dict\n"}
{"task_id": "Mbpp/465", "completion": "\nfunction drop_empty(dict1):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value is not None:\n            new_dict[key] = value\n    return new_dic"}
{"task_id": "Mbpp/468", "completion": "input = array\nn = length of input\nmax_product = 0\ntemp_product = 1\nfor i from 1 to n:\n    temp_product = temp_product * input[i]\n    if temp_product > max_product:\n        max_product = temp_product\n    for j from i + 1 to n:\n        temp_product = temp_product / input[j]\n        if temp_product > max_product:\n            max_product = temp_product\nreturn max_product\n"}
{"task_id": "Mbpp/468", "completion": "function max_product(arr):\n    n = length of arr\n    dp = table of size n+1 initialized with 0s\n    dp[0] = 1\n    \n    for i from 1 to n:\n        for j from 0 to i-1:\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j]*arr[i])\n    \n    return max(dp)\n"}
{"task_id": "Mbpp/468", "completion": "\nfunction max_product(arr):\n    n = length of arr\n    dp = table of size (n+1) filled with zeros\n    dp[0] = 1\n    for i from 1 to n:\n        max_val = -inf\n        for j from 0 to i-1:\n            if arr[j] < arr[i]:\n                max_val = max(max_val, dp[j] * arr[i])\n        dp[i] = max_val\n    return max(dp)\n"}
{"task_id": "Mbpp/468", "completion": "\nfunction max_product(arr):\n    n = length of arr\n    dp = table filled with 1's of size n+1\n    for i from 2 to n:\n        for j from 1 to i:\n            if arr[j-1] <= arr[i-1]:\n                dp[i] = max(dp[i], dp[j-1] * arr[i-1])\n    return max(dp)\n"}
{"task_id": "Mbpp/468", "completion": "function max_product(arr):\n    n = length of arr\n    dp = table of size (n+1) filled with zeros\n    dp[0] = -INFINITY\n    dp[1] = arr[0]\n    \n    for i from 2 to n:\n        dp[i] = max(dp[i-1], dp[i-1]*arr[i-1])\n    \n    max_product = 0\n    for i from 1 to n:\n        if dp[i] > max_product:\n            max_product = dp[i]\n    \n    return max_produc"}
{"task_id": "Mbpp/468", "completion": "function max_product(arr):\n    n = length of arr\n    dp = new array of size n + 1, filled with 0s\n    dp[0] = 1\n    max_product_so_far = 0\n    for i from 1 to n:\n        dp[i] = max(1, dp[i - 1] * arr[i - 1])\n        max_product_so_far = max(max_product_so_far, dp[i])\n    return max_product_so_far * arr[n - 1]\n"}
{"task_id": "Mbpp/468", "completion": "function max_product(arr):\n    max_product_so_far = 0\n    max_ending_here = 1\n    min_ending_here = 1\n    result = arr[0]\n\n    for i from 2 to length of arr:\n        if arr[i] > min_ending_here * arr[i-1]:\n            max_ending_here = arr[i]\n            min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], arr[i])\n            min_ending_here = temp\n\n        if max_ending_here > result:\n            result = max_ending_here\n        if max_product_so_far < result:\n            max_product_so_far = result\n\n    return max_product_so_fa"}
{"task_id": "Mbpp/468", "completion": "function max_product(arr):\n    n = length of arr\n    dp = new array of size n+1, all elements initially 1\n    max_product = 0\n    \n    for i from 1 to n:\n        current_max = 1\n        for j from 1 to i-1:\n            if arr[j] < arr[i]:\n                current_max = max(current_max, dp[j]*arr[i])\n        dp[i] = current_max\n        max_product = max(max_product, dp[i])\n    \n    return max_product * arr[n]\n"}
{"task_id": "Mbpp/468", "completion": "function max_product(arr):\n    dp = []\n    for num in arr:\n        temp = [num]\n        for i in range(len(dp)):\n            if num > dp[i][-1]:\n                temp.append(dp[i] + [num])\n            else:\n                break\n        dp.append(temp)\n    max_product = -float('inf')\n    for seq in dp:\n        product = 1\n        for num in seq:\n            product *= num\n        max_product = max(max_product, product)\n    return max_product\n"}
{"task_id": "Mbpp/468", "completion": "\nfunction max_product(arr):\n    dp = [1] * len(arr)\n    max_product = 0\n    for i from 1 to length(arr) - 1:\n        for j from 0 to i - 1:\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        if dp[i] > max_product:\n            max_product = dp[i]\n    return max_product * arr[-1"}
{"task_id": "Mbpp/470", "completion": "function add_pairwise(test_tup):\n    result = ()\n    for i in range(1, len(test_tup)):\n        result = result + (test_tup[i-1] + test_tup[i],)\n    return result\n"}
{"task_id": "Mbpp/470", "completion": "\nfunction add_pairwise(test_tup):\n    result = ()\n    for i in range(0, len(test_tup) - 1):\n        result = result + (test_tup[i] + test_tup[i + 1],)\n    return resul"}
{"task_id": "Mbpp/470", "completion": "\nfunction add_pairwise(test_tup):\n    result = ()\n    for i in range(1, len(test_tup)):\n        result = result + (test_tup[i-1] + test_tup[i],)\n    return result\n"}
{"task_id": "Mbpp/470", "completion": "\nfunction add_pairwise(test_tup):\n    result = ()\n    for i in range(0, len(test_tup) - 1):\n        result = result + (test_tup[i] + test_tup[i+1],)\n    return resul"}
{"task_id": "Mbpp/470", "completion": "\nfunction add_pairwise(test_tup):\n    result = ()\n    for i in range(0, len(test_tup) - 1):\n        result = result + (test_tup[i] + test_tup[i+1],)\n    return result\n"}
{"task_id": "Mbpp/470", "completion": "\nfunction add_pairwise(test_tup):\n    result = ()\n    for i in range(0, len(test_tup) - 1):\n        result = result + (test_tup[i] + test_tup[i+1],)\n    return result\n"}
{"task_id": "Mbpp/470", "completion": "\nfunction add_pairwise(test_tup):\n    result = ()\n    for i in range(1, len(test_tup)):\n        result += (test_tup[i-1] + test_tup[i],)\n    return result\n"}
{"task_id": "Mbpp/470", "completion": "function add_pairwise(test_tup):\n    result = ()\n    for i in range(1, len(test_tup)):\n        result = result + (test_tup[i-1] + test_tup[i],)\n    return result\n"}
{"task_id": "Mbpp/470", "completion": "function add_pairwise(test_tup):\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] + test_tup[i+1],)\n    return resul"}
{"task_id": "Mbpp/470", "completion": "result = ()\nfor i in range(1, len(test_tup)):\n    result += (test_tup[i-1] + test_tup[i],)\nreturn resul"}
{"task_id": "Mbpp/471", "completion": "function find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n"}
{"task_id": "Mbpp/471", "completion": ""}
{"task_id": "Mbpp/471", "completion": ""}
{"task_id": "Mbpp/471", "completion": "function find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result\n"}
{"task_id": "Mbpp/471", "completion": "function find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n"}
{"task_id": "Mbpp/471", "completion": "\nfunction find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return resul"}
{"task_id": "Mbpp/471", "completion": "\nfunction find_remainder(arr, n):\n    result = 1\n    for each element in arr:\n        result = (result * element) % n\n    return resul"}
{"task_id": "Mbpp/471", "completion": "function find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return resul"}
{"task_id": "Mbpp/471", "completion": "algorithm find_remainder(arr, n):\n    result = 1\n    for each element in arr:\n        result = (result * element) mod n\n    return result\n"}
{"task_id": "Mbpp/471", "completion": "function find_remainder(arr, n):\n    result := 1\n    for num in arr:\n        result := (result * num) % n\n    return resul"}
{"task_id": "Mbpp/472", "completion": ""}
{"task_id": "Mbpp/472", "completion": ""}
{"task_id": "Mbpp/472", "completion": ""}
{"task_id": "Mbpp/472", "completion": "if len(l) < 2:\n    return False\nfor i in range(len(l)-1):\n    if l[i+1] - l[i] != 1:\n        return False\nreturn True\n"}
{"task_id": "Mbpp/472", "completion": ""}
{"task_id": "Mbpp/472", "completion": ""}
{"task_id": "Mbpp/472", "completion": ""}
{"task_id": "Mbpp/472", "completion": "\nfunction check_Consecutive(l)\n    if length(l) < 2 then\n        return false\n    for i from 0 to length(l)-2 do\n        if l[i+1] - l[i] != 1 then\n            return false\n    end for\n    return true\nend function\n"}
{"task_id": "Mbpp/472", "completion": ""}
{"task_id": "Mbpp/472", "completion": "function check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] != 1:\n            return False\n    return Tru"}
{"task_id": "Mbpp/473", "completion": "\nfunction tuple_intersection(test_list1, test_list2):\n    set1 = set((x for t in test_list1 for x in t))\n    set2 = set((x for t in test_list2 for x in t))\n    return tuple(sorted(x for x in set1 & set2)"}
{"task_id": "Mbpp/473", "completion": "function tuple_intersection(test_list1, test_list2):\n    set1 = set(tuple(sorted(x)) for x in test_list1)\n    set2 = set(tuple(sorted(x)) for x in test_list2)\n    return [tuple(sorted(x)) for x in set(set1.intersection(set2))]\n"}
{"task_id": "Mbpp/473", "completion": "\nfunction tuple_intersection(list1, list2):\n    set1 = set(tuple(sorted(x)) for x in list1)\n    set2 = set(tuple(sorted(x)) for x in list2)\n    return [tuple(sorted(x)) for x in set(set1 & set2)]\n"}
{"task_id": "Mbpp/473", "completion": "function tuple_intersection(test_list1, test_list2):\n    set1 = set((x for x in test_list1))\n    set2 = set((x for x in test_list2))\n    intersection_set = set1 & set2\n    return tuple(sorted(intersection_set)"}
{"task_id": "Mbpp/473", "completion": "\nfunction tuple_intersection(test_list1, test_list2):\n    set1 = set(map(frozenset, test_list1))\n    set2 = set(map(frozenset, test_list2))\n    result = set1 & set2\n    return [tuple(x) for x in result"}
{"task_id": "Mbpp/473", "completion": "function tuple_intersection(test_list1, test_list2):\n    set1 = set((frozenset(t) for t in test_list1))\n    set2 = set((frozenset(t) for t in test_list2))\n    return [tuple(sorted(t)) for t in set1 & set2"}
{"task_id": "Mbpp/473", "completion": "result = {}\nfor t1 in test_list1:\n    for t2 in test_list2:\n        if t1 == t2:\n            if not t1 in result:\n                result[t1] = 0\n            result[t1] += 1\nreturn [k for k, v in result.items() if v > 1]\n"}
{"task_id": "Mbpp/473", "completion": "function tuple_intersection(test_list1, test_list2):\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n    return tuple(set(set1 & set2)"}
{"task_id": "Mbpp/473", "completion": "\nfunction tuple_intersection(list1, list2)\n    set1 = {}\n    set2 = {}\n    \n    for t in list1:\n        if t not in set1:\n            set1[t] = True\n    \n    for t in list2:\n        if t not in set2:\n            set2[t] = True\n    \n    intersection = []\n    for t in set1:\n        if t in set2:\n            intersection.append(t)\n    \n    return intersection\n"}
{"task_id": "Mbpp/473", "completion": "function tuple_intersection(list1, list2):\n    set1 = set(tuple(sorted(x)) for x in list1)\n    set2 = set(tuple(sorted(x)) for x in list2)\n    return set(tuple(sorted(x)) for x in set(set1 & set2))\n"}
{"task_id": "Mbpp/474", "completion": "function replace_char(str1, ch, newch):\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return resul"}
{"task_id": "Mbpp/474", "completion": "function replace_char(str1, ch, newch)\n    result = \"\"\n    for i from 0 to length of str1\n        if character at index i of str1 is equal to ch\n            append newch to result\n        else\n            append character at index i of str1 to result\n        end if\n    end for\n    return result\n"}
{"task_id": "Mbpp/474", "completion": "ALGORITHM:\n    FUNCTION replace_char(str1, ch, newch)\n        result = \"\"\n        FOR i = 0 TO LENGTH(str1) - 1\n            IF str1[i] == ch\n                result = result + newch\n            ELSE\n                result = result + str1[i]\n        END FOR\n        RETURN result\n"}
{"task_id": "Mbpp/474", "completion": "\nprocedure replace_char(str1, ch, newch)\n    result = \"\"\n    for each char in str1\n        if char is equal to ch\n            append newch to result\n        else\n            append char to result\n    return result\nend procedur"}
{"task_id": "Mbpp/474", "completion": "function replace_char(str1, ch, newch):\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return resul"}
{"task_id": "Mbpp/474", "completion": "procedure replace_char(str1, ch, newch):\n    result = \"\"\n    for each char in str1:\n        if char == ch then\n            result = result + newch\n        else\n            result = result + char\n    return resul"}
{"task_id": "Mbpp/474", "completion": "function replace_char(str1, ch, newch)\n    result = \"\"\n    for each char in str1:\n        if char == ch then\n            result = result + newch\n        else\n            result = result + char\n    return result\n"}
{"task_id": "Mbpp/474", "completion": "function replace_char(str1, ch, newch)\n    for i from 0 to length of str1 - 1\n        if character at position i in str1 is equal to ch\n            replace character at position i in str1 with newch\n    return str1\n"}
{"task_id": "Mbpp/474", "completion": "function replace_char(str1, ch, newch):\n    result = \"\"\n    for each char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return resul"}
{"task_id": "Mbpp/474", "completion": "function replace_char(str1, ch, newch)\n    result = \"\"\n    for i from 0 to length of str1 - 1\n        if str1[i] is ch then\n            result = result + newch\n        else\n            result = result + str1[i]\n    return resul"}
{"task_id": "Mbpp/475", "completion": "\nfunction sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return sorted_dict\n"}
{"task_id": "Mbpp/475", "completion": "function sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1])\n"}
{"task_id": "Mbpp/475", "completion": "\nfunction sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return sorted_dict\n"}
{"task_id": "Mbpp/475", "completion": "function sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return sorted_dict\n"}
{"task_id": "Mbpp/475", "completion": "\nfunction sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1])\n"}
{"task_id": "Mbpp/475", "completion": "function sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return sorted_dic"}
{"task_id": "Mbpp/475", "completion": "function sort_counter(dict1)\n    sorted_list = []\n    for key, value in dict1.items():\n        sorted_list.append((key, value))\n    sorted_list.sort(key=lambda x: x[1])\n    return sorted_list\n"}
{"task_id": "Mbpp/475", "completion": "function sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1])\n"}
{"task_id": "Mbpp/475", "completion": "function sort_counter(dict1):\n    # Convert the dictionary items into a list of tuples\n    dict_items = list(dict1.items())\n    \n    # Sort the list of tuples based on the values\n    sorted_dict_items = sorted(dict_items, key=lambda x: x[1])\n    \n    return sorted_dict_item"}
{"task_id": "Mbpp/475", "completion": "function sort_counter(dict1):\n    sorted_items = []\n    for key, value in sorted(dict1.items(), key=lambda x: x[1]):\n        sorted_items.append((key, value))\n    return sorted_items\n"}
{"task_id": "Mbpp/476", "completion": "data = input(\"Enter the array: \")\nnums = [int(x) for x in data.split()]\nsmallest = min(nums)\nbiggest = max(nums)\nresult = smallest + biggest\nprint(result"}
{"task_id": "Mbpp/476", "completion": "data = input_array\nmax_value = data[0]\nmin_value = data[0]\n\nfor each_item in data:\n    if each_item > max_value:\n        max_value = each_item\n    elif each_item < min_value:\n        min_value = each_item\n\nbig_sum = max_value + min_value\noutput = big_sum\n"}
{"task_id": "Mbpp/476", "completion": "function big_sum(array):\n    max_val = array[0]\n    min_val = array[0]\n    for i in range(1, len(array)):\n        if array[i] > max_val:\n            max_val = array[i]\n        elif array[i] < min_val:\n            min_val = array[i]\n    return max_val + min_va"}
{"task_id": "Mbpp/476", "completion": "function big_sum(nums)\n    sort nums in ascending order\n    return nums[0] + nums[-1]\n"}
{"task_id": "Mbpp/476", "completion": ""}
{"task_id": "Mbpp/476", "completion": "\nfunction big_sum(array):\n    sort array in ascending order\n    return array[0] + array[length(array) - 1"}
{"task_id": "Mbpp/476", "completion": "function big_sum(nums)\n    sort nums in ascending order\n    return nums[0] + nums[length(nums) - 1]\n"}
{"task_id": "Mbpp/476", "completion": "function big_sum(array)\n    largest = array[0]\n    smallest = array[0]\n    for i from 1 to length(array) - 1\n        if array[i] > largest\n            largest = array[i]\n        elif array[i] < smallest\n            smallest = array[i]\n    return largest + smallest\n"}
{"task_id": "Mbpp/476", "completion": "function big_sum(nums)\n    sort nums in ascending order\n    return nums[0] + nums[length(nums) - 1]\n"}
{"task_id": "Mbpp/476", "completion": "function big_sum(nums):\n    max_value = min_value = nums[0]\n    for num in nums:\n        if num > max_value:\n            max_value = num\n        elif num < min_value:\n            min_value = num\n    return max_value + min_value\n"}
{"task_id": "Mbpp/477", "completion": "function is_lower(string)\n    return lowerCase(string"}
{"task_id": "Mbpp/477", "completion": "function is_lower(string)\n    return string.lower()\n"}
{"task_id": "Mbpp/477", "completion": "\nfunction is_lower(string)\n    return string.toLowerCase()\n"}
{"task_id": "Mbpp/477", "completion": "function is_lower(string)\n    return string.lower()\n"}
{"task_id": "Mbpp/477", "completion": "\nfunction is_lower(string):\n    return string.lower("}
{"task_id": "Mbpp/477", "completion": "function is_lower(string):\n    return string.lower("}
{"task_id": "Mbpp/477", "completion": "function is_lower(input_string)\n    return lowercase(input_string"}
{"task_id": "Mbpp/477", "completion": "function is_lower(string)\n    return lower(string)\n"}
{"task_id": "Mbpp/477", "completion": "function is_lower(input_string):\n    return input_string.lower()\n"}
{"task_id": "Mbpp/477", "completion": "function is_lower(string)\n    return string.lower()\n"}
{"task_id": "Mbpp/478", "completion": "\nfunction remove_lowercase(str1)\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            result += str1[i]\n    return result\n"}
{"task_id": "Mbpp/478", "completion": "function remove_lowercase(str1)\n    result = \"\"\n    for char in str1:\n        if char.isupper() then\n            result = result + char\n    return result\n"}
{"task_id": "Mbpp/478", "completion": "function remove_lowercase(str1):\n    return re.sub('[a-z]+', '', str1)\n"}
{"task_id": "Mbpp/478", "completion": ""}
{"task_id": "Mbpp/478", "completion": "function remove_lowercase(str1)\n    return re.sub('[a-z]+', '', str1)\n"}
{"task_id": "Mbpp/478", "completion": "function remove_lowercase(str1)\n    return re.sub('[a-z]+', '', str1"}
{"task_id": "Mbpp/478", "completion": "function remove_lowercase(str1):\n    return re.sub('[a-z]+', '', str1"}
{"task_id": "Mbpp/478", "completion": ""}
{"task_id": "Mbpp/478", "completion": "\nfunction remove_lowercase(str):\n    return re.sub('[a-z]+', '', str)\n"}
{"task_id": "Mbpp/478", "completion": "function remove_lowercase(str1)\n    return re.sub('[a-z]+', '', str1)\n"}
{"task_id": "Mbpp/479", "completion": ""}
{"task_id": "Mbpp/479", "completion": ""}
{"task_id": "Mbpp/479", "completion": "\ninput_num = n\nwhile input_num >= 10:\n    input_num = int(input_num / 10)\nresult = int(input_num)\nreturn result\n"}
{"task_id": "Mbpp/479", "completion": "\nfunction first_Digit(n)\n    n = abs(n)  # handle negative numbers\n    while n >= 10:\n        n = n / 10\n    return int(n"}
{"task_id": "Mbpp/479", "completion": "\nfunction first_Digit(n):\n    while n >= 10:\n        n = n / 10\n    return int(n + 0.5)\n"}
{"task_id": "Mbpp/479", "completion": ""}
{"task_id": "Mbpp/479", "completion": "\nfunction first_Digit(n)\n    if n < 0:\n        n = -n\n    return int(str(n)[0])\n"}
{"task_id": "Mbpp/479", "completion": ""}
{"task_id": "Mbpp/479", "completion": ""}
{"task_id": "Mbpp/479", "completion": ""}
{"task_id": "Mbpp/554", "completion": ""}
{"task_id": "Mbpp/554", "completion": "\nfunction Split(L)\n    result = []\n    for each item in L\n        if item mod 2 not equal to 0\n            append item to result\n    return result\n"}
{"task_id": "Mbpp/554", "completion": "function Split(inputList):\n    result = []\n    for each element in inputList:\n        if element mod 2 != 0 then\n            result.append(element)\n    return result\n"}
{"task_id": "Mbpp/554", "completion": "function Split(input_list):\n    result = []\n    for each in input_list:\n        if each mod 2 is 1 then\n            result.append each\n    return resul"}
{"task_id": "Mbpp/554", "completion": "function Split(input_list)\n    result = []\n    for each item in input_list\n        if item mod 2 is not equal to 0\n            add item to result\n    return result\n"}
{"task_id": "Mbpp/554", "completion": ""}
{"task_id": "Mbpp/554", "completion": ""}
{"task_id": "Mbpp/554", "completion": "\nfunction Split(input_list):\n  result = []\n  for each item in input_list:\n    if item mod 2 != 0 then\n      add item to result\n  return result\n"}
{"task_id": "Mbpp/554", "completion": ""}
{"task_id": "Mbpp/554", "completion": ""}
{"task_id": "Mbpp/555", "completion": "function difference(n)\n    sumOfCubes = 0\n    sumOfNaturalNumbers = n * (n + 1) / 2\n    for i from 1 to n:\n        sumOfCubes = sumOfCubes + i^3\n    result = sumOfCubes - sumOfNaturalNumbers\n    return resul"}
{"task_id": "Mbpp/555", "completion": "function sum_of_cubes(n)\n    result = 0\n    for i from 1 to n\n        result = result + i^3\n    return result\n\nfunction sum_of_first_n_numbers(n)\n    result = 0\n    for i from 1 to n\n        result = result + i\n    return result\n\nfunction difference(n)\n    return sum_of_cubes(n) - sum_of_first_n_numbers(n"}
{"task_id": "Mbpp/555", "completion": ""}
{"task_id": "Mbpp/555", "completion": ""}
{"task_id": "Mbpp/555", "completion": ""}
{"task_id": "Mbpp/555", "completion": "function difference(n):\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i from 1 to n:\n        sum_of_cubes += i^3\n        sum_of_natural_numbers += i\n    return sum_of_cubes - sum_of_natural_numbers\n"}
{"task_id": "Mbpp/555", "completion": "function difference(n):\n    sum_cubes = 0\n    sum_numbers = 0\n    for i from 1 to n:\n        sum_cubes += i^3\n        sum_numbers += i\n    return sum_cubes - sum_number"}
{"task_id": "Mbpp/555", "completion": ""}
{"task_id": "Mbpp/555", "completion": "\nfunction difference(n):\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i from 1 to n:\n        sum_of_cubes = sum_of_cubes + i^3\n        sum_of_natural_numbers = sum_of_natural_numbers + i\n        \n    return sum_of_cubes - sum_of_natural_numbers\n"}
{"task_id": "Mbpp/555", "completion": "function difference(n)\n    sum_of_cubes = 0\n    sum_of Naturals = 0\n    for i from 1 to n\n        sum_of_cubes = sum_of_cubes + i^3\n        sum_of_Naturals = sum_of_Naturals + i\n    return sum_of_cubes - sum_of_Natural"}
{"task_id": "Mbpp/556", "completion": ""}
{"task_id": "Mbpp/556", "completion": "function find_Odd_Pair(A, N)\n    result = 0\n    for i from 1 to N\n        for j from i+1 to N\n            if (A[i] XOR A[j]) % 2 != 0\n                result = result + 1\n    return resul"}
{"task_id": "Mbpp/556", "completion": ""}
{"task_id": "Mbpp/556", "completion": ""}
{"task_id": "Mbpp/556", "completion": ""}
{"task_id": "Mbpp/556", "completion": "function find_Odd_Pair(A, N):\n    count = 0\n    for i from 0 to N-1:\n        for j from i+1 to N-1:\n            if (A[i] xor A[j]) mod 2 != 0:\n                count = count + 1\n    return coun"}
{"task_id": "Mbpp/556", "completion": ""}
{"task_id": "Mbpp/556", "completion": ""}
{"task_id": "Mbpp/556", "completion": "\ninput A: array of integers\ninput N: integer\ncount := 0\nfor i from 0 to N-1 do\n    for j from i+1 to N-1 do\n        if (A[i] XOR A[j]) is odd then\n            count := count + 1\nreturn count\n"}
{"task_id": "Mbpp/556", "completion": ""}
{"task_id": "Mbpp/557", "completion": "function toggle_string(input_str)\n    result = \"\"\n    for char in input_str:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result\n"}
{"task_id": "Mbpp/557", "completion": "function toggle_string(s):\n  result = \"\"\n  for c in s:\n    if c is uppercase:\n      result = result + lower(c)\n    else:\n      result = result + upper(c)\n  return result\n"}
{"task_id": "Mbpp/557", "completion": "function toggle_string(string)\n    result = \"\"\n    for each char in string\n        if char is uppercase then\n            result += chr(ord(char) + 32)\n        else\n            result += chr(ord(char) - 32)\n    return result\n"}
{"task_id": "Mbpp/557", "completion": "function toggle_string(s)\n    result = \"\"\n    for c in s:\n        if c.islower() then\n            result += chr(ord(c) - 32)\n        else\n            result += chr(ord(c) + 32)\n    return result\n"}
{"task_id": "Mbpp/557", "completion": "function toggle_string(input_string)\n    result = \"\"\n    for each char in input_string\n        if char is uppercase then\n            result += lowercase(char)\n        else\n            result += uppercase(char)\n    return resul"}
{"task_id": "Mbpp/557", "completion": "\ninput_string = input_string.toCharArray();\nfor i = 0; i < input_string.length(); i++ {\n    if (input_string[i] >= 'a' && input_string[i] <= 'z') {\n        input_string[i] = (char)(input_string[i] - 32);\n    } else if (input_string[i] >= 'A' && input_string[i] <= 'Z') {\n        input_string[i] = (char)(input_string[i] + 32);\n    }\n}\noutput_string = String(input_string);\nreturn output_string"}
{"task_id": "Mbpp/557", "completion": "function toggle_string(string):\n    result = \"\"\n    for char in string:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return resul"}
{"task_id": "Mbpp/557", "completion": "function toggle_string(s)\n    result = \"\"\n    for each char in s\n        if char is lowercase\n            result += chr(ord(char) - 32)\n        else if char is uppercase\n            result += chr(ord(char) + 32)\n        else\n            result += char\n    return resul"}
{"task_id": "Mbpp/557", "completion": "function toggle_string(input_string):\n    output_string = \"\"\n    for char in input_string:\n        if char.isalpha():\n            if char.islower():\n                output_string += char.upper()\n            else:\n                output_string += char.lower()\n        else:\n            output_string += char\n    return output_string\n"}
{"task_id": "Mbpp/557", "completion": "function toggle_string(s)\n    result = \"\"\n    for c in s:\n        if c.islower():\n            result += c.upper()\n        else:\n            result += c.lower()\n    return result\n"}
{"task_id": "Mbpp/558", "completion": "function digit_distance_nums(n1, n2)\n    sum = 0\n    while n1 > 0 or n2 > 0\n        if n1 > 0\n            last_digit_n1 = n1 mod 10\n            n1 = n1 div 10\n        else\n            last_digit_n1 = 0\n        if n2 > 0\n            last_digit_n2 = n2 mod 10\n            n2 = n2 div 10\n        else\n            last_digit_n2 = 0\n        sum = sum + abs(last_digit_n1 - last_digit_n2)\n    return su"}
{"task_id": "Mbpp/558", "completion": "\nfunction digit_distance_nums(n1, n2)\n    if n1 < n2 then\n        temp = n1\n        n1 = n2\n        n2 = temp\n    end if\n    \n    sum = 0\n    while n1 > 0 do\n        x1 = n1 mod 10\n        y1 = n2 mod 10\n        sum = sum + abs(x1 - y1)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    end while\n    \n    return sum\nend function\n"}
{"task_id": "Mbpp/558", "completion": "function digit_distance_nums(n1, n2):\n    max_num = max(n1, n2)\n    min_num = min(n1, n2)\n    total_distance = 0\n    for i in range(len(str(max_num))):\n        if i >= len(str(min_num)):\n            break\n        total_distance += abs(int(str(max_num)[i]) - int(str(min_num)[i]))\n    return total_distanc"}
{"task_id": "Mbpp/558", "completion": "algorithm digit_distance_nums(input: integer n1, input: integer n2)\n    result := 0\n    for i from most significant digit to least significant digit of n1 and n2 do\n        digit1 := get_digit(n1, i)\n        digit2 := get_digit(n2, i)\n        if digit1 > digit2 then\n            result := result + (digit1 - digit2)\n        else\n            result := result + (digit2 - digit1)\n    return result\n"}
{"task_id": "Mbpp/558", "completion": "function digit_distance_nums(n1, n2):\n    sum = 0\n    max_len = max(len(str(n1)), len(str(n2)))\n    for i in range(max_len):\n        d1 = (n1 // 10**i)%10\n        d2 = (n2 // 10**i)%10\n        if d1 != d2:\n            sum += abs(d1 - d2)\n    return su"}
{"task_id": "Mbpp/558", "completion": ""}
{"task_id": "Mbpp/558", "completion": "\nfunction digit_distance_sum(n1, n2)\n    if n1 < n2 then\n        temp = n1\n        n1 = n2\n        n2 = temp\n    end if\n\n    sum = 0\n    while n1 > 0 do\n        digit1 = (n1 % 10)\n        digit2 = (n2 % 10)\n        sum = sum + abs(digit1 - digit2)\n        n1 = floor(n1 / 10)\n        n2 = floor(n2 / 10)\n    end while\n    return sum\n"}
{"task_id": "Mbpp/558", "completion": "function digit_distance_sum(n1, n2)\n    if n1 == 0 and n2 == 0 then\n        return 0\n    else\n        while n1 > 0 and n2 > 0 do\n            d1 = remainder(n1, 10)\n            d2 = remainder(n2, 10)\n            sum += abs(d1 - d2)\n            n1 = floor(n1 / 10)\n            n2 = floor(n2 / 10)\n        end while\n        return sum\n    end if\nend functio"}
{"task_id": "Mbpp/558", "completion": "\nfunction digit_distance_nums(n1, n2):\n    total = 0\n    while n1 > 0 or n2 > 0:\n        digit1 = (n1 % 10)\n        digit2 = (n2 % 10)\n        distance = abs(digit1 - digit2)\n        total = total + distance\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return total\n"}
{"task_id": "Mbpp/558", "completion": "function digit_distance_nums(n1, n2)\n    distance = 0\n    for i from most significant digit to least significant digit\n        d1, d2 = get_digit(n1, i), get_digit(n2, i)\n        distance += abs(d1 - d2)\n    return distance\n\nfunction get_digit(num, position)\n    if num < 10\n        return num\n    else\n        num = floor(num / 10)\n        return get_digit(num, position - 1) + (num % 10) * 10^(position-1)\n"}
{"task_id": "Mbpp/559", "completion": "\nfunction max_sub_array_sum(a, size)\n    max_sum = -inf\n    window_sum = 0\n    left = 0\n    \n    for i in range(size)\n        window_sum = window_sum + a[i]\n        \n        if window_sum > max_sum\n            max_sum = window_sum\n            \n        if window_sum < 0\n            window_sum = 0\n            left = i+1\n            \n    return max_sum\n"}
{"task_id": "Mbpp/559", "completion": "function max_sub_array_sum(a, size):\n    max_sum = -\u221e\n    current_sum = 0\n    start = 0\n    end = 0\n    temp_start = 0\n    \n    for i from 0 to size-1:\n        if current_sum <= 0:\n            current_sum = a[i]\n            temp_start = i\n        else:\n            current_sum = current_sum + a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = temp_start\n            end = i\n        \n    return sum(a[start:end+1]"}
{"task_id": "Mbpp/559", "completion": "ALGORITHM:\n    DECLARE max_sum AS INTEGER\n    DECLARE current_sum AS INTEGER\n    DECLARE i AS INTEGER\n    DECLARE start AS INTEGER\n    DECLARE end AS INTEGER\n\n    SET max_sum TO -INFINITY\n    SET current_sum TO 0\n    SET start TO 0\n    SET end TO 0\n\n    FOR i FROM 0 TO SIZE-1\n        IF current_sum <= 0\n            SET current_sum TO a[i]\n            SET start TO i\n        ELSE\n            SET current_sum TO current_sum + a[i]\n        END IF\n        IF current_sum > max_sum\n            SET max_sum TO current_sum\n            SET end TO i\n    END FOR\n\n    RETURN max_sum + sum(a[start:end+1])\n"}
{"task_id": "Mbpp/559", "completion": "\nfunction max_sub_array_sum(a, size)\n    max_sum = -inf\n    window_sum = 0\n    left = 0\n    right = 0\n    \n    while right < size:\n        window_sum = window_sum + a[right]\n        \n        if right - left + 1 > size:\n            window_sum = window_sum - a[left]\n            left = left + 1\n        \n        if max_sum < window_sum:\n            max_sum = window_sum\n        \n        right = right + 1\n    \n    return max_sum\n"}
{"task_id": "Mbpp/559", "completion": "data = a[:size]\nmax_sum = float('-inf')\ncurrent_sum = 0\n\nfor i in range(len(data)):\n    current_sum += data[i]\n    if current_sum > max_sum:\n        max_sum = current_sum\n    if current_sum < 0:\n        current_sum = 0\n\nreturn max_su"}
{"task_id": "Mbpp/559", "completion": "function max_sub_array_sum(a, size):\n    max_sum = -infinity\n    window_sum = 0\n    \n    for i from 0 to size - 1:\n        window_sum = window_sum + a[i]\n    \n    max_sum = max(max_sum, window_sum)\n    \n    for i from size to length(a) - 1:\n        window_sum = window_sum - a[i - size] + a[i]\n        max_sum = max(max_sum, window_sum)\n    \n    return max_su"}
{"task_id": "Mbpp/559", "completion": "\nfunction max_sub_array_sum(a, size)\n    max_sum = -inf\n    current_sum = 0\n    start = 0\n    end = 0\n    \n    for i from 0 to a.length - 1\n        if i >= size then\n            current_sum = current_sum - a[i - size]\n        end if\n        \n        current_sum = current_sum + a[i]\n        \n        if current_sum > max_sum then\n            max_sum = current_sum\n            start = i - size + 1\n            end = i\n        end if\n    \n    return max_sum\nend functio"}
{"task_id": "Mbpp/559", "completion": "function max_sub_array_sum(a, size)\n    max_sum = -inf\n    current_sum = 0\n    window_sum = 0\n    left = 0\n    for right in range(0, len(a))\n        window_sum = window_sum + a[right]\n        if right >= size\n            window_sum = window_sum - a[left]\n            left = left + 1\n        if window_sum > max_sum\n            max_sum = window_sum\n    return max_sum\n"}
{"task_id": "Mbpp/559", "completion": "function max_sub_array_sum(a, size):\n    if size > len(a):\n        return \"Invalid input: size is larger than the array\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n    max_sum = max(max_sum, current_sum)\n    for i in range(size, len(a)):\n        current_sum = current_sum - a[i-size] + a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n"}
{"task_id": "Mbpp/559", "completion": ""}
{"task_id": "Mbpp/560", "completion": "\nfunction union_elements(test_tup1, test_tup2):\n    combined_list = list(test_tup1) + list(test_tup2)\n    combined_set = set(combined_list)\n    return tuple(sorted(combined_set)"}
{"task_id": "Mbpp/560", "completion": "function union_elements(test_tup1, test_tup2):\n    union_set = set(test_tup1 + test_tup2)\n    return tuple(sorted(union_set))\n"}
{"task_id": "Mbpp/560", "completion": "function union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    result_set = set1.union(set2)\n    return tuple(sorted(result_set))\n"}
{"task_id": "Mbpp/560", "completion": "function union_elements(test_tup1, test_tup2)\n    # convert tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # perform union operation\n    union_set = set1.union(set2)\n\n    # convert set back to tuple and sort\n    union_tuple = tuple(sorted(union_set))\n\n    return union_tupl"}
{"task_id": "Mbpp/560", "completion": "DATA set1 = {}\nDATA set2 = {}\nDATA result = {}\n\nFOR each element IN test_tup1:\n    IF NOT element IN set1:\n        ADD element TO set1\n    END IF\nEND FOR\n\nFOR each element IN test_tup2:\n    IF NOT element IN set2:\n        ADD element TO set2\n    END IF\nEND FOR\n\nFOR each element IN set1 UNION set2:\n    ADD element TO result\nEND FOR\n\nSORT result IN ASCENDING ORDER\n\nRETURN result\n"}
{"task_id": "Mbpp/560", "completion": "\nfunction union_elements(test_tup1, test_tup2):\n    combined_set = set()\n    combined_set = combined_set.union(set(test_tup1)).union(set(test_tup2))\n    return tuple(sorted(combined_set)"}
{"task_id": "Mbpp/560", "completion": "function union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    return tuple(sorted(union_set))\n"}
{"task_id": "Mbpp/560", "completion": "FUNCTION union_elements(test_tup1, test_tup2)\n    SET result = []\n    SET temp_set = {}\n    FOR each element in test_tup1\n        IF element not in temp_set\n            ADD element to temp_set\n    FOR each element in test_tup2\n        IF element not in temp_set\n            ADD element to temp_set\n    SORT temp_set\n    RETURN temp_set\n"}
{"task_id": "Mbpp/560", "completion": "function union_elements(test_tup1, test_tup2):\n    result = []\n    for element in test_tup1:\n        if element not in result:\n            result.append(element)\n    for element in test_tup2:\n        if element not in result:\n            result.append(element)\n    result.sort()\n    return tuple(result"}
{"task_id": "Mbpp/560", "completion": "function union_elements(test_tup1, test_tup2):\n    combined_list = list(set(test_tup1 + test_tup2))\n    return tuple(sorted(combined_list)"}
{"task_id": "Mbpp/562", "completion": ""}
{"task_id": "Mbpp/562", "completion": "function Find_Max_Length(lst)\n    max_length = 0\n    for each sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"}
{"task_id": "Mbpp/562", "completion": ""}
{"task_id": "Mbpp/562", "completion": ""}
{"task_id": "Mbpp/562", "completion": ""}
{"task_id": "Mbpp/562", "completion": "\nfunction Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"}
{"task_id": "Mbpp/562", "completion": ""}
{"task_id": "Mbpp/562", "completion": ""}
{"task_id": "Mbpp/562", "completion": ""}
{"task_id": "Mbpp/562", "completion": ""}
{"task_id": "Mbpp/563", "completion": "function extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)\n"}
{"task_id": "Mbpp/563", "completion": ""}
{"task_id": "Mbpp/563", "completion": ""}
{"task_id": "Mbpp/563", "completion": "\nfunction extract_values(text)\n    matches = re.findall(r'\"[^\"]+\"', text)\n    return [match[1:-1] for match in matches]\n"}
{"task_id": "Mbpp/563", "completion": "\nfunction extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)\n"}
{"task_id": "Mbpp/563", "completion": "function extract_values(text):\n    pattern = re.compile(r'\"([^\"]*)\"')\n    return [match.group(1) for match in pattern.finditer(text)"}
{"task_id": "Mbpp/563", "completion": "\nfunction extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)\n"}
{"task_id": "Mbpp/563", "completion": "\nfunction extract_values(text):\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)\n"}
{"task_id": "Mbpp/563", "completion": ""}
{"task_id": "Mbpp/563", "completion": ""}
{"task_id": "Mbpp/564", "completion": "function count_Pairs(arr, n):\n    count := 0\n    hash_table := {}\n    for each element in arr:\n        if element is not in hash_table:\n            hash_table[element] := 1\n        else:\n            hash_table[element] := hash_table[element] + 1\n    for key in hash_table:\n        count := count + (hash_table[key] * (hash_table[key] - 1)) // 2\n    return count\n"}
{"task_id": "Mbpp/564", "completion": "function count_Pairs(arr, n):\n    if n <= 0:\n        return 0\n    count = 0\n    for i from 0 to n-1:\n        for j from i+1 to n-1:\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"}
{"task_id": "Mbpp/564", "completion": "\nfunction count_Pairs(arr, n):\n    count := 0\n    for i from 0 to n - 1:\n        for j from i + 1 to n - 1:\n            if arr[i] != arr[j]:\n                count := count + 1\n    return count / 2\n"}
{"task_id": "Mbpp/564", "completion": ""}
{"task_id": "Mbpp/564", "completion": "\nfunction count_Pairs(arr, n):\n    count := 0\n    set unique_elements := {}\n    for each elem in arr:\n        if elem not in unique_elements:\n            unique_elements[elem] := 1\n        else:\n            unique_elements[elem] := unique_elements[elem] + 1\n    for each elem in unique_elements:\n        count := count + (unique_elements[elem] * (unique_elements[elem] - 1)) / 2\n    return int(count)\n"}
{"task_id": "Mbpp/564", "completion": "function count_Pairs(arr, n):\n    count = 0\n    seen = {}\n    for i in arr:\n        if i in seen:\n            count += seen[i]\n        seen[i] = seen.get(i, 0) + 1\n    return count * (count - 1) // 2 - n\n"}
{"task_id": "Mbpp/564", "completion": ""}
{"task_id": "Mbpp/564", "completion": "function count_Pairs(arr, n):\n    count := 0\n    unique_elements = set(arr)\n    for each element in unique_elements:\n        if element is not equal to n:\n            count += (arr.count(element) * (arr.count(element) - 1)) / 2\n    return int(count"}
{"task_id": "Mbpp/564", "completion": "function count_Pairs(arr, n):\n    count = 0\n    arr.sort()\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count = count + 1\n    return count\n"}
{"task_id": "Mbpp/564", "completion": "\nfunction count_Pairs(arr, n):\n    count = 0\n    for i from 0 to n - 1:\n        for j from i + 1 to n - 1:\n            if arr[i] != arr[j]:\n                count = count + 1\n    return count\n"}
{"task_id": "Mbpp/565", "completion": ""}
{"task_id": "Mbpp/565", "completion": "function split(word)\n    result = []\n    for each character in word\n        result.append(character)\n    return resul"}
{"task_id": "Mbpp/565", "completion": ""}
{"task_id": "Mbpp/565", "completion": "function split(word)\n    result = []\n    for char in word:\n        result.append(char)\n    return result\n"}
{"task_id": "Mbpp/565", "completion": "\nfunction split(word)\n    result = []\n    for i from 0 to length(word) - 1\n        result.append(word[i])\n    return result\n"}
{"task_id": "Mbpp/565", "completion": ""}
{"task_id": "Mbpp/565", "completion": "\nprocedure split(word)\n    result = []\n    for each character c in word\n        add c to result\n    return result\n"}
{"task_id": "Mbpp/565", "completion": "\nfunction split(word)\n    return [each character in word]\nend function\n"}
{"task_id": "Mbpp/565", "completion": "function split(word)\n    result = []\n    for each character in word:\n        result.append(character)\n    return result\n"}
{"task_id": "Mbpp/565", "completion": "\nfunction split(word)\n    result = []\n    for char in word:\n        result.append(char)\n    return result\n"}
{"task_id": "Mbpp/566", "completion": "function sum_digits(n):\n    sum = 0\n    while n > 0:\n        digit = n mod 10\n        sum = sum + digit\n        n = n div 10\n    return sum\n"}
{"task_id": "Mbpp/566", "completion": ""}
{"task_id": "Mbpp/566", "completion": ""}
{"task_id": "Mbpp/566", "completion": "\nfunction sum_digits(n)\n    sum=0\n    while n>0\n        digit=n mod 10\n        sum=sum+digit\n        n=floor(n/10)\n    return sum\n"}
{"task_id": "Mbpp/566", "completion": "function sum_digits(n)\n    sum = 0\n    while n > 0\n        digit = n mod 10\n        sum = sum + digit\n        n = n div 10\n    return sum\n"}
{"task_id": "Mbpp/566", "completion": ""}
{"task_id": "Mbpp/566", "completion": "\nFUNCTION sum_digits(n)\n    SUM = 0\n    WHILE n > 0\n        DIGIT = n MOD 10\n        SUM = SUM + DIGIT\n        n = n DIV 10\n    RETURN SUM\nEND FUNCTIO"}
{"task_id": "Mbpp/566", "completion": "function sum_digits(n)\n    sum = 0\n    while n > 0 do\n        digit = n mod 10\n        sum = sum + digit\n        n = n div 10\n    return sum\n"}
{"task_id": "Mbpp/566", "completion": "\nfunction sum_digits(n):\n  result = 0\n  while n > 0:\n    digit = n mod 10\n    result = result + digit\n    n = n div 10\n  return resul"}
{"task_id": "Mbpp/566", "completion": "\nfunction sum_digits(n)\n    sum = 0\n    while n > 0\n        remainder = n mod 10\n        sum = sum + remainder\n        n = n div 10\n    return sum\n"}
{"task_id": "Mbpp/567", "completion": ""}
{"task_id": "Mbpp/567", "completion": "if len(list1) <= 1:\n    return True\nfor i in range(1, len(list1)):\n    if list1[i-1] > list1[i]:\n        return False\nreturn Tru"}
{"task_id": "Mbpp/567", "completion": "function issort_list(list1)\n    if length(list1) <= 1 then\n        return True\n    else\n        for i from 1 to length(list1) - 1 do\n            if list1[i] > list1[i+1] then\n                return False\n        end\n        return True\n"}
{"task_id": "Mbpp/567", "completion": "\nfunction issort_list(list1):\n  if len(list1) <= 1 then\n    return True\n  else\n    for i from 1 to length(list1)-1 do\n      if list1[i] > list1[i+1] then\n        return False\n    end\n    return True\nen"}
{"task_id": "Mbpp/567", "completion": "function issort_list(list1):\n  if len(list1) <= 1:\n    return True\n  for i in range(1, len(list1)):\n    if list1[i-1] > list1[i]:\n      return False\n  return Tru"}
{"task_id": "Mbpp/567", "completion": ""}
{"task_id": "Mbpp/567", "completion": "\nALGORITHM:\n    DATA TYPE: list1 (list of integers)\n    OUTPUT: boolean value indicating if list is sorted\n\n    BEGIN\n        i = 1\n        while i <= length of list1 - 1 do\n            IF list1[i-1] > list1[i]\n                return FALSE\n            i = i + 1\n        RETURN TRUE\n    END\n"}
{"task_id": "Mbpp/567", "completion": "algorithm issort_list(list1)\n    if length of list1 is 0 then\n        return true\n    else if length of list1 is 1 then\n        return true\n    else\n        for i from 1 to length of list1 - 1\n            if list1[i-1] > list1[i] then\n                return false\n        return true\n"}
{"task_id": "Mbpp/567", "completion": ""}
{"task_id": "Mbpp/567", "completion": "FUNCTION issort_list(list1)\n    IF list1 IS EMPTY THEN\n        RETURN TRUE\n    END IF\n    FOR i FROM 1 TO LENGTH OF list1 - 1\n        IF list1[i] > list1[i+1] THEN\n            RETURN FALSE\n        END IF\n    END FOR\n    RETURN TRUE\nEND FUNCTIO"}
{"task_id": "Mbpp/568", "completion": "function empty_list(length)\n    result = []\n    for i in range(length)\n        result.append({})\n    return result\n"}
{"task_id": "Mbpp/568", "completion": "\nfunction empty_list(length)\n    result = []\n    for i from 1 to length\n        result.append({})  # Create an empty dictionary\n    return resul"}
{"task_id": "Mbpp/568", "completion": ""}
{"task_id": "Mbpp/568", "completion": "function empty_list(length)\n    result = []\n    for i from 1 to length\n        result.append({})\n    return result\n"}
{"task_id": "Mbpp/568", "completion": "\nfunction empty_list(length):\n    result = []\n    for i from 1 to length:\n        result.append({})\n    return result\n"}
{"task_id": "Mbpp/568", "completion": ""}
{"task_id": "Mbpp/568", "completion": "function empty_list(length)\n    result = []\n    for i from 0 to length-1\n        result.append({})\n    return result\n"}
{"task_id": "Mbpp/568", "completion": ""}
{"task_id": "Mbpp/568", "completion": ""}
{"task_id": "Mbpp/568", "completion": ""}
{"task_id": "Mbpp/569", "completion": "function sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"}
{"task_id": "Mbpp/569", "completion": "\nfunction sort_sublists(list_of_lists):\n    return [[sorted(sublist) for sublist in list_of_lists]]\n"}
{"task_id": "Mbpp/569", "completion": "function sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"}
{"task_id": "Mbpp/569", "completion": "function sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists"}
{"task_id": "Mbpp/569", "completion": "function sort_sublists(list1):\n  for i in range(0, len(list1)):\n    list1[i] = sorted(list1[i])\n  return list1\n"}
{"task_id": "Mbpp/569", "completion": "\nFUNCTION sort_sublists(list1)\n    FOR EACH sublist IN list1\n        SORT EACH ELEMENT IN sublist\n        RETURN list1\nEND FUNCTIO"}
{"task_id": "Mbpp/569", "completion": "\nfunction sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]\n"}
{"task_id": "Mbpp/569", "completion": "function sort_sublists(list1)\n    for i in range(0, len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"}
{"task_id": "Mbpp/569", "completion": "\nfunction sort_sublists(list1):\n  for each sublist in list1:\n    sort(sublist)\n  return list1\n"}
{"task_id": "Mbpp/569", "completion": "\nfunction sort_sublists(list1):\n    for i in range(0, len(list1)):\n        list1[i] = sorted(list1[i])\n    return list"}
{"task_id": "Mbpp/572", "completion": "function remove_duplicates(lists)\n    result = []\n    seen = set()\n    for nums in lists:\n        for num in nums:\n            if num not in seen:\n                result.append(num)\n                seen.add(num)\n    return result\n"}
{"task_id": "Mbpp/572", "completion": "list_of_lists = []\nfor num_list in range(1):\n    list_of_lists.append([1,2,3,2,3,4,5])\nflat_list = [item for sublist in list_of_lists for item in sublist]\nunique_nums = []\nfor num in flat_list:\n    if flat_list.count(num) == 1:\n        unique_nums.append(num)\nreturn unique_num"}
{"task_id": "Mbpp/572", "completion": "function remove_duplicates(lists):\n    unique_nums = []\n    for num_list in lists:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums\n"}
{"task_id": "Mbpp/572", "completion": "function remove_duplicates(nums)\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"}
{"task_id": "Mbpp/572", "completion": "\nfunction twoUniqueNums(lists):\n    flatList = []\n    for lst in lists:\n        flatList.extend(lst)\n    uniqueList = []\n    for num in flatList:\n        if flatList.count(num) == 1:\n            uniqueList.append(num)\n    return uniqueList\n"}
{"task_id": "Mbpp/572", "completion": "\nfunction remove_duplicates(lists)\n    result = []\n    seen = {}\n    for num_list in lists:\n        for num in num_list:\n            if num not in seen:\n                seen[num] = True\n                result.append(num)\n    return result\n"}
{"task_id": "Mbpp/572", "completion": "function two_unique_nums(lists)\n    unique_nums = []\n    seen = set()\n    \n    for num_list in lists:\n        for num in num_list:\n            if num not in seen:\n                unique_nums.append(num)\n                seen.add(num)\n    \n    return unique_nums\n"}
{"task_id": "Mbpp/572", "completion": "function two_unique_nums(input_list):\n    unique_nums = []\n    for num in input_list:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"}
{"task_id": "Mbpp/572", "completion": "\nfunction remove_duplicates(lists):\n    result = []\n    for lst in lists:\n        seen = set()\n        for num in lst:\n            if num not in seen:\n                result.append(num)\n                seen.add(num)\n    return resul"}
{"task_id": "Mbpp/572", "completion": "input_list = []\nfor lst in nums:\n    input_list.extend(lst)\nunique_nums = []\nfor num in set(input_list):\n    if input_list.count(num) == 1:\n        unique_nums.append(num)\nreturn unique_num"}
{"task_id": "Mbpp/573", "completion": "DATA = []\nfor num in list_data:\n    if num not in DATA:\n        DATA.append(num)\nif len(DATA) == 0:\n    return 1\nproduct = 1\nfor num in DATA:\n    product *= num\nreturn produc"}
{"task_id": "Mbpp/573", "completion": ""}
{"task_id": "Mbpp/573", "completion": "DATA result = 1;\nDATA seen = {};\nFOR each element in list_data DO\n  IF not seen.has(element) THEN\n    seen.add(element);\n    result = result * element;\n  END IF\nEND FOR;\nRETURN result"}
{"task_id": "Mbpp/573", "completion": "function unique_product(list_data):\n    # Create a set from the list to remove duplicates\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return produc"}
{"task_id": "Mbpp/573", "completion": "function unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    result = 1\n    for num in unique_nums:\n        result *= num\n    return result\n"}
{"task_id": "Mbpp/573", "completion": "\nFUNCTION unique_product(list_data)\n    SET result = 1\n    SET unique_numbers = {}\n    FOR each num IN list_data\n        IF num IS NOT IN unique_numbers\n            SET unique_numbers[num] = 1\n        END IF\n    END FOR\n    FOR each num IN unique_numbers\n        SET result = result * num\n    END FOR\n    RETURN result\nEND FUNCTIO"}
{"task_id": "Mbpp/573", "completion": "data = set(list_data)\nproduct = 1\nfor num in data:\n    product *= num\nreturn produc"}
{"task_id": "Mbpp/573", "completion": "function unique_product(list_data):\n    unique_numbers = {}\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers[number] = 1\n        else:\n            unique_numbers[number] += 1\n\n    result = 1\n    for key, value in unique_numbers.items():\n        if value == 1:\n            result *= key\n\n    return result\n"}
{"task_id": "Mbpp/573", "completion": "function unique_product(input_list):\n    unique_numbers = set(input_list)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return produc"}
{"task_id": "Mbpp/573", "completion": "function unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return produc"}
{"task_id": "Mbpp/574", "completion": ""}
{"task_id": "Mbpp/574", "completion": ""}
{"task_id": "Mbpp/574", "completion": ""}
{"task_id": "Mbpp/574", "completion": "function surfacearea_cylinder(r, h)\n    return 2 * pi * r * (r + h"}
{"task_id": "Mbpp/574", "completion": ""}
{"task_id": "Mbpp/574", "completion": "\nfunction surfacearea_cylinder(r, h):\n    area_base = 3.14159 * r^2\n    area_lateral = 2 * 3.14159 * r * h\n    total_area = area_base + area_lateral\n    return total_area\n"}
{"task_id": "Mbpp/574", "completion": "function surfacearea_cylinder(r, h):\n    circumference = 2 * pi * r\n    area_of_base = pi * (r^2)\n    total_area = 2 * area_of_base + circumference * h\n    return total_are"}
{"task_id": "Mbpp/574", "completion": ""}
{"task_id": "Mbpp/574", "completion": "\nfunction surfacearea_cylinder(r, h):\n    radius = r\n    height = h\n    circumference = 2 * pi * radius\n    curved_surface_area = 2 * pi * radius * height\n    top_bottom_surface_area = pi * (radius ** 2)\n    total_surface_area = circumference + curved_surface_area + top_bottom_surface_area\n    return total_surface_area\n"}
{"task_id": "Mbpp/574", "completion": ""}
{"task_id": "Mbpp/576", "completion": ""}
{"task_id": "Mbpp/576", "completion": ""}
{"task_id": "Mbpp/576", "completion": ""}
{"task_id": "Mbpp/576", "completion": ""}
{"task_id": "Mbpp/576", "completion": ""}
{"task_id": "Mbpp/576", "completion": "function is_Sub_Array(A, B):\n    lengthA = length(A)\n    lengthB = length(B)\n    if lengthA > lengthB:\n        return False\n    for i from 0 to lengthA - lengthB:\n        if A[i] == B[0]:\n            matched = True\n            for j from 0 to lengthB - 1:\n                if A[i + j] != B[j]:\n                    matched = False\n                    break\n            if matched:\n                return True\n    return Fals"}
{"task_id": "Mbpp/576", "completion": ""}
{"task_id": "Mbpp/576", "completion": "\nALGORITHM\nis_Sub_Array(A, B)\n    L = length of A\n    M = length of B\n    \n    IF L > M THEN\n        RETURN FALSE\n    \n    FOR i FROM 0 TO L-M\n        IF A[i...i+M-1] = B THEN\n            RETURN TRUE\n        END IF\n    END FOR\n    RETURN FALSE\n"}
{"task_id": "Mbpp/576", "completion": ""}
{"task_id": "Mbpp/576", "completion": "\nfunction is_sub_array(A, B):\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n"}
{"task_id": "Mbpp/577", "completion": "function last_Digit_Factorial(n)\n    result := 1\n    for i from 1 to n\n        result := (result * i) mod 10\n    return result\n"}
{"task_id": "Mbpp/577", "completion": "\nprocedure last_Digit_Factorial(n)\n    factorial = 1\n    i = 2\n    while i <= n\n        factorial = factorial * i\n        i = i + 1\n    last_digit = factorial % 10\n    return last_digit\nend procedure\n"}
{"task_id": "Mbpp/577", "completion": "function last_Digit_Factorial(n)\n    // Calculate the factorial of n\n    result := 1\n    for i from 1 to n\n        result := result * i\n    end for\n\n    // Find the last digit of the result\n    last_digit := result mod 10\n\n    return last_digi"}
{"task_id": "Mbpp/577", "completion": "FUNCTION last_Digit_Factorial(n)\n    IF n <= 1 THEN\n        RETURN n\n    ELSE\n        last_digit <- last_Digit_Factorial(n-1)\n        return last_digit * (n mod 10)\n    END IF\n"}
{"task_id": "Mbpp/577", "completion": ""}
{"task_id": "Mbpp/577", "completion": "ALGORITHM:\nFUNCTION last_Digit_Factorial(n)\n    IF n <= 1\n        RETURN 1\n    ELSE\n        temp := last_Digit_Factorial(n - 1)\n        return the last digit of (n * temp)\n"}
{"task_id": "Mbpp/577", "completion": "function last_Digit_Factorial(n)\n    if n <= 1 then\n        return 1\n    else\n        remainder = 0\n        temp = 1\n        while n > 1 do\n            temp *= n\n            remainder = temp % 10\n            n = n - 1\n        return remainder\n"}
{"task_id": "Mbpp/577", "completion": "\nfunction last_Digit_Factorial(n)\n    result = 1\n    for i from 1 to n\n        result = (result * i) mod 10\n    return result\n"}
{"task_id": "Mbpp/577", "completion": "\nfunction last_Digit_Factorial(n)\n    factorial = 1\n    for i from 2 to n\n        factorial = factorial * i\n    return factorial mod 1"}
{"task_id": "Mbpp/577", "completion": "function last_Digit_Factorial(n):\n    if n == 0:\n        return 10\n    else:\n        last_digit_factorial = 1\n        for i in range(2, n+1):\n            last_digit_factorial = (last_digit_factorial * i) % 10\n        return last_digit_factorial\n"}
{"task_id": "Mbpp/578", "completion": "function result = []\ni = 0\nwhile i < len(list1):\n    result.append(list1[i])\n    result.append(list2[i])\n    result.append(list3[i])\n    i += 1\nreturn result\n"}
{"task_id": "Mbpp/578", "completion": "\nfunction interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"}
{"task_id": "Mbpp/578", "completion": "function interleave_lists(list1, list2, list3)\n    if length(list1) != length(list2) or length(list1) != length(list3)\n        return \"lists must be of equal length\"\n    end if\n    result = []\n    for i from 0 to length(list1) - 1\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    end for\n    return result\n"}
{"task_id": "Mbpp/578", "completion": "function interleave_lists(list1, list2, list3):\n    result = []\n    length = min(len(list1), len(list2), len(list3))\n    for i in range(length):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    result.extend(list1[length:])\n    result.extend(list2[length:])\n    result.extend(list3[length:])\n    return result\n"}
{"task_id": "Mbpp/578", "completion": "function interleave_lists(list1, list2, list3):\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/578", "completion": "\nresult = []\ni = 0\nwhile i < len(list1):\n    result.append(list1[i])\n    if i + 1 < len(list1):\n        result.append(list2[i])\n    if i + 2 < len(list1):\n        result.append(list3[i])\n    i = i + 1\nreturn resul"}
{"task_id": "Mbpp/578", "completion": "FUNCTION INTERLEAVE_LISTS(list1, list2, list3)\n    result = []\n    i = 0\n    WHILE i < LENGTH(list1)\n        result.append(list1[i])\n        i = i + 1\n        result.append(list2[i-1])\n        i = i + 1\n        result.append(list3[i-1])\n    RETURN resul"}
{"task_id": "Mbpp/578", "completion": "\nfunction interleave_lists(list1, list2, list3):\n    result = []\n    for i from 0 to length(list1) - 1:\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return resul"}
{"task_id": "Mbpp/578", "completion": "function interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"}
{"task_id": "Mbpp/578", "completion": "function interleave_lists(list1, list2, list3):\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n    result.extend(list3[k:])\n    return resul"}
{"task_id": "Mbpp/579", "completion": "input_tuples = test_tup1 + test_tup2\noutput = []\nfor item in input_tuples:\n    if input_tuples.count(item) == 1:\n        output.append(item)\nreturn tuple(output"}
{"task_id": "Mbpp/579", "completion": "function find_dissimilar(test_tup1, test_tup2):\n    result = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 != elem2 and elem1 not in result and elem2 not in result:\n                result.append(elem1)\n                result.append(elem2)\n    return tuple(sorted(result))\n"}
{"task_id": "Mbpp/579", "completion": "\ninput_tuple1 = test_tup1\ninput_tuple2 = test_tup2\nresult = []\nfor i in range(min(len(input_tuple1), len(input_tuple2))):\n    if input_tuple1[i] != input_tuple2[i]:\n        result.append(input_tuple1[i])\nfor j in range(min(len(input_tuple1), len(input_tuple2)), len(input_tuple1)):\n    result.append(input_tuple1[j])\nfor k in range(min(len(input_tuple1), len(input_tuple2)), len(input_tuple2)):\n    result.append(input_tuple2[k])\nreturn tuple(result"}
{"task_id": "Mbpp/579", "completion": "ALGORITHM find_dissimilar\n    INPUT: \n        test_tup1, test_tup2: tuple\n    OUTPUT:\n        dissimilar_elements: tuple\n    VARIABLES:\n        i, j, k: integer\n        flag: boolean\n    BEGIN\n        Initialize an empty list dissimilar_elements\n        FOR i FROM 0 TO LENGTH(test_tup1) - 1\n            FOR j FROM 0 TO LENGTH(test_tup2) - 1\n                IF test_tup1[i] == test_tup2[j]\n                    flag = FALSE\n                    FOR k FROM 0 TO LENGTH(test_tup1) - 1\n                        IF test_tup1[k] == test_tup2[j]\n                            flag = TRUE\n                            BREAK\n                    END FOR\n                    IF NOT flag\n                        Append test_tup1[i] to dissimilar_elements\n                END IF\n            END FOR\n        END FOR\n        FOR i FROM 0 TO LENGTH(test_tup2) - 1\n            flag = FALSE\n            FOR j FROM 0 TO LENGTH(test_tup1) - 1\n                IF test_tup2[i] == test_tup1[j]\n                    flag = TRUE\n                    BREAK\n                END IF\n            END FOR\n            IF NOT flag\n                Append test_tup2[i] to dissimilar_elements\n            END IF\n        END FOR\n        RETURN tuple(dissimilar_elements"}
{"task_id": "Mbpp/579", "completion": "\nfunction find_dissimilar(test_tup1, test_tup2):\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] != test_tup2[i]:\n            if not any(x == test_tup2[i] for x in test_tup1[i+1:]):\n                result.append(test_tup1[i])\n            if not any(x == test_tup1[i] for x in test_tup2[i+1:]):\n                result.append(test_tup2[i])\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        if i >= len(test_tup1):\n            result.extend(test_tup2[i:])\n        elif i >= len(test_tup2):\n            result.extend(test_tup1[i:])\n    return tuple(result"}
{"task_id": "Mbpp/579", "completion": "\nfunction find_dissimilar(test_tup1, test_tup2):\n    result = []\n    for element1 in test_tup1:\n        for element2 in test_tup2:\n            if element1 != element2:\n                if element1 not in result and element2 not in result:\n                    result.append(element1)\n                    result.append(element2)\n    return tuple(result"}
{"task_id": "Mbpp/579", "completion": "\nfunction find_dissimilar(test_tup1, test_tup2):\n    dissimilar_elements = []\n    for element1 in test_tup1:\n        if element1 not in test_tup2:\n            dissimilar_elements.append(element1)\n    for element2 in test_tup2:\n        if element2 not in test_tup1:\n            dissimilar_elements.append(element2)\n    return tuple(dissimilar_elements"}
{"task_id": "Mbpp/579", "completion": "\nfunction find_dissimilar(test_tup1, test_tup2):\n    result = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            result.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            result.append(element)\n    return tuple(result"}
{"task_id": "Mbpp/579", "completion": "\nfunction find_dissimilar(test_tup1, test_tup2):\n    dissimilar_elements = []\n    for element1 in test_tup1:\n        if element1 not in test_tup2 and element1 not in dissimilar_elements:\n            dissimilar_elements.append(element1)\n    for element2 in test_tup2:\n        if element2 not in test_tup1 and element2 not in dissimilar_elements:\n            dissimilar_elements.append(element2)\n    return tuple(dissimilar_elements"}
{"task_id": "Mbpp/579", "completion": "function find_dissimilar(test_tup1, test_tup2):\n    result = []\n    for element in test_tup1 + test_tup2:\n        if test_tup1.count(element) == 0 or test_tup2.count(element) == 0:\n            result.append(element)\n    return tuple(sorted(result)"}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/580", "completion": ""}
{"task_id": "Mbpp/581", "completion": "input:\n    b: the length of the base edge\n    s: the height of the pyramid\noutput:\n    the surface area of the square pyramid\n\nsurface_Area = (1/2 * b * (b + sqrt((b*b) + (s*s))) * 4)\nreturn surface_Area\n"}
{"task_id": "Mbpp/581", "completion": "FUNCTION surface_Area(b, s)\n    slantSide = \u221a(s^2 + (b/2)^2)\n    baseArea = b^2\n    apothem = s / 2\n    sideArea = 2 * b * slantSide\n    totalSurfaceArea = baseArea + 2 * sideArea\n    RETURN totalSurfaceArea\n"}
{"task_id": "Mbpp/581", "completion": "function surface_Area(b, s):\n    base_area = b ** 2\n    slant_height = sqrt((s / 2) ** 2 + (b / 2) ** 2)\n    side_area = 4 * b * slant_height\n    base_lateral_area = b * b\n    total_area = base_area + base_lateral_area + side_area\n    return total_are"}
{"task_id": "Mbpp/581", "completion": ""}
{"task_id": "Mbpp/581", "completion": ""}
{"task_id": "Mbpp/581", "completion": "function surface_Area(b, s):\n    side_area = 4 * b**2\n    slant_height = (s**2 + (b/2)**2)**0.5\n    triangle_area = 0.5 * b * slant_height\n    total_area = side_area + 4 * triangle_area\n    return total_are"}
{"task_id": "Mbpp/581", "completion": ""}
{"task_id": "Mbpp/581", "completion": "\nfunction surface_Area(b, s)\n    SL = b * b # calculate the area of the base (square)\n    SA = SL + 4 * (1/2) * b * sqrt(s^2 + (b/2)^2) # calculate the lateral surface area\n    return SL + SA\n"}
{"task_id": "Mbpp/581", "completion": "function surface_Area(b, s)\n    # calculate the slant height of the pyramid using the Pythagorean theorem\n    slant = sqrt((b/2)^2 + s^2)\n    \n    # calculate the area of each triangular face\n    area_per_face = 0.5 * b * slant\n    \n    # calculate the total surface area\n    surface_area = 4 * area_per_face\n    \n    return surface_area\n"}
{"task_id": "Mbpp/581", "completion": "\nfunction surface_Area(b, s):\n    slant_height = sqrt((s^2)+(b^2)/4)\n    sa = b^2 + 4*(b*s)\n    return sa\n"}
{"task_id": "Mbpp/582", "completion": "\nfunction my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/582", "completion": ""}
{"task_id": "Mbpp/582", "completion": ""}
{"task_id": "Mbpp/582", "completion": "if len(dict1) == 0:\n    return True\nelse:\n    return False\n"}
{"task_id": "Mbpp/582", "completion": ""}
{"task_id": "Mbpp/582", "completion": "if len(dict1) == 0:\n    return True\nelse:\n    return False\n"}
{"task_id": "Mbpp/582", "completion": ""}
{"task_id": "Mbpp/582", "completion": "if len(dict1) == 0:\n    return True\nelse:\n    return Fals"}
{"task_id": "Mbpp/582", "completion": ""}
{"task_id": "Mbpp/582", "completion": ""}
{"task_id": "Mbpp/583", "completion": "function catalan_number(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(0, num):\n            catalan += math.comb(2*i, i) * math.comb(2*(num-1), i)\n        return catala"}
{"task_id": "Mbpp/583", "completion": ""}
{"task_id": "Mbpp/583", "completion": ""}
{"task_id": "Mbpp/583", "completion": "\nfunction catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        catalan_sum = 0\n        for i from 0 to n:\n            catalan_sum += math.comb(2*i, i) * math.comb(2*(n - i) - 1, n - i)\n        return catalan_su"}
{"task_id": "Mbpp/583", "completion": "\nfunction catalan_number(num):\n    if num <= 1:\n        return 1\n    else:\n        catalan_sum = 0\n        for i from 0 to num:\n            for j from 0 to i:\n                catalan_sum = catalan_sum + (binomial(i, j) ** 2)\n        return catalan_su"}
{"task_id": "Mbpp/583", "completion": "function catalan_number(num)\n    if num == 0 or num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(num):\n            catalan += catalan_number(i) * catalan_number(num - i - 1)\n        return catalan\n"}
{"task_id": "Mbpp/583", "completion": "\nfunction catalan_number(num)\n    if num <= 1 then\n        return 1\n    else\n        c = 0\n        for i from 1 to num do\n            for j from 0 to i-1 do\n                c = c + catalan_number(i-1) * catalan_number(num-i)\n            end\n        end\n        return c\n    end\nend\n"}
{"task_id": "Mbpp/583", "completion": "function catalan_number(n)\n    if n <= 1:\n        return 1\n    else:\n        result = 0\n        for i from 1 to n\n            result = result + (catalan_number(i-1) * catalan_number(n-i))\n        return result\n"}
{"task_id": "Mbpp/583", "completion": ""}
{"task_id": "Mbpp/583", "completion": ""}
{"task_id": "Mbpp/585", "completion": "\nfunction expensive_items(items, n):\n    # Create a max heap to store the n most expensive items\n    max_heap = []\n    \n    # Iterate through each item in the dataset\n    for item in items:\n        # Push the negative of the price and the item onto the heap\n        heapq.heappush(max_heap, (-item['price'], item))\n        \n        # If the heap has more than n items, pop the smallest (most expensive) item\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    \n    # Extract the n most expensive items from the heap\n    return [item for _, item in max_heap]\n"}
{"task_id": "Mbpp/585", "completion": "heap = []\nfor item in items:\n    heapq.heappush(heap, (-item['price'], item))\nfor _ in range(n):\n    expensive_item = heapq.heappop(heap)\n    result.append(expensive_item[1])\nreturn result\n"}
{"task_id": "Mbpp/585", "completion": ""}
{"task_id": "Mbpp/585", "completion": "\nfunction expensive_items(items, n):\n    # Create a min heap to store the items sorted by price\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n    # Extract the top n expensive items from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return resul"}
{"task_id": "Mbpp/585", "completion": "\ndata = []\nfor item in items:\n    data.append((-item['price'], item))\n\nn_most_expensive = heapq.nsmallest(n, data)\nresult = [x[1] for x in n_most_expensive]\n\nreturn result\n"}
{"task_id": "Mbpp/585", "completion": "heap = []\nfor item in items:\n    heapq.heappush(heap, (-item['price'], item))\nfor _ in range(n):\n    expensive_item = heapq.heappop(heap)\n    result.append(expensive_item[1])\nreturn resul"}
{"task_id": "Mbpp/585", "completion": "\nfunction expensive_items(items, n):\n    # Create an empty list to store the n most expensive items\n    most_expensive = []\n\n    # Create a heap to keep track of the n most expensive items\n    heapq.heapify([(item['price'], item) for item in items])\n\n    # Extract the n most expensive items from the heap\n    while len(most_expensive) < n:\n        price, item = heapq.heappop()\n        most_expensive.append(item)\n\n    return most_expensiv"}
{"task_id": "Mbpp/585", "completion": "\nfunction expensive_items(items, n):\n    return heapq.nlargest(n, items, key=lambda x: x['price'])\n"}
{"task_id": "Mbpp/585", "completion": "\nfunction expensive_items(items, n):\n    # Create a min-heap\n    heap = []\n    \n    for item in items:\n        # Push each item's price and name onto the heap\n        heapq.heappush(heap, (-item['price'], item['name']))\n        \n    # Extract the n most expensive items from the heap\n    return [heapq.heappop(heap)[1] for _ in range(min(n, len(heap)))]\n"}
{"task_id": "Mbpp/585", "completion": "\nheap = []\nfor item in items:\n    heapq.heappush(heap, (-item['price'], item))\nfor _ in range(n):\n    _, item = heapq.heappop(heap)\nresult = [item for item in heap]\nreturn result[::-1"}
{"task_id": "Mbpp/586", "completion": "input_list = l\nsplit_index = n - 1\nfirst_part = input_list[:split_index+1]\nsecond_part = input_list[split_index+1:]\noutput_list = second_part + first_part\n"}
{"task_id": "Mbpp/586", "completion": "input_list = l\nn = n - 1\nfirst_part = input_list[0:n+1]\nrest_part = input_list[n+1:]\noutput_list = rest_part + first_part\nreturn output_list\n"}
{"task_id": "Mbpp/586", "completion": "input_list = l\nindex = n - 1\nleft_part = input_list[:index+1]\nright_part = input_list[index+1:]\nreturn right_part + left_part\n"}
{"task_id": "Mbpp/586", "completion": "function split_Arr(A, n):\n    if n > len(A):\n        return A\n    else:\n        return A[n+1:] + A[:n"}
{"task_id": "Mbpp/586", "completion": "define func split_Arr(A, n)\n    if n > length of A then\n        return \"Invalid input\"\n    else\n        second_half = A[0 to n-1]\n        A = A[n to end of A]\n        A = concatenate(A, second_half)\n        return A\n"}
{"task_id": "Mbpp/586", "completion": ""}
{"task_id": "Mbpp/586", "completion": "function split_Arr(A, n):\n    if n > length(A):\n        return A\n    B = A[0..n-1]  // take the first n elements\n    C = A[n..length(A)]  // take the rest of the elements\n    result = C  // start with the rest of the elements\n    append(B) to result  // append the first n elements to the end\n    return result\n"}
{"task_id": "Mbpp/586", "completion": "\ninput_list = input_list[0:n]\noutput_list = input_list[n:]\noutput_list.extend(input_list[0:n])\n"}
{"task_id": "Mbpp/586", "completion": "input_list = l\nsplit_index = n - 1\nfirst_part = input_list[0:split_index+1]\nsecond_part = input_list[split_index+1:]\noutput_list = second_part + first_part\nreturn output_lis"}
{"task_id": "Mbpp/586", "completion": "ALGORITHM\n  Variables:\n    arr: the input list\n    n: the splitting index\n    first_part: the first part of the list\n    second_part: the second part of the list\n\n  begin\n    first_part = arr[0..n-1]\n    second_part = arr[n..end]\n    return second_part + first_part\n"}
{"task_id": "Mbpp/587", "completion": "PROCEDURE list_tuple(listx)\n    DECLARE tuplex AS tuple\n    FOR i FROM 0 TO LENGTH(listx) - 1\n        APPEND listx[i] TO tuplex\n    END FOR\n    RETURN tuplex\nEND PROCEDURE\n"}
{"task_id": "Mbpp/587", "completion": "FUNCTION list_tuple(listx)\n    IF listx IS EMPTY\n        RETURN TUPLE()\n    ELSE\n        TUPLE_HEAD = ELEMENT 0 OF listx\n        TUPLE_TAIL = listx WITHOUT ELEMENT 0\n        RETURN (TUPLE_HEAD, TUPLE_TAIL)\n"}
{"task_id": "Mbpp/587", "completion": ""}
{"task_id": "Mbpp/587", "completion": "\nfunction list_tuple(listx):\n    return tuple(listx"}
{"task_id": "Mbpp/587", "completion": "function list_tuple(listx):\n    return tuple(listx"}
{"task_id": "Mbpp/587", "completion": "function list_tuple(listx):\n    return tuple(listx"}
{"task_id": "Mbpp/587", "completion": "function list_tuple(listx)\n    return tuple(listx)\n"}
{"task_id": "Mbpp/587", "completion": "\nfunction list_tuple(listx):\n    return tuple(listx"}
{"task_id": "Mbpp/587", "completion": ""}
{"task_id": "Mbpp/587", "completion": "\nfunction list_tuple(listx):\n    tuplex = ()\n    for element in listx:\n        tuplex = tuplex + (element,)\n    return tuple"}
{"task_id": "Mbpp/588", "completion": ""}
{"task_id": "Mbpp/588", "completion": "\nfunction big_diff(nums):\n    return max(nums) - min(nums)\n"}
{"task_id": "Mbpp/588", "completion": "function big_diff(nums)\n    max_value = nums[0]\n    min_value = nums[0]\n    for num in nums:\n        if num > max_value:\n            max_value = num\n        elif num < min_value:\n            min_value = num\n    return max_value - min_value\n"}
{"task_id": "Mbpp/588", "completion": "function big_diff(list):\n    return max(list) - min(list)\n"}
{"task_id": "Mbpp/588", "completion": "\nALGORITHM:\ninput: nums, a list of numbers\noutput: the difference between the largest and smallest values in the list\n\nbegin\n    initialize min_val to the first element of the list\n    initialize max_val to the first element of the list\n    iterate through the list from the second element to the end\n        if current element is less than min_val, update min_val to be the current element\n        if current element is greater than max_val, update max_val to be the current element\n    return max_val - min_val\nend\n"}
{"task_id": "Mbpp/588", "completion": "data = nums\nmax_val = max(data)\nmin_val = min(data)\nresult = max_val - min_val\n"}
{"task_id": "Mbpp/588", "completion": "data = nums[0]\nmin_val = data\nmax_val = data\n\nfor each in nums:\n    if each < min_val:\n        min_val = each\n    elif each > max_val:\n        max_val = each\n\nreturn max_val - min_va"}
{"task_id": "Mbpp/588", "completion": "data = nums\nlargest = data[0]\nsmallest = data[0]\n\nfor i from 1 to length(data) - 1:\n  if data[i] > largest:\n    largest = data[i]\n  elif data[i] < smallest:\n    smallest = data[i]\n\nreturn largest - smalles"}
{"task_id": "Mbpp/588", "completion": "\nfunction big_diff(nums):\n    max_value = nums[0]\n    min_value = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] > max_value:\n            max_value = nums[i]\n        elif nums[i] < min_value:\n            min_value = nums[i]\n    \n    return max_value - min_value\n"}
{"task_id": "Mbpp/588", "completion": "\nfunction big_diff(input_list):\n    if len(input_list) < 2:\n        return None\n    else:\n        min_val = input_list[0]\n        max_val = input_list[0]\n        for num in input_list:\n            if num > max_val:\n                max_val = num\n            elif num < min_val:\n                min_val = num\n        return max_val - min_val\n"}
{"task_id": "Mbpp/589", "completion": ""}
{"task_id": "Mbpp/589", "completion": "function perfect_squares(a, b):\n    result = []\n    for i from a to b:\n        sqrt = math.sqrt(i)\n        if sqrt == int(sqrt):\n            result.append(i)\n    return resul"}
{"task_id": "Mbpp/589", "completion": "\nfunction perfect_squares(a, b)\n    result = []\n    i = sqrt(a)\n    while i * i <= b do\n        if floor(i) * floor(i) >= a and floor(i) * floor(i) <= b then\n            result.append(floor(i) * floor(i))\n        i = i + 1\n    return result\n"}
{"task_id": "Mbpp/589", "completion": "\nfunction perfect_squares(a, b):\n    result = []\n    i = int(math.sqrt(a))\n    while i * i <= b:\n        if a <= i * i <= b:\n            result.append(i * i)\n        i += 1\n    return result\n"}
{"task_id": "Mbpp/589", "completion": "function perfect_squares(a, b)\n    result = []\n    for i from a to b\n        square_root = math.sqrt(i)\n        if square_root == int(square_root)\n            result.append(i)\n    return resul"}
{"task_id": "Mbpp/589", "completion": "\nfunction find_perfect_squares(a, b)\n    squares = []\n    i = 1\n    while i * i <= b\n        if a <= i * i <= b\n            squares.append(i * i)\n        i = i + 1\n    return squares\n"}
{"task_id": "Mbpp/589", "completion": ""}
{"task_id": "Mbpp/589", "completion": "\nfunction perfect_squares(a, b):\n    result = []\n    for i in range(a, b+1):\n        sqrt = math.sqrt(i)\n        if sqrt == int(sqrt):\n            result.append(i)\n    return result\n"}
{"task_id": "Mbpp/589", "completion": "function perfect_squares(a, b):\n    squares = []\n    i = int(math.sqrt(a))\n    while i <= int(math.sqrt(b)):\n        if i * i >= a and i * i <= b:\n            squares.append(i * i)\n        i += 1\n    return squares\n"}
{"task_id": "Mbpp/589", "completion": "\nfunction perfect_squares(a, b):\n    result = []\n    for i from a to b:\n        square_root = sqrt(i)\n        if int(square_root + 0.5) ** 2 == i:\n            result.append(i)\n    return resul"}
{"task_id": "Mbpp/590", "completion": "\nfunction polar_rect(x, y):\n    r = abs(complex(x, y))\n    theta = cmath.phase(complex(x, y))\n    return (r * cos(theta), r * sin(theta)"}
{"task_id": "Mbpp/590", "completion": "\nfunction polar_rect(x, y):\n    radius = abs(complex(x, y))\n    angle = cmath.phase(complex(x, y))\n    x_rect = radius * cos(angle)\n    y_rect = radius * sin(angle)\n    return (x_rect, y_rect"}
{"task_id": "Mbpp/590", "completion": ""}
{"task_id": "Mbpp/590", "completion": "function polar_rect(r, theta):\n    return (r * cos(theta), r * i * sin(theta)"}
{"task_id": "Mbpp/590", "completion": "function polar_rect(x, y)\n    radius = sqrt(x**2 + y**2)\n    angle = atan2(y, x)\n    return (radius*cos(angle), radius*sin(angle)"}
{"task_id": "Mbpp/590", "completion": "function polar_rect(x, y)\n    r = sqrt(x^2 + y^2)\n    theta = atan(y / x)\n    if x < 0 and y >= 0 then\n        theta = pi + theta\n    elif x < 0 and y < 0 then\n        theta = 2*pi + theta\n    end if\n    return (r*cos(theta), r*sin(theta)"}
{"task_id": "Mbpp/590", "completion": "\nfunction polar_rect(x, y)\n    angle = (y / x) * 180 / pi\n    radius = x\n    return ((radius * cos(angle * pi / 180), radius * sin(angle * pi / 180))\n"}
{"task_id": "Mbpp/590", "completion": "\nfunction polar_rect(x, y)\n    r = sqrt(x**2 + y**2)\n    theta = atan2(y, x)\n    return (r * cos(theta), r * sin(theta))\n"}
{"task_id": "Mbpp/590", "completion": "function polar_rect(x, y)\n    radian = y * (pi / 180)\n    r = x\n    x_rect = r * cos(radian)\n    y_rect = r * sin(radian)\n    return (x_rect, y_rect"}
{"task_id": "Mbpp/590", "completion": "\nfunction polar_rect(x, y):\n    theta = y * (pi / 180)\n    r = x\n    x_rect = r * cos(theta)\n    y_rect = r * sin(theta)\n    return (x_rect, y_rect"}
{"task_id": "Mbpp/591", "completion": "function swap_list(input_list):\n    if len(input_list) > 1:\n        temp = input_list[0]\n        input_list[0] = input_list[-1]\n        input_list[-1] = temp\n    return input_lis"}
{"task_id": "Mbpp/591", "completion": "algorithm swap_List(inputList):\n    if length of inputList is greater than or equal to 1:\n        temp = first element of inputList\n        first element of inputList = last element of inputList\n        last element of inputList = temp\n    return inputList\n"}
{"task_id": "Mbpp/591", "completion": "function swap_List(list):\n    if len(list) > 1:\n        list[0], list[-1] = list[-1], list[0]\n    return list\n"}
{"task_id": "Mbpp/591", "completion": "\nfunction swap_List(input_list):\n    if len(input_list) > 1:\n        input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    return input_list\n"}
{"task_id": "Mbpp/591", "completion": "\nfunction swap_List(input_list):\n    if len(input_list) > 1:\n        temp = input_list[0]\n        input_list[0] = input_list[-1]\n        input_list[-1] = temp\n    return input_list\n"}
{"task_id": "Mbpp/591", "completion": "if len(newList) > 1:\n  temp = newList[0]\n  newList[0] = newList[-1]\n  newList[-1] = temp\nreturn newLis"}
{"task_id": "Mbpp/591", "completion": ""}
{"task_id": "Mbpp/591", "completion": "function swap_list(input_list):\n    if len(input_list) > 1:\n        input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    return input_lis"}
{"task_id": "Mbpp/591", "completion": "\nfunction swap_List(newList):\n    if len(newList) > 1:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    return newLis"}
{"task_id": "Mbpp/591", "completion": "function swap_List(input_list):\n    if len(input_list) > 1:\n        input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    return input_lis"}
{"task_id": "Mbpp/592", "completion": "function sum_of_product(n):\n    total_sum = 0\n    for k from 1 to n:\n        total_sum = total_sum + binomial_coeff(n, k) * binomial_coeff(n, k-1)\n    return total_su"}
{"task_id": "Mbpp/592", "completion": ""}
{"task_id": "Mbpp/592", "completion": "function sum_of_product(n):\n    sum = 0\n    for i from 1 to n:\n        product = 1\n        for j from 0 to i:\n            product = product * binomial_coefficient(i, j)\n        sum = sum + product\n    return sum\n"}
{"task_id": "Mbpp/592", "completion": ""}
{"task_id": "Mbpp/592", "completion": ""}
{"task_id": "Mbpp/592", "completion": "function sum_of_product(n):\n    total_sum = 0\n    for k from 0 to n:\n        total_sum = total_sum + binomial_coefficient(n, k) * binomial_coefficient(n, k-1)\n    return total_sum\n"}
{"task_id": "Mbpp/592", "completion": "function sum_of_product(n):\n    total = 0\n    for k from 1 to n:\n        binom = binomial_coefficient(n, k)\n        product = 1\n        for i from 1 to k:\n            product = product * binomial_coefficient(i, k)\n        total = total + product\n    return tota"}
{"task_id": "Mbpp/592", "completion": ""}
{"task_id": "Mbpp/592", "completion": "function sum_of_product(n):\n    total_sum = 0\n    for k in range(2, n + 1):\n        total_sum += binomial_coeff(n, k) * binomial_coeff(n, k - 1)\n    return total_sum\n"}
{"task_id": "Mbpp/592", "completion": "function sum_of_product(n):\n    sum = 0\n    for k from 0 to n:\n        sum = sum + binomial_coeff(n, k) * binomial_coeff(n, k)\n    return sum\n"}
{"task_id": "Mbpp/593", "completion": "function removezero_ip(ip)\n    if (ip[0] == '0') and (ip[1] != '.'):\n        ip = ip.replace('0.', '.')\n    return ip\n"}
{"task_id": "Mbpp/593", "completion": "function remove_zero_ip(ip):\n    parts = ip.split(\".\")\n    new_parts = []\n    for part in parts:\n        new_part = part.lstrip('0') or '0'\n        new_parts.append(new_part)\n    return \".\".join(new_parts"}
{"task_id": "Mbpp/593", "completion": "function removezero_ip(ip):\n    return re.sub(r'^0\\.(\\d+)', lambda m: '.' + str(int(m.group(1))), ip"}
{"task_id": "Mbpp/593", "completion": "function removezero_ip(ip):\n    return re.sub(r'^0+|\\.(0+)', lambda m: '.' if m.group() == '.' else m.group(1), ip"}
{"task_id": "Mbpp/593", "completion": "function removezero_ip(ip):\n    return re.sub(r'^0+(\\d+)', r'\\1', ip).replace('0.', '.')\n"}
{"task_id": "Mbpp/593", "completion": "\nfunction removezero_ip(ip):\n    return re.sub(r'^0+(\\d+)(?:\\.(?!0+$))', r'\\1', ip"}
{"task_id": "Mbpp/593", "completion": "function removezero_ip(ip):\n    return re.sub(r'^0+(?!$)', '', ip)\n"}
{"task_id": "Mbpp/593", "completion": "function removezero_ip(ip)\n    return ip.replace(\"0.\", \".\")\n"}
{"task_id": "Mbpp/593", "completion": "function remove_zeroes_from_ip(ip):\n    return \".\".join(map(str, map(int, filter(lambda x: x != '0' or x == '0' and x is not '0', ip.split('.'))))\n"}
{"task_id": "Mbpp/593", "completion": "\nfunction removezero_ip(ip):\n    parts = ip.split('.')\n    new_parts = []\n    for part in parts:\n        if len(part) > 1 and part[0] == '0':\n            new_parts.append(part[1:])\n        else:\n            new_parts.append(part)\n    return '.'.join(new_parts"}
{"task_id": "Mbpp/594", "completion": "\nfunction find_difference(list1)\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                break\n        else:\n            if odd is None:\n                odd = num\n            else:\n                break\n    return even - odd\n"}
{"task_id": "Mbpp/594", "completion": "if len(list1) == 0:\n    return \"List is empty\"\nfirst_even = None\nfirst_odd = None\nfor num in list1:\n    if num % 2 == 0:\n        if first_even is None:\n            first_even = num\n    else:\n        if first_odd is None:\n            first_odd = num\nif first_even is None or first_odd is None:\n    return \"List does not contain both an even and an odd number\"\nreturn abs(first_even - first_odd"}
{"task_id": "Mbpp/594", "completion": "function find_diff(list1):\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num = list1[i]\n        if list1[i] % 2 != 0:\n            odd_num = list1[i]\n    return even_num - odd_num\n"}
{"task_id": "Mbpp/594", "completion": "if not list1:\n    return None\neven_num = None\nodd_num = None\nfor num in list1:\n    if num % 2 == 0:\n        if even_num is None:\n            even_num = num\n        else:\n            break\n    else:\n        if odd_num is None:\n            odd_num = num\n        else:\n            break\nreturn even_num - odd_nu"}
{"task_id": "Mbpp/594", "completion": "function diff_even_odd(list):\n    for num in list:\n        if num % 2 == 0:\n            even = num\n        elif num % 2 != 0:\n            odd = num\n    return even - odd\n"}
{"task_id": "Mbpp/594", "completion": "\ninput_list = []\nfor num in list1:\n    if num % 2 == 0:\n        first_even = num\n    if num % 2 != 0:\n        first_odd = num\nif first_even == None or first_odd == None:\n    return None\nelse:\n    return first_even - first_odd\n"}
{"task_id": "Mbpp/594", "completion": "function diff_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                break\n        else:\n            if odd is None:\n                odd = num\n            else:\n                break\n    return even - od"}
{"task_id": "Mbpp/594", "completion": "function find_diff(list1)\n    for each item in list1:\n        if item is even:\n            even_number = item\n        if item is odd:\n            odd_number = item\n    return even_number - odd_number\n"}
{"task_id": "Mbpp/594", "completion": ""}
{"task_id": "Mbpp/594", "completion": ""}
{"task_id": "Mbpp/595", "completion": "function minSwaps(str1, str2):\n    count = 0\n    index1 = 0\n    index2 = 0\n    while index1 < len(str1) or index2 < len(str2):\n        if index1 < len(str1) and index2 < len(str2) and str1[index1] != str2[index2]:\n            if str1[index1] == \"1\":\n                count += 1\n            index1 += 1\n        else:\n            if str2[index2] == \"1\":\n                count += 1\n            index2 += 1\n    return coun"}
{"task_id": "Mbpp/595", "completion": "\nALGORITHM\n- Initialize two pointers i and j at the beginning of both strings\n- Initialize a counter for swaps\n- Loop through both strings simultaneously until either string ends\n  - If characters at current positions of both strings are different\n    - Increment the swap counter\n    - Swap characters at current positions in both strings\n    - Move pointers forward\n  - Otherwise, move pointers forward\n- Return the total swaps needed\n"}
{"task_id": "Mbpp/595", "completion": "\nfunction min_Swaps(str1, str2):\n    x = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            x = x + 1\n    return x / 2\n"}
{"task_id": "Mbpp/595", "completion": "function minSwaps(str1, str2):\n    n = len(str1)\n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    for i in range(n):\n        if str1[i] != str2[i]:\n            pos = -1\n            for j in range(i+1, n):\n                if str1[j] == str2[i]:\n                    pos = j\n                    break\n            if pos != -1:\n                str1[i], str1[pos] = str1[pos], str1[i]\n                count += 1\n            else:\n                return -1\n    return coun"}
{"task_id": "Mbpp/595", "completion": "function min_Swaps(s1, s2):\n    count = 0\n    i = 0\n    while i < len(s1):\n        if s1[i] != s2[i]:\n            j = i + 1\n            k = i\n            while j < len(s1) and s1[j] != s2[i]:\n                j += 1\n            temp = s1[i]\n            s1 = s1[:k] + s2[i] + s1[k:j] + s1[j+1:]\n            count += j - k - 1\n        i += 1\n    return count\n"}
{"task_id": "Mbpp/595", "completion": "\nfunction min_Swaps(str1, str2):\n    count = 0\n    temp_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            temp_str += str2[i]\n            count += 1\n        else:\n            temp_str += str1[i]\n    return count\n"}
{"task_id": "Mbpp/595", "completion": "function min_Swaps(s1, s2):\n    s1 = list(s1)\n    s2 = list(s2)\n    swaps = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            for j in range(i + 1, len(s1)):\n                if s1[j] == s2[i]:\n                    s1[i], s1[j] = s1[j], s1[i]\n                    swaps += 1\n                    break\n    return swap"}
{"task_id": "Mbpp/595", "completion": "function min_Swaps(str1, str2):\n    n = len(str1)\n    if n != len(str2):\n        return -1\n    swaps = 0\n    for i from 0 to n-1:\n        if str1[i] != str2[i]:\n            temp = i\n            for j from i+1 to n-1:\n                if str1[j] == str2[temp]:\n                    str1 = str1[0:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n                    str2 = str2[0:i] + str2[j] + str2[i+1:j] + str2[i] + str2[j+1:]\n                    swaps += 1\n                    break\n    return swaps\n"}
{"task_id": "Mbpp/595", "completion": "function minSwaps(str1, str2):\n    count := 0\n    i := 0\n    j := 0\n    while i < len(str1) and j < len(str2):\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            count := count + 1\n            j := 0\n        if j == len(str2):\n            i := i + 1\n            j := 0\n    return coun"}
{"task_id": "Mbpp/595", "completion": "\nfunction minSwaps(str1, str2):\n    diff_count = 0\n    swap_count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            diff_count += 1\n    if diff_count % 2 != 0:\n        return -1\n    else:\n        for i in range(diff_count // 2):\n            str1 = list(str1)\n            index1 = str1.index('0')\n            str1[index1] = '1'\n            str1 = ''.join(str1)\n            str2 = list(str2)\n            str2[index1] = '1'\n            str2 = ''.join(str2)\n            str1 = list(str1)\n            index2 = str1.index('1')\n            str1[index2] = '0'\n            str1 = ''.join(str1)\n            str2 = list(str2)\n            str2[index2] = '0'\n            str2 = ''.join(str2)\n            swap_count += 1\n        return swap_count\n"}
{"task_id": "Mbpp/596", "completion": "\nfunction tuple_size(tuple_to_check):\n    return sys.getsizeof(tuple_to_check)\n"}
{"task_id": "Mbpp/596", "completion": ""}
{"task_id": "Mbpp/596", "completion": "function tuple_size(t)\n    return sys.getsizeof(t)\n"}
{"task_id": "Mbpp/596", "completion": ""}
{"task_id": "Mbpp/596", "completion": "\nfunction tuple_size(input_tuple)\n    return sys.getsizeof(input_tuple)\n"}
{"task_id": "Mbpp/596", "completion": ""}
{"task_id": "Mbpp/596", "completion": "\nfunction tuple_size(tuple):\n    return sys.getsizeof(tuple)\n"}
{"task_id": "Mbpp/596", "completion": "\nFUNCTION tuple_size(tuple_list)\n    RETURN sys.getsizeof(tuple_list)\nEND FUNCTIO"}
{"task_id": "Mbpp/596", "completion": "\nfunction tuple_size(t)\n    return sys.getsizeof(t)\n"}
{"task_id": "Mbpp/596", "completion": "\nfunction tuple_size(input_tuple)\n    return sys.getsizeof(input_tuple)\n"}
{"task_id": "Mbpp/597", "completion": ""}
{"task_id": "Mbpp/597", "completion": ""}
{"task_id": "Mbpp/597", "completion": "\nfunction find_kth(arr1, arr2, k)\n    i = 0\n    j = 0\n    count = 0\n    while i < len(arr1) and j < len(arr2)\n        if arr1[i] < arr2[j]\n            count = count + 1\n            if count == k\n                return arr1[i]\n            i = i + 1\n        else\n            count = count + 1\n            if count == k\n                return arr2[j]\n            j = j + 1\n    if count < k\n        if i < len(arr1)\n            return arr1[i - 1]\n        else\n            return arr2[j - 1]\n"}
{"task_id": "Mbpp/597", "completion": "algorithm find_kth(arr1, arr2, k)\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2)\n        if k == 1\n            return min(arr1[i], arr2[j])\n        if arr1[i] <= arr2[j]\n            k = k - 1\n            i = i + 1\n        else\n            k = k - 1\n            j = j + 1\n    if k > 0 and i < len(arr1)\n        return arr1[i]\n    if k > 0\n        return arr2[j]\n"}
{"task_id": "Mbpp/597", "completion": "function find_kth(arr1, arr2, k):\n    if k > (len(arr1) + len(arr2)):\n        return \"k is out of range\"\n    if k <= len(arr1):\n        return arr1[k-1]\n    else:\n        return arr2[k-len(arr1)-1"}
{"task_id": "Mbpp/597", "completion": ""}
{"task_id": "Mbpp/597", "completion": "if k > (len(arr1) + len(arr2)):\n    return None\nif k == 1:\n    return min(arr1[0], arr2[0])\ni = j = 0\nwhile i < len(arr1) and j < len(arr2):\n    if len(arr1) - i <= len(arr2) - j:\n        k -= 1\n        if k == 0:\n            return arr1[i]\n        i += 1\n    else:\n        k -= 1\n        if k == 0:\n            return arr2[j]\n        j += 1\nif k > 0:\n    return arr1[i]\nelse:\n    return arr2[j"}
{"task_id": "Mbpp/597", "completion": "k = k\ni = j = 0\nwhile i < len(arr1) and j < len(arr2):\n    if arr1[i] < arr2[j]:\n        k -= 1\n        if k == 0:\n            return arr1[i]\n        i += 1\n    else:\n        k -= 1\n        if k == 0:\n            return arr2[j]\n        j += 1\nif k > 0 and i < len(arr1):\n    return arr1[i]\nif k > 0:\n    return arr2[j]\n"}
{"task_id": "Mbpp/597", "completion": ""}
{"task_id": "Mbpp/597", "completion": "function find_kth(arr1, arr2, k):\n    if k <= 0:\n        return None\n    p1 = 0\n    p2 = 0\n    while k > 0:\n        if p1 >= len(arr1):\n            return arr2[p2 + k - 1]\n        if p2 >= len(arr2):\n            return arr1[p1 + k - 1]\n        if k == 1:\n            if arr1[p1] < arr2[p2]:\n                return arr1[p1]\n            else:\n                return arr2[p2]\n        if arr1[p1] < arr2[p2]:\n            k -= 1\n            p1 += 1\n        else:\n            k -= 1\n            p2 += 1\n"}
{"task_id": "Mbpp/598", "completion": "\nfunction armstrong_number(number):\n  num_digits = length of number\n  sum = 0\n  temp = number\n  while temp > 0:\n    digit = rightmost_digit(temp)\n    sum = sum + digit^num_digits\n    temp = temp / 10\n  if sum == number:\n    return True\n  else:\n    return False\n"}
{"task_id": "Mbpp/598", "completion": ""}
{"task_id": "Mbpp/598", "completion": ""}
{"task_id": "Mbpp/598", "completion": "\nfunction armstrong_number(number):\n    digits = convert integer to list of digits\n    power = length of digits\n    sum = 0\n    for each digit in digits:\n        sum = sum + (digit ^ power)\n    return sum == number\n"}
{"task_id": "Mbpp/598", "completion": "function armstrong_number(number):\n    # calculate the number of digits in the number\n    num_digits = length(str(number))\n    \n    # initialize sum to zero\n    sum = 0\n    \n    # calculate the sum of cubes of each digit\n    for i in range(num_digits):\n        digit = (number // (10^i)) mod 10\n        sum = sum + digit^3\n    \n    # check if the number is equal to the sum\n    if number == sum:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/598", "completion": ""}
{"task_id": "Mbpp/598", "completion": "function armstrong_number(number):\n    digit_count = 0\n    temp = number\n    while temp > 0:\n        temp = floor(temp / 10)\n        digit_count = digit_count + 1\n    sum_of_powers = 0\n    temp = number\n    while temp > 0:\n        digit = temp mod 10\n        sum_of_powers = sum_of_powers + digit ** digit_count\n        temp = floor(temp / 10)\n    if sum_of_powers == number:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/598", "completion": "`input: integer number\ncalculate: sum of cube of each digit\nwhile number > 0:\n    digit = number mod 10\n    sum = sum * (digit * digit * digit)\n    number = number / 10\nif number == 1:\n    return true\nelse:\n    return false"}
{"task_id": "Mbpp/598", "completion": "\nfunction armstrong_number(number):\n    num_digits = length of number\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp mod 10\n        sum = sum + digit ^ num_digits\n        temp = temp / 10\n    return sum == number\n"}
{"task_id": "Mbpp/598", "completion": "function armstrong_number(number):\n    # convert number to string to easily get its length and calculate digits\n    num_str = str(number)\n    num_len = len(num_str)\n    \n    # initialize sum variable\n    sum = 0\n    \n    # iterate over each digit in the number\n    for i in range(num_len):\n        # raise each digit to power of num_len and add it to sum\n        sum += int(num_str[i])**num_len\n    \n    # check if sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/599", "completion": ""}
{"task_id": "Mbpp/599", "completion": "function sum_and_average(n):\n    sum = 0\n    for i from 1 to n:\n        sum = sum + i\n    average = sum / n\n    return (sum, average"}
{"task_id": "Mbpp/599", "completion": "function sum_average(n):\n    sum = 0\n    for i from 1 to n:\n        sum = sum + i\n    average = sum / n\n    return (sum, average"}
{"task_id": "Mbpp/599", "completion": ""}
{"task_id": "Mbpp/599", "completion": ""}
{"task_id": "Mbpp/599", "completion": "function sum_average(n):\n    sum = 0\n    for i from 1 to n:\n        sum = sum + i\n    average = sum / n\n    return sum, average\n"}
{"task_id": "Mbpp/599", "completion": "\nfunction sum_average(n):\n    sum = 0\n    for i from 1 to n:\n        sum = sum + i\n    average = sum / n\n    return (sum, average"}
{"task_id": "Mbpp/599", "completion": ""}
{"task_id": "Mbpp/599", "completion": "function sum_average(n):\n    total = 0\n    for i from 1 to n:\n        total = total + i\n    average = total / n\n    return total, averag"}
{"task_id": "Mbpp/599", "completion": "\nfunction sum_average(n):\n    total = 0\n    for i from 1 to n:\n        total = total + i\n    average = total / n\n    return total, average\n"}
{"task_id": "Mbpp/600", "completion": ""}
{"task_id": "Mbpp/600", "completion": "\nfunction is_Even(n):\n    if n mod 2 = 0 then\n        return True\n    else\n        return False\n"}
{"task_id": "Mbpp/600", "completion": "if n % 2 == 0 then\n    return True\nelse\n    return False\n"}
{"task_id": "Mbpp/600", "completion": ""}
{"task_id": "Mbpp/600", "completion": "\nif n mod 2 equals 0 then\n    return True\nelse\n    return False\n"}
{"task_id": "Mbpp/600", "completion": ""}
{"task_id": "Mbpp/600", "completion": "if (n mod 2 = 0) then\n  return True\nelse\n  return False\n"}
{"task_id": "Mbpp/600", "completion": ""}
{"task_id": "Mbpp/600", "completion": "function is_Even(n)\n    if n mod 2 = 0 then\n        return True\n    else\n        return False\n"}
{"task_id": "Mbpp/600", "completion": "\nIF n MOD 2 = 0 THEN\n    RETURN True\nELSE\n    RETURN False\nENDIF\n"}
{"task_id": "Mbpp/602", "completion": "function first_repeated_char(str1)\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "Mbpp/602", "completion": "function first_repeated_char(str1):\n    char_dict = {}\n    for i in str1:\n        if i in char_dict:\n            return i\n        else:\n            char_dict[i] = True\n"}
{"task_id": "Mbpp/602", "completion": "function first_repeated_char(str1)\n    char_dict = {}\n    for each char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None\n"}
{"task_id": "Mbpp/602", "completion": "function find_first_repeated_char(str):\n    char_frequency = {}\n    for char in str:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    for char in str:\n        if char_frequency[char] > 1:\n            return char\n"}
{"task_id": "Mbpp/602", "completion": "function first_repeated_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "Mbpp/602", "completion": "function find_first_repeated_char(input_string):\n    char_count = {}\n    for each char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for each char in input_string:\n        if char_count[char] > 1:\n            return char\n"}
{"task_id": "Mbpp/602", "completion": "function first_repeated_char(str1):\n    hash_map = {}\n    for char in str1:\n        if char in hash_map:\n            return char\n        else:\n            hash_map[char] = 1\n    return Non"}
{"task_id": "Mbpp/602", "completion": "function first_repeated_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None\n"}
{"task_id": "Mbpp/602", "completion": "function first_repeated_char(str1):\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n"}
{"task_id": "Mbpp/602", "completion": "\nfunction first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] > 1:\n            return cha"}
{"task_id": "Mbpp/603", "completion": "function get_ludic(n):\n    result = []\n    for i in range(1, n + 1):\n        if not any(i % j == 0 for j in range(2, int(i ** 0.5) + 1)):\n            result.append(i)\n    return resul"}
{"task_id": "Mbpp/603", "completion": "\nfunction get_ludic(n):\n    result = []\n    for i from 1 to n:\n        if not (i mod 2 == 0 or i mod 3 == 0 or i mod 5 == 0):\n            result.append(i)\n    return result\n"}
{"task_id": "Mbpp/603", "completion": "\nfunction get_ludic(n):\n    result = []\n    for i in range(1, n+1):\n        if not (i & (i-1)):\n            result.append(i)\n    return resul"}
{"task_id": "Mbpp/603", "completion": "function get_ludic(n):\n    result = []\n    i = 0\n    while i * i <= n:\n        if is_prime(i):\n            result.append(i)\n        i = i + 1\n    return result\n\nfunction is_prime(m):\n    if m <= 1:\n        return false\n    for i from 2 to sqrt(m):\n        if m mod i == 0:\n            return false\n    return tru"}
{"task_id": "Mbpp/603", "completion": "function get_ludic(n):\n    lucid_numbers = []\n    i = 0\n    while i * i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\nfunction is_lucid(num):\n    if num < 4:\n        return True\n    while num % 6 != 5 and num % 2 == 0:\n        num /= 2\n    return num == 5 or num == "}
{"task_id": "Mbpp/603", "completion": "function get_ludic(n):\n    result = []\n    for i in range(1, n+1):\n        if not any(i % j == 0 for j in range(2, int(i**0.5) + 1)):\n            result.append(i)\n    return result\n"}
{"task_id": "Mbpp/603", "completion": "\nfunction get_ludic(n):\n    result = []\n    i = 0\n    while i <= n:\n        if is_lucid(i):\n            result.append(i)\n        i += 1\n    return result\n\nfunction is_lucid(num):\n    if num < 10:\n        return true\n    for i from 2 to sqrt(num):\n        if num mod i == 0:\n            return false\n    return true\n"}
{"task_id": "Mbpp/603", "completion": ""}
{"task_id": "Mbpp/603", "completion": "function get_lucid(n):\n    lucid_numbers = []\n    i = 0\n    while i * (i + 1) <= n:\n        is_lucid = True\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                is_lucid = False\n                break\n            j = j + 1\n        if is_lucid:\n            lucid_numbers.append(i)\n        i = i + 1\n    return lucid_number"}
{"task_id": "Mbpp/603", "completion": "function get_ludic(n)\n    result = []\n    for i from 1 to n\n        if is_ludic(i)\n            result.append(i)\n    return result\n\nfunction is_ludic(n)\n    if n <= 1\n        return true\n    for i from 2 to sqrt(n)\n        if n mod i is 0\n            return false\n    return true\n"}
{"task_id": "Mbpp/604", "completion": "\nfunction reverse_words(s):\n    words = split(s, \" \")\n    reversed_words = ()\n    for i from length(words)-1 downto 0:\n        reversed_words = concatenate(reversed_words, words[i])\n        if i > 0:\n            reversed_words = concatenate(reversed_words, \" \")\n    return reversed_words\n"}
{"task_id": "Mbpp/604", "completion": "function reverse_words(s):\n    list_of_words = split(s, ' ')\n    reversed_list = []\n    for word in list_of_words:\n        reversed_list.append(word.reverse())\n    return join(reversed_list, ' '"}
{"task_id": "Mbpp/604", "completion": "\nfunction reverse_words(s)\n    str = \"\"\n    word = \"\"\n    for char in s:\n        if char != \" \":\n            word = word + char\n        else:\n            str = str + reverse(word) + \" \"\n            word = \"\"\n    str = str + reverse(word)\n    return str\n"}
{"task_id": "Mbpp/604", "completion": "input_str = s\nwords = input_str.split()\nreversed_words = words[::-1]\noutput_str = ' '.join(reversed_words)\n"}
{"task_id": "Mbpp/604", "completion": ""}
{"task_id": "Mbpp/604", "completion": "\nfunction reverse_words(s):\n    words = split(s, ' ')\n    reversed_words = []\n    for word in words:\n        reversed_word = word + ' '\n        reversed_word = reverse(reversed_word)\n        reversed_words.append(reversed_word)\n    return join(reversed_words"}
{"task_id": "Mbpp/604", "completion": "\ninput_string = s\nreversed_string = \"\"\ntemp = \"\"\n\nfor i in range(len(input_string)):\n    if input_string[i] != \" \":\n        temp += input_string[i]\n    else:\n        reversed_string = temp + \" \" + reversed_string\n        temp = \"\"\n\nreversed_string = temp + \" \" + reversed_string\nreturn reversed_string.strip("}
{"task_id": "Mbpp/604", "completion": "input = s\noutput = \"\"\ntemp = \"\"\n\nfor i in range(len(input)-1, -1, -1):\n    if input[i] != ' ':\n        temp = input[i] + temp\n    else:\n        if temp != \"\":\n            output += temp + \" \"\n            temp = \"\"\noutput += temp\n"}
{"task_id": "Mbpp/604", "completion": "input_string = s\nwords = input_string.split()\nreversed_words = words[::-1]\noutput_string = ' '.join(reversed_words)\n"}
{"task_id": "Mbpp/604", "completion": "function reverse_words(s):\n    words = s.split(\" \")\n    reversed_words = words[::-1]\n    result = \" \".join(reversed_words)\n    return result\n"}
{"task_id": "Mbpp/605", "completion": ""}
{"task_id": "Mbpp/605", "completion": "\nfunction is_divisor(n, i):\n    while i <= n / i:\n        if (n % i) = 0:\n            return false\n        i = i + 1\n    return true\n\nfunction prime_num(num):\n    if num < 2:\n        return false\n    else:\n        return is_divisor(num, 2"}
{"task_id": "Mbpp/605", "completion": ""}
{"task_id": "Mbpp/605", "completion": ""}
{"task_id": "Mbpp/605", "completion": "\nfunction prime_num(num):\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i from 2 to sqrt(num):\n            if num % i == 0:\n                return False\n        return True\n"}
{"task_id": "Mbpp/605", "completion": "function prime_num(num)\n    if num <= 1:\n        return False\n    for i from 2 to math.sqrt(num):\n        if num % i == 0:\n            return False\n    return Tru"}
{"task_id": "Mbpp/605", "completion": "function is_prime(num)\n    if num <= 1 then\n        return false\n    else\n        for i from 2 to sqrt(num) inclusive\n            if num mod i == 0 then\n                return false\n        end for\n        return true\n    end if\nend functio"}
{"task_id": "Mbpp/605", "completion": ""}
{"task_id": "Mbpp/605", "completion": "function prime_num(num)\n    if num <= 1\n        return false\n    else\n        for i from 2 to sqrt(num)\n            if num mod i == 0\n                return false\n        return true\n"}
{"task_id": "Mbpp/605", "completion": "function prime_num(num)\n    if num < 2:\n        return false\n    for i from 2 to sqrt(num)\n        if num % i == 0:\n            return false\n    return true\n"}
{"task_id": "Mbpp/606", "completion": "function radian_degree(degree)\n    return math.pi * degree / 18"}
{"task_id": "Mbpp/606", "completion": "function radian_degree(degree)\n    return degree * pi / 18"}
{"task_id": "Mbpp/606", "completion": "\nfunction radian_degree(degree)\n    return degree * math.pi / 180\nend function\n"}
{"task_id": "Mbpp/606", "completion": "function radian_degree(degree)\n    pi = 3.14159265359\n    radian = degree * (pi / 180)\n    return radia"}
{"task_id": "Mbpp/606", "completion": "\nfunction radian_degree(degree):\n    return math.pi * degree / 180\n"}
{"task_id": "Mbpp/606", "completion": ""}
{"task_id": "Mbpp/606", "completion": "\nfunction radian_degree(degree)\n    result = degree * 3.14159265359 / 180\n    return result\n"}
{"task_id": "Mbpp/606", "completion": "function radian_degree(degree)\n    return degree * (math.pi / 180)\n"}
{"task_id": "Mbpp/606", "completion": "function radian_degree(degree)\n    return degree * 3.14159 / 18"}
{"task_id": "Mbpp/606", "completion": "function radian_degree(degree)\n    return degree * 3.14159265359/18"}
{"task_id": "Mbpp/607", "completion": "\nfunction find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -1\n"}
{"task_id": "Mbpp/607", "completion": ""}
{"task_id": "Mbpp/607", "completion": "function find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        substring = match.group(0)\n        start_index = match.start()\n        end_index = match.end()\n        return substring, start_index, end_index\n"}
{"task_id": "Mbpp/607", "completion": "function find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        substring = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return substring, start_index, end_index\n    else:\n        return None, -1, -1\n"}
{"task_id": "Mbpp/607", "completion": "function find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    match = next(matches, None)\n    if match is not None:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -"}
{"task_id": "Mbpp/607", "completion": "\nfunction find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -"}
{"task_id": "Mbpp/607", "completion": "function find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        start_index = match.start()\n        end_index = match.end()\n        return (match.group(), start_index, end_index"}
{"task_id": "Mbpp/607", "completion": "function find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match is not None:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -"}
{"task_id": "Mbpp/607", "completion": "\nfunction find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -1\n"}
{"task_id": "Mbpp/607", "completion": "function find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, -1, -"}
{"task_id": "Mbpp/608", "completion": "\nfunction bell_number(n)\n    if n = 1 then\n        return 1\n    else\n        result = 0\n        for i from 1 to n do\n            result = result + bell_number(i - 1) * bell_number(n - i)\n        end for\n        return result\n    end if\nend function\n"}
{"task_id": "Mbpp/608", "completion": "\nfunction bell_Number(n):\n    if n <= 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n):\n            result *= (2 * i + 1)\n        return result / (i + 1)\n"}
{"task_id": "Mbpp/608", "completion": "function bell_Number(n)\n    if n == 0 then\n        return 1\n    else\n        b = 1\n        p = 1\n        for i from 1 to n-1 do\n            temp = p * (n + i - 1) / i\n            b += temp\n            p *= (n + i) / i\n        end for\n        return b\n"}
{"task_id": "Mbpp/608", "completion": ""}
{"task_id": "Mbpp/608", "completion": ""}
{"task_id": "Mbpp/608", "completion": "\nfunction bell_Number(n)\n    if n is 0\n        return 1\n    elif n is 1\n        return 1\n    else\n        result = 0\n        for i from 0 to n-1\n            result += bell_Number(i) * (n - 1 choose i)\n        return result\n"}
{"task_id": "Mbpp/608", "completion": "function bell_Number(n)\n    if n == 0\n        return 1\n    else\n        sum = 1\n        for i from 1 to n\n            sum = sum + bell_Number(i-1) * bell_Number(n-i)\n        return sum\n"}
{"task_id": "Mbpp/608", "completion": ""}
{"task_id": "Mbpp/608", "completion": "function bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        bell_numbers = [1]\n        for i in range(1, n):\n            bell_numbers.append(bell_numbers[i-1] * (i + 1) + sum(bell_numbers[0:i]))\n        return bell_numbers[n-1]\n"}
{"task_id": "Mbpp/608", "completion": ""}
{"task_id": "Mbpp/610", "completion": "input list = list1\nk = k - 1\noutput_list = []\nfor i in range(len(list1)):\n    if i != k:\n        output_list.append(list1[i])\nreturn output_lis"}
{"task_id": "Mbpp/610", "completion": "function remove_kth_element(list1, k):\n    if k > length(list1):\n        print(\"Error: k is greater than the length of the list\")\n    else:\n        return list1[0:k-1] + list1[k+1:]\n"}
{"task_id": "Mbpp/610", "completion": "\nfunction remove_kth_element(list1, k):\n    if k > length(list1):\n        return \"Error: k is out of range\"\n    else:\n        new_list = []\n        for i in range(length(list1)):\n            if i != k-1:\n                new_list.append(list1[i])\n        return new_list\n"}
{"task_id": "Mbpp/610", "completion": "function remove_kth_element(input_list, k):\n    if k > len(input_list):\n        return \"Error: k is larger than the length of the list\"\n    else:\n        new_list = input_list[:k-1] + input_list[k+1:]\n        return new_lis"}
{"task_id": "Mbpp/610", "completion": "function remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k+1:]\n"}
{"task_id": "Mbpp/610", "completion": "\nfunction remove_kth_element(list1, k)\n    return list1[:k-1] + list1[k+1:"}
{"task_id": "Mbpp/610", "completion": "function remove_kth_element(list1, k):\n    list2 = []\n    for i in range(len(list1)):\n        if i != k - 1:\n            list2.append(list1[i])\n    return list2\n"}
{"task_id": "Mbpp/610", "completion": "function remove_kth_element(list1, k):\n    list2 = []\n    count = 0\n    for element in list1:\n        if count != k:\n            list2.append(element)\n        count += 1\n    return list"}
{"task_id": "Mbpp/610", "completion": "data = input_list\nk_index = k - 1\nreturn data[:k_index] + data[k_index+1:"}
{"task_id": "Mbpp/610", "completion": "\ninput list = input_list\nk = k-1\nif k > len(input_list):\n    return \"k is larger than the size of the list\"\nelse:\n    output_list = []\n    for i in range(len(input_list)):\n        if i != k:\n            output_list.append(input_list[i])\n    return output_list\n"}
{"task_id": "Mbpp/611", "completion": "function max_of_nth(matrix, n)\n    max_value = -inf\n    for row in matrix:\n        if row[n] > max_value:\n            max_value = row[n]\n    return max_valu"}
{"task_id": "Mbpp/611", "completion": "data = test_list\nn = N\nmax_val = -float('inf')\nfor row in data:\n    if row[n-1] > max_val:\n        max_val = row[n-1]\nreturn max_va"}
{"task_id": "Mbpp/611", "completion": "function max_of_nth(matrix, n)\n    max_value = -float('inf')\n    for row in matrix:\n        if row[n-1] > max_value:\n            max_value = row[n-1]\n    return max_valu"}
{"task_id": "Mbpp/611", "completion": "function max_of_nth(matrix, n)\n    max_value = -inf\n    for row in matrix:\n        if row[n] > max_value:\n            max_value = row[n]\n    return max_value\n"}
{"task_id": "Mbpp/611", "completion": "function max_of_nth(matrix, n):\n    result = -\u221e\n    for row in matrix:\n        if row[n] > result:\n            result = row[n]\n    return resul"}
{"task_id": "Mbpp/611", "completion": ""}
{"task_id": "Mbpp/611", "completion": "function max_of_nth(matrix, n)\n    max_val = -infinity\n    for row in matrix:\n        if row[n] > max_val:\n            max_val = row[n]\n    return max_val\n"}
{"task_id": "Mbpp/611", "completion": "\nfunction max_of_nth(matrix, n):\n    max_value = -inf\n    for row in matrix:\n        if row[n-1] > max_value:\n            max_value = row[n-1]\n    return max_valu"}
{"task_id": "Mbpp/611", "completion": "function max_of_nth(matrix, n)\n    max_val = -inf\n    for row in matrix:\n        if row[n-1] > max_val:\n            max_val = row[n-1]\n    return max_va"}
{"task_id": "Mbpp/611", "completion": "function max_of_nth(matrix, n)\n    max_val = -inf\n    for row in matrix:\n        if row[n] > max_val:\n            max_val = row[n]\n    return max_val\n"}
{"task_id": "Mbpp/612", "completion": "data = []\nfor i in lst:\n    data[0].append(i[0])\n    data[1].append(i[1])\nreturn [data[0], data[1]]\n"}
{"task_id": "Mbpp/612", "completion": "function merge(lst):\n    result = [[], []]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return resul"}
{"task_id": "Mbpp/612", "completion": "function merge(list_of_lists):\n    result = [[], []]\n    for sublist in list_of_lists:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return resul"}
{"task_id": "Mbpp/612", "completion": "\nMERGE\n  Input: lst (list of lists, where each sublist has two elements)\n  Output: result (list of two lists)\n\n  result = [ [], [] ]\n  FOR i = 0 TO lst.length - 1\n    result[0] = result[0] + [lst[i][0]]\n    result[1] = result[1] + [lst[i][1]]\n  END FOR\n\n  RETURN result\n"}
{"task_id": "Mbpp/612", "completion": "\nfunction merge(listOfLists)\n    result1 = []\n    result2 = []\n    for sublist in listOfLists:\n        result1.append(sublist[0])\n        result2.append(sublist[1])\n    return [result1, result2]\n"}
{"task_id": "Mbpp/612", "completion": "result1 = []\nresult2 = []\nfor sub_list in lst:\n    result1.append(sub_list[0])\n    result2.append(sub_list[1])\nreturn [result1, result2"}
{"task_id": "Mbpp/612", "completion": "function merge(listOfLists):\n    result = [[], []]\n    for sublist in listOfLists:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return [result[0] + [result[1][0]], result[1][1:]"}
{"task_id": "Mbpp/612", "completion": "function result = merge(list)\n    list1 = []\n    list2 = []\n    for i in range(len(list)):\n        list1.append(list[i][0])\n        list2.append(list[i][1])\n    return [list1, list2"}
{"task_id": "Mbpp/612", "completion": ""}
{"task_id": "Mbpp/612", "completion": ""}
{"task_id": "Mbpp/614", "completion": ""}
{"task_id": "Mbpp/614", "completion": "\nfunction cummulative_sum(test_list):\n    total = 0\n    for value in test_list:\n        if type(value) == type(()):\n            for v in value:\n                total += v\n        else:\n            total += value\n    return total\n"}
{"task_id": "Mbpp/614", "completion": "function cummulative_sum(test_list):\n    total = 0\n    for t in test_list:\n        for v in t:\n            total += v\n    return tota"}
{"task_id": "Mbpp/614", "completion": "function cummulative_sum(test_list):\n    total = 0\n    for sublist in test_list:\n        for num in sublist:\n            total += num\n    return tota"}
{"task_id": "Mbpp/614", "completion": "\nfunction cummulative_sum(test_list):\n    total = 0\n    for group in test_list:\n        total += sum(group)\n    return total\n"}
{"task_id": "Mbpp/614", "completion": "function cumulative_sum(test_list):\n    total = 0\n    result = []\n    for sub_list in test_list:\n        for value in sub_list:\n            total += value\n        result.append(total)\n        total = 0\n    return sum(result)\n"}
{"task_id": "Mbpp/614", "completion": "\nfunction cummulative_sum(test_list)\n    total = 0\n    for tuple in test_list:\n        for value in tuple:\n            total += value\n    return total\n"}
{"task_id": "Mbpp/614", "completion": "\nfunction cummulative_sum(test_list):\n    total = 0\n    for t in test_list:\n        for i in t:\n            total += i\n    return total\n"}
{"task_id": "Mbpp/614", "completion": "function cumulative_sum(input_list):\n    total = 0\n    for sublist in input_list:\n        for value in sublist:\n            total += value\n    return tota"}
{"task_id": "Mbpp/614", "completion": "input_list = []\ncumulative_sum = 0\nfor sublist in test_list:\n    for num in sublist:\n        input_list.append(num)\nfor num in input_list:\n    cumulative_sum += num\nreturn cumulative_sum\n"}
{"task_id": "Mbpp/615", "completion": "function average_tuple(nums):\n    result = []\n    for num in nums:\n        total = sum(num)\n        average = total / len(num)\n        result.append(average)\n    return resul"}
{"task_id": "Mbpp/615", "completion": "\nfunction average_tuple(tuple_list)\n    result = []\n    for t in tuple_list:\n        sum = 0\n        count = 0\n        for num in t:\n            sum += num\n            count += 1\n        result.append(sum / count)\n    return result\n"}
{"task_id": "Mbpp/615", "completion": "function average_tuple(nums):\n    result = []\n    for t in nums:\n        sum_of_elements = sum(t)\n        avg = sum_of_elements / len(t)\n        result.append(avg)\n    return result\n"}
{"task_id": "Mbpp/615", "completion": "function average_tuple(tuple_of_tuples):\n    averages = []\n    for t in tuple_of_tuples:\n        total = sum(t)\n        average = total / len(t)\n        averages.append(average)\n    return averages\n"}
{"task_id": "Mbpp/615", "completion": "\nfunction average_tuple(tuple_of_tuples):\n    result = []\n    for t in tuple_of_tuples:\n        total = sum(t)\n        average = total / len(t)\n        result.append(average)\n    return resul"}
{"task_id": "Mbpp/615", "completion": "\nfunction average_tuple(input_tuples):\n    result = []\n    for t in input_tuples:\n        total = sum(t)\n        average = total / len(t)\n        result.append(average)\n    return resul"}
{"task_id": "Mbpp/615", "completion": "function average_tuple(tuples):\n    result = []\n    for t in tuples:\n        sum = 0\n        for num in t:\n            sum += num\n        result.append(sum / len(t))\n    return result\n"}
{"task_id": "Mbpp/615", "completion": "data = input_tuple\nresult = []\nfor t in data:\n    sum_val = 0\n    count = 0\n    for num in t:\n        sum_val += num\n        count += 1\n    result.append(sum_val / count)\nreturn resul"}
{"task_id": "Mbpp/615", "completion": "function average_tuple(tuples):\n    result = []\n    total = 0\n    count = 0\n    for t in tuples:\n        total += sum(t)\n        count += len(t)\n    for t in tuples:\n        avg = total / count\n        result.append(avg)\n        total -= t[0]\n        count -= 1\n    return resul"}
{"task_id": "Mbpp/615", "completion": "input_tuples = input_tuples\nn = len(input_tuples)\naverage_list = []\nfor i in range(n):\n    total = sum(input_tuples[i])\n    average = total / len(input_tuples[i])\n    average_list.append(average)\nreturn average_lis"}
{"task_id": "Mbpp/616", "completion": "\nfunction tuple_modulo(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n"}
{"task_id": "Mbpp/616", "completion": "function tuple_modulo(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return resul"}
{"task_id": "Mbpp/616", "completion": "function tuple_modulo(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] % test_tup2[i],)\n    return result\n"}
{"task_id": "Mbpp/616", "completion": "\nfunction tuple_modulo(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n"}
{"task_id": "Mbpp/616", "completion": "function tuple_modulo(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return resul"}
{"task_id": "Mbpp/616", "completion": "\nFUNCTION tuple_modulo(test_tup1, test_tup2)\n    result = ()\n    FOR i IN RANGE(LENGTH(test_tup1))\n        result = result + (test_tup1[i] MOD test_tup2[i],)\n    RETURN result\nEND FUNCTIO"}
{"task_id": "Mbpp/616", "completion": "function tuple_modulo(t1, t2):\n    result = ()\n    for i in range(len(t1)):\n        result += (t1[i] % t2[i],)\n    return result\n"}
{"task_id": "Mbpp/616", "completion": "function tuple_modulo(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return resul"}
{"task_id": "Mbpp/616", "completion": "\nfunction tuple_modulo(test_tup1, test_tup2):\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] % test_tup2[i],)\n    return resul"}
{"task_id": "Mbpp/616", "completion": "function tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        error \"tuples must have the same length\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n"}
{"task_id": "Mbpp/618", "completion": "function div_list(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append(\"undefined\")\n        else:\n            result.append(nums1[i] / nums2[i])\n    return resul"}
{"task_id": "Mbpp/618", "completion": "function div_list(nums1, nums2):\n    result = []\n    for i from 0 to the length of nums1-1:\n        if nums2[i] == 0:\n            result.append(\"Error: Division by zero\")\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result\n"}
{"task_id": "Mbpp/618", "completion": "function div_list(nums1, nums2)\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            result.append(float('inf'))\n    return result\n"}
{"task_id": "Mbpp/618", "completion": "\nfunction div_list(nums1, nums2):\n    result = []\n    for i from 0 to length of nums1 - 1:\n        if nums2[i] != 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(0)\n    return resul"}
{"task_id": "Mbpp/618", "completion": "\nFUNCTION div_list(nums1, nums2)\n    IF length of nums1 is not equal to length of nums2\n        RETURN error message \"Lists must be of the same length\"\n    ELSE\n        result = []\n        FOR i FROM 0 TO length of nums1 - 1\n            IF nums2[i] is not zero\n                result.append(nums1[i] / nums2[i])\n            ELSE\n                result.append(\"undefined\")\n        END FOR\n        RETURN result\n    END IF\nEND FUNCTIO"}
{"task_id": "Mbpp/618", "completion": "function div_list(nums1, nums2)\n    result = []\n    for i from 0 to length(nums1) - 1\n        if nums2[i] != 0\n            result.append(nums1[i] / nums2[i])\n        else\n            return \"Error: Division by zero is not allowed\"\n    return result\n"}
{"task_id": "Mbpp/618", "completion": ""}
{"task_id": "Mbpp/618", "completion": ""}
{"task_id": "Mbpp/618", "completion": ""}
{"task_id": "Mbpp/618", "completion": "FUNCTION div_list(nums1, nums2)\n    DECLARE result AS LIST\n    FOR i FROM 0 TO LENGTH(nums1) - 1\n        IF nums2[i] != 0\n            result.append(nums1[i]/nums2[i])\n        ELSE\n            result.append(float('inf'))\n        END IF\n    END FOR\n    RETURN result\nEND FUNCTIO"}
{"task_id": "Mbpp/619", "completion": "function move_num(test_str)\n    var words = split(test_str, ' ')\n    var result = ''\n    var num = ''\n    for each word in words\n        if not isnumeric(word[0])\n            result += word\n        else\n            num += word\n    return result + num\n"}
{"task_id": "Mbpp/619", "completion": "function move_num(test_str):\n    letters = ''\n    numbers = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            letters += char\n    return letters + number"}
{"task_id": "Mbpp/619", "completion": "\nfunction move_num(test_str):\n    num_str = \"\"\n    result_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            if not num_str == \"\":\n                result_str += num_str\n                num_str = \"\"\n            result_str += char\n    if not num_str == \"\":\n        result_str += num_str\n    return result_str\n"}
{"task_id": "Mbpp/619", "completion": "function move_num(test_str):\n    num_str = ''\n    result_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            result_str += char\n            while num_str != '':\n                result_str += num_str[0]\n                num_str = num_str[1:]\n    while num_str != '':\n        result_str += num_str\n        num_str = ''\n    return result_st"}
{"task_id": "Mbpp/619", "completion": "function move_num(test_str)\n    new_str = \"\"\n    num_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            if num_str != \"\":\n                new_str += num_str\n                num_str = \"\"\n            new_str += char\n    if num_str != \"\":\n        new_str += num_str\n    return new_str + ''.join(sorted(num_str))\n"}
{"task_id": "Mbpp/619", "completion": "\nfunction move_num(test_str)\n    num_str = ''\n    result_str = ''\n    \n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            result_str += char\n            while len(num_str) > 0:\n                result_str += num_str[0]\n                num_str = num_str[1:]\n                \n    return result_str + num_str\n"}
{"task_id": "Mbpp/619", "completion": "function move_num(test_str):\n    num_str = \"\"\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            result += char\n    return result + num_st"}
{"task_id": "Mbpp/619", "completion": "\nfunction move_num(test_str)\n    result = \"\"\n    num = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num += char\n        else:\n            if num != \"\":\n                result += num\n                num = \"\"\n            result += char\n    if num != \"\":\n        result += num\n    return result\n"}
{"task_id": "Mbpp/619", "completion": "DATA result, numbers = \"\"\nWHILE there are still characters left in test_str\n    IF character is a digit\n        ADD characters to the end of numbers\n    ELSE\n        ADD non-digit character to the end of result\n    END IF\nEND WHILE\nAPPEND numbers to the end of result\nRETURN resul"}
{"task_id": "Mbpp/619", "completion": "function move_num(test_str):\n    num_chars = ''\n    letter_chars = ''\n    for char in test_str:\n        if char.isdigit():\n            num_chars += char\n        else:\n            letter_chars += char\n    return letter_chars + num_char"}
{"task_id": "Mbpp/620", "completion": ""}
{"task_id": "Mbpp/620", "completion": "function largest_subset(a):\n    n = length(a)\n    dp = [1] * n\n    for i from 1 to n:\n        for j from 0 to i:\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp"}
{"task_id": "Mbpp/620", "completion": "\nfunction largest_subset(a):\n    n = length(a)\n    dp = array(n+1)\n    dp[0] = 0\n    for i from 1 to n:\n        dp[i] = 1\n        for j from 1 to i:\n            if (a[j-1]%a[i-1] == 0) then\n                dp[i] = max(dp[i], dp[j-1]+1)\n    return max(dp)\n"}
{"task_id": "Mbpp/620", "completion": "function largest_subset(a):\n    n = length(a)\n    dp = [1] * n\n    for i from 0 to n - 1:\n        for j from 0 to i:\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp"}
{"task_id": "Mbpp/620", "completion": "\nfunction largest_subset(a):\n    n = len(a)\n    dp = [0] * n\n    visited = set()\n    max_length = 0\n    \n    for i from 0 to n - 1:\n        if not (i in visited):\n            curr_length = 1\n            j = i - 1\n            while j >= 0 and a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                j -= 1\n                curr_length += 1\n            max_length = max(max_length, curr_length)\n        end\n    return max_length\n"}
{"task_id": "Mbpp/620", "completion": "function largest_subset(a):\n    n = len(a)\n    a.sort()\n    dp = [1]*n\n    for i from 0 to n-2:\n        for j from i+1 to n-1:\n            if (a[j] - a[i]) % 2 == 0:\n                dp[j] = max(dp[j], dp[i]+1)\n    return max(dp"}
{"task_id": "Mbpp/620", "completion": ""}
{"task_id": "Mbpp/620", "completion": "\nfunction largest_subset(a):\n    n = len(a)\n    a.sort()\n    dp = [1] * n\n    for i from 1 to n-1:\n        for j from 0 to i-1:\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp"}
{"task_id": "Mbpp/620", "completion": "function largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp"}
{"task_id": "Mbpp/620", "completion": "function largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    for i from 0 to n-1:\n        for j from 0 to i:\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp"}
{"task_id": "Mbpp/622", "completion": "function get_median(arr1, arr2, n):\n    merged = sort(arr1 + arr2)\n    return (merged[n // 2] + merged[(n - 1) // 2]) / 2.0 if n % 2 == 1 else merged[n // 2"}
{"task_id": "Mbpp/622", "completion": "function get_median(arr1, arr2, n)\n    // merge two arrays into one\n    merged = []\n    for i = 0 to n - 1\n        merged.append(arr1[i])\n        merged.append(arr2[i])\n\n    // sort the merged array\n    sorted_arr = sorted(merged)\n\n    // calculate the median\n    if n % 2 == 0\n        median = (sorted_arr[n/2] + sorted_arr[n/2 - 1]) / 2\n    else\n        median = sorted_arr[n/2]\n\n    return median\n"}
{"task_id": "Mbpp/622", "completion": "function get_median(arr1, arr2, n):\n    // merge the two arrays into one\n    array merged = []\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i = i + 1\n        else:\n            merged.append(arr2[j])\n            j = j + 1\n    // append the remaining elements, if any\n    while i < n:\n        merged.append(arr1[i])\n        i = i + 1\n    while j < n:\n        merged.append(arr2[j])\n        j = j + 1\n    // sort the merged array\n    sorted_merged = sorted(merged)\n    // calculate the median\n    if n % 2 == 0:\n        mid = (sorted_merged[n/2 - 1] + sorted_merged[n/2]) / 2\n    else:\n        mid = sorted_merged[n//2]\n    return mi"}
{"task_id": "Mbpp/622", "completion": "\nfunction get_median(arr1, arr2, n):\n    // Combine the two arrays into one array\n    merged = []\n    for i from 0 to n-1:\n        merged.append(arr1[i])\n        merged.append(arr2[i])\n\n    // Sort the combined array\n    sorted_merged = sort(merged)\n\n    // Calculate the median\n    if n is odd:\n        return sorted_merged[n//2]\n    else:\n        return (sorted_merged[n//2 - 1] + sorted_merged[n//2]) / 2.0\n"}
{"task_id": "Mbpp/622", "completion": "\nfunction get_median(arr1, arr2, n):\n    merged_list = merge_sorted_lists(arr1, arr2)\n    mid = n / 2\n    if mid == int(mid):\n        return (merged_list[int(mid)] + merged_list[int(mid + 1)]) / 2\n    else:\n        return float(merged_list[int(mid)])\n"}
{"task_id": "Mbpp/622", "completion": ""}
{"task_id": "Mbpp/622", "completion": "function get_median(arr1, arr2, n)\n    // merge the two sorted arrays into one\n    arr = []\n    i = 0\n    j = 0\n    while i < n and j < n\n        if arr1[i] <= arr2[j]\n            arr.append(arr1[i])\n            i = i + 1\n        else\n            arr.append(arr2[j])\n            j = j + 1\n    while i < n\n        arr.append(arr1[i])\n        i = i + 1\n    while j < n\n        arr.append(arr2[j])\n        j = j + 1\n    // calculate the median\n    total_elements = n * 2\n    middle_index = total_elements / 2\n    if total_elements % 2 == 0\n        median = (arr[middle_index - 1] + arr[middle_index]) / 2.0\n    else\n        median = arr[integer(middle_index)]\n    return median\n"}
{"task_id": "Mbpp/622", "completion": "ALGORITHM:\n 1. Merge the two lists into one list, sorted.\n 2. Calculate the middle index of the merged list.\n 3. If the middle index is an integer (n is odd), return the value at that index.\n 4. If the middle index is not an integer (n is even), return the average of the values at the two middle indices.\n"}
{"task_id": "Mbpp/622", "completion": "function get_median(arr1, arr2, n)\n    merged = []\n    i = j = 0\n    while i < n and j < n\n        if arr1[i] <= arr2[j]\n            merged.append(arr1[i])\n            i += 1\n        else\n            merged.append(arr2[j])\n            j += 1\n    while i < n\n        merged.append(arr1[i])\n        i += 1\n    while j < n\n        merged.append(arr2[j])\n        j += 1\n    middle_index = (n * 2 - 1) // 2\n    if n * 2 % 2 == 0\n        return (merged[middle_index] + merged[middle_index + 1]) / 2\n    else\n        return merged[middle_index]\n"}
{"task_id": "Mbpp/622", "completion": "\nfunction merge_sorted_lists(list1, list2):\n    result = []\n    i = j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            result.append(list1[i])\n            i = i + 1\n        else:\n            result.append(list2[j])\n            j = j + 1\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n    return result\n\nfunction get_median(list1, list2, n):\n    merged_list = merge_sorted_lists(list1, list2)\n    middle_index = n // 2\n    if n % 2 == 0:\n        return (merged_list[middle_index - 1] + merged_list[middle_index]) / 2.0\n    else:\n        return float(merged_list[middle_index]"}
{"task_id": "Mbpp/623", "completion": "input_list = nums\noutput_list = []\nfor num in input_list:\n    output_list.append(num ** n)\nreturn output_lis"}
{"task_id": "Mbpp/623", "completion": "function nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return resul"}
{"task_id": "Mbpp/623", "completion": "input_list = []\nfor num in nums:\n    input_list.append(num**n)\noutput_list = []\ni = 0\nwhile i < len(input_list):\n    output_list.append(input_list[i])\n    i += 1\nreturn output_lis"}
{"task_id": "Mbpp/623", "completion": "\nfunction nth_nums(nums, n)\n    result = []\n    for each num in nums:\n        result.append(num ** n)\n    return resul"}
{"task_id": "Mbpp/623", "completion": "function nth_nums(nums, n):\n    return [num ** n for num in nums"}
{"task_id": "Mbpp/623", "completion": "input_list = []\nfor num in nums:\n    input_list.append(num ** n)\nreturn input_list\n"}
{"task_id": "Mbpp/623", "completion": "\nfunction nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return resul"}
{"task_id": "Mbpp/623", "completion": "\nfunction nth_nums(nums, n):\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**n)\n    return result\n"}
{"task_id": "Mbpp/623", "completion": "function nth_nums(nums, n):\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i] ** n)\n    return result\n"}
{"task_id": "Mbpp/623", "completion": "function nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"}
{"task_id": "Mbpp/624", "completion": "\nFUNCTION is_upper(string)\n    IF string is not NULL\n        RETURN string.toUpperCase()\n    ELSE\n        RETURN NULL\n    END IF\nEND FUNCTIO"}
{"task_id": "Mbpp/624", "completion": "function is_upper(input_string)\n    output_string = \"\"\n    for each character in input_string\n        if character is lowercase\n            output_string = output_string + convert_to_uppercase(character)\n        else\n            output_string = output_string + character\n    return output_string\n"}
{"task_id": "Mbpp/624", "completion": ""}
{"task_id": "Mbpp/624", "completion": "\nfunction is_upper(str):\n    return str.upper("}
{"task_id": "Mbpp/624", "completion": "FUNCTION is_upper(string)\n    DECLARE result\n    result = string.upper()\n    RETURN resul"}
{"task_id": "Mbpp/624", "completion": "function is_upper(input_string)\n    output = \"\"\n    for char in input_string:\n        if char.isalpha():\n            output += char.upper()\n        else:\n            output += char\n    return output\n"}
{"task_id": "Mbpp/624", "completion": "FUNCTION is_upper(string)\n    RETURN string TO_UPPERCASE\nEND FUNCTIO"}
{"task_id": "Mbpp/624", "completion": "function is_upper(s: str):\n    return s.upper()\n"}
{"task_id": "Mbpp/624", "completion": "function is_upper(input_string)\n    output = \"\"\n    for i from 0 to length of input_string - 1\n        if ASCII value of character at index i in input_string is less than ASCII value of 'a'\n            or ASCII value of character at index i in input_string is greater than ASCII value of 'z'\n            then\n                output = output + character at index i in input_string\n            else\n                output = output + chr(ASCII value of character at index i in input_string - 32)\n    return outpu"}
{"task_id": "Mbpp/624", "completion": ""}
{"task_id": "Mbpp/626", "completion": "\nif r < 0:\n    return None\nelse:\n    return (1/2)*sqrt(3)*(r^2)\n"}
{"task_id": "Mbpp/626", "completion": "if r < 0:\n    return None\nelse:\n    return 0.5 * r**2 * math.sin(60"}
{"task_id": "Mbpp/626", "completion": "\nfunction triangle_area(r)\n    if r <= 0:\n        return None\n    else:\n        # calculate semi-perimeter\n        s = r * 2\n        # calculate the lengths of the sides\n        a = s / 2\n        b = sqrt(s**2 - a**2)\n        c = r\n        # calculate the semi-perimeter\n        semi_perimeter = (a + b + c) / 2\n        # calculate the area\n        area = sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter - b) * (semi_perimeter - c))\n        return area\n"}
{"task_id": "Mbpp/626", "completion": "if r < 0:\n    return None\nelse:\n    r = r * 2\n    x = (r**2) ** 0.5\n    return 0.5 * r * x\n"}
{"task_id": "Mbpp/626", "completion": "\nfunction triangle_area(r)\n    if r < 0:\n        return None\n    else:\n        # calculate the diameter of the circle\n        diameter = 2 * r\n        \n        # calculate the radius of the semicircle\n        semicircle_radius = r\n        \n        # calculate the length of the hypotenuse of the triangle\n        hypotenuse = sqrt(3 / 4 * (diameter / 2)^2)\n        \n        # calculate the base of the triangle\n        base = diameter / 2\n        \n        # calculate the height of the triangle\n        height = sqrt(hypotenuse^2 - (base / 2)^2)\n        \n        # calculate the area of the triangle\n        area = 0.5 * base * height\n        \n        return area\n"}
{"task_id": "Mbpp/626", "completion": "if r < 0:\n    return None\nelse:\n    side = r * 2 ** (1/2)\n    s = side / 2\n    h = (r ** 2 - (side / 2) ** 2) ** (1/2)\n    area = (s * h) / 2\n    return are"}
{"task_id": "Mbpp/626", "completion": "if r < 0:\n    return None\nsemi_circumference = 3.14 * r\nperimeter = semi_circumference / 2\nmax_perimeter = math.sqrt(4 * 3.14 * r ** 2)\nif perimeter > max_perimeter:\n    return None\ns = (2 * math.sqrt(r ** 2 - (perimeter ** 2 - r ** 2) / 4)) / 2\nh = math.sqrt(r ** 2 - s ** 2)\narea = 0.5 * s * h\nreturn are"}
{"task_id": "Mbpp/626", "completion": "\nif r < 0:\n    return None\nelse:\n    s = 2 * r\n    a = (s * (s - 2**0.5) / 4)**0.5\n    return a * (r**2)**0."}
{"task_id": "Mbpp/626", "completion": "\nfunction triangle_area(r)\n    if r < 0:\n        return None\n    else:\n        s = r * 2\n        side = (s*(s-sqrt(3))/4)\n        return (side * side * sqrt(3)/4"}
{"task_id": "Mbpp/626", "completion": "if r < 0:\n    return None\nelse:\n    import math\n    x = r * math.sqrt(3) / 2\n    s = r\n    return (x * s) / "}
{"task_id": "Mbpp/628", "completion": "function replace_spaces(string)\n    result = \"\"\n    for i from 1 to length of string\n        if character at position i of string is space then\n            result = result + \"%20\"\n        else\n            result = result + character at position i of string\n    return resul"}
{"task_id": "Mbpp/628", "completion": ""}
{"task_id": "Mbpp/628", "completion": "function replace_spaces(s)\n    new_string = \"\"\n    for each char in s:\n        if char is \" \" then\n            new_string = new_string + \"%20\"\n        else\n            new_string = new_string + char\n    return new_string\n"}
{"task_id": "Mbpp/628", "completion": "\nfunction replace_spaces(string)\n    result = \"\"\n    i = 0\n    while i < length of string\n        if character at index i of string is a space\n            append '%' followed by '20' to result\n        else\n            append character at index i of string to result\n        increment i\n    return resul"}
{"task_id": "Mbpp/628", "completion": "\nfunction replace_spaces(string)\n    result := \"\"\n    for each character c in string\n        if c is space then\n            append '%20' to result\n        else\n            append c to result\n    return result\n"}
{"task_id": "Mbpp/628", "completion": "function replace_spaces(string)\n    new_string = \"\"\n    for each character in string\n        if character is space\n            append '%20' to new_string\n        else\n            append character to new_string\n    return new_string\n"}
{"task_id": "Mbpp/628", "completion": "function replace_spaces(s)\n    result = \"\"\n    for each character c in s\n        if c is space\n            append \"%20\" to result\n        else\n            append c to result\n    return resul"}
{"task_id": "Mbpp/628", "completion": "function replace_spaces(string)\n    output = \"\"\n    i = 1\n    while i <= length(string)\n        if substring(string, i, i) == \" \"\n            output = output + \"%20\"\n        else\n            output = output + substring(string, i, i)\n        i = i + 1\n    return output\n"}
{"task_id": "Mbpp/628", "completion": "\nfunction replace_spaces(string)\n    result = \"\"\n    for char in string:\n        if char == \" \":\n            result = result + \"%20\"\n        else:\n            result = result + char\n    return resul"}
{"task_id": "Mbpp/628", "completion": "\nfunction replace_spaces(input_string)\n    output_string = \"\"\n    for each character in input_string:\n        if character == \" \" then\n            output_string += \"%20\"\n        else\n            output_string += character\n    return output_string\n"}
{"task_id": "Mbpp/629", "completion": "function Split(inputList)\n    result = []\n    for each element in inputList\n        if (element mod 2 == 0)\n            add element to result\n    return result\n"}
{"task_id": "Mbpp/629", "completion": "function Split(l)\n    result = []\n    for each number in l\n        if number mod 2 is 0\n            append number to result\n    return result\n"}
{"task_id": "Mbpp/629", "completion": "\nfunction Split(inputList):\n    result = []\n    for num in inputList:\n        if num mod 2 equals 0 then\n            append num to result\n    return resul"}
{"task_id": "Mbpp/629", "completion": ""}
{"task_id": "Mbpp/629", "completion": ""}
{"task_id": "Mbpp/629", "completion": "function Split(l):\n    result = []\n    for each item in l:\n        if item mod 2 == 0:\n            result add item\n    return result\n"}
{"task_id": "Mbpp/629", "completion": "function Split(inputList)\n    outputList = []\n    for each element in inputList:\n        if element mod 2 is 0 then\n            append element to outputList\n        end if\n    return outputList\n"}
{"task_id": "Mbpp/629", "completion": ""}
{"task_id": "Mbpp/629", "completion": ""}
{"task_id": "Mbpp/629", "completion": "function Split(list l):\n    result = []\n    for each num in l:\n        if num mod 2 equals 0 then\n            add num to result\n        end if\n    return result\n"}
{"task_id": "Mbpp/630", "completion": ""}
{"task_id": "Mbpp/630", "completion": ""}
{"task_id": "Mbpp/630", "completion": ""}
{"task_id": "Mbpp/630", "completion": ""}
{"task_id": "Mbpp/630", "completion": ""}
{"task_id": "Mbpp/630", "completion": ""}
{"task_id": "Mbpp/630", "completion": "\n"}
{"task_id": "Mbpp/630", "completion": ""}
{"task_id": "Mbpp/630", "completion": ""}
{"task_id": "Mbpp/630", "completion": ""}
{"task_id": "Mbpp/631", "completion": "function replace_spaces(text)\n    result = \"\"\n    for char in text:\n        if char is ' ':\n            result += '_'\n        elif char is '_':\n            result += ' '\n        else:\n            result += char\n    return resul"}
{"task_id": "Mbpp/631", "completion": "\nfunction replace_spaces(text)\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            result += \"_\"\n        elif text[i] == \"_\":\n            result += \" \"\n        else:\n            result += text[i]\n    return result\n"}
{"task_id": "Mbpp/631", "completion": "\nfunction replace_spaces(text)\n    result = \"\"\n    for each character in text\n        if character is a space\n            result = result + \"_\"\n        else if character is not a space\n            result = result + character\n        end if\n    end for\n    return result\n"}
{"task_id": "Mbpp/631", "completion": "function replace_spaces(text):\n    new_text = \"\"\n    for char in text:\n        if char == ' ':\n            new_text += '_'\n        elif char == '_':\n            new_text += ' '\n        else:\n            new_text += char\n    return new_text\n"}
{"task_id": "Mbpp/631", "completion": "function replace_spaces(text):\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return resul"}
{"task_id": "Mbpp/631", "completion": "function replace_spaces(text)\n    new_string = \"\"\n    for char in text\n        if char is \" \"\n            new_string += \"_\"\n        else if char is \"_\"\n            new_string += \" \"\n        else\n            new_string += char\n        end\n    return new_string\n"}
{"task_id": "Mbpp/631", "completion": "\nfunction replace_spaces(text):\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result\n"}
{"task_id": "Mbpp/631", "completion": "\nFUNCTION replace_spaces(text)\n    NEWSTRING = \"\"\n    FOR each character IN text\n        IF character is SPACE\n            NEWSTRING = NEWSTRING + \"_\"\n        ELSE IF character is NOT SPACE\n            NEWSTRING = NEWSTRING + character\n    RETURN NEWSTRING\n"}
{"task_id": "Mbpp/631", "completion": "function replace_spaces(text):\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return resul"}
{"task_id": "Mbpp/631", "completion": "\nfunction replace_spaces(text)\n    result = \"\"\n    for each char in text\n        if char is a whitespace\n            append \"_\" to result\n        else\n            append char to result\n        end if\n    return result\nend function\n"}
{"task_id": "Mbpp/632", "completion": "function move_zero(list L):\n    non_zero_list = []\n    zero_list = []\n\n    for num in L:\n        if num != 0:\n            non_zero_list.append(num)\n        else:\n            zero_list.append(num)\n\n    return non_zero_list + zero_lis"}
{"task_id": "Mbpp/632", "completion": "data = []\nnon_zero = []\nfor num in num_list:\n    if num != 0:\n        non_zero.append(num)\n    else:\n        data.append(num)\nreturn non_zero + data\n"}
{"task_id": "Mbpp/632", "completion": "input_list = []\nzero_count = 0\nnon_zero_list = []\n\nwhile input_list:\n    if input_list[0] != 0:\n        non_zero_list.append(input_list.pop(0))\n    else:\n        zero_count += 1\n        input_list.pop(0)\n\nwhile zero_count > 0:\n    non_zero_list.append(0)\n    zero_count -= 1\n\nreturn non_zero_lis"}
{"task_id": "Mbpp/632", "completion": "function move_zero(num_list):\n    non_zeros = []\n    zeros = []\n    for num in num_list:\n        if num != 0:\n            non_zeros.append(num)\n        else:\n            zeros.append(num)\n    return non_zeros + zero"}
{"task_id": "Mbpp/632", "completion": "\nfunction move_zero(list input_list):\n    non_zero_list = []\n    zero_list = []\n    for item in input_list:\n        if item != 0:\n            non_zero_list.append(item)\n        else:\n            zero_list.append(item)\n    return non_zero_list + zero_list\n"}
{"task_id": "Mbpp/632", "completion": "data = []\nfor item in num_list:\n    if item != 0:\n        data.append(item)\nfor i in range(len(num_list) - len(data)):\n    data.append(0)\nreturn data\n"}
{"task_id": "Mbpp/632", "completion": "function move_zero(arr):\n    non_zeros = []\n    zeros = []\n    for num in arr:\n        if num != 0:\n            non_zeros.append(num)\n        else:\n            zeros.append(num)\n    return non_zeros + zeros\n"}
{"task_id": "Mbpp/632", "completion": ""}
{"task_id": "Mbpp/632", "completion": "data = input_list\ni = 0\nwhile i < len(data):\n    if data[i] != 0:\n        j = i + 1\n        while j < len(data) and data[j] != 0:\n            j += 1\n        if j != len(data):\n            data[i], data[j] = data[j], data[i]\n        else:\n            i += 1\n    else:\n        i += 1\nreturn dat"}
{"task_id": "Mbpp/632", "completion": "\nfunction move_zero(num_list):\n    not_zero = []\n    zero_count = 0\n    \n    for num in num_list:\n        if num != 0:\n            not_zero.append(num)\n        else:\n            zero_count += 1\n    \n    for i in range(zero_count):\n        not_zero.append(0)\n    \n    return not_zer"}
{"task_id": "Mbpp/633", "completion": ""}
{"task_id": "Mbpp/633", "completion": "function pair_xor_sum(arr, n):\n    result = 0\n    for i from 0 to n-1:\n        for j from i+1 to n-1:\n            result = result + (arr[i] ^ arr[j])\n    return resul"}
{"task_id": "Mbpp/633", "completion": ""}
{"task_id": "Mbpp/633", "completion": ""}
{"task_id": "Mbpp/633", "completion": "\nFunction pair_xor_Sum(arr, n)\n    Initialize sum 0\n    For i from 0 to n-1\n        For j from i+1 to n-1\n            Add arr[i] XOR arr[j] to sum\n    Return su"}
{"task_id": "Mbpp/633", "completion": ""}
{"task_id": "Mbpp/633", "completion": "function pair_xor_sum(arr, n):\n    result = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            result = result ^ (arr[i] ^ arr[j])\n    return resul"}
{"task_id": "Mbpp/633", "completion": "function pair_xor_sum(arr, n)\n    total_xor = 0\n    for i from 0 to n-1:\n        for j from i+1 to n-1:\n            total_xor = total_xor ^ (arr[i] ^ arr[j])\n    return total_xor\n"}
{"task_id": "Mbpp/633", "completion": "\nalgorithm pair_xor_Sum(arr,n):\n    initialize result as 0\n    initialize a variable sum as 0\n    for each number in arr:\n        sum = sum XOR n XOR number\n    return sum\n"}
{"task_id": "Mbpp/633", "completion": "\nfunction pair_xor_Sum(arr,n):\n    total_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_xor = total_xor ^ (arr[i] ^ arr[j])\n    return total_xor\n"}
{"task_id": "Mbpp/635", "completion": "function heap_sort(iterable):\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    sorted_list = []\n    while h:\n        sorted_list.append(hq.heappop(h))\n    return sorted_lis"}
{"task_id": "Mbpp/635", "completion": "function heap_sort(iterable):\n    # create an empty list\n    result = []\n\n    # convert iterable to a heap\n    heap = []\n    for element in iterable:\n        hq.heappush(heap, element)\n\n    # extract elements from heap and add them to the result list\n    while heap:\n        result.append(hq.heappop(heap))\n\n    return resul"}
{"task_id": "Mbpp/635", "completion": "heap = []\nfor item in iterable:\n    hq.heappush(heap, item)\nresult = []\nwhile heap:\n    result.append(hq.heappop(heap))\nreturn resul"}
{"task_id": "Mbpp/635", "completion": "function heap_sort(iterable):\n    H = []\n    for x in iterable:\n        hq.heappush(H, x)\n    sorted_iterable = []\n    while len(H) > 0:\n        sorted_iterable.append(hq.heappop(H))\n    return sorted_iterabl"}
{"task_id": "Mbpp/635", "completion": "heap = []\nfor i in iterable:\n    hq.heappush(heap, i)\nsorted_list = []\nwhile heap:\n    sorted_list.append(hq.heappop(heap))\nreturn sorted_lis"}
{"task_id": "Mbpp/635", "completion": "\nfunction heap_sort(iterable):\n    A = []\n    for x in iterable:\n        hq.heappush(A, x)\n    result = []\n    while len(A) > 0:\n        result.append(hq.heappop(A))\n    return resul"}
{"task_id": "Mbpp/635", "completion": "function heap_sort(iterable):\n    H = []\n    for x in iterable:\n        hq.heappush(H, x)\n    result = []\n    while H:\n        result.append(hq.heappop(H))\n    return resul"}
{"task_id": "Mbpp/635", "completion": ""}
{"task_id": "Mbpp/635", "completion": "function heap_sort(iterable):\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return resul"}
{"task_id": "Mbpp/635", "completion": "heap = []\nfor i in iterable:\n    hq.heappush(heap, i)\nres = []\nwhile heap:\n    res.append(hq.heappop(heap))\nreturn re"}
{"task_id": "Mbpp/637", "completion": "\nfunction noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost >= sale_amount then\n        return False\n    else\n        return True\n    end if\nend function\n"}
{"task_id": "Mbpp/637", "completion": "FUNCTION noprofit_noloss(actual_cost, sale_amount)\n    IF actual_cost <= sale_amount\n        RETURN FALSE\n    ELSE\n        RETURN TRUE\n    END IF\nEND FUNCTIO"}
{"task_id": "Mbpp/637", "completion": "\nfunction noprofit_noloss(actual_cost, sale_amount):\n  if actual_cost >= sale_amount:\n    return False\n  else:\n    return True\n"}
{"task_id": "Mbpp/637", "completion": "if actual_cost > sale_amount:\n  return True\nelse:\n  return False\n"}
{"task_id": "Mbpp/637", "completion": "\nfunction noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost > sale_amount\n        return True\n    else\n        return False\n"}
{"task_id": "Mbpp/637", "completion": "\nfunction noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return False\n    else\n        return True\n    end if\nend function\n"}
{"task_id": "Mbpp/637", "completion": "function noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost <= 0 or sale_amount <= 0 then\n        return \"Invalid input\"\n    else\n        if actual_cost >= sale_amount then\n            return False\n        else\n            return True\n"}
{"task_id": "Mbpp/637", "completion": "\nprocedure noprofit_noloss(actual_cost, sale_amount)\n    if actual_cost > sale_amount then\n        return True\n    else\n        return False\n    end if\nend procedur"}
{"task_id": "Mbpp/637", "completion": "function noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost <= 0 or sale_amount <= 0:\n        return \"Invalid input\"\n    if actual_cost == sale_amount:\n        return False\n    elif actual_cost > sale_amount:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/637", "completion": "if actual_cost <= sale_amount:\n    return False\nelse:\n    return True\n"}
{"task_id": "Mbpp/638", "completion": "\nfunction wind_chill(v, t):\n    if v <= 0:\n        return round(t)\n    else:\n        wind_chill_index = 13.12 + 0.6215*t - 11.37*math.log10(v) + 0.3965*t*math.log10(v)\n        return round(wind_chill_index"}
{"task_id": "Mbpp/638", "completion": "IF v <= 1 THEN\n    wci = 13.12 + 0.6215*t - 11.37*math.log10(v)\nELSE\n    wci = 13.12 + 0.6215*t - 11.37*math.log10(34.74/v) + 0.3965*v\nEND IF\nRETURN ROUND(wci"}
{"task_id": "Mbpp/638", "completion": "\nfunction wind_chill(v, t):\n    if v > 0:\n        if t < -12.1:\n            wc = 13.12 + (11.39 * t) - (0.394 * v**0.16) + 0.225 * t * v**0.16 - 0.00000637 * t**2\n        else:\n            wc = 11.6 + (0.5 * t) - (10.95 * v**0.16)\n        return round(wc)\n    else:\n        return Non"}
{"task_id": "Mbpp/638", "completion": "function wind_chill(v, t):\n    if v <= 1.87:\n        return round(t)\n    elif v > 1.87 and v <= 24.96:\n        return round(13.12 + 0.6215*t - 11.37*math.log10(v) + 0.3965*t*math.log10(v))\n    else:\n        return 0\n"}
{"task_id": "Mbpp/638", "completion": "function wind_chill(v, t) \n    if v < 5 then \n        return round(t) \n    else \n        wind_chill_index = 13.12 + 0.6215*t - 11.37*math.log10(v+0.16) + 0.3965*t*math.log10(v+0.16) \n        return round(wind_chill_index"}
{"task_id": "Mbpp/638", "completion": "if v > 0 and t < -12.1:\n  wind_chill_index = 13.12 + 0.6215*t - 11.37*math.log10(v) + 0.3965*t*math.log10(v)\n  return round(wind_chill_index)\nelse:\n  return None\n"}
{"task_id": "Mbpp/638", "completion": "if v <= 0 or t <= -50:\n    return None\nelse:\n    w = 13.12 + 0.6215*t - 11.37*math.log10(v) + 0.3965*t*math.log10(v)\n    return round(w)\n"}
{"task_id": "Mbpp/638", "completion": ""}
{"task_id": "Mbpp/638", "completion": "\nfunction wind_chill(v, t)\n    if v <= 0 then\n        return t\n    else\n        wind_chill_index = 13.12 + 0.6215*t - 11.37*math.log10(v) + 0.3965*t*math.log10(v)\n        return round(wind_chill_index"}
{"task_id": "Mbpp/638", "completion": "function wind_chill(v,t):\n    if v <= 1:\n        wind_chill_index = t\n    else:\n        wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (math.log10(v)) + 0.3965 * t * (math.log10(v))\n    return round(wind_chill_index"}
{"task_id": "Mbpp/639", "completion": "function sum_of_lengths(sample_names):\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum = sum + len(name)\n    return su"}
{"task_id": "Mbpp/639", "completion": "\nfunction sum_name_lengths(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n"}
{"task_id": "Mbpp/639", "completion": "function sum_of_names(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if ord(name[0].lower()) >= 97 and ord(name[0].lower()) <= 122:\n            continue\n        total_length += len(name)\n    return total_lengt"}
{"task_id": "Mbpp/639", "completion": "function sample_nam(sample_names)\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n"}
{"task_id": "Mbpp/639", "completion": "input list_names = sample_names\ntotal_length = 0\nfor name in list_names:\n    if name[0].isupper():\n        total_length += len(name)\nreturn total_lengt"}
{"task_id": "Mbpp/639", "completion": "DATA length_sum := 0\nFOR each name IN sample_names\n    IF first letter of name is UPPERCASE THEN\n        length_sum := length_sum + LENGTH of name\n    END IF\nEND FOR\nRETURN length_su"}
{"task_id": "Mbpp/639", "completion": ""}
{"task_id": "Mbpp/639", "completion": "\nfunction sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_lengt"}
{"task_id": "Mbpp/639", "completion": "\nfunction sample_nam(sample_names)\n    total_length := 0\n    for each name in sample_names\n        if name[0] is uppercase then\n            total_length := total_length + len(name)\n    return total_length\n"}
{"task_id": "Mbpp/639", "completion": "\nfunction sum_lengths_of_uppercase_names(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(string):\n    return re.sub(r'\\([^)]*\\)', '', string)\n"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(string):\n    return re.sub(\"\\([^)]*\\)\", \"\", string"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(string):\n    return re.sub(r'\\([^)]*\\)', '', string)\n"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(input_string):\n    return re.sub(r'\\([^)]*\\)', '', input_string)\n"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(input_string):\n    return re.sub(r'\\([^)]+\\)', '', input_string)\n"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(string)\n    return re.sub(r'\\(.*?\\)', '', string)\n"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(input_string)\n    output = \"\"\n    found = False\n    for char in input_string:\n        if char == '(':\n            found = True\n        elif char == ')':\n            found = False\n        elif not found:\n            output += char\n    return output\n"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(input_string):\n    return re.sub(r'\\([^)]+\\)', '', input_string)\n"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(input_string)\n    output = \"\"\n    found_open = False\n    for char in input_string:\n        if char == \"(\":\n            found_open = True\n        elif char == \")\":\n            found_open = False\n        elif not found_open:\n            output += char\n    return output\n"}
{"task_id": "Mbpp/640", "completion": "function remove_parenthesis(input_string):\n    result = re.sub(r'\\(.*?\\)', '', input_string)\n    return result\n"}
{"task_id": "Mbpp/641", "completion": "function is_nonagonal(n):\n    result = 0\n    k = 1\n    while True:\n        result += k\n        k += 1\n        if result >= n:\n            return result - (k - 1)\n"}
{"task_id": "Mbpp/641", "completion": "\nfunction is_nonagonal(n):\n    sum = 0\n    k = 1\n    while sum < n:\n        sum += k\n        k = k + 1\n    return sum - (k - 1)\n"}
{"task_id": "Mbpp/641", "completion": ""}
{"task_id": "Mbpp/641", "completion": "function find_nth_nonagonal(n):\n    if n <= 0:\n        return 0\n    else:\n        sum_of_odd_numbers = 0\n        i = 1\n        while sum_of_odd_numbers < n:\n            sum_of_odd_numbers += i\n            i += 2\n        return sum_of_odd_number"}
{"task_id": "Mbpp/641", "completion": "function is_nonagonal(n):\n    sum = 0\n    k = 1\n    while sum < n:\n        sum += k\n        k += 3\n    return k - "}
{"task_id": "Mbpp/641", "completion": "function is_nonagonal(n):\n    sum = 0\n    i = 1\n    count = 1\n    while count <= n:\n        sum += i * (3*i - 1)\n        i += 1\n        count += 1\n    return sum\n"}
{"task_id": "Mbpp/641", "completion": "function is_nonagonal(n):\n    total = 0\n    i = 1\n    while total < n:\n        total += i\n        i += 1\n    return i - 1\n"}
{"task_id": "Mbpp/641", "completion": "function is_nonagonal(n):\n    sum = 0\n    k = 1\n    count = 1\n    while count <= n:\n        sum = sum + k\n        k = k + 1\n        count = count + 1\n    return su"}
{"task_id": "Mbpp/641", "completion": "\nfunction is_nonagonal(n):\n    total = 0\n    k = 1\n    i = 1\n    while i <= n:\n        total += k\n        k += 2\n        i += 1\n    return tota"}
{"task_id": "Mbpp/641", "completion": "\nfunction is_nonagonal(n):\n    result = 0\n    k = 1\n    while True:\n        if n <= sum(range(1, k + 1)):\n            return result + k\n        else:\n            result += k\n            k += "}
{"task_id": "Mbpp/643", "completion": "function text_match_wordz_middle(text):\n    return not (text[0] == 'z' and text[-1] == 'z') and 'z' in text[1:-1]\n"}
{"task_id": "Mbpp/643", "completion": "\nfunction text_match_wordz_middle(text):\n    pattern = r'(?!^|z)([^z]|z[^z])*z(?!z|$)\n    return bool(re.search(pattern, text)"}
{"task_id": "Mbpp/643", "completion": ""}
{"task_id": "Mbpp/643", "completion": "function text_match_wordz_middle(text):\n  return bool(re.search(r'[a-zA-Z][z][a-zA-Z]', text)"}
{"task_id": "Mbpp/643", "completion": ""}
{"task_id": "Mbpp/643", "completion": "\nfunction text_match_wordz_middle(text):\n    return 'z' in text[1:-1] or not re.search(r'^z|z$', text)\n"}
{"task_id": "Mbpp/643", "completion": "\nfunction text_match_wordz_middle(text)\n    return not (text[0] == 'z' or text[-1] == 'z') and re.search('z', text[1:-1])\nend function\n"}
{"task_id": "Mbpp/643", "completion": "function text_match_wordz_middle(text):\n    return bool(re.search(r'z(?!\\b|.$)', text)"}
{"task_id": "Mbpp/643", "completion": "function text_match_wordz_middle(text):\n    return bool(re.search(r'[a-zA-Z].*z.*[a-zA-Z]', text)"}
{"task_id": "Mbpp/643", "completion": "function text_match_wordz_middle(text):\n    return bool(re.search(r'[a-zA-Z][z][a-zA-Z]+[z][a-zA-Z]', text)"}
{"task_id": "Mbpp/644", "completion": "\ninput = array\nk = position\noutput = []\ni = 0\nwhile i < k:\n    output.append(input[i])\n    i = i + 1\ni = i - 1\nwhile i >= 0:\n    output.append(input[i])\n    i = i - 1\nreturn outpu"}
{"task_id": "Mbpp/644", "completion": "function reverse_Array_Upto_K(array, k):\n    temp = []\n    for i in range(k-1, -1, -1):\n        temp.append(array[i])\n    for i in range(k, len(array)):\n        temp.append(array[i])\n    return temp\n"}
{"task_id": "Mbpp/644", "completion": "`function reverse_Array_Upto_K(input_array, k):\n  new_array = []\n  for i from length(input_array) - 1 down to k:\n    new_array.append(input_array[i])\n  for i from 0 to k - 1:\n    new_array.append(input_array[i])\n  return new_array"}
{"task_id": "Mbpp/644", "completion": "function reverse_Array_Upto_K(input, k):\n    reversed_array = []\n    for i from k-1 downto 0:\n        reversed_array.append(input[i])\n    for i from 0 to k-1:\n        input[i] = reversed_array[i]\n    for i from k to length(input)-1:\n        reversed_array.append(input[i])\n    return reversed_array\n"}
{"task_id": "Mbpp/644", "completion": "function reverse_Array_Upto_K(input_array, k):\n    reverse_array = []\n    for i in range(len(input_array)-1, k-1, -1):\n        reverse_array.append(input_array[i])\n    for j in range(k, len(input_array)):\n        reverse_array.append(input_array[j])\n    return reverse_arra"}
{"task_id": "Mbpp/644", "completion": "data = input[:k]\ndata = data[::-1]\noutput = data + input[k:]\n"}
{"task_id": "Mbpp/644", "completion": "function reverse_Array_Upto_K(arr, k)\n    temp = []\n    for i from 0 to k - 1\n        temp = temp + [arr[i]]\n    for i from k to length of arr - 1\n        temp = [temp[0]] + [arr[i]]\n    return tem"}
{"task_id": "Mbpp/644", "completion": "function reverse_Array_Upto_K(array, k):\n    if k > length(array):\n        return \"Invalid input: k is greater than the length of the array\"\n    else:\n        left = 0\n        right = length(array) - 1\n        while left < k:\n            array[left], array[right] = array[right], array[left]\n            left += 1\n            right -= 1\n        return arra"}
{"task_id": "Mbpp/644", "completion": "\nfunction reverse_Array_Upto_K(input_array, k):\n    n = length of input_array\n    for i from k-1 downto 0\n        swap input_array[i] with input_array[n-i-1]\n    return input_array\n"}
{"task_id": "Mbpp/644", "completion": "FUNCTION reverse_Array_Upto_K(array, k)\n    FOR i FROM k TO 0\n        temp = array[i]\n        array[i] = array[k - i - 1]\n        array[k - i - 1] = temp\n    END FOR\n    RETURN array\n"}
{"task_id": "Mbpp/720", "completion": "\nfunction add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)\n"}
{"task_id": "Mbpp/720", "completion": "function result = add_dict_to_tuple(inputTuple, inputDictionary):\n    result = tuple(list(inputTuple) + [inputDictionary])\n    return resul"}
{"task_id": "Mbpp/720", "completion": "function add_dict_to_tuple(tup, dict):\n    return tup + (dict,)\n"}
{"task_id": "Mbpp/720", "completion": "function add_dict_to_tuple(test_tup, test_dict):\n    return (*test_tup, test_dict"}
{"task_id": "Mbpp/720", "completion": "function add_dict_to_tuple(test_tup, test_dict):\n    result = list(test_tup)\n    result.append(test_dict)\n    return tuple(result"}
{"task_id": "Mbpp/720", "completion": "function add_dict_to_tuple(test_tup, test_dict)\n    new_tuple = ()\n    i = 0\n    for element in test_tup:\n        new_tuple += (element,)\n        i += 1\n    for key, value in test_dict.items():\n        new_tuple += (value,)\n    return new_tupl"}
{"task_id": "Mbpp/720", "completion": "\nfunction result = add_dict_to_tuple(input_tuple, input_dict):\n    new_tuple = ()\n    for element in input_tuple:\n        new_tuple += (element,)\n    for key, value in input_dict.items():\n        new_tuple += (value,)\n    return new_tuple\n"}
{"task_id": "Mbpp/720", "completion": "function add_dict_to_tuple(test_tup, test_dict):\n    return (*test_tup, test_dict"}
{"task_id": "Mbpp/720", "completion": "function add_dict_to_tuple(input_tuple, input_dict):\n    result = list(input_tuple)\n    result.append(input_dict)\n    return tuple(result"}
{"task_id": "Mbpp/720", "completion": "DEF add_dict_to_tuple(test_tup, test_dict):\n    NEW_TUP = test_tup + (test_dict,)\n    RETURN NEW_TU"}
{"task_id": "Mbpp/721", "completion": "function maxAverageOfPath(cost):\n    N = length of cost\n    dp = create a 2D array of size N*N with all elements initialized to 0\n    for i from 1 to N:\n        for j from 1 to N:\n            if i == 1 and j == 1:\n                dp[i][j] = cost[0][0]\n            else if i == 1:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            else if j == 1:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_sum = 0\n    max_average = 0\n    for i from 1 to N:\n        for j from 1 to N:\n            sum = dp[i][j]\n            for k from 1 to N:\n                if k < i:\n                    sum = sum - dp[k][j]\n                elif k > i:\n                    sum = sum - dp[i][k]\n                else:\n                    sum = sum - dp[i][j]\n            if sum > max_sum:\n                max_sum = sum\n                max_average = sum / ((i-1) * (j-1))\n    return max_averag"}
{"task_id": "Mbpp/721", "completion": "function maxAverageOfPath(cost):\n    n = size of cost\n    dp = new 2D array filled with zeros\n    \n    // calculate the sum of each row\n    for i from 0 to n-1:\n        rowSum = 0\n        for j from 0 to n-1:\n            rowSum = rowSum + cost[i][j]\n        dp[i][n-1] = rowSum\n    \n    // calculate the sum of each column\n    for j from 0 to n-1:\n        colSum = 0\n        for i from 0 to n-1:\n            colSum = colSum + cost[i][j]\n        dp[n-1][j] = colSum\n    \n    // calculate the sum of each sub-matrix\n    for i from 0 to n-1:\n        for j from 0 to n-1:\n            if i > 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            if j > 0:\n                dp[i][j] = min(dp[i][j-1], dp[i][j])\n    \n    // calculate the maximum path sum\n    maxSum = 0\n    for i from 0 to n-1:\n        maxSum = max(maxSum, dp[i][n-1])\n    \n    // calculate the maximum average\n    maxAvg = maxSum / (n*n)\n    return maxAv"}
{"task_id": "Mbpp/721", "completion": "function maxAverageOfPath(cost):\n    n = length(cost)\n    dp = new matrix(n*n, fill(0)\n\n    for i from 1 to n:\n        for j from 1 to n:\n            if i == 1 and j == 1:\n                dp[i][j] = cost[i-1][j-1]\n            else if i == 1:\n                dp[i][j] = dp[i][j-1] + cost[i-1][j-1]\n            else if j == 1:\n                dp[i][j] = dp[i-1][j] + cost[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n\n    max_sum = 0\n    max_count = 0\n    for i from 1 to n:\n        for j from 1 to n:\n            sum = 0\n            count = 0\n            i_current = i\n            j_current = j\n            while i_current > 0 and j_current > 0:\n                sum = sum + dp[i_current][j_current]\n                count = count + 1\n                if i_current > 1:\n                    i_current = i_current - 1\n                if j_current > 1:\n                    j_current = j_current - 1\n            if sum / count > max_sum:\n                max_sum = sum / count\n                max_count = count\n\n    return max_su"}
{"task_id": "Mbpp/721", "completion": "function max_average_of_path(cost):\n    n = length of cost\n    dp = table filled with zeros\n    sum = array filled with zeros\n    count = array filled with zeros\n    \n    for i from 0 to n-1:\n        for j from 0 to n-1:\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                sum[i][j] = cost[i][j]\n                count[i][j] = 1\n            else:\n                if i > 0:\n                    dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j])\n                if j > 0:\n                    dp[i][j] = max(dp[i][j], dp[i][j-1] + cost[i][j])\n                sum[i][j] = sum[i-1][j] + sum[i][j-1] + cost[i][j]\n                count[i][j] = count[i-1][j] + count[i][j-1] + 1\n                \n    max_sum = 0\n    max_count = 0\n    max_avg = 0\n    \n    for i from 0 to n-1:\n        for j from 0 to n-1:\n            if count[i][j] > max_count or (count[i][j] == max_count and sum[i][j] > max_sum):\n                max_sum = sum[i][j]\n                max_count = count[i][j]\n                max_avg = max_sum / max_count\n                \n    return max_av"}
{"task_id": "Mbpp/721", "completion": "function maxAverageOfPath(cost):\n    N = len(cost)\n    memo = [[-1 for _ in range(N)] for _ in range(N)]\n    maxSum = float('-inf')\n    bestPathSum = float('-inf')\n    maxAvg = 0\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                memo[i][j] = cost[i][j]\n            elif i > 0 and j == 0:\n                memo[i][j] = memo[i-1][j] + cost[i][j]\n            elif i == 0 and j > 0:\n                memo[i][j] = memo[i][j-1] + cost[i][j]\n            else:\n                memo[i][j] = max(memo[i-1][j], memo[i][j-1]) + cost[i][j]\n            \n            if i == N-1 and j == N-1:\n                sum = memo[i][j]\n                count = i + j + 1\n                if sum / count > maxSum:\n                    maxSum = sum / count\n                    bestPathSum = sum\n                if sum / count > maxAvg:\n                    maxAvg = sum / count\n    return maxAvg\n"}
{"task_id": "Mbpp/721", "completion": "function maxAverageOfPath(cost):\n    n = length of cost\n    total_sum = 0\n    total_length = 0\n    for i = 1 to n:\n        for j = 1 to n:\n            total_sum = total_sum + cost[i][j]\n            total_length = total_length + 1\n    max_average = 0\n    for i = 1 to n:\n        for j = 1 to n:\n            sum_path = 0\n            length_path = 0\n            while i <= j and j <= n:\n                sum_path = sum_path + cost[i][j]\n                length_path = length_path + 1\n                if j < n:\n                    j = j + 1\n                else:\n                    i = i + 1\n            average = sum_path / length_path\n            if average > max_average:\n                max_average = average\n    return max_averag"}
{"task_id": "Mbpp/721", "completion": "function maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    total = 0\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i == N - 1 and j == N - 1:\n                break\n            if i == N - 1:\n                total += dp[i][j+1]\n                count += 1\n            elif j == N - 1:\n                total += dp[i+1][j]\n                count += 1\n            else:\n                total += max(dp[i+1][j], dp[i][j+1])\n                count += 1\n    return total / coun"}
{"task_id": "Mbpp/721", "completion": "\nfunction maxAverageOfPath(cost):\n    N = length of cost\n    memo = 2D array filled with zeros\n    for i from 0 to N-1:\n        for j from 0 to N-1:\n            if i == 0 and j == 0:\n                memo[i][j] = cost[i][j]\n            else:\n                if i > 0:\n                    memo[i][j] = max(memo[i-1][j], memo[i][j-1]) + cost[i][j]\n    max_sum = 0\n    max_len = 0\n    for i from 0 to N-1:\n        for j from 0 to N-1:\n            path_sum = memo[i][j]\n            path_len = i + j + 1\n            if path_sum > max_sum or (path_sum == max_sum and path_len > max_len):\n                max_sum = path_sum\n                max_len = path_len\n    return max_sum / max_le"}
{"task_id": "Mbpp/721", "completion": "function maxAverageOfPath(cost):\n    n = length(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_sum = 0\n    max_path_length = 0\n    for i in range(n):\n        for j in range(n):\n            path_sum = 0\n            path_length = 0\n            while i < n and j < n:\n                path_sum += cost[i][j]\n                path_length += 1\n                if i == n - 1 and j == n - 1:\n                    break\n                if i < n - 1:\n                    if dp[i+1][j] <= dp[i][j]:\n                        i += 1\n                    else:\n                        j += 1\n                else:\n                    j += 1\n            if path_sum / path_length > max_sum / max_path_length:\n                max_sum = path_sum\n                max_path_length = path_length\n    return max_sum / max_path_length\n"}
{"task_id": "Mbpp/721", "completion": "\nfunction maxAverageOfPath(cost):\n    n = length of cost\n    maxSum = negative infinity\n    maxAvg = 0\n    dp = table initialized with zeros\n    for i from 1 to n:\n        for j from 1 to n:\n            if i = 1 and j = 1:\n                dp[i][j] = cost[i-1][j-1]\n            else if i = 1:\n                dp[i][j] = dp[i][j-1] + cost[i-1][j-1]\n            else if j = 1:\n                dp[i][j] = dp[i-1][j] + cost[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n            sum = dp[i][j]\n            count = i * j\n            avg = sum / count\n            if avg > maxAvg:\n                maxAvg = avg\n    return maxAvg\n"}
{"task_id": "Mbpp/722", "completion": "\ndata = {}\nfor student, (height, weight) in students.items():\n    if height > h and weight > w:\n        data[student] = (height, weight)\nreturn data\n"}
{"task_id": "Mbpp/722", "completion": "\nfunction filter_data(students, h, w)\n    result = {}\n    for student, data in students.items()\n        if data[0] > h and data[1] > w\n            result[student] = data\n    return result\n"}
{"task_id": "Mbpp/722", "completion": "function filter_data(students, h, w):\n    result = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[student] = (height, weight)\n    return result\n"}
{"task_id": "Mbpp/722", "completion": ""}
{"task_id": "Mbpp/722", "completion": "function filter_data(students, h, w):\n    result = {}\n    for student, (s_height, s_weight) in students.items():\n        if s_height > h and s_weight > w:\n            result[student] = (s_height, s_weight)\n    return result\n"}
{"task_id": "Mbpp/722", "completion": "function filter_data(students, h, w)\n    filtered_students = {}\n    for each student, (height, weight) in students.items()\n        if height > h and weight > w\n            filtered_students[student] = (height, weight)\n    return filtered_students\n"}
{"task_id": "Mbpp/722", "completion": "function filter_data(students: dict, h: float, w: float)\n    result = {}\n    for student, (student_height, student_weight) in students.items():\n        if student_height > h and student_weight > w:\n            result[student] = (student_height, student_weight)\n    return result\n"}
{"task_id": "Mbpp/722", "completion": "data = {}\nfor student, stats in students.items():\n    if stats[0] > h and stats[1] > w:\n        data[student] = stats\nreturn data\n"}
{"task_id": "Mbpp/722", "completion": ""}
{"task_id": "Mbpp/722", "completion": ""}
{"task_id": "Mbpp/723", "completion": ""}
{"task_id": "Mbpp/723", "completion": "init result = 0\nfor i from 0 to length(nums1) - 1:\n    if nums1[i] == nums2[i]:\n        result = result + 1\nreturn result\n"}
{"task_id": "Mbpp/723", "completion": "\ninit result = 0\nfor i from 0 to the length of the lists - 1 do:\n    if nums1[i] equals nums2[i]:\n        increment result by 1\nreturn result\n"}
{"task_id": "Mbpp/723", "completion": "\nfunction count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/723", "completion": "function count_same_pair(nums1, nums2):\n    count = 0\n    for i from 0 to len(nums1) - 1:\n        if nums1[i] == nums2[i]:\n            count += 1\n    return coun"}
{"task_id": "Mbpp/723", "completion": "\nfunction count_same_pair(nums1, nums2):\n    index = 0\n    count = 0\n    while index < len(nums1):\n        if nums1[index] == nums2[index]:\n            count = count + 1\n        index = index + 1\n    return count\n"}
{"task_id": "Mbpp/723", "completion": "input list1 = []\ninput list2 = []\n\nresult = 0\nfor i from 0 to length(list1) - 1:\n    if list1[i] == list2[i]:\n        result = result + 1\nreturn resul"}
{"task_id": "Mbpp/723", "completion": "i = 0\ncount = 0\nwhile i < len(nums1):\n    if nums1[i] == nums2[i]:\n        count += 1\n    i += 1\nreturn count\n"}
{"task_id": "Mbpp/723", "completion": "function count_same_pair(nums1, nums2)\n    count = 0\n    for i from 0 to length(nums1) - 1\n        if nums1[i] == nums2[i]\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/723", "completion": "FUNCTION count_same_pair(nums1, nums2)\n    result = 0\n    FOR i FROM 0 TO LENGTH(nums1) - 1\n        IF nums1[i] == nums2[i]\n            result = result + 1\n    RETURN result\n"}
{"task_id": "Mbpp/724", "completion": "function power_base_sum(base, power):\n    result = 1\n    for i from 0 to power - 1:\n        result = result * base\n    digit_sum = 0\n    while result > 0:\n        digit_sum = digit_sum + (result % 10)\n        result = result // 10\n    return digit_su"}
{"task_id": "Mbpp/724", "completion": "function power_base_sum(base, power):\n    result = 1\n    total_sum = 0\n    while power > 0:\n        result = (result * base) % 10\n        total_sum += result\n        power -= 1\n    return total_sum\n"}
{"task_id": "Mbpp/724", "completion": "function power_base_sum(base, power):\n    num = 1\n    for i in range(power):\n        num *= base\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return su"}
{"task_id": "Mbpp/724", "completion": "\nfunction power_base_sum(base, power):\n    result = 1\n    for _ in range(power):\n        result *= base\n    total_sum = 0\n    while result > 0:\n        total_sum += result % 10\n        result //= 10\n    return total_sum\n"}
{"task_id": "Mbpp/724", "completion": ""}
{"task_id": "Mbpp/724", "completion": "data = 1\nresult = 0\nwhile power > 0:\n    data = (data * base) % 10 + (data // 10)\n    result += data\n    power -= 1\nreturn result\n"}
{"task_id": "Mbpp/724", "completion": "\nfunction power_base_sum(base, power)\n    result = 0\n    num = 1\n    while power > 0\n        num = (num * base) mod 10\n        result = result + num\n        power = power - 1\n    return result\n"}
{"task_id": "Mbpp/724", "completion": "function power_base_sum(base, power):\n    result = 1\n    for i from 0 to power-1:\n        result *= base\n    total_sum = 0\n    while result > 0:\n        total_sum += result mod 10\n        result //= 10\n    return total_sum\n"}
{"task_id": "Mbpp/724", "completion": "function power_base_sum(base, power):\n    result = 1\n    for i in range(power):\n        result *= base\n    return sum(int(digit) for digit in str(result)"}
{"task_id": "Mbpp/724", "completion": "function power_base_sum(base, power)\n    result = 0\n    num = 1\n    for i in range(power):\n        num = num * base\n    while num > 0:\n        digit = num % 10\n        result = result + digit\n        num = int(num / 10)\n    return result\n"}
{"task_id": "Mbpp/725", "completion": "\nfunction extract_quotation(text)\n    pattern = '\"[^\"]*\"'  # regular expression pattern to match the text within quotation marks\n    result = re.findall(pattern, text)  # find all matches of the pattern in the text\n    return result\n"}
{"task_id": "Mbpp/725", "completion": "\nfunction extract_quotation(text)\n    pattern = re.compile('\"[^\"]*\"')\n    return [match.group(0)[1:-1] for match in pattern.finditer(text)]\n"}
{"task_id": "Mbpp/725", "completion": "function extract_quotation(text):\n    pattern = '\"[^\"]*\"'  # regular expression pattern to match the quotation\n    return re.findall(pattern, text)  # findall() returns all matches as a list of string"}
{"task_id": "Mbpp/725", "completion": "\nfunction extract_quotation(text):\n    pattern = re.compile(r'\"([^\"]*)\"')\n    return [m.group(1) for m in pattern.finditer(text)]\n"}
{"task_id": "Mbpp/725", "completion": ""}
{"task_id": "Mbpp/725", "completion": "function extract_quotation(text):\n    pattern = r'\"[^\"]*?\"'\n    matches = re.findall(pattern, text)\n    return [match[1:-1] for match in matches]\n"}
{"task_id": "Mbpp/725", "completion": "extract_quotation = function(text1)\n    pattern = re.compile(r'\"([^\"]*)\"', re.MULTILINE | re.IGNORECASE)\n    return [match.group(1) for match in pattern.finditer(text1)"}
{"task_id": "Mbpp/725", "completion": "\nfunction extract_quotation(text):\n    return re.findall(r'\"[^\"]*', text"}
{"task_id": "Mbpp/725", "completion": "\nfunction extract_quotation(input_string)\n    pattern = '\"([^\"]*)\"'\n    matches = re.findall(pattern, input_string)\n    return matche"}
{"task_id": "Mbpp/725", "completion": "function extract_quotation(text1)\n    pattern = re.compile(r'\"[^\"]*\"')\n    return [match.group(0).strip('\"') for match in pattern.findall(text1)]\n"}
{"task_id": "Mbpp/726", "completion": "function multiply_elements(tup):\n    result = ()\n    for i in range(0, len(tup) - 1):\n        result = result + (tup[i] * tup[i+1],)\n    return resul"}
{"task_id": "Mbpp/726", "completion": "function result = []\nn = len(test_tup) - 1\nfor i from 0 to n:\n    result.append(test_tup[i] * test_tup[i + 1])\nreturn tuple(result"}
{"task_id": "Mbpp/726", "completion": "function multiply_elements(t)\n    result = ()\n    for i from 1 to length(t) - 1\n        result = append(result, t[i] * t[i + 1])\n    return resul"}
{"task_id": "Mbpp/726", "completion": "\nfunction result = []\nfor i from 1 to N:\n    result.append(t_i * t_(i+1))\nreturn resul"}
{"task_id": "Mbpp/726", "completion": "\nfunction multiply_elements(tup):\n    result = ()\n    i = 0\n    while i < len(tup) - 1:\n        result = result + (tup[i] * tup[i + 1],)\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/726", "completion": "\nfunction result = []\n    for i from 1 to N\n        append result with t_i * t_(i+1)\n    return resul"}
{"task_id": "Mbpp/726", "completion": "function multiply_elements(t)\n    result = ()\n    for i from 0 to N-1\n        result = result + (t[i] * t[i+1],)\n    return result\n"}
{"task_id": "Mbpp/726", "completion": "elements = ()\nfor i in range(len(test_tup) - 1):\n    elements += (test_tup[i] * test_tup[i + 1],)\nreturn elements\n"}
{"task_id": "Mbpp/726", "completion": "function multiply_elements(t_1,...,t_{N+1})\n    N = length(t_1,...,t_{N+1}) - 1\n    result = ()\n    for i from 1 to N\n        result = append(result, t_i * t_{i+1})\n    return result\n"}
{"task_id": "Mbpp/726", "completion": "function multiply_elements(tup):\n    result = ()\n    for i from 0 to len(tup) - 2:\n        result = result + (tup[i] * tup[i+1],)\n    return result\n"}
{"task_id": "Mbpp/728", "completion": "ALGORITHM sum_list\n  INPUT: lists lst1, lst2\n  OUTPUT: list of sums\n\n  SET result = empty list\n  FOR i FROM 1 TO length of lst1\n    ADD lst1[i] + lst2[i] TO end of result\n  RETURN resul"}
{"task_id": "Mbpp/728", "completion": "\nfunction sum_list(lst1, lst2):\n    result = []\n    for i from 0 to length(lst1) - 1:\n        result.append(lst1[i] + lst2[i])\n    return resul"}
{"task_id": "Mbpp/728", "completion": "function sum_list(lst1, lst2):\n    result = []\n    for i from 0 to len(lst1) - 1:\n        result.append(lst1[i] + lst2[i])\n    return resul"}
{"task_id": "Mbpp/728", "completion": ""}
{"task_id": "Mbpp/728", "completion": "function sum_list(lst1, lst2)\n    result = []\n    for i from 0 to length(lst1)-1\n        result.append(lst1[i] + lst2[i])\n    return result\n"}
{"task_id": "Mbpp/728", "completion": "function sum_list(lst1, lst2):\n    result = []\n    for i from 0 to length of lst1 - 1:\n        result.append(lst1[i] + lst2[i])\n    return result\n"}
{"task_id": "Mbpp/728", "completion": "\nalgorithm sum_list is\n    input: list lst1 of integers, list lst2 of integers\n    output: list of integers\n\n    result = new list of length equal to the length of lst1 and lst2\n    for i from 1 to the length of lst1 do\n        append lst1[i-1] + lst2[i-1] to result\n    return result\n"}
{"task_id": "Mbpp/728", "completion": "\nfunction sum_list(lst1, lst2):\n    result = []\n    for i from 0 to length(lst1)-1:\n        result.append(lst1[i] + lst2[i])\n    return result\n"}
{"task_id": "Mbpp/728", "completion": "function sum_list(lst1, lst2):\n  result = new list\n  for i from 0 to length of lst1 - 1:\n    result.append(lst1[i] + lst2[i])\n  return result\n"}
{"task_id": "Mbpp/728", "completion": "function sum_list(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"}
{"task_id": "Mbpp/730", "completion": "function consecutive_duplicates(input_list):\n    result = []\n    for key, group in groupby(input_list):\n        result.append(key)\n    return resul"}
{"task_id": "Mbpp/730", "completion": "input_list = nums\nresult = []\nfor key, group in groupby(input_list):\n    result.append(key)\nreturn resul"}
{"task_id": "Mbpp/730", "completion": "\nfunction remove_consecutive_duplicates(input_list):\n    result = []\n    for key, group in groupby(input_list):\n        if len(list(group)) > 1:\n            result.append(key)\n        else:\n            result.extend(list(group))\n    return result\n"}
{"task_id": "Mbpp/730", "completion": "function consecutive_duplicates(nums):\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return resul"}
{"task_id": "Mbpp/730", "completion": "function consecutive_duplicates(list nums):\n    return [x[0] for x in groupby(nums)"}
{"task_id": "Mbpp/730", "completion": "function consecutive_duplicates(nums):\n    return [k for k, _ in groupby(nums)"}
{"task_id": "Mbpp/730", "completion": "function consecutive_duplicates(input_list):\n    return [x[0] for x in groupby(input_list)"}
{"task_id": "Mbpp/730", "completion": "function consecutive_duplicates(nums):\n    return [k for k, _ in groupby(nums)]\n"}
{"task_id": "Mbpp/730", "completion": "function consecutive_duplicates(list):\n    result = []\n    for key, group in groupby(sorted(nums)):\n        result.append(key)\n    return resul"}
{"task_id": "Mbpp/730", "completion": "function consecutive_duplicates(nums)\n    result = []\n    for k, g in groupby(nums):\n        result.append(k)\n        next(g, None)\n    return resul"}
{"task_id": "Mbpp/731", "completion": "\nfunction lateralsurface_cone(r, h)\n    pi = 3.14159\n    slant_length = sqrt(r^2 + h^2)\n    lateral_surface_area = pi * r * slant_length\n    return lateral_surface_area\n"}
{"task_id": "Mbpp/731", "completion": "FUNCTION lateralsurface_cone(r, h)\n    RETURN 2 * pi * r * sqrt(r^2 + h^2)\n"}
{"task_id": "Mbpp/731", "completion": ""}
{"task_id": "Mbpp/731", "completion": ""}
{"task_id": "Mbpp/731", "completion": "function lateralsurface_cone(r, h)\n    PI = 3.14159\n    slant_height = sqrt(h^2 + r^2)\n    return 2 * PI * r * slant_heigh"}
{"task_id": "Mbpp/731", "completion": "\nfunction lateralsurface_cone(r,h)\n    pi = 3.14159265359\n    slant_height = sqrt(r^2 + h^2)\n    lateral_surface_area = pi * r * slant_height\n    return lateral_surface_area\n"}
{"task_id": "Mbpp/731", "completion": "function lateralsurface_cone(r, h):\n    pi = 3.141592653589793\n    slant_height = sqrt(h^2 + r^2)\n    lateral_area = pi * r * slant_height\n    return lateral_area\n"}
{"task_id": "Mbpp/731", "completion": "function lateralsurface_cone(r,h)\n    pi=3.14159\n    area=(math.pi*r*(r+h))\n    return area\n"}
{"task_id": "Mbpp/731", "completion": "function lateralsurface_cone(r, h)\n    pi = 3.14159\n    return pi * r * (r + sqrt(h**2 + r**2))\n"}
{"task_id": "Mbpp/731", "completion": "function lateralsurface_cone(r, h)\n    pi = 3.14159\n    return pi * r * (r + sqrt(r^2 + h^2))\n"}
{"task_id": "Mbpp/732", "completion": "function replace_specialchar(text):\n    return re.sub('[ ,.]', ':', text)\n"}
{"task_id": "Mbpp/732", "completion": "function replace_specialchar(text)\n    result = \"\"\n    for char in text:\n        if char == \" \" or char == \",\" or char == \".\":\n            result = result + \":\"\n        else:\n            result = result + char\n    return result\n"}
{"task_id": "Mbpp/732", "completion": "function replace_specialchar(text):\n    text = re.sub('[ ,\\.]', ':', text)\n    return text\n"}
{"task_id": "Mbpp/732", "completion": "\nfunction replace_specialchar(text):\n    return re.sub(r'[ ,\\.]+', ':', text)\n"}
{"task_id": "Mbpp/732", "completion": "function replace_specialchar(text)\n    output = \"\"\n    for char in text:\n        if char == \" \" or char == \",\" or char == \".\":\n            output += \":\"\n        else:\n            output += char\n    return output\n"}
{"task_id": "Mbpp/732", "completion": "\nfunction replace_specialchar(text):\n    return re.sub('[ ,\\.]', ':', text"}
{"task_id": "Mbpp/732", "completion": "\nfunction replace_specialchar(text)\n    new_text = \"\"\n    for each char in text\n        if char is ' ' or char is ',' or char is '.'\n            new_text = new_text + ':'\n        else\n            new_text = new_text + char\n    return new_text\n"}
{"task_id": "Mbpp/732", "completion": "\nfunction replace_specialchar(text):\n    return re.sub('[\\s,\\.]', ':', text"}
{"task_id": "Mbpp/732", "completion": "\nfunction replace_specialchar(input_text)\n    output_text = \"\"\n    for each character in input_text:\n        if character is space or character is comma or character is dot:\n            output_text = output_text + \":\"\n        else:\n            output_text = output_text + character\n    return output_text\n"}
{"task_id": "Mbpp/732", "completion": "function replace_specialchar(text):\n    pattern = r'[ ,.]'\n    return re.sub(pattern, ':', text"}
{"task_id": "Mbpp/733", "completion": "function find_first_occurrence(A, x)\n    left = 0\n    right = length(A) - 1\n    while left <= right do\n        mid = (left + right) / 2\n        if A[mid] < x then\n            left = mid + 1\n        else if A[mid] > x then\n            right = mid - 1\n        else then\n            if mid == 0 or A[mid-1] != x then\n                return mid\n            right = mid - 1\n        end if\n    end while\n    return -1\n"}
{"task_id": "Mbpp/733", "completion": "ALGORITHM find_first_occurrence(A, x)\n    low = 0\n    high = size of A - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            high = mid - 1\n    return -1\n"}
{"task_id": "Mbpp/733", "completion": "function find_first_occurrence(A, x):\n    left = 0\n    right = length(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else if A[mid] > x:\n            right = mid - 1\n        else:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            right = mid - 1\n    return -1\n"}
{"task_id": "Mbpp/733", "completion": "`begin`\n  `n := 0`\n  `found := false`\n  `i := 0`\n  `while i < length(A) and not found do`\n    `if A[i] = x then`\n      `found := true`\n      `return i`\n    `end if`\n    `i := i + 1`\n  `end while`\n  `return -1`\n`end`\n"}
{"task_id": "Mbpp/733", "completion": "function find_first_occurrence(A, x):\n    low = 0\n    high = length(A) - 1\n    \n    while low <= high:\n        mid = (low + high) / 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            else:\n                high = mid - 1\n    return -1\n"}
{"task_id": "Mbpp/733", "completion": "procedure find_first_occurrence(A, x)\n    i = 0\n    while i < length(A)\n        if A[i] == x\n            return i\n        else if A[i] > x\n            return -1\n        end if\n        i = i + 1\n    end while\nend procedur"}
{"task_id": "Mbpp/733", "completion": "\nfunction find_first_occurrence(A, x):\n    left = 0\n    right = length(A) - 1\n    \n    while left <= right:\n        mid = (left + right) / 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -"}
{"task_id": "Mbpp/733", "completion": "\nALGORITHM find_first_occurrence(A, x)\n    LEFT = 0\n    RIGHT = length(A) - 1\n    FOUND = FALSE\n    \n    WHILE (LEFT <= RIGHT) AND NOT FOUND\n        MID = (LEFT + RIGHT)/2\n        IF A[MID] < x\n            LEFT = MID + 1\n        ELSE IF A[MID] > x\n            RIGHT = MID - 1\n        ELSE\n            FOUND = TRUE\n            IF MID = 0 OR A[MID-1] != x\n                RETURN MID\n            ELSE\n                RIGHT = MID - 1\n    IF FOUND\n        RETURN LEFT\n    ELSE\n        RETURN -1\n"}
{"task_id": "Mbpp/733", "completion": "\nfunction find_first_occurrence(A, x)\n    i = 0\n    while i < length(A)\n        if A[i] == x\n            return i\n        else\n            i = i + 1\n    end\n    return -1\nen"}
{"task_id": "Mbpp/733", "completion": ""}
{"task_id": "Mbpp/734", "completion": "function sum_of_subarray_prod(arr):\n    n = length of arr\n    total_sum = 0\n    for i from 1 to n:\n        prod = 1\n        for j from i to n:\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum\n"}
{"task_id": "Mbpp/734", "completion": "function sum_of_subarray_prod(arr):\n    n = length of arr\n    total_sum = 0\n    \n    for i from 0 to n\n        prod = 1\n        for j from i to n\n            prod *= arr[j]\n            total_sum += prod\n        end for\n    end for\n    return total_sum\n"}
{"task_id": "Mbpp/734", "completion": "function sum_Of_Subarray_Prod(arr):\n    n = size of arr\n    total_sum = 0\n    for i from 0 to n-1:\n        for j from i to n-1:\n            product = 1\n            for k from i to j:\n                product = product * arr[k]\n            total_sum = total_sum + product\n    return total_sum\n"}
{"task_id": "Mbpp/734", "completion": "\nfunction sum_of_subarray_prod(arr):\n    n = length(arr)\n    total_sum = 0\n    \n    for i from 0 to n:\n        prod = 1\n        for j from i to n:\n            prod *= arr[j]\n            total_sum += prod\n    \n    return total_sum\n"}
{"task_id": "Mbpp/734", "completion": ""}
{"task_id": "Mbpp/734", "completion": ""}
{"task_id": "Mbpp/734", "completion": ""}
{"task_id": "Mbpp/734", "completion": "\nfunction sum_Of_Subarray_Prod(arr):\n    n = length(arr)\n    sum_of_products = 0\n    for i from 0 to n:\n        prod = 1\n        for j from i to n:\n            prod = prod * arr[j]\n            sum_of_products += prod\n    return sum_of_products\n"}
{"task_id": "Mbpp/734", "completion": "function sum_Of_Subarray_Prod(arr):\n    n = length(arr)\n    res = 0\n    for i from 1 to n:\n        prod = 1\n        for j from i to n:\n            prod *= arr[j - 1]\n            res += prod\n    return res\n"}
{"task_id": "Mbpp/734", "completion": "\nfunction sum_of_subarray_prod(arr):\n    n = length of arr\n    res = 0\n    for i from 0 to n:\n        prod = 1\n        for j from i to n:\n            prod = prod * arr[j]\n            res = res + prod\n    return res\n"}
{"task_id": "Mbpp/735", "completion": "\nfunction toggle_middle_bits(n):\n    # calculate the number of bits in the binary representation of n\n    num_bits = floor(log2(n)) + 1\n\n    # get the first and last bit\n    first_bit = n & 1\n    last_bit = (n >> (num_bits - 1)) & 1\n\n    # clear the first and last bit\n    n = n ^ first_bit ^ (n & ~3)\n    n = n ^ (last_bit << (num_bits - 1))\n\n    return n\n"}
{"task_id": "Mbpp/735", "completion": "\nfunction toggle_middle_bits(n):\n    # Convert the number into binary and remove the first and last bit\n    binary = bin(n)[2:]\n    middle_bits = binary[1:-1]\n    \n    # Toggle each bit in the middle bits\n    toggled_bits = ''\n    for bit in middle_bits:\n        if bit == '0':\n            toggled_bits += '1'\n        else:\n            toggled_bits += '0'\n    \n    # Add the first and last bit back, and convert it to integer\n    result = '1' + toggled_bits + '1'\n    return int(result, 2"}
{"task_id": "Mbpp/735", "completion": "DATA n\nWHILE n > 1\n    n = n / 2\nEND WHILE\nn = n * 2 + 1\nnum = 0\nk = 0\nWHILE n > 0\n    if (n % 2) == 0\n        num = num + pow(2, k)\n    n = n / 2\n    k = k + 1\nEND WHILE\nnum = ~num + 1\nk = 0\nn = num\nWHILE k < 31\n    if (n % 2) == 0\n        n = n - 1\n    n = n / 2\n    k = k + 1\nEND WHILE\nWHILE n > 1\n    n = n / 2\nEND WHILE\nn = n * 2 + 1\nRETURN n\n"}
{"task_id": "Mbpp/735", "completion": "\nfunction toggle_middle_bits(n):\n    # calculate the number of middle bits\n    num_middle_bits = floor(log2(n)) - 1\n\n    # calculate the mask for the middle bits\n    mask = (1 << num_middle_bits) - 1\n\n    # toggle the middle bits\n    result = n ^ mask\n\n    return result\n"}
{"task_id": "Mbpp/735", "completion": "\nfunction toggle_middle_bits(n):\n    # Convert n to binary and remove the '0b' prefix\n    binary_n = bin(n)[2:]\n    \n    # Calculate the length of the binary string\n    len_binary_n = len(binary_n)\n    \n    # Toggle the middle bits (if any)\n    if len_binary_n > 2:\n        first_last_bit = binary_n[0] + binary_n[-1]\n        middle_bits = binary_n[1:-1]\n        new_middle_bits = ''.join('1' if bit == '0' else '0' for bit in middle_bits)\n        result = first_last_bit + new_middle_bits\n        \n    # If the number has less than or equal to 2 bits, return the number itself\n    else:\n        result = str(n)\n    \n    # Convert the result back to an integer and return it\n    return int(result, 2"}
{"task_id": "Mbpp/735", "completion": "function toggle_middle_bits(n):\n    # calculate the number of bits in n\n    num_bits = floor(log2(n)) + 1\n\n    # find the number of bits to toggle\n    middle_bits_to_toggle = num_bits - 2\n\n    # initialize the result as the input number\n    result = n\n\n    # loop through each bit to toggle\n    for i in range(middle_bits_to_toggle):\n        # get the current bit\n        current_bit = (n >> i) & 1\n\n        # toggle the bit\n        if current_bit == 0:\n            result = result | (1 << i)\n        else:\n            result = result ^ (1 << i)\n\n    return resul"}
{"task_id": "Mbpp/735", "completion": "\nfunction toggle_middle_bits(n):\n    n = n ^ ((~0 << 2) & n)\n    return n | (n >> 1)\n"}
{"task_id": "Mbpp/735", "completion": "\nfunction toggle_middle_bits(n):\n    n = n ^ ((1 << (len(bin(n)) - 2)) - 1)\n    return n\n"}
{"task_id": "Mbpp/735", "completion": "function toggle_middle_bits(n):\n    # get the binary representation of the number\n    bin_n = bin(n)[2:]\n\n    # remove the first and the last character (which is the sign)\n    bin_n = bin_n[1:-1]\n\n    # calculate the length of the middle bits\n    mid_len = len(bin_n)\n\n    # if the length is odd, add a zero at the start\n    if mid_len % 2 != 0:\n        bin_n = '0' + bin_n\n\n    # split the middle bits into two halves\n    left_half = bin_n[:mid_len//2]\n    right_half = bin_n[mid_len//2:]\n\n    # toggle each bit in the middle bits\n    for i in range(mid_len//2):\n        left_half = left_half[:i] + '1' + left_half[i+1:]\n        right_half = right_half[:i] + '0' + right_half[i+1:]\n\n    # concatenate the first bit, the toggled middle bits, and the last bit\n    result = '1' + ''.join(left_half + right_half) + '1'\n\n    # convert the binary string back to an integer\n    return int(result, 2"}
{"task_id": "Mbpp/735", "completion": "FUNCTION toggle_middle_bits(n)\n    IF n < 0\n        RETURN -toggle_middle_bits(-n)\n    END IF\n    \n    num_bits = floor(log2(n)) + 1\n    mask = (1 << (num_bits - 2)) - 1\n    \n    return n ^ mask\n"}
{"task_id": "Mbpp/736", "completion": "\nfunction left_insertion(a, x):\n    return bisect.bisect_left(a, x"}
{"task_id": "Mbpp/736", "completion": "function left_insertion(a, x):\n    index = bisect.bisect_left(a, x)\n    return inde"}
{"task_id": "Mbpp/736", "completion": "\nFUNCTION left_insertion(a, x)\n    return bisect.bisect_left(a, x) - 1\n"}
{"task_id": "Mbpp/736", "completion": "function left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n"}
{"task_id": "Mbpp/736", "completion": "function left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n"}
{"task_id": "Mbpp/736", "completion": "if len(a) == 0:\n    return 0\ni = 0\nj = len(a)\nwhile i <= j:\n    mid = (i + j) // 2\n    if a[mid] < x:\n        i = mid + 1\n    else:\n        j = mid - 1\nreturn "}
{"task_id": "Mbpp/736", "completion": "ALGORITHM:\n    LEFT_INSERTION(a, x)\n        n = length of array a\n        result = 0\n        for i = 0 to n-1 do\n            if a[i] >= x then\n                result = i\n                return result\n        return n\n"}
{"task_id": "Mbpp/736", "completion": ""}
{"task_id": "Mbpp/736", "completion": "function left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return "}
{"task_id": "Mbpp/736", "completion": ""}
{"task_id": "Mbpp/737", "completion": "function check_str(string)\n    pattern = re.compile('^[aeiouAEIOU]')\n    if pattern.match(string):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/737", "completion": "function check_str(input_string):\n    pattern = re.compile('^[aeiouAEIOU]')\n    return bool(pattern.match(input_string)"}
{"task_id": "Mbpp/737", "completion": ""}
{"task_id": "Mbpp/737", "completion": "function check_str(string):\n    pattern = re.compile('^[aeiouAEIOU]')\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/737", "completion": ""}
{"task_id": "Mbpp/737", "completion": ""}
{"task_id": "Mbpp/737", "completion": "\nfunction check_str(input_string):\n    if re.match('^[aeiouAEIOU]', input_string):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/737", "completion": ""}
{"task_id": "Mbpp/737", "completion": "\nfunction check_str(string)\n    pattern = re.compile('^[aeiouAEIOU].*')\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/737", "completion": ""}
{"task_id": "Mbpp/739", "completion": "\nfunction find_Index(n):\n    i = 1\n    result = 0\n    while True:\n        num_digits = len(str(i * (i + 1) // 2))\n        if num_digits == n:\n            return i\n        i += 1\n"}
{"task_id": "Mbpp/739", "completion": ""}
{"task_id": "Mbpp/739", "completion": ""}
{"task_id": "Mbpp/739", "completion": ""}
{"task_id": "Mbpp/739", "completion": "function find_Index(n):\n    i = 1\n    count = 1\n    while True:\n        tri_num = (i * (i + 1)) / 2\n        if len(str(int(tri_num))) == n:\n            return i\n        i = i + 1\n"}
{"task_id": "Mbpp/739", "completion": "function find_Index(n):\n    i = 1\n    count = 0\n    while True:\n        tri_num = (i * (i + 1)) / 2\n        if len(str(int(tri_num))) == n:\n            return i\n        i += "}
{"task_id": "Mbpp/739", "completion": "\nfunction find_Index(n):\n    i = 1\n    count = 0\n    while True:\n        num = (i * (i + 1)) / 2\n        if len(str(int(num))) == n:\n            return i\n        i += "}
{"task_id": "Mbpp/739", "completion": ""}
{"task_id": "Mbpp/739", "completion": "function find_Index(n):\n    i = 1\n    result = 0\n    while True:\n        t = i * (i + 1) / 2\n        if len(str(int(t))) == n:\n            return result + 1\n        i += 1\n        result += "}
{"task_id": "Mbpp/739", "completion": "\nfunction find_Index(n):\n    i = 1\n    while True:\n        if len(str((i * (i + 1)) // 2)) == n:\n            return i\n        i += "}
{"task_id": "Mbpp/740", "completion": "\nfunction tuple_to_dict(test_tup):\n    dict_var = {}\n    i = 0\n    while i < len(test_tup) - 1:\n        dict_var[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return dict_va"}
{"task_id": "Mbpp/740", "completion": "input_tuple = []\noutput_dict = {}\ni = 0\nwhile i < len(test_tup):\n    output_dict[test_tup[i]] = test_tup[i+1]\n    i += 2\nreturn output_dic"}
{"task_id": "Mbpp/740", "completion": "\nfunction tuple_to_dict(test_tup):\n    if len(test_tup) % 2 != 0:\n        print(\"Error: Tuple length must be even\")\n        return None\n    else:\n        result = {}\n        i = 0\n        while i < len(test_tup):\n            result[test_tup[i]] = test_tup[i+1]\n            i = i + 2\n        return resul"}
{"task_id": "Mbpp/740", "completion": "function tuple_to_dict(test_tup):\n    dict = {}\n    for i in range(0, len(test_tup), 2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n"}
{"task_id": "Mbpp/740", "completion": "function tuple_to_dict(test_tup):\n    result = {}\n    start_index = 0\n    while start_index < len(test_tup) - 1:\n        result[test_tup[start_index]] = test_tup[start_index + 1]\n        start_index += 2\n    return resul"}
{"task_id": "Mbpp/740", "completion": "function tuple_to_dict(test_tup):\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return resul"}
{"task_id": "Mbpp/740", "completion": "function tuple_to_dict(test_tup):\n    if len(test_tup) % 2 != 0:\n        return \"Error: Tuple length must be even\"\n    dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dic"}
{"task_id": "Mbpp/740", "completion": "function tuple_to_dict(test_tup):\n    dict_result = {}\n    i = 0\n    while i < len(test_tup) - 1:\n        dict_result[test_tup[i]] = test_tup[i + 1]\n        i += 2\n    return dict_resul"}
{"task_id": "Mbpp/740", "completion": "\nfunction tuple_to_dict(test_tup):\n    result = {}\n    for i in range(0, len(test_tup) - 1, 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return resul"}
{"task_id": "Mbpp/740", "completion": "function tuple_to_dict(test_tup):\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i + 1]\n    return dict_ob"}
{"task_id": "Mbpp/741", "completion": ""}
{"task_id": "Mbpp/741", "completion": ""}
{"task_id": "Mbpp/741", "completion": ""}
{"task_id": "Mbpp/741", "completion": ""}
{"task_id": "Mbpp/741", "completion": ""}
{"task_id": "Mbpp/741", "completion": "\nfunction all_Characters_Same(s)\n    if len(set(s)) > 1 then\n        return false\n    else\n        return true\n"}
{"task_id": "Mbpp/741", "completion": "function all_Characters_Same(s)\n    if len(set(s)) != 1:\n        return False\n    else:\n        return True\n"}
{"task_id": "Mbpp/741", "completion": "\nFUNCTION all_Characters_Same(s)\n    SET flag = TRUE\n    SET char = s[0]\n    FOR i FROM 1 TO LENGTH(s)\n        IF s[i] != char THEN\n            SET flag = FALSE\n            BREAK\n        END IF\n    END FOR\n    RETURN flag\nEND FUNCTION\n"}
{"task_id": "Mbpp/741", "completion": ""}
{"task_id": "Mbpp/741", "completion": "function all_Characters_Same(s):\n    first = s[0]\n    for char in s:\n        if char != first:\n            return False\n    return Tru"}
{"task_id": "Mbpp/742", "completion": "\nfunction calculate_perimeter(base, height):\n    return 2 * (base + sqrt(base**2 + height**2))\nend function\n\nfunction area_tetrahedron(side):\n    # formula: sqrt(3)*s^2\n    return sqrt(3) * side ** 2\nend function\n"}
{"task_id": "Mbpp/742", "completion": "function area_tetrahedron(side)\n    return (sqrt(3) * side^2) / (4 * sqrt(2))\n"}
{"task_id": "Mbpp/742", "completion": "\nfunction calculate_area_of_tetrahedron(side):\n    # The formula for the area of a tetrahedron is sqrt(3)/4 * side^2 * sqrt(side^2 + 3)\n    area = (math.sqrt(3) / 4) * (side ** 2) * math.sqrt((side ** 2) + 3)\n    return are"}
{"task_id": "Mbpp/742", "completion": "\nfunction area_tetrahedron(side)\n    return sqrt(3/4 * side^2 * side)\n"}
{"task_id": "Mbpp/742", "completion": "function area_tetrahedron(side):\n    return (sqrt(3) * side^2) / 4\n"}
{"task_id": "Mbpp/742", "completion": "\nfunction area_tetrahedron(side):\n    a = side\n    sqrt6 = math.sqrt(6)\n    v = (math.sqrt((3 + 3*sqrt6)*a**2)) / 12\n    return 6 * "}
{"task_id": "Mbpp/742", "completion": ""}
{"task_id": "Mbpp/742", "completion": "`function area_tetrahedron(side):\n    s = side / 3\n    area = math.sqrt(3 * (s * (s - 2/3*s)**2))\n    return area"}
{"task_id": "Mbpp/742", "completion": "\nfunction area_tetrahedron(side):\n    a = side\n    s = (a * math.sqrt(3))/4\n    return 6 * "}
{"task_id": "Mbpp/742", "completion": "function area_tetrahedron(side)\n    return (1/6) * sqrt(8*side^3 + 9*side^2)\n"}
{"task_id": "Mbpp/743", "completion": "function rotate_right(list l, integer m):\n    m = m % len(l)\n    return l[m:] + l[:m"}
{"task_id": "Mbpp/743", "completion": "\nfunction rotate_right(list, num_positions):\n    num_positions = num_positions % len(list)\n    return list[-num_positions:] + list[:-num_positions]\n"}
{"task_id": "Mbpp/743", "completion": "\nALGORITHM:\n    define function rotate_right(list l, int m)\n        calculate remainder r as the modulus of m with the length of list l\n        take a slice of list l from index r to the end and concatenate it with a slice of list l from start to index r\n        return the resulting list\n\nEND ALGORITHM"}
{"task_id": "Mbpp/743", "completion": "function rotate_right(l, m):\n    m = m % len(l)\n    return l[-m:] + l[:-m"}
{"task_id": "Mbpp/743", "completion": "function rotate_right(list, m):\n    n = length of list\n    m = m % n\n    return list[n-m:] + list[:n-m"}
{"task_id": "Mbpp/743", "completion": "\nfunction rotate_right(list l, integer m)\n    m = m % length of l\n    return l[m .. length of l] + l[0 .. m - 1"}
{"task_id": "Mbpp/743", "completion": "algorithm rotateRight is\n    input: a list l and an integer m\n    output: rotated list\n\n    n = length of list l\n    k = m mod n\n    return l[n-k:] + l[:n-k"}
{"task_id": "Mbpp/743", "completion": ""}
{"task_id": "Mbpp/743", "completion": "INPUT: list l, integer m\nOUTPUT: rotated list\n\nIF m > length of l:\n    m = m mod length of l\n\nRESULT = []\nfor i from length of l - m to length of l:\n    RESULT.append(l[i])\nfor i from 0 to length of l - m - 1:\n    RESULT.append(l[i])\nRETURN RESUL"}
{"task_id": "Mbpp/743", "completion": "ALGORITHM:\nfunction rotate_right(l, m):\n    if m is 0 then\n        return l\n    else\n        m = m mod length of l\n        return concatenate(last m elements of l with first length of l - m elements of l)\n"}
{"task_id": "Mbpp/744", "completion": "if test_tup == () then\n    return False\nelse\n    for each element in test_tup:\n        if element is None then\n            return True\n    return False\n"}
{"task_id": "Mbpp/744", "completion": ""}
{"task_id": "Mbpp/744", "completion": "if exists x in test_tup : \n    if x is None \n        return True \n    else \n        return Fals"}
{"task_id": "Mbpp/744", "completion": "\nfunction check_none(test_tup):\n    has_none = False\n    for element in test_tup:\n        if element is None:\n            has_none = True\n            break\n    return has_non"}
{"task_id": "Mbpp/744", "completion": "\nfunction check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"}
{"task_id": "Mbpp/744", "completion": ""}
{"task_id": "Mbpp/744", "completion": ""}
{"task_id": "Mbpp/744", "completion": "\nfunction check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return Fals"}
{"task_id": "Mbpp/744", "completion": ""}
{"task_id": "Mbpp/744", "completion": "function check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"}
{"task_id": "Mbpp/745", "completion": "\nfunction divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n"}
{"task_id": "Mbpp/745", "completion": "function result = []\nfor num in range(startnum, endnum+1):\n    if all(num % int(digit) == 0 for digit in str(num)):\n        result.append(num)\nreturn result\n"}
{"task_id": "Mbpp/745", "completion": "function divisible_by_digits(startnum, endnum)\n    result = []\n    for i from startnum to endnum\n        num_str = str(i)\n        is_divisible = True\n        for digit in num_str:\n            if i % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(i)\n    return result\n"}
{"task_id": "Mbpp/745", "completion": "function divisible_by_digits(startnum, endnum)\n    result = []\n    for num in range(startnum, endnum+1):\n        is_divisible = True\n        for digit in str(num):\n            if num % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return resul"}
{"task_id": "Mbpp/745", "completion": "function divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        is_divisible = True\n        for digit in str(num):\n            if num % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return resul"}
{"task_id": "Mbpp/745", "completion": "function divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        is_divisible = True\n        str_num = str(num)\n        for digit in str_num:\n            if num % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result\n"}
{"task_id": "Mbpp/745", "completion": "Function divisible_by_digits(startnum, endnum)\n    result = []\n    For each num from startnum to endnum:\n        digit_string = Convert num to string\n        divisible = True\n        For each char in digit_string:\n            if Convert char back to integer and num modulo that integer is not zero, then\n                divisible = False\n        If divisible is still True, then\n            Add num to result\n    Return resul"}
{"task_id": "Mbpp/745", "completion": "function divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        is_divisible = True\n        str_num = str(num)\n        for digit in set(str_num):\n            if num % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result\n"}
{"task_id": "Mbpp/745", "completion": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return resul"}
{"task_id": "Mbpp/745", "completion": "function divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(int(digit) ** len(str(num)) % num == 0 for digit in str(num)):\n            result.append(num)\n    return resul"}
{"task_id": "Mbpp/746", "completion": ""}
{"task_id": "Mbpp/746", "completion": "function sector_area(r,a)\n    if a > 360\n        return None\n    else\n        return (r*r*math.pi*a)/360\n"}
{"task_id": "Mbpp/746", "completion": "\nfunction sector_area(radius, angle):\n    if angle > 360:\n        return None\n    else:\n        sector_angle = math.radians(angle)\n        sector_area = (radius * radius) * (sector_angle / 360)\n        return sector_area\n"}
{"task_id": "Mbpp/746", "completion": ""}
{"task_id": "Mbpp/746", "completion": ""}
{"task_id": "Mbpp/746", "completion": ""}
{"task_id": "Mbpp/746", "completion": "\ndefine function sector_area(r, a)\n    if a > 360 then\n        return None\n    else\n        return (r * r * a) / 360 * pi\n    end if\nend functio"}
{"task_id": "Mbpp/746", "completion": "function sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        angle_in_radians = a * math.pi / 180\n        area = (r * r) * (angle_in_radians)\n        return are"}
{"task_id": "Mbpp/746", "completion": ""}
{"task_id": "Mbpp/746", "completion": ""}
{"task_id": "Mbpp/748", "completion": "function capital_words_spaces(str1):\n    return re.sub('([A-Z])', r' \\1', str1)\n"}
{"task_id": "Mbpp/748", "completion": ""}
{"task_id": "Mbpp/748", "completion": "function capital_words_spaces(str):\n  return str\n"}
{"task_id": "Mbpp/748", "completion": "\nfunction capitalize_spaces(s):\n    return s\n"}
{"task_id": "Mbpp/748", "completion": ""}
{"task_id": "Mbpp/748", "completion": "function capital_words_spaces(str1):\n    return str1\n"}
{"task_id": "Mbpp/748", "completion": "\nfunction capital_words_spaces(input_string):\n    return input_string\n"}
{"task_id": "Mbpp/748", "completion": "function capital_words_spaces(str1)\n    new_str = \"\"\n    for char in str1:\n        if char.isupper():\n            new_str += \" \" + char\n        else:\n            new_str += char\n    return new_str\n"}
{"task_id": "Mbpp/748", "completion": "\nfunction capital_words_spaces(str1):\n    return str1\n"}
{"task_id": "Mbpp/748", "completion": "\nfunction capitalize_words_spaces(str1)\n    result = \"\"\n    prev_uppercase = False\n    for char in str1:\n        if char.isupper():\n            result += \" \" + char\n            prev_uppercase = True\n        elif prev_uppercase:\n            result += \" \" + char\n            prev_uppercase = False\n        else:\n            result += char\n    return result\n"}
{"task_id": "Mbpp/749", "completion": "function sort_numeric_strings(nums_str)\n    numeric_strs = []\n    for str_num in nums_str:\n        numeric_strs.append(int(str_num))\n    return sorted(numeric_strs"}
{"task_id": "Mbpp/749", "completion": "function sort_numeric_strings(nums_str):\n    return sorted([int(num) for num in nums_str])\n"}
{"task_id": "Mbpp/749", "completion": "\nfunction sort_numeric_strings(nums_str):\n    # Convert each string into float and store it in a list\n    nums_float = []\n    for num in nums_str:\n        nums_float.append(float(num))\n    \n    # Sort the list in ascending order\n    nums_float.sort()\n    \n    # Convert back to strings and return the result\n    return [str(num) for num in nums_float"}
{"task_id": "Mbpp/749", "completion": "function sort_numeric_strings(nums_str):\n    nums = [int(num) for num in nums_str]\n    return sorted(nums"}
{"task_id": "Mbpp/749", "completion": "function sort_numeric_strings(nums_str):\n    return sorted(map(int, nums_str)"}
{"task_id": "Mbpp/749", "completion": "\nfunction sort_numeric_strings(nums_str):\n    return [int(num) for num in sorted(nums_str, key=lambda x: int(x))]\n"}
{"task_id": "Mbpp/749", "completion": "function sort_numeric_strings(list_of_strings)\n    new_list = []\n    for str_num in list_of_strings:\n        new_list.append(int(str_num))\n    new_list.sort()\n    return new_lis"}
{"task_id": "Mbpp/749", "completion": "function sort_numeric_strings(nums_str):\n    return sorted([int(num_str) for num_str in nums_str])\n"}
{"task_id": "Mbpp/749", "completion": "function sort_numeric_strings(nums_str)\n    nums = []\n    for num in nums_str:\n        nums.append(int(num))\n    return sorted(nums"}
{"task_id": "Mbpp/749", "completion": "function sort_numeric_strings(nums_str):\n    nums_int = [int(num) for num in nums_str]\n    sorted_nums = sorted(nums_int)\n    return sorted_nums\n"}
{"task_id": "Mbpp/750", "completion": "LIST = test_list\nTUPLE = list(test_tup)\nLIST.extend(TUPLE)\n"}
{"task_id": "Mbpp/750", "completion": ""}
{"task_id": "Mbpp/750", "completion": ""}
{"task_id": "Mbpp/750", "completion": "BEGIN\n    temp_list = test_list\n    for item in test_tup:\n        temp_list.append(item)\n    END\n"}
{"task_id": "Mbpp/750", "completion": "extend test_list with test_tup\n"}
{"task_id": "Mbpp/750", "completion": "function add_tuple(test_list, test_tup):\n    new_list = test_list\n    i = 0\n    while i < len(test_tup):\n        new_list.append(test_tup[i])\n        i = i + 1\n    return new_lis"}
{"task_id": "Mbpp/750", "completion": ""}
{"task_id": "Mbpp/750", "completion": "\nfunction add_tuple(test_list, test_tup):\n    test_list.extend(list(test_tup))\n    return test_list\n"}
{"task_id": "Mbpp/750", "completion": "function add_tuple(test_list, test_tup):\n    test_list.extend(list(test_tup))\n    return test_lis"}
{"task_id": "Mbpp/750", "completion": "FUNCTION add_tuple(test_list, test_tup)\n    FOR EACH element IN test_tup\n        ADD element TO THE END OF test_list\n    RETURN test_list\n"}
{"task_id": "Mbpp/751", "completion": ""}
{"task_id": "Mbpp/751", "completion": ""}
{"task_id": "Mbpp/751", "completion": ""}
{"task_id": "Mbpp/751", "completion": ""}
{"task_id": "Mbpp/751", "completion": ""}
{"task_id": "Mbpp/751", "completion": ""}
{"task_id": "Mbpp/751", "completion": ""}
{"task_id": "Mbpp/751", "completion": "\nfunction check_min_heap(arr):\n    n = size of arr\n    \n    if size of arr is 0:\n        return True\n    else:\n        check_min_heap_helper(arr, 1)\n        \n    function check_min_heap_helper(arr, i):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        \n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        \n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n        \n        if left_child < n:\n            if not check_min_heap_helper(arr, left_child):\n                return False\n            \n        if right_child < n:\n            if not check_min_heap_helper(arr, right_child):\n                return False\n        \n        return True\n"}
{"task_id": "Mbpp/751", "completion": "\nprocedure check_min_heap(arr)\n    n = size of arr\n    if n is 0 then\n        return True\n    end if\n    if left child of root is greater than root then\n        return False\n    else\n        left child = 2 * i + 1\n        right child = 2 * i + 2\n        if left child < n and arr[left child] < arr[i] then\n            return False\n        end if\n        if right child < n and arr[right child] < arr[i] then\n            return False\n        end if\n        i = left child\n        call check_min_heap_helper(arr, i)\n        i = right child\n        call check_min_heap_helper(arr, i)\n    end if\n    return True\n"}
{"task_id": "Mbpp/751", "completion": ""}
{"task_id": "Mbpp/752", "completion": "function jacobsthal_num(n)\n    if n == 1 then\n        return 0\n    elif n == 2 then\n        return 1\n    else\n        phi = 1\n        psi = 1\n        result = 1\n        for i from 2 to n-1\n            temp = phi*phi + psi\n            psi = phi\n            phi = temp\n            result = temp\n        return result\n"}
{"task_id": "Mbpp/752", "completion": "\nfunction jacobsthal_num(n):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        phi = 1\n        psi = 0\n        for i in range(2, n):\n            temp = psi\n            psi = phi + psi\n            phi = temp\n        return psi\n"}
{"task_id": "Mbpp/752", "completion": "function jacobsthal_num(n)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        phi = 1\n        psi = 1\n        result = 1\n        for i in range(2, n):\n            phi, psi = psi, phi + psi\n        return result + psi\n"}
{"task_id": "Mbpp/752", "completion": "function jacobsthal_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        phi = 1\n        psi = 1\n        for i in range(2, n):\n            temp = phi + psi\n            psi = phi\n            phi = temp\n        return ph"}
{"task_id": "Mbpp/752", "completion": "function jacobsthal_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        phi = (1 + sqrt(2)) / 2\n        jacobsthal_num_n_minus_1 = 1\n        jacobsthal_num_n = 0\n        for i from 2 to n:\n            temp = jacobsthal_num_n\n            jacobsthal_num_n = jacobsthal_num_n_plus_1\n            jacobsthal_num_n_plus_1 = temp + jacobsthal_num_n_plus_1 * phi\n        return jacobsthal_num_n\n"}
{"task_id": "Mbpp/752", "completion": "function jacobsthal_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        phi = 1\n        psi = 1\n        for i in range(2, n):\n            phi, psi = psi, phi + psi\n        return psi\n"}
{"task_id": "Mbpp/752", "completion": "function jacobsthal_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n):\n            temp = a + 2 * b\n            a = b\n            b = temp\n        return b\n"}
{"task_id": "Mbpp/752", "completion": "function jacobsthal_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        j = 1\n        phi = 1\n        phi_p = 0\n        for i from 2 to n-1:\n            phi_p = phi\n            phi = phi + phi_p\n        return phi\n"}
{"task_id": "Mbpp/752", "completion": "function jacobsthal_num(n)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        prev_num = 0\n        curr_num = 1\n        for i in range(2, n):\n            next_num = 2 * curr_num + prev_num\n            prev_num = curr_num\n            curr_num = next_num\n        return curr_num\n"}
{"task_id": "Mbpp/752", "completion": "function jacobsthal_num(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        jacobsthal_prev = 0\n        jacobsthal_cur = 1\n        for i in range(2, n):\n            jacobsthal_next = 2 * jacobsthal_cur + jacobsthal_prev\n            jacobsthal_prev = jacobsthal_cur\n            jacobsthal_cur = jacobsthal_next\n        return jacobsthal_cu"}
{"task_id": "Mbpp/753", "completion": "FUNCTION min_k(test_list, K)\n    # sort the input list based on the second element of each tuple\n    sorted_list = SORT(test_list, KEY=lambda x: x[1])\n    \n    # return the first K elements from the sorted list\n    RETURN [x for x in sorted_list[:K]]\n"}
{"task_id": "Mbpp/753", "completion": "\nfunction min_k(test_list, K):\n    # sort the list based on the second element of each tuple in ascending order\n    test_list.sort(key=lambda x: x[1])\n\n    # return a list of the first K elements from the sorted list\n    return test_list[:K"}
{"task_id": "Mbpp/753", "completion": "function min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]\n"}
{"task_id": "Mbpp/753", "completion": "function min_k(test_list, K)\n    sorted_test_list = sort(test_list, key=lambda x: x[1])\n    return sorted_test_list[:K]\n"}
{"task_id": "Mbpp/753", "completion": ""}
{"task_id": "Mbpp/753", "completion": "\nfunction min_k(test_list, K):\n    sort test_list in descending order based on second element of each tuple\n    return first K elements of sorted list\n"}
{"task_id": "Mbpp/753", "completion": ""}
{"task_id": "Mbpp/753", "completion": "\nfunction min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n"}
{"task_id": "Mbpp/753", "completion": "\nfunction min_k(test_list, K)\n    sort test_list in descending order based on the second element of each tuple\n    return the first K elements of the sorted list\n"}
{"task_id": "Mbpp/753", "completion": "function min_k(test_list, K):\n    # sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K"}
{"task_id": "Mbpp/754", "completion": "input l1, l2, l3\nresult = []\nfor i in range(min(len(l1), len(l2), len(l3))):\n    if l1[i] == l2[i] and l1[i] == l3[i]:\n        result.append(l1[i])\nreturn result\n"}
{"task_id": "Mbpp/754", "completion": "function extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return resul"}
{"task_id": "Mbpp/754", "completion": "input l1, l2, l3\ncommon_elements = []\nfor i in range(min(len(l1), len(l2), len(l3))):\n    if l1[i] == l2[i] and l1[i] == l3[i]:\n        common_elements.append(l1[i])\nreturn common_element"}
{"task_id": "Mbpp/754", "completion": "\nfunction extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            result.append(l1[i])\n    return result\n"}
{"task_id": "Mbpp/754", "completion": "function extract_index_list(l1, l2, l3)\n    result = []\n    i = 0\n    while i < len(l1) and i < len(l2) and i < len(l3):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            result.append(i)\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/754", "completion": "function extract_index_list(l1, l2, l3)\n    result = []\n    for i in range(min(len(l1), min(len(l2), len(l3))))\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n"}
{"task_id": "Mbpp/754", "completion": "function extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(min(len(l1), min(len(l2), len(l3))):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            result.append(l1[i])\n    return resul"}
{"task_id": "Mbpp/754", "completion": "function extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_element"}
{"task_id": "Mbpp/754", "completion": "function extract_index_list(l1, l2, l3):\n    i = 0\n    common_elements = []\n    while i < len(l1) and i < len(l2) and i < len(l3):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(i)\n        i = i + 1\n    return common_element"}
{"task_id": "Mbpp/754", "completion": "function extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            result.append(l1[i])\n    return result\n"}
{"task_id": "Mbpp/755", "completion": "function second_smallest(numbers)\n    sort numbers in ascending order\n    if length of numbers is less than 2\n        return None\n    else\n        return second element of the sorted list\n"}
{"task_id": "Mbpp/755", "completion": "function second_smallest(numbers)\n    sort numbers in ascending order\n    return the second element of the sorted list\n"}
{"task_id": "Mbpp/755", "completion": "function second_smallest(numbers)\n    sort numbers in ascending order\n    if length of numbers is less than 2\n        return None\n    else\n        return the second element of the sorted lis"}
{"task_id": "Mbpp/755", "completion": "function second_smallest(numbers)\n    sort numbers in ascending order\n    return the second element of the sorted list\n"}
{"task_id": "Mbpp/755", "completion": "DATA min1, min2 = \u221e, \u221e\nFOR each num IN numbers\n  IF num < min1 THEN\n    min2 := min1\n    min1 := num\n  ELSE IF num < min2 AND num \u2260 min1 THEN\n    min2 := num\n  END IF\nEND FOR\nRETURN min"}
{"task_id": "Mbpp/755", "completion": "function second_smallest(numbers)\n    numbers.sort()\n    if len(numbers) < 2:\n        return None\n    else:\n        return numbers[1]\n"}
{"task_id": "Mbpp/755", "completion": ""}
{"task_id": "Mbpp/755", "completion": "\nFUNCTION second_smallest(numbers)\n    sort numbers in ascending order\n    select the first element (smallest) and discard it\n    return the first element from the remaining list (second smallest)\nEND FUNCTIO"}
{"task_id": "Mbpp/755", "completion": "function second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    sorted_numbers = sort(numbers)\n    return sorted_numbers[1]\n"}
{"task_id": "Mbpp/755", "completion": "sort numbers from smallest to largest\nif length of numbers is less than 2, return None\nreturn second element of sorted lis"}
{"task_id": "Mbpp/757", "completion": ""}
{"task_id": "Mbpp/757", "completion": "function count_reverse_pairs(test_list):\n    pair_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                pair_count += 1\n    return pair_coun"}
{"task_id": "Mbpp/757", "completion": "function count_reverse_pairs(test_list):\n    count = 0\n    for i from 1 to length(test_list) - 1:\n        for j from i + 1 to length(test_list):\n            if reverse(test_list[i]) == test_list[j]:\n                count = count + 1\n    return count\n"}
{"task_id": "Mbpp/757", "completion": ""}
{"task_id": "Mbpp/757", "completion": "\nfunction count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return coun"}
{"task_id": "Mbpp/757", "completion": "function count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n            elif test_list[j] == test_list[i][::-1]:\n                count += 1\n    return coun"}
{"task_id": "Mbpp/757", "completion": "function count_reverse_pairs(test_list):\n    count = 0\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return coun"}
{"task_id": "Mbpp/757", "completion": ""}
{"task_id": "Mbpp/757", "completion": "function count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return coun"}
{"task_id": "Mbpp/757", "completion": "function count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n            elif test_list[j] == test_list[i][::-1]:\n                count += 1\n    return coun"}
{"task_id": "Mbpp/758", "completion": "\nfunction unique_sublists(list1):\n    result = {}\n    for sub_list in list1:\n        sorted_tuple = tuple(sorted(sub_list))\n        if sorted_tuple in result:\n            result[sorted_tuple] += 1\n        else:\n            result[sorted_tuple] = 1\n    return result\n"}
{"task_id": "Mbpp/758", "completion": "function unique_sublists(list1):\n    result = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in result:\n            result[item_tuple] += 1\n        else:\n            result[item_tuple] = 1\n    return result\n"}
{"task_id": "Mbpp/758", "completion": "function unique_sublists(list1):\n    dict1 = {}\n    for sublist in list1:\n        tuple1 = tuple(sublist)\n        if tuple1 in dict1:\n            dict1[tuple1] += 1\n        else:\n            dict1[tuple1] = 1\n    return dict1\n"}
{"task_id": "Mbpp/758", "completion": "function unique_sublists(list1):\n    result = {}\n    for sub_list in list1:\n        sub_tuple = tuple(sub_list)\n        if sub_tuple in result:\n            result[sub_tuple] += 1\n        else:\n            result[sub_tuple] = 1\n    return result\n"}
{"task_id": "Mbpp/758", "completion": "\nfunction unique_sublists(list1):\n    frequency = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist not in frequency:\n            frequency[tuple_sublist] = 0\n        frequency[tuple_sublist] += 1\n    return frequenc"}
{"task_id": "Mbpp/758", "completion": "function unique_sublists(list1):\n    sublists_dict = {}\n    for sublist in list1:\n        tupled_sublist = tuple(sublist)\n        if tupled_sublist not in sublists_dict:\n            sublists_dict[tupled_sublist] = 0\n        sublists_dict[tupled_sublist] += 1\n    return sublists_dict\n"}
{"task_id": "Mbpp/758", "completion": "function result = {}\nfor each sublist in list1:\n    tuple_list = tuple(sublist)\n    if tuple_list in result:\n        result[tuple_list] += 1\n    else:\n        result[tuple_list] = 1\nreturn result\n"}
{"task_id": "Mbpp/758", "completion": "\nfunction unique_sublists(list1):\n    result = {}\n    for i in range(len(list1)):\n        sub_list = tuple(list1[i])\n        if sub_list in result:\n            result[sub_list] += 1\n        else:\n            result[sub_list] = 1\n    return result\n"}
{"task_id": "Mbpp/758", "completion": "function unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return resul"}
{"task_id": "Mbpp/758", "completion": "function unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        sorted_list = tuple(sorted(sublist))\n        if sorted_list in result:\n            result[sorted_list] += 1\n        else:\n            result[sorted_list] = 1\n    return resul"}
{"task_id": "Mbpp/759", "completion": "\nfunction is_decimal(num)\n    if num contains '.' then\n        left_part, right_part = split num by '.'\n        if length(left_part) > 0 and left_part only contains digits and length(right_part) <= 2 and right_part only contains digits then\n            return True\n    else if num only contains digits then\n        return True\n    return False\n"}
{"task_id": "Mbpp/759", "completion": ""}
{"task_id": "Mbpp/759", "completion": ""}
{"task_id": "Mbpp/759", "completion": ""}
{"task_id": "Mbpp/759", "completion": ""}
{"task_id": "Mbpp/759", "completion": ""}
{"task_id": "Mbpp/759", "completion": ""}
{"task_id": "Mbpp/759", "completion": "function is_decimal(str)\n    if str contains only digits and '.':\n        if str has more than 1 digit before '.':\n            if str has exactly 3 characters after '.':\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "Mbpp/759", "completion": "function is_decimal(num):\n    if num[0] == '-' then\n        temp = 1\n        num = num[1]\n    else\n        temp = 0\n    for i = 1 to length(num) do\n        if not (num[i] >= '0' and num[i] <= '9') then\n            return false\n        if i < length(num) - 2 then\n            if num[i] == '.' then\n                if i != 2 then\n                    return false\n                else\n                    continue\n            else\n                return false\n        end if\n    end for\n    if length(num) > 4 then\n        return false\n    return true\n"}
{"task_id": "Mbpp/759", "completion": "function is_decimal(num):\n    if (num[0] == '-' and len(num) > 1) or num[0].isdigit():\n        start = 1 if num[0] != '-' else 0\n        decimal_start = False\n        for i in range(start, len(num)):\n            if not decimal_start and num[i] == '.':\n                decimal_start = True\n            elif decimal_start:\n                if not num[i].isdigit():\n                    return False\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/760", "completion": "function unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/760", "completion": ""}
{"task_id": "Mbpp/760", "completion": ""}
{"task_id": "Mbpp/760", "completion": ""}
{"task_id": "Mbpp/760", "completion": "\nfunction hasOnlyOneDistinctElement(arr):\n    distinctElements = set(arr)\n    if len(distinctElements) == 1:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/760", "completion": "\nfunction unique_Element(arr):\n    if len(set(arr)) <= 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/760", "completion": ""}
{"task_id": "Mbpp/760", "completion": "\nfunction hasOnlyOneDistinctElement(arr):\n    distinctElements = {}\n    for each element in arr:\n        if element in distinctElements:\n            distinctElements[element] = distinctElements[element] + 1\n        else:\n            distinctElements[element] = 1\n    return len(distinctElements) == "}
{"task_id": "Mbpp/760", "completion": "function unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/760", "completion": "function unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/762", "completion": "function check_monthnumber_number(monthnum)\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12 then\n        return True\n    else\n        return Fals"}
{"task_id": "Mbpp/762", "completion": ""}
{"task_id": "Mbpp/762", "completion": "IF monthnum3 = 4 OR monthnum3 = 6 OR monthnum3 = 9 OR monthnum3 = 11 THEN\n    RETURN True\nELSE IF monthnum3 = 2 THEN\n    IF is_leap_year THEN\n        RETURN True\n    ELSE\n        RETURN False\nELSE\n    RETURN Fals"}
{"task_id": "Mbpp/762", "completion": "\nfunction check_monthnumber_number(monthnum)\n   if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11 then\n      return true\n   else if monthnum == 2 then\n      return leap_year_check() then\n   else\n      return false\n\nend functio"}
{"task_id": "Mbpp/762", "completion": ""}
{"task_id": "Mbpp/762", "completion": "function check_monthnumber_number(monthnum)\n    if (monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11) then\n        return True\n    else if (monthnum == 2 and is_leap_year(current_year)) then\n        return True\n    else\n        return False\n"}
{"task_id": "Mbpp/762", "completion": "function check_monthnumber_number(monthnum)\n    if (monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11) then\n        return True\n    else if (monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12) then\n        return False\n    else\n        error \"Invalid month number\"\n"}
{"task_id": "Mbpp/762", "completion": "if monthnum3 in [1,3,5,7,8,10,12]:\n    return False\nelse:\n    return True\n"}
{"task_id": "Mbpp/762", "completion": "if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11 then\n    return True\nelse if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12 then\n    return False\nelse\n    return \"Invalid Month Number"}
{"task_id": "Mbpp/762", "completion": "\nfunction check_monthnumber_number(monthnum):\n    if monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11 then\n        return true\n    else\n        return false\n"}
{"task_id": "Mbpp/763", "completion": "\nfunction find_min_diff(arr):\n    arr.sort()\n    min_diff = float('inf')\n    for i from 1 to n-1:\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n"}
{"task_id": "Mbpp/763", "completion": ""}
{"task_id": "Mbpp/763", "completion": "\ninput_arr = arr\nn = n\narr.sort()\nmin_diff = float('inf')\nfor i in range(1, n):\n    diff = arr[i] - arr[i-1]\n    if diff < min_diff:\n        min_diff = diff\noutput = min_diff\n"}
{"task_id": "Mbpp/763", "completion": ""}
{"task_id": "Mbpp/763", "completion": ""}
{"task_id": "Mbpp/763", "completion": "function find_min_diff(arr, n):\n    sort arr\n    min_diff = infinity\n    for i from 0 to n-2:\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": "Mbpp/763", "completion": "`sort arr\nmin_diff = float('inf')\nfor i from 0 to n-2\n    if arr[i+1] - arr[i] < min_diff\n        min_diff = arr[i+1] - arr[i]\nreturn min_diff"}
{"task_id": "Mbpp/763", "completion": ""}
{"task_id": "Mbpp/763", "completion": "\nfunction find_min_diff(arr):\n    arr.sort()\n    min_diff = float('inf')\n    for i from 0 to n-2:\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": "Mbpp/763", "completion": ""}
{"task_id": "Mbpp/764", "completion": "\nfunction number_ctr(s):\n    count = 0\n    for each char in s:\n        if char.isdigit():\n            count = count + 1\n    return count\n"}
{"task_id": "Mbpp/764", "completion": "\nfunction number_ctr(s):\n    digit_count = 0\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n    return digit_coun"}
{"task_id": "Mbpp/764", "completion": "function number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count = count + 1\n    return coun"}
{"task_id": "Mbpp/764", "completion": "function number_ctr(s)\n    count = 0\n    for c in s:\n        if c.isdigit():\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/764", "completion": "function number_ctr(s):\n    count = 0\n    for char in s:\n        if '0' <= char <= '9':\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/764", "completion": "function number_ctr(s)\n    count = 0\n    for char in s:\n        if '0' <= char <= '9':\n            count += 1\n    return count\n"}
{"task_id": "Mbpp/764", "completion": "function number_ctr(s)\n    count = 0\n    for c in s:\n        if c.isdigit():\n            count += 1\n    return coun"}
{"task_id": "Mbpp/764", "completion": "function number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count = count + 1\n    return coun"}
{"task_id": "Mbpp/764", "completion": ""}
{"task_id": "Mbpp/764", "completion": "\nfunction number_ctr(s)\n    count = 0\n    for each char in s\n        if char is a digit\n            increment count\n    return count\n"}
{"task_id": "Mbpp/765", "completion": "\nfunction is_polite(n):\n    i = 1\n    polite_numbers = []\n    while len(polite_numbers) < n:\n        for j in range(i, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                break\n        else:\n            polite_numbers.append(i)\n        i += 1\n    return polite_numbers[-1"}
{"task_id": "Mbpp/765", "completion": "function nth_polite_number(n):\n    polite_numbers = [1, 2]\n    i = 2\n    while len(polite_numbers) < n:\n        i += 1\n        count = 0\n        j = 1\n        while True:\n            if math.gcd(i, j) > 1:\n                count += 1\n            j += 1\n            if j > int(math.sqrt(i)) + 1:\n                break\n        if count == 1:\n            polite_numbers.append(i)\n    return polite_numbers[n-1"}
{"task_id": "Mbpp/765", "completion": "function nth_polite_number(n):\n    polite_numbers = []\n    i = 1\n    while len(polite_numbers) < n:\n        if is_prime(i) and is_prime(i + 1):\n            polite_numbers.append(i + 1)\n        i += 1\n    return polite_numbers[-1]\n\nfunction is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/765", "completion": "function nth_polite_number(n):\n    polite_numbers = []\n    i = 0\n    j = 1\n    while len(polite_numbers) < n:\n        if (i + 1) * (j + 1) % (i + j + 2) == 0:\n            polite_numbers.append(i + j + 2)\n        i += 1\n        j += 1\n    return polite_numbers[-1"}
{"task_id": "Mbpp/765", "completion": "\nfunction findPoliteNumber(n):\n    politeNumber = 0\n    i = 1\n    while true:\n        if isDivisibleBySum(i):\n            politeNumber += 1\n        if politeNumber == n:\n            return i\n        i += 1\n\nfunction isDivisibleBySum(num):\n    sumOfDigits = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sumOfDigits += digit\n        temp = int(temp / 10)\n    if num % sumOfDigits == 0:\n        return true\n    else:\n        return false\n"}
{"task_id": "Mbpp/765", "completion": "\nfunction nth_polite_number(n):\n    count = 0\n    i = 1\n    while True:\n        if (i % 2 == 0 and sum(int(digit) for digit in str(i)) % 3 == 0) or (i % 2 != 0 and sum(int(digit) for digit in str(i)) % 3 != 0):\n            count += 1\n        if count == n:\n            return i\n        i += 1\n"}
{"task_id": "Mbpp/765", "completion": "\nfunction find_nth_polite_number(n):\n    polite_numbers = []\n    i = 1\n    while len(polite_numbers) < n:\n        if is_prime(i) and is_armstrong(i):\n            polite_numbers.append(i)\n        i += 1\n    return polite_numbers[-1]\n\nfunction is_prime(num):\n    if num <= 1:\n        return False\n    for i from 2 to sqrt(num):\n        if num % i == 0:\n            return False\n    return True\n\nfunction is_armstrong(num):\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** len(str(num))\n        temp //= 10\n    return sum == num\n\nprint(find_nth_polite_number(7)"}
{"task_id": "Mbpp/765", "completion": ""}
{"task_id": "Mbpp/765", "completion": "function is_polite(n):\n    i = 0\n    j = 0\n    while true:\n        if is_prime(i + j) and is_prime(j - i):\n            if n == 1:\n                return i + j\n            n -= 1\n        j += 1\n        if j <= i:\n            i += 1\n"}
{"task_id": "Mbpp/765", "completion": "\nfunction find_polite_number(n):\n    polite_numbers = []\n    i = 0\n    while len(polite_numbers) < n:\n        i += 1\n        if i % 2 == 0:\n            polite_numbers.append(i // 2)\n        else:\n            polite_numbers.append(i - (math.sqrt(8*i + 1) - 1) / 2)\n    return polite_numbers[-1]\n"}
{"task_id": "Mbpp/766", "completion": ""}
{"task_id": "Mbpp/766", "completion": "function pair_wise(l1):\n    result = []\n    for i in range(len(l1)):\n        if i < len(l1) - 1:\n            result.append((l1[i], l1[i + 1]))\n    return resul"}
{"task_id": "Mbpp/766", "completion": "\nfunction pair_wise(l):\n    result = []\n    for i in range(len(l) - 1):\n        if l[i] == l[i + 1]:\n            result.append((l[i], l[i + 1]))\n        else:\n            result.append((l[i], l[i + 1]))\n            result.append((l[i + 1], l[i]))\n    return resul"}
{"task_id": "Mbpp/766", "completion": "\nfunction pair_wise(l1)\n    result = []\n    for i from 0 to length(l1) - 1\n        if i < length(l1) - 1\n            result.append((l1[i], l1[i + 1]))\n    return resul"}
{"task_id": "Mbpp/766", "completion": "function pair_wise(input_list):\n    output = []\n    for i in range(len(input_list) - 1):\n        output.append((input_list[i], input_list[i + 1]))\n    return outpu"}
{"task_id": "Mbpp/766", "completion": "function pair_wise(l1)\n    result = []\n    for i from 0 to l1.length - 1\n        for j from i + 1 to l1.length - 1\n            result.append((l1[i], l1[j]))\n    return resul"}
{"task_id": "Mbpp/766", "completion": "result = []\nfor i in range(len(l1) - 1):\n    result.append((l1[i], l1[i+1]))\nreturn resul"}
{"task_id": "Mbpp/766", "completion": "function pair_wise(l1)\n    result = []\n    for i from 0 to length(l1) - 1\n        for j from i + 1 to length(l1)\n            if l1[i] == l1[j]\n                result.append((l1[i], l1[i]))\n            else\n                result.append((l1[i], l1[j]))\n    return resul"}
{"task_id": "Mbpp/766", "completion": "function pair_wise(l1):\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return resul"}
{"task_id": "Mbpp/766", "completion": "result = []\nfor i in range(len(l1)):\n    if i < len(l1) - 1:\n        result.append((l1[i], l1[i + 1]))\nreturn resul"}
{"task_id": "Mbpp/767", "completion": ""}
{"task_id": "Mbpp/767", "completion": "`function get_pairs_count(arr, sum_)\n    n = length(arr)\n    count = 0\n    for i from 1 to n\n        for j from i+1 to n\n            if arr[i] + arr[j] equals sum_\n                count = count + 1\n    return count\n"}
{"task_id": "Mbpp/767", "completion": "\nfunction get_pairs_count(arr, sum_)\n    count = 0\n    hash_set = {}\n    for num in arr:\n        if (sum_ - num) in hash_set:\n            count += hash_set[(sum_ - num)]\n        hash_set[num] = hash_set.get(num, 0) + 1\n    return count\n"}
{"task_id": "Mbpp/767", "completion": "function get_pairs_count(arr, sum_)\n    count := 0\n    for i from 0 to length(arr)-1\n        for j from i+1 to length(arr)-1\n            if arr[i] + arr[j] equals sum_\n                count := count + 1\n    return count\n"}
{"task_id": "Mbpp/767", "completion": "\nfunction get_pairs_count(arr, sum_)\n    count := 0\n    for i from 0 to length(arr) - 1\n        for j from i + 1 to length(arr)\n            if arr[i] + arr[j] equals sum_\n                count := count + 1\n    return coun"}
{"task_id": "Mbpp/767", "completion": ""}
{"task_id": "Mbpp/767", "completion": "\nfunction get_pairs_count(arr, sum_)\n    count := 0\n    map := {}\n    for each num in arr:\n        if num in map then\n            count += map[num]\n        else\n            map[-(sum_ - num)] := map.get(-(sum_ - num), 0) + 1\n        count += map[num]\n    return count\n"}
{"task_id": "Mbpp/767", "completion": ""}
{"task_id": "Mbpp/767", "completion": ""}
{"task_id": "Mbpp/767", "completion": "algorithm:\n    result = 0\n    sort arr in ascending order\n    for i from 0 to length(arr)-1:\n        left = i + 1\n        right = length(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[right]\n            if current_sum == sum_:\n                result += (right - left + 1)\n                left = right\n            elif current_sum < sum_:\n                left = left + 1\n            else:\n                right = right - 1\n    return result\n"}
{"task_id": "Mbpp/769", "completion": "function Diff(list1, list2)\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    for element in list2:\n        if element not in list1:\n            result.append(element)\n    return result\n"}
{"task_id": "Mbpp/769", "completion": "ALGORITHM:\nFunction: Diff\nParameters: li1, li2 (lists)\n\n// Initialize an empty list to store the difference\ndifference = []\n\n// Iterate through each element in li1\nFOR each_item IN li1:\n    // Check if each_item is not in li2\n    IF each_item NOT IN li2:\n        // Add each_item to the difference list\n        APPEND each_item TO difference\n\n// Return the difference list\nRETURN differenc"}
{"task_id": "Mbpp/769", "completion": ""}
{"task_id": "Mbpp/769", "completion": "function Diff(li1, li2):\n    set1 = set(li1)\n    set2 = set(li2)\n    return sorted(list(set1.symmetric_difference(set2)))\n"}
{"task_id": "Mbpp/769", "completion": ""}
{"task_id": "Mbpp/769", "completion": ""}
{"task_id": "Mbpp/769", "completion": "function Diff(li1, li2):\n    common = []\n    for item in li1:\n        if item not in li2:\n            common.append(item)\n    for item in li2:\n        if item not in li1:\n            common.append(item)\n    return common\n"}
{"task_id": "Mbpp/769", "completion": "function Diff(li1, li2):\n    return [i for i in li1 if i not in li2] + [i for i in li2 if i not in li1]\n"}
{"task_id": "Mbpp/769", "completion": ""}
{"task_id": "Mbpp/769", "completion": ""}
{"task_id": "Mbpp/770", "completion": "\nalgorithm odd_num_sum(n)\n    sum := 0\n    i := 1\n    while i <= 2n - 1 do\n        sum := sum + i^4\n        i := i + 2\n    return sum\nend algorith"}
{"task_id": "Mbpp/770", "completion": "\nfunction odd_num_sum(n)\n    sum = 0\n    for i from 1 to n\n        if i is odd\n            sum = sum + i * i * i * i\n    return sum\n"}
{"task_id": "Mbpp/770", "completion": "function odd_num_sum(n):\n    sum = 0\n    for i from 1 to n:\n        if i is odd:\n            sum += i^4\n    return sum\n"}
{"task_id": "Mbpp/770", "completion": "function sum_of_odd_natural_numbers_power_four(n)\n    sum = 0\n    for i from 1 to n\n        if i is odd\n            sum = sum + i^4\n    return sum\n"}
{"task_id": "Mbpp/770", "completion": "function odd_num_sum(n)\n    sum = 0\n    for i from 1 to n with step 2\n        sum = sum + i^4\n    return sum\n"}
{"task_id": "Mbpp/770", "completion": "\nfunction odd_num_sum(n):\n    result = 0\n    for i from 1 to n:\n        if i is odd:\n            result += i * i * i * i\n    return result\n"}
{"task_id": "Mbpp/770", "completion": ""}
{"task_id": "Mbpp/770", "completion": "\nfunction odd_num_sum(n):\n    sum = 0\n    for i from 1 to n:\n        if i is odd:\n            sum = sum + i * i * i * i\n    return su"}
{"task_id": "Mbpp/770", "completion": "function odd_num_sum(n):\n    sum = 0\n    for i from 1 to n:\n        if i is odd:\n            sum = sum + i * i * i * i\n    return sum\n"}
{"task_id": "Mbpp/770", "completion": "\nfunction odd_num_sum(n)\n    sum = 0\n    for i from 1 to n\n        if i is odd\n            sum = sum + i^4\n    return su"}
{"task_id": "Mbpp/771", "completion": ""}
{"task_id": "Mbpp/771", "completion": ""}
{"task_id": "Mbpp/771", "completion": ""}
{"task_id": "Mbpp/771", "completion": "\nfunction check_expression(exp):\n    stack = new deque()\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack.empty() or stack.pop() != mapping[char]:\n                return False\n    return stack.empty()\n"}
{"task_id": "Mbpp/771", "completion": "function check_expression(exp):\n    stack = new stack\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in exp:\n        if char in mapping.values():\n            stack.push(char)\n        elif char in mapping.keys():\n            if stack.is_empty() or mapping[char] != stack.pop():\n                return False\n    return stack.is_empty()\n"}
{"task_id": "Mbpp/771", "completion": "function check_expression(exp):\n    stack = new stack()\n    parentheses_map = {'(': ')', '[': ']', '{': '}'}\n    open_chars = set(['(', '[', '{'])\n    for char in exp:\n        if char in open_chars:\n            stack.push(char)\n        elif char in parentheses_map:\n            if stack.is_empty():\n                return False\n            top_char = stack.pop()\n            if parentheses_map[top_char] != char:\n                return False\n    return stack.is_empty("}
{"task_id": "Mbpp/771", "completion": "\nfunction check_expression(exp):\n    stack = new queue\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in exp:\n        if char in mapping.values():\n            stack.enqueue(char)\n        elif char in mapping.keys():\n            if stack.isEmpty() or stack.dequeue() != mapping[char]:\n                return False\n    return stack.isEmpty()\n"}
{"task_id": "Mbpp/771", "completion": "function check_expression(exp):\n    stack = deque()\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if stack.empty() or mapping[char] != stack.pop():\n                return False\n    return stack.empty("}
{"task_id": "Mbpp/771", "completion": ""}
{"task_id": "Mbpp/771", "completion": ""}
{"task_id": "Mbpp/772", "completion": "function remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result"}
{"task_id": "Mbpp/772", "completion": "function remove_length(test_str, K):\n    words = test_str.split()\n    result = \"\"\n    for word in words:\n        if len(word) != K:\n            result += word + \" \"\n    return result.strip("}
{"task_id": "Mbpp/772", "completion": "function remove_length(test_str, K)\n    word_list = split(test_str, ' ')\n    new_str = \"\"\n    for word in word_list:\n        if length(word) != K:\n            new_str += word + \" \"\n    return trim(new_str"}
{"task_id": "Mbpp/772", "completion": "function remove_length(test_str, K):\n    words = test_str.split()\n    result = ''\n    for word in words:\n        if len(word) != K:\n            result += word + ' '\n    return result.strip("}
{"task_id": "Mbpp/772", "completion": ""}
{"task_id": "Mbpp/772", "completion": "function remove_length(test_str, K)\n    words = test_str.split(' ')\n    result = ''\n    for word in words:\n        if len(word) != K:\n            result += word + ' '\n    return result.strip("}
{"task_id": "Mbpp/772", "completion": "\nfunction remove_length(test_str, K):\n    result = \"\"\n    word_list = test_str.split()\n    for word in word_list:\n        if len(word) != K:\n            result = result + \" \" + word\n    return result.strip("}
{"task_id": "Mbpp/772", "completion": ""}
{"task_id": "Mbpp/772", "completion": "function remove_length(test_str, K)\n    split_str = split(test_str, ' ')\n    new_str = \"\"\n    for word in split_str:\n        if length(word) != K:\n            new_str += word + \" \"\n    return trim(new_str)\n"}
{"task_id": "Mbpp/772", "completion": "function remove_length(test_str, K):\n    words = test_str.split()\n    new_str = ''\n    for word in words:\n        if len(word) != K:\n            new_str += word + ' '\n    return new_str.strip("}
{"task_id": "Mbpp/773", "completion": "function find_occurrences(text, pattern):\n    result = re.finditer(pattern, text)\n    if result:\n        for match in result:\n            return (pattern, match.start(), match.end())\n    else:\n        return Non"}
{"task_id": "Mbpp/773", "completion": "\nfunction occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (pattern, match.start(), match.end())\n    else:\n        return Non"}
{"task_id": "Mbpp/773", "completion": "function occurance_substring(text, pattern):\n    result = re.search(pattern, text)\n    if result:\n        return (pattern, result.start(), result.end())\n    else:\n        return Non"}
{"task_id": "Mbpp/773", "completion": "function find_occurrence(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (pattern, match.start(), match.end())\n    else:\n        return None\n"}
{"task_id": "Mbpp/773", "completion": "\nfunction occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (pattern, match.start(), match.end())\n    else:\n        return Non"}
{"task_id": "Mbpp/773", "completion": ""}
{"task_id": "Mbpp/773", "completion": "function find_occurrence_and_position(text, pattern):\n    matches = re.finditer(pattern, text)\n    if matches:\n        match = next(matches)\n        return (pattern, match.start(), match.end())\n    else:\n        return Non"}
{"task_id": "Mbpp/773", "completion": "function find_occurrences(text, pattern):\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            return (pattern, start, start + len(pattern) - 1)\n    return Non"}
{"task_id": "Mbpp/773", "completion": ""}
{"task_id": "Mbpp/773", "completion": "\nfunction find_occurrence(text, pattern):\n    result = re.finditer(pattern, text)\n    if result is not None:\n        for match in result:\n            return (pattern, match.start(), match.end())\n    return None\n"}
{"task_id": "Mbpp/775", "completion": "\nfunction odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/775", "completion": "\nfunction odd_position(nums):\n  for i from 0 to length(nums)-1:\n    if i is even and nums[i] is odd:\n      return False\n  return True\n"}
{"task_id": "Mbpp/775", "completion": ""}
{"task_id": "Mbpp/775", "completion": "\nfunction odd_position(nums):\n    for i from 0 to len(nums) - 1:\n        if i mod 2 != 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"}
{"task_id": "Mbpp/775", "completion": "function odd_position(nums):\n    for i from 1 to length(nums) - 1 step 2:\n        if nums[i] is even then\n            return false\n    return true\n"}
{"task_id": "Mbpp/775", "completion": "\nfunction odd_position(nums):\n    for i from 0 to length(nums) - 1:\n        if i is odd and nums[i] is even:\n            return false\n    return true\n"}
{"task_id": "Mbpp/775", "completion": ""}
{"task_id": "Mbpp/775", "completion": "\nFUNCTION odd_position(list nums)\n  SET odd_count = 0\n  FOR i = 1 TO length(nums) - 1 STEP 2 DO\n    IF nums[i] MOD 2 != 0 THEN\n      INCREMENT odd_count\n    END IF\n  END FOR\n  RETURN odd_count MOD 2 = 1\nEND FUNCTIO"}
{"task_id": "Mbpp/775", "completion": "function odd_position(nums):\n    for i from 0 to len(nums) - 1:\n        if i mod 2 != 0 and nums[i] % 2 == 0:\n            return False\n    return Tru"}
{"task_id": "Mbpp/775", "completion": "\nfunction odd_position(nums):\n    for i from 0 to len(nums)-1:\n        if i is even:\n            if nums[i] is even:\n                return False\n    return True\n"}
{"task_id": "Mbpp/777", "completion": "\nfunction find_sum(arr):\n    frequency = {}\n    sum = 0\n    \n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    for num in arr:\n        if frequency[num] == 1:\n            sum += num\n    \n    return su"}
{"task_id": "Mbpp/777", "completion": "function find_sum(arr):\n    s = 0\n    seen = {}\n    for num in arr:\n        if num not in seen:\n            seen[num] = True\n            s += num\n        else:\n            seen[num] = False\n    return s\n"}
{"task_id": "Mbpp/777", "completion": ""}
{"task_id": "Mbpp/777", "completion": "function find_sum(arr):\n    seen = {}\n    sum = 0\n    for num in arr:\n        if num not in seen:\n            seen[num] = True\n        else:\n            del seen[num]\n    for num in seen:\n        sum += num\n    return su"}
{"task_id": "Mbpp/777", "completion": "ALGORITHM:\n  LIST result = []\n  SET seen = {}\n  FOR each element e IN arr:\n    IF e NOT IN seen:\n      seen[e] = True\n      result += [e]\n  RETURN sum(result)\n"}
{"task_id": "Mbpp/777", "completion": "function find_sum(arr):\n    frequency = {}\n    non_repeated_sum = 0\n    for num in arr:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    for key in frequency:\n        if frequency[key] == 1:\n            non_repeated_sum += key\n    return non_repeated_sum\n"}
{"task_id": "Mbpp/777", "completion": "function find_sum(input_list):\n    count_dict = {}\n    for element in input_list:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    sum_non_repeated = 0\n    for key in count_dict:\n        if count_dict[key] == 1:\n            sum_non_repeated += key\n    return sum_non_repeate"}
{"task_id": "Mbpp/777", "completion": "function find_sum(arr):\n    frequency_map = {}\n    sum = 0\n    for each element in arr:\n        if element not in frequency_map:\n            frequency_map[element] = 1\n        else:\n            frequency_map[element] += 1\n    for each element in arr:\n        if frequency_map[each] == 1:\n            sum += each\n    return su"}
{"task_id": "Mbpp/777", "completion": "\nfunction find_sum(arr):\n    freq = {}\n    for element in arr:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    sum = 0\n    for key in freq:\n        if freq[key] == 1:\n            sum += key\n    return sum\n"}
{"task_id": "Mbpp/777", "completion": "\nfunction find_sum(arr):\n    counts = {}\n    sum = 0\n    for each element in arr:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    for key in counts:\n        if counts[key] == 1:\n            sum += key\n    return sum\n"}
{"task_id": "Mbpp/778", "completion": "\nfunction pack_consecutive_duplicates(input_list):\n    result = []\n    for key, group in groupby(input_list):\n        result.append(list(group))\n    return resul"}
{"task_id": "Mbpp/778", "completion": "\nfunction pack_consecutive_duplicates(input_list):\n    return [[key for _ in group] for key, group in groupby(input_list)"}
{"task_id": "Mbpp/778", "completion": "input_list = []\nfor k, g in groupby(list1):\n    input_list.append(list(g))\n"}
{"task_id": "Mbpp/778", "completion": "function pack_consecutive_duplicates(input_list):\n    return [[k for k, _ in group] for k, group in groupby(input_list)]\n"}
{"task_id": "Mbpp/778", "completion": "\nfunction pack_consecutive_duplicates(input_list):\n    return [[k for _ in range(len(list(g))) for k in g] for k, g in groupby(input_list)]\n"}
{"task_id": "Mbpp/778", "completion": "function pack_consecutive_duplicates(input_list):\n    return [[key for _ in group] for key, group in groupby(input_list)]\n"}
{"task_id": "Mbpp/778", "completion": "function pack_consecutive_duplicates(input_list):\n    result = []\n    for key, group in groupby(input_list):\n        result.append(list(group))\n    return resul"}
{"task_id": "Mbpp/778", "completion": "\nfunction pack_consecutive_duplicates(list1):\n    return [[key for _ in group] for key, group in groupby(list1)]\n"}
{"task_id": "Mbpp/778", "completion": "function pack_consecutive_duplicates(input_list):\n    result = []\n    for key, group in groupby(input_list):\n        result.append(list(group))\n    return resul"}
{"task_id": "Mbpp/778", "completion": "function pack_consecutive_duplicates(input_list):\n    result = []\n    for key, group in groupby(input_list):\n        group_list = list(group)\n        if len(group_list) > 1:\n            result.append(list(group_list))\n        else:\n            result.append(list(group_list)[0])\n    return result\n"}
{"task_id": "Mbpp/780", "completion": "\nfunction find_combinations(input_list):\n    result = []\n    for a, b in combinations(input_list, 2):\n        sum_ab = (a[0] + b[0], a[1] + b[1])\n        result.append(sum_ab)\n    return result\n"}
{"task_id": "Mbpp/780", "completion": "# Initialize an empty set to store unique combinations\ncombinations_set = set()\n\n# Loop through each pair of tuples in the test list\nfor tuple1, tuple2 in combinations(test_list, 2):\n    # Calculate the sum of each combination and store it as a tuple\n    combination_sum = (tuple1[0] + tuple2[0], tuple1[1] + tuple2[1])\n    \n    # Add the combination to the set\n    combinations_set.add(combination_sum)\n\n# Convert the set back to a list and return it\nreturn list(combinations_set"}
{"task_id": "Mbpp/780", "completion": ""}
{"task_id": "Mbpp/780", "completion": "def find_combinations(test_list):\n    result = []\n    for a, b in combinations(test_list, 2):\n        result.append((a[0] + b[0], a[1] + b[1]))\n        result.append((a[0] + b[1], a[1] + b[0]))\n    return resul"}
{"task_id": "Mbpp/780", "completion": "function find_combinations(tuple_list):\n    result = []\n    for a, b in combinations(tuple_list, 2):\n        result.append((a[0] + b[0], a[1] + b[1]))\n        result.append((a[0] + b[1], a[1] + b[0]))\n    return resul"}
{"task_id": "Mbpp/780", "completion": "function find_combinations(test_list):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            first_tuple = test_list[i]\n            second_tuple = test_list[j]\n            for a, b in combinations([first_tuple[0], first_tuple[1]], 2):\n                for c, d in combinations([second_tuple[0], second_tuple[1]], 2):\n                    if a + c == b + d:\n                        result.append((a + c, b + d))\n    return result\n"}
{"task_id": "Mbpp/780", "completion": ""}
{"task_id": "Mbpp/780", "completion": "function find_combinations(test_list):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for pair in combinations([test_list[i][0], test_list[i][1], test_list[j][0], test_list[j][1]], 2):\n                if sum(pair) not in [pair[0]+pair[1] for pair in result]:\n                    result.append(tuple(sorted([pair[0], pair[1]]))\n    return result\n"}
{"task_id": "Mbpp/780", "completion": "\nfunction find_combinations(input_tuple_list):\n    result = []\n    for t1, t2 in combinations(input_tuple_list, 2):\n        sum1, sum2 = t1[0] + t1[1], t2[0] + t2[1]\n        result.append((sum1, sum2))\n    return resul"}
{"task_id": "Mbpp/780", "completion": "function find_combinations(test_list):\n    combinations_sum = []\n    for t1 in test_list:\n        for t2 in test_list:\n            if t1 != t2:\n                combinations_sum.append((t1[0]+t2[0], t1[1]+t2[1]))\n    return combinations_sum\n"}
{"task_id": "Mbpp/781", "completion": "\nfunction count_divisors(n)\n    count := 0\n    i := 1\n    while i <= sqrt(n)\n        if n mod i == 0 then\n            if i == sqrt(n) then\n                count := count + 1\n            else\n                count := count + 2\n            end if\n        end if\n        i := i + 1\n    return count\nend function\n"}
{"task_id": "Mbpp/781", "completion": "function count_divisors(n):\n    count = 0\n    for i from 1 to sqrt(n):\n        if n mod i is 0:\n            count = count + 2\n    if sqrt(n) * sqrt(n) == n:\n        count = count - 1\n    return count\n"}
{"task_id": "Mbpp/781", "completion": "\nfunction count_divisors(n):\n    count = 0\n    for i from 1 to sqrt(n):\n        if n mod i == 0:\n            if i * i == n:\n                count = count + 1\n            else:\n                count = count + 2\n    return count\n"}
{"task_id": "Mbpp/781", "completion": ""}
{"task_id": "Mbpp/781", "completion": ""}
{"task_id": "Mbpp/781", "completion": "function check_even_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n"}
{"task_id": "Mbpp/781", "completion": "\nFUNCTION count_divisors(n)\n    divisor_count = 0\n    i = 1\n    WHILE i <= SQRT(n)\n        IF n % i == 0\n            IF n / i == i THEN\n                increment divisor_count BY 1\n            ELSE\n                increment divisor_count BY 2\n            ENDIF\n        ENDIF\n        increment i BY 1\n    ENDWHILE\n    RETURN (divisor_count MOD 2) == 0\nEND FUNCTIO"}
{"task_id": "Mbpp/781", "completion": "\nfunction count_divisors(n):\n    count = 0\n    for i from 1 to sqrt(n):\n        if n mod i == 0:\n            count = count + 2\n        end\n    return count modulo 2\n"}
{"task_id": "Mbpp/781", "completion": "\nfunction count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i != n:  // Check for proper divisor\n                count += 2\n            else:\n                count += 1\n    if n % (int(math.sqrt(n)) + 1) == 0:\n        count += 1\n    return count % 2 == "}
{"task_id": "Mbpp/781", "completion": ""}
{"task_id": "Mbpp/782", "completion": "function odd_length_sum(arr):\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if (j - i) % 2 != 0:\n                total_sum += sum(arr[i:j])\n    return total_sum\n"}
{"task_id": "Mbpp/782", "completion": "function odd_length_sum(arr):\n    sum_odd = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr) + 1):\n            if (j - i) % 2 != 0:\n                sum_odd += sum(arr[i:j])\n    return sum_od"}
{"task_id": "Mbpp/782", "completion": "function odd_length_sum(arr):\n    n = length of arr\n    total_sum = 0\n    \n    for i from 0 to n-1:\n        for j from i to n-1:\n            if (j-i+1) is odd:\n                total_sum = total_sum + sum of elements from index i to j in arr\n                \n    return total_su"}
{"task_id": "Mbpp/782", "completion": "\nfunction odd_length_sum(arr):\n    sum = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if (j-i) % 2 != 0:\n                sum += sum(arr[i:j])\n    return sum\n"}
{"task_id": "Mbpp/782", "completion": "\nfunction odd_length_sum(arr):\n    total_sum = 0\n    for i from 0 to len(arr) - 1:\n        for j from i to len(arr) - 1:\n            if (j - i + 1) % 2 != 0:\n                total_sum += sum(arr[i..j])\n    return total_sum\n"}
{"task_id": "Mbpp/782", "completion": "\nfunction odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if (j - i) % 2 != 0:\n                total_sum += sum(arr[i:j])\n    return total_sum\n"}
{"task_id": "Mbpp/782", "completion": "function odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                total_sum += sum(arr[i:j+1])\n    return total_su"}
{"task_id": "Mbpp/782", "completion": ""}
{"task_id": "Mbpp/782", "completion": "function odd_length_sum(arr):\n    n = 0\n    sum = 0\n    for i in range(0, len(arr)):\n        n = 1\n        while (i + n) <= len(arr):\n            sum = sum + sum_subarray(arr, i, i + n)\n            n = n + 2\n    return sum\n\nfunction sum_subarray(arr, i, j):\n    sum = 0\n    for k in range(i, j):\n        sum = sum + arr[k]\n    return su"}
{"task_id": "Mbpp/782", "completion": "function odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (j-i) % 2 != 0:\n                sum += sum(arr[i:j])\n    return su"}
{"task_id": "Mbpp/783", "completion": "\nfunction rgb_to_hsv(r, g, b):\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0.0\n    elif max_val == r:\n        h = (60 * ((g - b) / delta)) % 360\n    elif max_val == g:\n        h = (120 + (60 * ((b - r) / delta))) % 360\n    else:\n        h = (240 + (60 * ((r - g) / delta))) % 360\n    \n    s = delta / max_val if max_val > 0 else 0\n    \n    v = max_val\n    \n    return h, s, "}
{"task_id": "Mbpp/783", "completion": "function rgb_to_hsv(r, g, b):\n    r /= 255\n    g /= 255\n    b /= 255\n\n    if r == g and r == b:\n        h = 0\n    elif g >= r and g >= b:\n        h = (60 * ((g - b) / (g - r))) + 60\n    else:\n        h = (60 * ((r - g) / (r - b))) + 180\n\n    if g == r:\n        s = 0\n    else:\n        v = max(r, g, b)\n        s = (1 - (3 * min(r, g, b)) / v)\n\n    return (h, s, v * 100"}
{"task_id": "Mbpp/783", "completion": "\nfunction rgb_to_hsv(r, g, b):\n    if (r == g and r == b):\n        h = 0.0\n    elif (g >= r and g >= b):\n        h = (60 * ((g - b) / (g - r))) + 60\n    elif (r > g and r >= b):\n        h = 120 + (60 * ((b - g) / (r - g)))\n    elif (b > r and b >= g):\n        h = 240 + (60 * ((r - g) / (b - g)))\n    else:\n        h = 300 + (60 * ((g - r) / (b - r)))\n    \n    v = max(r, g, b) / 255\n    s = 1.0 - (min(r, g, b) / v)\n    \n    return (h, s, v * 100.0"}
{"task_id": "Mbpp/783", "completion": "function rgb_to_hsv(r, g, b):\n    if r == g and r == b:\n        h = 0\n    elif r == g:\n        h = (b - g) / (r - g)\n    elif g == b:\n        h = 2 + (r - b) / (r - g)\n    else:\n        d = sqrt((r - g)**2 + (g - b)**2 + (r - b)**2)\n        h = (180 * acos((g - b)/d)) / pi\n    i = min(r, g, b)\n    v = max(r, g, b)\n    s = 1 - (i/v)\n    return (h, s, v"}
{"task_id": "Mbpp/783", "completion": "function rgb_to_hsv(r, g, b):\n    if r == g and g == b:\n        h = 0\n        s = 0\n    elif r == g or g == b:\n        if r > g and r > b:\n            h = 60 * ((g - b) / (r - b))\n        elif g > b:\n            h = 120 + 60 * ((b - r) / (g - r))\n        else:\n            h = 180 + 60 * ((r - g) / (r - b))\n        if r == g and g > b:\n            s = (g - b) / max(r, g, b)\n        elif r > g and r == b:\n            s = 0\n        else:\n            s = (r - min(g, b)) / max(g, b, r)\n    else:\n        f = 0.5 * (r - g)\n        p = 0.5 * (g - b)\n        if f > p:\n            h = 60 * (1 + f / (p - f))\n        elif p > f:\n            h = 60 * (1 + (p - f) / f)\n        else:\n            h = 0\n        if r == max(r, g, b):\n            s = 1\n        elif g == max(r, g, b):\n            s = 1 - f / max(r, g, b)\n        else:\n            s = 1 - p / max(r, g, b)\n    v = max(r, g, b) / 255\n    return (h, s, v"}
{"task_id": "Mbpp/783", "completion": "function rgb_to_hsv(r, g, b):\n    r = r / 255\n    g = g / 255\n    b = b / 255\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    if max_val == min_val:\n        h = 0\n    else:\n        delta = max_val - min_val\n        if r == max_val:\n            h = (60 * ((g - b) / delta) + 360) % 360\n        elif g == max_val:\n            h = (60 * ((b - r) / delta) + 120) % 360\n        elif b == max_val:\n            h = (60 * ((r - g) / delta) + 240) % 360\n\n    s = delta / max_val if max_val > 0 else 0\n    v = max_val\n\n    return round(h), round(s * 100), round(v * 100"}
{"task_id": "Mbpp/783", "completion": "function rgb_to_hsv(r, g, b):\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    if r == g and r == b:\n        h = 0\n        s = 0\n    else:\n        delta = min(r, g, b) - max(r, g, b)\n        if r == max(r, g, b):\n            h = (g - b) / delta\n        elif g == max(r, g, b):\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max(r, g, b)\n    \n    v = max(r, g, b)\n    return round(h * 60), round(s * 100), round(v * 100"}
{"task_id": "Mbpp/783", "completion": "\nfunction rgb_to_hsv(r, g, b):\n    if r == g and g == b:\n        return (0, 0, 255)\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if cmax == r:\n        h = (60 * ((g - b) / delta) % 6) if delta != 0 else 0\n    elif cmax == g:\n        h = (60 * ((b - r) / delta)) + 120\n    else:\n        h = (60 * ((r - g) / delta)) + 240\n\n    s = delta / cmax if cmax != 0 else 0\n    v = cmax / 255.0\n\n    return (h, s, v"}
{"task_id": "Mbpp/783", "completion": "function rgb_to_hsv(r, g, b):\n    if r == g and r == b:\n        h = 0\n        s = 0\n    else:\n        max_val = max(r, g, b)\n        min_val = min(r, g, b)\n        delta = max_val - min_val\n        if max_val == r:\n            h = (60 * ((g - b) / delta) + 360) % 360\n        elif max_val == g:\n            h = (120 + (60 * ((b - r) / delta))) % 360\n        else:\n            h = (240 + (60 * ((r - g) / delta))) % 360\n        if max_val == 0:\n            s = 0\n        else:\n            s = delta / max_val\n        v = max_val / 255.0\n    return h, s, "}
{"task_id": "Mbpp/783", "completion": "function rgb_to_hsv(r, g, b):\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n    else:\n        if cmax == r:\n            h = (60 * ((g-b)/delta) % 6)\n        elif cmax == g:\n            h = (60 * ((b-r)/delta)) + 120\n        else:\n            h = (60 * ((r-g)/delta)) + 240\n        \n        if h < 0:\n            h += 360\n    \n    s = delta/cmax\n    v = cmax/255.0\n    \n    return (h, s, v"}
{"task_id": "Mbpp/784", "completion": "function mul_even_odd(list1):\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n        \n        if even != 0 and odd != 0:\n            return even * odd\n    \n    return 0\n"}
{"task_id": "Mbpp/784", "completion": "data = []\nfor item in list1:\n    if item % 2 == 0:\n        data.append(item)\n    else:\n        data.append(item)\neven_num = data[0]\nodd_num = data[1]\nreturn even_num * odd_num\n"}
{"task_id": "Mbpp/784", "completion": "function mul_even_odd(list1):\n    even_number = 0\n    odd_number = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_number = num\n        else:\n            odd_number = num\n    if even_number == 0:\n        return 0\n    elif odd_number == 0:\n        return even_number\n    else:\n        return even_number * odd_numbe"}
{"task_id": "Mbpp/784", "completion": ""}
{"task_id": "Mbpp/784", "completion": ""}
{"task_id": "Mbpp/784", "completion": "\nfunction mul_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n    return even * od"}
{"task_id": "Mbpp/784", "completion": "function mul_even_odd(list1):\n    even_number = 0\n    odd_number = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_number = num\n        else:\n            odd_number = num\n        if even_number != 0 and odd_number != 0:\n            break\n    return even_number * odd_numbe"}
{"task_id": "Mbpp/784", "completion": "\nfunction product_of_first_even_and_odd(list1)\n    if length(list1) == 0:\n        return 0\n    else:\n        for i from 1 to length(list1):\n            if list1[i] % 2 == 0:\n                even = list1[i]\n                break\n        for j from 1 to length(list1):\n            if list1[j] % 2 != 0:\n                odd = list1[j]\n                break\n        return even * odd\n"}
{"task_id": "Mbpp/784", "completion": ""}
{"task_id": "Mbpp/784", "completion": "function mul_even_odd(list1):\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even = list1[i]\n        elif i+1 < len(list1) and list1[i+1] % 2 != 0:\n            odd = list1[i+1]\n            break\n    return even * odd\n"}
{"task_id": "Mbpp/785", "completion": "function tuple_str_int(test_str):\n    return eval(\"(\" + test_str.replace(',', ')(')[:-1] + ')'"}
{"task_id": "Mbpp/785", "completion": "\nfunction tuple_str_int(test_str):\n    start = test_str.index(\"(\") + 1\n    end = test_str.index(\")\")\n    result = []\n    for num in test_str[start:end].split(\",\"):\n        result.append(int(num))\n    return tuple(result)\n"}
{"task_id": "Mbpp/785", "completion": "data = test_str.strip('()').split(',')\nresult = tuple(int(i) for i in data)\nreturn resul"}
{"task_id": "Mbpp/785", "completion": "function tuple_str_int(test_str):\n    result = ()\n    start = 1\n    for char in test_str[1:-1]:\n        if char != \",\":\n            result += int(char), \n        else:\n            start = 2\n    return result"}
{"task_id": "Mbpp/785", "completion": "function tuple_str_int(test_str):\n    start = test_str.find('(')\n    end = test_str.find(')')\n    str_list = test_str[start + 1:end]\n    int_list = [int(x) for x in str_list.split(',')]\n    return tuple(int_list"}
{"task_id": "Mbpp/785", "completion": "function tuple_str_int(test_str):\n    return eval(test_str"}
{"task_id": "Mbpp/785", "completion": ""}
{"task_id": "Mbpp/785", "completion": "input_str = test_str[1:-1]\nstr_tuple = input_str.split(',')\nresult = tuple(int(num) for num in str_tuple)\nreturn resul"}
{"task_id": "Mbpp/785", "completion": "`function tuple_str_int(test_str)\n    # Initialize an empty list\n    result = []\n    \n    # Start from the second character (index 1) of the input string\n    i = 1\n    \n    # Loop until you reach the end of the string\n    while i < len(test_str):\n        # If the current character is not comma\n        if test_str[i] != ',':\n            # Add the integer value to the result list\n            result.append(int(test_str[0:i]))\n            # Move to the next index\n            i += i\n        else:\n            # Move to the next index\n            i += 1\n    \n    # Convert the list to a tuple and return it\n    return tuple(result)"}
{"task_id": "Mbpp/785", "completion": "\nfunction tuple_str_int(test_str):\n    str_list = test_str[1:-1].split(', ')\n    return tuple(int(x) for x in str_list"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return "}
{"task_id": "Mbpp/786", "completion": "function right_insertion(a, x):\n    return bisect.bisect_right(a, x"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n"}
{"task_id": "Mbpp/786", "completion": "function right_insertion(a, x):\n    index = bisect.bisect_right(a, x)\n    return inde"}
{"task_id": "Mbpp/786", "completion": "\nfunction right_insertion(a[], x):\n    return bisect.bisect_right(a, x)\n"}
{"task_id": "Mbpp/786", "completion": "function right_insertion(a, x):\n    return bisect.bisect_right(a, x"}
{"task_id": "Mbpp/786", "completion": ""}
{"task_id": "Mbpp/786", "completion": ""}
{"task_id": "Mbpp/786", "completion": "left = bisect.bisect_right(a, x) - 1\n"}
{"task_id": "Mbpp/786", "completion": "def right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n"}
{"task_id": "Mbpp/787", "completion": "function text_match_three(text):\n  pattern = \"a...b{3}\"\n  if re.match(pattern, text):\n    return True\n  else:\n    return False\n"}
{"task_id": "Mbpp/787", "completion": "function text_match_three(text):\n    return re.match(\"a...b{3}\", text) is not Non"}
{"task_id": "Mbpp/787", "completion": "function text_match_three(text):\n    pattern = \"ab{3}\"\n    if re.fullmatch(pattern, text):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/787", "completion": "function text_match_three(text):\n    if re.search(r\"a...b\", text):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/787", "completion": "\nfunction text_match_three(text):\n    if re.match(\"ab{3}\", text) is not None:\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/787", "completion": "function text_match_three(text)\n    return re.match(\"ab{3}\", text) is not Non"}
{"task_id": "Mbpp/787", "completion": "\nfunction text_match_three(text):\n    return re.search(r'ab{3}', text) is not None\n"}
{"task_id": "Mbpp/787", "completion": "\nfunction text_match_three(text):\n  return re.match('ab{3}', text) is not None\n"}
{"task_id": "Mbpp/787", "completion": "function text_match_three(text):\n    pattern = \"a...b{3}\"\n    return re.fullmatch(pattern, text) is not Non"}
{"task_id": "Mbpp/787", "completion": "\nfunction text_match_three(text):\n    if re.match('a...b{3}', text):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/788", "completion": "\nfunction new_tuple(test_list, test_str)\n    return (*test_list, test_str)\n"}
{"task_id": "Mbpp/788", "completion": "function new_tuple(test_list, test_str):\n    tuple_list = test_list + [test_str]\n    return tuple(tuple_list"}
{"task_id": "Mbpp/788", "completion": "function new_tuple(test_list, test_str):\n    return (*test_list, test_str"}
{"task_id": "Mbpp/788", "completion": "function new_tuple(test_list, test_str):\n    return (*test_list, test_str"}
{"task_id": "Mbpp/788", "completion": "\nfunction new_tuple(test_list, test_str):\n    result = ()\n    for item in test_list:\n        result = result + (item,)\n    result = result + (test_str,)\n    return result\n"}
{"task_id": "Mbpp/788", "completion": "function new_tuple(test_list, test_str)\n    tuple_data = test_list + [test_str]\n    return tuple(tuple_data"}
{"task_id": "Mbpp/788", "completion": "function new_tuple(test_list, test_str):\n    return (*test_list, test_str"}
{"task_id": "Mbpp/788", "completion": "input_string = test_str\ninput_list = test_list\nnew_tuple = ()\nfor item in input_list:\n    new_tuple += (item,)\nnew_tuple += (input_string,)\nreturn new_tuple\n"}
{"task_id": "Mbpp/788", "completion": "\nfunction new_tuple(test_list, test_str):\n    result = ()\n    for item in test_list:\n        result = result + (item,)\n    result = result + (test_str,)\n    return resul"}
{"task_id": "Mbpp/788", "completion": "function new_tuple(test_list, test_str):\n    return (*test_list, test_str"}
{"task_id": "Mbpp/790", "completion": "\nfunction even_position(nums):\n  result = True\n  for i in range(0, len(nums), 2):\n    if nums[i] % 2 != 0:\n      result = False\n      break\n  return result\n"}
{"task_id": "Mbpp/790", "completion": "function even_position(nums):\n    for i from 0 to len(nums)-1 step 2:\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/790", "completion": ""}
{"task_id": "Mbpp/790", "completion": "function even_position(nums):\n    for i from 0 to length of nums - 1:\n        if i mod 2 == 0 and nums[i] mod 2 != 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/790", "completion": ""}
{"task_id": "Mbpp/790", "completion": "\nfunction even_position(nums):\n    for i from 0 to length of nums-1:\n        if i is even and nums[i] is not even:\n            return False\n    return True\n"}
{"task_id": "Mbpp/790", "completion": "function even_position(nums):\n    for i from 0 to length(nums)-1 by step 2:\n        if nums[i] mod 2 != 0:\n            return False\n    return Tru"}
{"task_id": "Mbpp/790", "completion": "input list = nums\nfor i from 0 to length of input list - 1\n    if i is even\n        if the element at index i in input list is not even\n            return False\nreturn Tru"}
{"task_id": "Mbpp/790", "completion": "function even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"}
{"task_id": "Mbpp/790", "completion": "function even_position(nums):\n    for i from 0 to len(nums)-1 step 2:\n        if nums[i] % 2 != 0:\n            return False\n    return Tru"}
{"task_id": "Mbpp/791", "completion": "DEF remove_nested(test_tup):\n    result = ()\n    FOR element IN test_tup:\n        IF isinstance(element, tuple):\n            result = result + remove_nested(element)\n        ELSE:\n            result = result + (element,)\n    RETURN result\n"}
{"task_id": "Mbpp/791", "completion": "\nfunction remove_nested(test_tup):\n    result = ()\n    for element in test_tup:\n        if type(element) == tuple:\n            result = result + remove_nested(element)\n        else:\n            result = result + (element,)\n    return resul"}
{"task_id": "Mbpp/791", "completion": "function remove_nested(tup):\n    result = []\n    for element in tup:\n        if type(element) != tuple:\n            result.append(element)\n        else:\n            result.extend(remove_nested(element))\n    return tuple(result)\n"}
{"task_id": "Mbpp/791", "completion": "input_tuple = test_tup\nnew_tuple = ()\nfor element in input_tuple:\n    if isinstance(element, tuple):\n        new_tuple += remove_nested(element)\n    else:\n        new_tuple += (element,)\nreturn new_tuple\n"}
{"task_id": "Mbpp/791", "completion": "\nfunction remove_nested(test_tup):\n    result = ()\n    for element in test_tup:\n        if type(element) == tuple:\n            result = result + remove_nested(element)\n        else:\n            result = result + (element,)\n    return result\n"}
{"task_id": "Mbpp/791", "completion": "function remove_nested(tup):\n    new_tup = ()\n    for item in tup:\n        if isinstance(item, tuple):\n            for i in remove_nested(item):\n                new_tup += (i,)\n        else:\n            new_tup += (item,)\n    return new_tu"}
{"task_id": "Mbpp/791", "completion": "input_tuple = test_tup\noutput_tuple = ()\nfor item in input_tuple:\n    if isinstance(item, tuple):\n        output_tuple += remove_nested(item)\n    else:\n        output_tuple += (item,)\nreturn output_tupl"}
{"task_id": "Mbpp/791", "completion": "\nfunction remove_nested(test_tup):\n    result = ()\n    for element in test_tup:\n        if type(element) is not tuple:\n            result = result + (element,)\n        else:\n            result = result + tuple(remove_nested(element))\n    return resul"}
{"task_id": "Mbpp/791", "completion": ""}
{"task_id": "Mbpp/791", "completion": "function remove_nested(test_tup):\n    stack = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            stack.append(item)\n        else:\n            while stack and isinstance(stack[-1], tuple):\n                stack.pop()\n            if stack:\n                yield from stack\n            yield item\n    while stack:\n        yield from stack"}
{"task_id": "Mbpp/792", "completion": ""}
{"task_id": "Mbpp/792", "completion": ""}
{"task_id": "Mbpp/792", "completion": "\nfunction count_list(lists)\n    count := 0\n    for each list in lists\n        count := count + 1\n    return count\n"}
{"task_id": "Mbpp/792", "completion": ""}
{"task_id": "Mbpp/792", "completion": ""}
{"task_id": "Mbpp/792", "completion": ""}
{"task_id": "Mbpp/792", "completion": ""}
{"task_id": "Mbpp/792", "completion": "input_list = input_list\ncount = 0\nfor list_item in input_list:\n    if type(list_item) is list:\n        count += 1\nreturn coun"}
{"task_id": "Mbpp/792", "completion": ""}
{"task_id": "Mbpp/792", "completion": ""}
{"task_id": "Mbpp/793", "completion": ""}
{"task_id": "Mbpp/793", "completion": ""}
{"task_id": "Mbpp/793", "completion": ""}
{"task_id": "Mbpp/793", "completion": "function last(arr, x):\n    low = 0\n    high = length(arr) - 1\n    while low <= high:\n        mid = (low + high) / 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            if mid == 0 or arr[mid - 1] != x:\n                return mid\n            high = mid - 1\n    return -"}
{"task_id": "Mbpp/793", "completion": ""}
{"task_id": "Mbpp/793", "completion": "\nPROCEDURE last(arr, x)\n    DECLARE pos INTEGER\n    pos = len(arr) - 1\n    WHILE arr[pos] != x AND pos >= 0\n        pos = pos - 1\n    IF pos < 0 THEN\n        RETURN -1\n    ELSE\n        RETURN pos\n    END IF\nEND PROCEDUR"}
{"task_id": "Mbpp/793", "completion": "function last(arr, x):\n    low = 0\n    high = length(arr) - 1\n    while (low <= high):\n        mid = (low + high) / 2\n        if arr[mid] < x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or arr[mid-1] < x:\n                return mid\n            high = mid - 1\n    return lo"}
{"task_id": "Mbpp/793", "completion": "\nfunction last(array, x):\n    if size(array) == 0:\n        return -1\n    else:\n        for i from size(array)-1 downto 0:\n            if array[i] == x:\n                return i\n    return -"}
{"task_id": "Mbpp/793", "completion": "function last(array, target):\n    index = len(array) - 1\n    while array[index] != target:\n        index -= 1\n    return inde"}
{"task_id": "Mbpp/793", "completion": ""}
{"task_id": "Mbpp/794", "completion": "\nfunction match_string(s)\n    if starts_with(s, \"a\") and ends_with(s, \"b\")\n        return true\n    else\n        return false\nend functio"}
{"task_id": "Mbpp/794", "completion": "function match_string(s):\n    if re.match('a.*b', s):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/794", "completion": "\nfunction text_starta_endb(text):\n  pattern = \"a.*b\"\n  if re.match(pattern, text):\n    return True\n  else:\n    return False\n"}
{"task_id": "Mbpp/794", "completion": "\nfunction match_a_b(text):\n    return re.match(\"a.*b\", text) is not None\n"}
{"task_id": "Mbpp/794", "completion": "\nfunction match_a_endb(text)\n    pattern = \"a.*b\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/794", "completion": "\nfunction match_a_then_anything_then_b(text):\n    pattern = \"a.*b\"\n    return bool(re.match(pattern, text)"}
{"task_id": "Mbpp/794", "completion": "\nfunction match_a_to_b(text):\n    pattern = \"a.*b\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return Fals"}
{"task_id": "Mbpp/794", "completion": "\nfunction match_string(text)\n    return re.match(\"a.*b\", text) is not Non"}
{"task_id": "Mbpp/794", "completion": "function text_starta_endb(text):\n    pattern = \"a.*b\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/794", "completion": "function match_str() \n    pattern = \"a.*b\"\n    if re.search(pattern, input_text) is not None:\n        print(\"The string contains 'a' followed by anything and ends with 'b'\")\n    else:\n        print(\"The string does not contain 'a' followed by anything and ends with 'b'\")\n"}
{"task_id": "Mbpp/796", "completion": "function return_sum(d)\n    total = 0\n    for key, value in d.items():\n        total += value\n    return total\n"}
{"task_id": "Mbpp/796", "completion": ""}
{"task_id": "Mbpp/796", "completion": ""}
{"task_id": "Mbpp/796", "completion": "\nfunction return_sum(d)\n    sum = 0\n    for each key-value pair in d\n        sum = sum + value\n    return sum\n"}
{"task_id": "Mbpp/796", "completion": ""}
{"task_id": "Mbpp/796", "completion": ""}
{"task_id": "Mbpp/796", "completion": ""}
{"task_id": "Mbpp/796", "completion": ""}
{"task_id": "Mbpp/796", "completion": "\ndata = input(\"Enter your dictionary: \")\nfor i in data.items():\n    total = 0\n    total += i[1]\nprint(total)\n"}
{"task_id": "Mbpp/796", "completion": ""}
{"task_id": "Mbpp/797", "completion": "function sum_in_range(l, r):\n    sum_odd = 0\n    for i from l to r:\n        if i mod 2 is not 0:\n            sum_odd = sum_odd + i\n    return sum_odd\n"}
{"task_id": "Mbpp/797", "completion": "function sum_odd_in_range(l, r)\n    sum_odd_numbers = 0\n    for i from l to r\n        if i is odd then\n            sum_odd_numbers = sum_odd_numbers + i\n        end if\n    return sum_odd_number"}
{"task_id": "Mbpp/797", "completion": "function sum_in_range(l, r):\n    if l > r:\n        return 0\n    else:\n        total_sum = sum_odd(r)\n        total_sum -= sum_odd(l - 2)\n        return total_su"}
{"task_id": "Mbpp/797", "completion": "function sum_odd(n):\n    terms = (n + 1) // 2\n    sum1 = terms * terms\n    return sum1\n\nfunction sum_in_range(l, r):\n    return sum_odd(r) - sum_odd(l-1)\n"}
{"task_id": "Mbpp/797", "completion": ""}
{"task_id": "Mbpp/797", "completion": "function sum_odd_in_range(l, r)\n    total_sum = 0\n    for i from l to r\n        if i is odd\n            total_sum += i\n    return total_su"}
{"task_id": "Mbpp/797", "completion": "function sum_in_range(l, r)\n    if l > r:\n        return 0\n    else:\n        sum_odd_l = sum_odd(l - 1)\n        sum_odd_r = sum_odd(r)\n        return sum_odd_r - sum_odd_l\n"}
{"task_id": "Mbpp/797", "completion": "function sum_odd_numbers_in_range(l, r):\n    total = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            total += num\n    return total\n"}
{"task_id": "Mbpp/797", "completion": "function sum_odd_in_range(l, r):\n    sum = 0\n    for i in range(max(l, 1), min(r+1)):\n        if i mod 2 is 1:\n            sum = sum + i\n    return su"}
{"task_id": "Mbpp/797", "completion": "\nfunction sum_odd_in_range(l, r):\n    sum = 0\n    for i from l to r:\n        if i is odd then\n            sum = sum + i\n    return sum\n"}
{"task_id": "Mbpp/798", "completion": ""}
{"task_id": "Mbpp/798", "completion": ""}
{"task_id": "Mbpp/798", "completion": "\nfunction _sum(arr):\n    sum = 0\n    for each element in arr:\n        sum = sum + element\n    return su"}
{"task_id": "Mbpp/798", "completion": "function sum_array(arr):\n    total = 0\n    for each element in arr:\n        total = total + element\n    return tota"}
{"task_id": "Mbpp/798", "completion": ""}
{"task_id": "Mbpp/798", "completion": ""}
{"task_id": "Mbpp/798", "completion": ""}
{"task_id": "Mbpp/798", "completion": ""}
{"task_id": "Mbpp/798", "completion": ""}
{"task_id": "Mbpp/798", "completion": "\nfunction sumArray(arr):\n    result = 0\n    for each element in arr:\n        result = result + element\n    return resul"}
{"task_id": "Mbpp/799", "completion": "\nfunction left_rotate(n, d):\n    d = d % 32\n    n = (n << d) | (n >> (32 - d))\n    return n\n"}
{"task_id": "Mbpp/799", "completion": "\nprocedure left_rotate(n, d)\n    if d > 0:\n        return (n << d) | ((1 << 32) ^ n >> (32 - d))\n    else:\n        return n\n"}
{"task_id": "Mbpp/799", "completion": ""}
{"task_id": "Mbpp/799", "completion": "inputNumber = n\nshiftAmount = d % 32\nresult = (inputNumber << shiftAmount) | (inputNumber >> (32 - shiftAmount))\nreturn result\n"}
{"task_id": "Mbpp/799", "completion": "function left_rotate(n, d):\n    if d > 0:\n        return (n << (31 - d)) | (n >> d)\n    else:\n        return n\n"}
{"task_id": "Mbpp/799", "completion": "function left_rotate(n, d):\n    d = d % 32\n    mask = (1 << d) - 1\n    n = n << d | n >> (32 - d)\n    n = n & ~(mask << 31) | (n & mask) << 31\n    return "}
{"task_id": "Mbpp/799", "completion": ""}
{"task_id": "Mbpp/799", "completion": "\nfunction left_rotate(n, d):\n    d = d % 32\n    return ((n << d) | (n >> (32 - d)))\n"}
{"task_id": "Mbpp/799", "completion": "function left_rotate(n, d):\n    if d > 31:\n        d = d % 31\n    return (n << d) | (n >> (32 - d))\n"}
{"task_id": "Mbpp/799", "completion": "data type num\nfunction left_rotate(num n, int d)\n    if d > 0 then\n        return (n << (31 - d + 1)) | (n >> (d - 1))\n    else\n        return n\n"}
{"task_id": "Mbpp/800", "completion": "\nfunction remove_all_spaces(text)\n    result = \"\"\n    for each character in text\n        if character is not a whitespace\n            append character to result\n    return result\n"}
{"task_id": "Mbpp/800", "completion": "\nfunction remove_all_spaces(text):\n    result = \"\"\n    for char in text:\n        if not (char == \" \")\n            result = result + char\n    return resul"}
{"task_id": "Mbpp/800", "completion": "function remove_all_spaces(text)\n    result = \"\"\n    for char in text\n        if char != \" \"\n            result = result + char\n    return result\n"}
{"task_id": "Mbpp/800", "completion": "\nfunction remove_all_spaces(text)\n    result = \"\"\n    for char in text:\n        if char != \" \"\n            result = result + char\n    return result\n"}
{"task_id": "Mbpp/800", "completion": "function remove_all_spaces(text)\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] != \" \":\n            result += text[i]\n    return result\n"}
{"task_id": "Mbpp/800", "completion": "\nfunction remove_all_spaces(text):\n    new_text = \"\"\n    for char in text:\n        if char != \" \":\n            new_text = new_text + char\n    return new_text\n"}
{"task_id": "Mbpp/800", "completion": "function remove_all_spaces(text)\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] != \" \":\n            result += text[i]\n    return result\n"}
{"task_id": "Mbpp/800", "completion": ""}
{"task_id": "Mbpp/800", "completion": "function remove_all_spaces(text)\n    result = \"\"\n    for each character in text\n        if character is not ' '\n            result = result + character\n    return resul"}
{"task_id": "Mbpp/800", "completion": "function remove_all_spaces(text)\n    result = \"\"\n    for char in text:\n        if not (char == \" \")\n            result = result + char\n    return result\n"}
{"task_id": "Mbpp/801", "completion": "if x == y and y == z:\n    return 3\nelse:\n    if x == y:\n        return 2\n    elif x == z:\n        return 2\n    elif y == z:\n        return 2\n    else:\n        return "}
{"task_id": "Mbpp/801", "completion": "if x == y and y == z:\n    return 3\nelif x == y or y == z or x == z:\n    return 2\nelse:\n    return "}
{"task_id": "Mbpp/801", "completion": "\nfunction test_three_equal(x, y, z)\n    if x == y and y == z:\n        return 3\n    else:\n        return "}
{"task_id": "Mbpp/801", "completion": ""}
{"task_id": "Mbpp/801", "completion": "function test_three_equal(x, y, z)\n    if x == y and y == z\n        return 3\n    else if x == y or y == z or x == z\n        return 2\n    else\n        return "}
{"task_id": "Mbpp/801", "completion": ""}
{"task_id": "Mbpp/801", "completion": "if x == y and y == z:\n    return 3\nelse:\n    return 0\n"}
{"task_id": "Mbpp/801", "completion": ""}
{"task_id": "Mbpp/801", "completion": "\ninput x, y, z\ncount = 0\nif x == y and y == z then\n    count = 3\nelse if x == y or x == z or y == z then\n    count = 2\nelse\n    count = 0\noutput coun"}
{"task_id": "Mbpp/801", "completion": "if x == y and y == z:\n  return 3\nelse:\n  if x == y or y == z or x == z:\n    return 2\n  else:\n    return "}
{"task_id": "Mbpp/803", "completion": "\nfunction is_perfect_square(n)\n    root := sqrt(n)\n    return (root * root) == n\n"}
{"task_id": "Mbpp/803", "completion": "algorithm is_perfect_square(n):\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i = i + 1\n    return Fals"}
{"task_id": "Mbpp/803", "completion": "function is_perfect_square(n):\n    sqrt_n = 1\n    while (sqrt_n * sqrt_n) <= n:\n        if (sqrt_n * sqrt_n) == n:\n            return True\n        sqrt_n = sqrt_n + 1\n    return Fals"}
{"task_id": "Mbpp/803", "completion": "\nfunction is_perfect_square(n)\n    if n < 0\n        return false\n    root = 0\n    while root * root <= n\n        if root * root == n\n            return true\n        root = root + 1\n    return fals"}
{"task_id": "Mbpp/803", "completion": ""}
{"task_id": "Mbpp/803", "completion": "function is_perfect_square(n)\n    if n < 0\n        return false\n    end\n    start = 1\n    end = n\n    while start <= end\n        mid = (start + end) / 2\n        square = mid * mid\n        if square == n\n            return true\n        elif square < n\n            start = mid + 1\n        else\n            end = mid - 1\n        end\n    end\n    return fals"}
{"task_id": "Mbpp/803", "completion": "\nfunction is_perfect_square(n):\n  start = 1\n  end = n\n  while start <= end:\n    mid = (start + end) / 2\n    if mid * mid == n:\n      return True\n    elif mid * mid < n:\n      start = mid + 1\n    else:\n      end = mid - 1\n  return Fals"}
{"task_id": "Mbpp/803", "completion": "function is_perfect_square(n):\n    if n < 0:\n        return False\n    root = 0\n    while root * root <= n:\n        if root * root == n:\n            return True\n        root = root + 1\n    return False\n"}
{"task_id": "Mbpp/803", "completion": "function is_perfect_square(n):\n    if n < 0:\n        return false\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return true\n        i += 1\n    return false\n"}
{"task_id": "Mbpp/803", "completion": "\nfunction is_perfect_square(n):\n    if n < 0:\n        return False\n    root = 0\n    while root * root <= n:\n        if root * root == n:\n            return True\n        root = root + 1\n    return False\n"}
{"task_id": "Mbpp/804", "completion": "function is_product_even(arr)\n    product = 1\n    for each number in arr\n        product = product * number\n    if product % 2 == 0\n        return True\n    else\n        return False\n"}
{"task_id": "Mbpp/804", "completion": "function is_product_even(arr)\n    product = 1\n    for each num in arr:\n        product = product * num\n    if product % 2 == 0 then\n        return true\n    else\n        return false\n"}
{"task_id": "Mbpp/804", "completion": ""}
{"task_id": "Mbpp/804", "completion": ""}
{"task_id": "Mbpp/804", "completion": "FUNCTION is_product_even(arr)\n    PRODUCT = 1\n    FOR each element in arr\n        PRODUCT = PRODUCT * element\n    IF PRODUCT MOD 2 == 0\n        RETURN \"Even\"\n    ELSE\n        RETURN \"Odd"}
{"task_id": "Mbpp/804", "completion": ""}
{"task_id": "Mbpp/804", "completion": ""}
{"task_id": "Mbpp/804", "completion": ""}
{"task_id": "Mbpp/804", "completion": "function is_product_even(arr)\n    product = 1\n    for each number in arr:\n        product = product * number\n    if product mod 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "Mbpp/804", "completion": "function is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == "}
{"task_id": "Mbpp/805", "completion": ""}
{"task_id": "Mbpp/805", "completion": "function max_sum_list(lists)\n    max_sum = -inf\n    result = []\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = lst\n            \n    return result\n"}
{"task_id": "Mbpp/805", "completion": "\nfunction max_sum_list(lists)\n    max_sum = 0\n    max_list = None\n    \n    for list in lists:\n        if sum(list) > max_sum:\n            max_sum = sum(list)\n            max_list = list\n    \n    return max_lis"}
{"task_id": "Mbpp/805", "completion": "function max_sum_list(lists):\n    max_sum = -float('inf')\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list\n"}
{"task_id": "Mbpp/805", "completion": "\nfunction max_sum_list(lists):\n    max_sum = -inf\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n            \n    return max_list\n"}
{"task_id": "Mbpp/805", "completion": "function max_sum_list(lists):\n    max_sum = -inf\n    max_list = None\n    for lst in lists:\n        sum_val = 0\n        for num in lst:\n            sum_val += num\n        if sum_val > max_sum:\n            max_sum = sum_val\n            max_list = lst\n    return max_lis"}
{"task_id": "Mbpp/805", "completion": "function max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        sum_of_list = sum(lst)\n        if sum_of_list > max_sum:\n            max_sum = sum_of_list\n            max_list = lst\n    return max_list\n"}
{"task_id": "Mbpp/805", "completion": "function max_sum_list(lists):\n    max_sum = 0\n    result = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = lst\n    return resul"}
{"task_id": "Mbpp/805", "completion": "\nfunction max_sum_list(lists)\n    max_sum = -infinity\n    max_list = []\n    for lst in lists:\n        total_sum = 0\n        for num in lst:\n            total_sum += num\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n    return max_list\n"}
{"task_id": "Mbpp/805", "completion": "function max_sum_list(lists):\n    max_sum = 0\n    result = None\n    for lst in lists:\n        total = sum(lst)\n        if total > max_sum:\n            max_sum = total\n            result = lst\n    return result\n"}
{"task_id": "Mbpp/806", "completion": ""}
{"task_id": "Mbpp/806", "completion": "function max_run_uppercase(test_str)\n    max_run = 0\n    current_run = 0\n    for each char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n"}
{"task_id": "Mbpp/806", "completion": "MAX_LENGTH = 0\ncurrent_length = 0\nfor char in test_str:\n    if char.isupper():\n        current_length += 1\n        MAX_LENGTH = max(MAX_LENGTH, current_length)\n    else:\n        current_length = 0\nreturn MAX_LENGTH\n"}
{"task_id": "Mbpp/806", "completion": ""}
{"task_id": "Mbpp/806", "completion": "function max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_ru"}
{"task_id": "Mbpp/806", "completion": "function max_run_uppercase(test_str):\n    max_length = 0\n    current_length = 0\n    for char in test_str:\n        if char.isupper():\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    return max_length\n"}
{"task_id": "Mbpp/806", "completion": "data = ''\nmax_length = 0\ncurrent_length = 0\nfor char in test_str:\n    if char.isupper():\n        current_length += 1\n    else:\n        data += str(current_length) + ','\n        current_length = 0\ndata += str(current_length)\nmax_run = max(map(int, data.split(',')))\nreturn max_run\n"}
{"task_id": "Mbpp/806", "completion": "\nfunction max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n"}
{"task_id": "Mbpp/806", "completion": "function max_run_uppercase(test_str)\n    max_len = 0\n    curr_len = 0\n    \n    for i from 0 to length of test_str - 1\n        if test_str[i] is uppercase\n            curr_len += 1\n        else\n            max_len = max(max_len, curr_len)\n            curr_len = 0\n        \n    max_len = max(max_len, curr_len)\n    \n    return max_le"}
{"task_id": "Mbpp/806", "completion": "function max_run_uppercase(test_str):\n    max_length = 0\n    current_length = 0\n    is_uppercase = false\n\n    for char in test_str:\n        if char.isupper():\n            if is_uppercase:\n                current_length += 1\n            else:\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = 1\n                is_uppercase = true\n        else:\n            if is_uppercase:\n                if current_length > max_length:\n                    max_length = current_length\n                current_length = 0\n                is_uppercase = false\n    if is_uppercase and current_length > max_length:\n        max_length = current_length\n\n    return max_length\n"}
{"task_id": "Mbpp/807", "completion": "function first_odd(nums)\n    odd_found = false\n    for each num in nums:\n        if num is odd:\n            if not odd_found:\n                return num\n            else:\n                return null\n        end if\n    end for\n    return null\n"}
{"task_id": "Mbpp/807", "completion": ""}
{"task_id": "Mbpp/807", "completion": "if empty(list)\n  return \"No odd numbers found\"\nelse\n  for each number in list\n    if number is odd\n      return number\n"}
{"task_id": "Mbpp/807", "completion": "function first_odd(nums)\n    odd = None\n    for num in nums:\n        if num is odd:\n            odd = num\n            break\n    return odd\n"}
{"task_id": "Mbpp/807", "completion": ""}
{"task_id": "Mbpp/807", "completion": "function first_odd(nums):\n    for num in nums:\n        if num is odd:\n            return num\n    return Non"}
{"task_id": "Mbpp/807", "completion": "function first_odd(input_list):\n    for num in input_list:\n        if num mod 2 != 0:\n            return num\n    return Non"}
{"task_id": "Mbpp/807", "completion": ""}
{"task_id": "Mbpp/807", "completion": ""}
{"task_id": "Mbpp/807", "completion": "\nfunction first_odd(list numbers)\n    for each num in numbers:\n        if num is odd:\n            return num\n    return None\n"}
{"task_id": "Mbpp/808", "completion": "\nfunction check_K(test_tup, K):\n    for i in test_tup:\n        if i == K:\n            return True\n    return False\n"}
{"task_id": "Mbpp/808", "completion": "function check_K(test_tup, K):\n    for element in test_tup:\n        if element == K:\n            return True\n    return Fals"}
{"task_id": "Mbpp/808", "completion": ""}
{"task_id": "Mbpp/808", "completion": "function check_K(test_tup, K):\n    for element in test_tup:\n        if element == K:\n            return True\n    return Fals"}
{"task_id": "Mbpp/808", "completion": "function check_K(test_tup, K)\n    for each element in test_tup:\n        if element is equal to K then\n            return True\n    return Fals"}
{"task_id": "Mbpp/808", "completion": "function check_K(test_tup, K):\n    for element in test_tup:\n        if element == K:\n            return True\n    return False\n"}
{"task_id": "Mbpp/808", "completion": "function check_K(test_tup, K):\n    for element in test_tup:\n        if element == K:\n            return True\n    return Fals"}
{"task_id": "Mbpp/808", "completion": "FUNCTION check_K(test_tup, K)\n    FOR i FROM 0 TO length(test_tup) - 1\n        IF test_tup[i] IS equal to K\n            RETURN TRUE\n    END IF\n    RETURN FALSE\nEND FUNCTIO"}
{"task_id": "Mbpp/808", "completion": "\nfunction check_K(test_tup, K)\n    for each element in test_tup:\n        if element == K:\n            return True\n    return Fals"}
{"task_id": "Mbpp/808", "completion": "\nfunction check_K(test_tup, K):\n    for each element in test_tup:\n        if element == K:\n            return True\n    return Fals"}
{"task_id": "Mbpp/809", "completion": ""}
{"task_id": "Mbpp/809", "completion": ""}
{"task_id": "Mbpp/809", "completion": "\nfunction check_smaller(test_tup1, test_tup2):\n    length = min(len(test_tup1), len(test_tup2))\n    for i in range(length):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/809", "completion": "function check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return Tru"}
{"task_id": "Mbpp/809", "completion": ""}
{"task_id": "Mbpp/809", "completion": ""}
{"task_id": "Mbpp/809", "completion": "function check_smaller(test_tup1, test_tup2):\n    result = True\n    i = 0\n    while i < len(test_tup1):\n        if test_tup1[i] >= test_tup2[i]:\n            result = False\n            break\n        i = i + 1\n    return resul"}
{"task_id": "Mbpp/809", "completion": "function check_smaller(test_tup1, test_tup2):\n    for i from 0 to length(test_tup1) - 1:\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True\n"}
{"task_id": "Mbpp/809", "completion": "procedure check_smaller(test_tup1, test_tup2)\n    if length(test_tup1) != length(test_tup2)\n        return \"Tuples are of different lengths\"\n    else\n        for i = 0 to length(test_tup1) - 1\n            if test_tup1[i] >= test_tup2[i]\n                return False\n        return True\n"}
{"task_id": "Mbpp/809", "completion": "\nfunction check_smaller(test_tup1, test_tup2)\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n"}
